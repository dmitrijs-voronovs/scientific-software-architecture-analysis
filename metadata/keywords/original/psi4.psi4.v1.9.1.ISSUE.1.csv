id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/pull/401:251,Testability,TEST,TEST,251,"## Description. Distribute test cases and misc.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] For each test case in `samples`, add a `test.in` (intact w/ `#TEST` lines) alongside the plain `input.dat` (w/o`#TEST` lines). This way one can test (by hand) from an installed copy (e.g., conda pkg).; - [x] In `setup`, be more explicit about how to handle argument values that argparse might want to interpret as arguments themselves. Response to http://forum.psicode.org/t/odd-behavior-of-setup/233; - [x] Fix bug that kept undefined literal `${MCONDA}` in `psi4-config` for conda packages. This bug made it useless for querying `psi4-config --includes` for plugin configuration.; ## Status; - [x] Ready to go. Nothing controversial here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/401
https://github.com/psi4/psi4/pull/401:282,Testability,test,test,282,"## Description. Distribute test cases and misc.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] For each test case in `samples`, add a `test.in` (intact w/ `#TEST` lines) alongside the plain `input.dat` (w/o`#TEST` lines). This way one can test (by hand) from an installed copy (e.g., conda pkg).; - [x] In `setup`, be more explicit about how to handle argument values that argparse might want to interpret as arguments themselves. Response to http://forum.psicode.org/t/odd-behavior-of-setup/233; - [x] Fix bug that kept undefined literal `${MCONDA}` in `psi4-config` for conda packages. This bug made it useless for querying `psi4-config --includes` for plugin configuration.; ## Status; - [x] Ready to go. Nothing controversial here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/401
https://github.com/psi4/psi4/issues/402:566,Modifiability,flexible,flexible,566,"This is a list of things that are generally agreed as ""good things to do"", but nobody has actually tackled yet. The hope is that this is used a central repository of ""have you thought about this"" comments. Note that this is a not a feature wish list.; ## High; - [ ] Deprecate PSIO by moving to HDF5. With a temporary under the hood PSIO move to HDF5.; - [x] Remove `boost::python` and replace with PyBind11.; - [x] Possibly remove Boost with C++11 features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402
https://github.com/psi4/psi4/issues/402:756,Modifiability,Variab,Variables,756,"This is a list of things that are generally agreed as ""good things to do"", but nobody has actually tackled yet. The hope is that this is used a central repository of ""have you thought about this"" comments. Note that this is a not a feature wish list.; ## High; - [ ] Deprecate PSIO by moving to HDF5. With a temporary under the hood PSIO move to HDF5.; - [x] Remove `boost::python` and replace with PyBind11.; - [x] Possibly remove Boost with C++11 features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402
https://github.com/psi4/psi4/issues/402:785,Modifiability,Rewrite,Rewrite,785,"This is a list of things that are generally agreed as ""good things to do"", but nobody has actually tackled yet. The hope is that this is used a central repository of ""have you thought about this"" comments. Note that this is a not a feature wish list.; ## High; - [ ] Deprecate PSIO by moving to HDF5. With a temporary under the hood PSIO move to HDF5.; - [x] Remove `boost::python` and replace with PyBind11.; - [x] Possibly remove Boost with C++11 features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402
https://github.com/psi4/psi4/issues/402:1539,Modifiability,rewrite,rewrite,1539,"features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atomic numbers instead of symbols, #418. (fixed by #953); - [ ] DETCI for more than 256 orbitals; - [ ] Automatic choice between `rhf/uhf/rohf/cuhf` for input molecules.; - [ ] Potenital integral derivative performance can be improved, see #3.; - [ ] Allow a DECON keyword to basis sets #43.; - [ ] Remove `char *` for `std::string`. Modify, expand, delete as desired. If you take up a feature make sure to post here so that we do not duplicate effort.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402
https://github.com/psi4/psi4/issues/402:2204,Performance,perform,performance,2204,"features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atomic numbers instead of symbols, #418. (fixed by #953); - [ ] DETCI for more than 256 orbitals; - [ ] Automatic choice between `rhf/uhf/rohf/cuhf` for input molecules.; - [ ] Potenital integral derivative performance can be improved, see #3.; - [ ] Allow a DECON keyword to basis sets #43.; - [ ] Remove `char *` for `std::string`. Modify, expand, delete as desired. If you take up a feature make sure to post here so that we do not duplicate effort.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402
https://github.com/psi4/psi4/issues/404:109,Availability,error,error,109,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404
https://github.com/psi4/psi4/issues/404:615,Availability,error,error,615,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404
https://github.com/psi4/psi4/issues/404:726,Availability,error,error,726,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404
https://github.com/psi4/psi4/issues/404:810,Availability,error,error,810,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404
https://github.com/psi4/psi4/issues/404:962,Availability,Error,Error,962,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404
https://github.com/psi4/psi4/issues/404:1029,Availability,Error,Error,1029,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404
https://github.com/psi4/psi4/issues/404:1055,Availability,Error,Error,1055,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404
https://github.com/psi4/psi4/issues/404:126,Integrability,depend,dependencies,126,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404
https://github.com/psi4/psi4/pull/405:354,Energy Efficiency,energy,energy,354,"## Description. Allow CDJK to read a previously generated Cholesky vector. This is useful for my work as we use cholesky in an external plugin to PSI4. The code was generating the Cholesky integrals every time the JK object was initialized. . A workflow where this would be useful is given below,. ```; scf_type cd; set df_ints_io save; refscf, refwfn = energy('scf', return_wfn=True); set df_ints_io load; energy('my_plugin', ref_wfn=refwfn) ; ```. Before, the cholesky vectors could be written after CDJK was initialized. It was not possible to read in Cholesky vectors into CDJK before. . I'm not sure how useful this will be in PSI4, but I have needed this when studying transition metal complexes as the generation of the cholesky integrals takes quite a long time. ; ## Todos; - [x] Read previously generated cholesky vectors from file. ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/405
https://github.com/psi4/psi4/pull/405:407,Energy Efficiency,energy,energy,407,"## Description. Allow CDJK to read a previously generated Cholesky vector. This is useful for my work as we use cholesky in an external plugin to PSI4. The code was generating the Cholesky integrals every time the JK object was initialized. . A workflow where this would be useful is given below,. ```; scf_type cd; set df_ints_io save; refscf, refwfn = energy('scf', return_wfn=True); set df_ints_io load; energy('my_plugin', ref_wfn=refwfn) ; ```. Before, the cholesky vectors could be written after CDJK was initialized. It was not possible to read in Cholesky vectors into CDJK before. . I'm not sure how useful this will be in PSI4, but I have needed this when studying transition metal complexes as the generation of the cholesky integrals takes quite a long time. ; ## Todos; - [x] Read previously generated cholesky vectors from file. ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/405
https://github.com/psi4/psi4/pull/405:136,Modifiability,plugin,plugin,136,"## Description. Allow CDJK to read a previously generated Cholesky vector. This is useful for my work as we use cholesky in an external plugin to PSI4. The code was generating the Cholesky integrals every time the JK object was initialized. . A workflow where this would be useful is given below,. ```; scf_type cd; set df_ints_io save; refscf, refwfn = energy('scf', return_wfn=True); set df_ints_io load; energy('my_plugin', ref_wfn=refwfn) ; ```. Before, the cholesky vectors could be written after CDJK was initialized. It was not possible to read in Cholesky vectors into CDJK before. . I'm not sure how useful this will be in PSI4, but I have needed this when studying transition metal complexes as the generation of the cholesky integrals takes quite a long time. ; ## Todos; - [x] Read previously generated cholesky vectors from file. ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/405
https://github.com/psi4/psi4/pull/405:401,Performance,load,load,401,"## Description. Allow CDJK to read a previously generated Cholesky vector. This is useful for my work as we use cholesky in an external plugin to PSI4. The code was generating the Cholesky integrals every time the JK object was initialized. . A workflow where this would be useful is given below,. ```; scf_type cd; set df_ints_io save; refscf, refwfn = energy('scf', return_wfn=True); set df_ints_io load; energy('my_plugin', ref_wfn=refwfn) ; ```. Before, the cholesky vectors could be written after CDJK was initialized. It was not possible to read in Cholesky vectors into CDJK before. . I'm not sure how useful this will be in PSI4, but I have needed this when studying transition metal complexes as the generation of the cholesky integrals takes quite a long time. ; ## Todos; - [x] Read previously generated cholesky vectors from file. ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/405
https://github.com/psi4/psi4/pull/406:247,Testability,log,logic,247,"## Description. Adds flag to tell deriv() that I've already backtranformed the opdm/tpdm. Also, I can't figure out how to keep deriv() from trying to evaluate reference contributions to the gradient, even though I have none, so I added additional logic to check if the pointers to the reference containers are null.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/406
https://github.com/psi4/psi4/issues/407:36,Availability,error,error,36,"When I run psi4 I got the following error (I have Python 2.7):. Traceback (most recent call last):; File ""/truba/home/tbag24/programs/psi4intel/share/psi4/python/inputparser.py"", line 43, in <module>; import pubchem; File ""/truba/home/tbag24/programs/psi4intel/share/psi4/python/pubchem.py"", line 61, in <module>; from p4util.exceptions import *; File ""/truba/home/tbag24/programs/psi4intel/share/psi4/python/p4util/**init**.py"", line 32, in <module>; from .util import *; File ""/truba/home/tbag24/programs/psi4intel/share/psi4/python/p4util/util.py"", line 32, in <module>; import numpy as np; ImportError: No module named numpy. @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/407
https://github.com/psi4/psi4/issues/408:835,Energy Efficiency,energy,energy,835,"I am trying to calculate DF-MP2 counterpoise-corrected energies for some dimers.; PSI4 gives some weird results for aug-cc-pvtz and aug-cc-pvqz (while all seems well for aug-cc-pvdz). First I provide the results for the benzene-benzene dimer.; ![benzene_benzene](https://cloud.githubusercontent.com/assets/4300354/16049263/4eba59cc-3257-11e6-9fb4-7270fba551ed.png); I plot 4 points of the dissociation curve, show both HF and DF-MP2 interaction energies for the three basis sets mentioned earlier and compare with MOLPRO. Here everything seems to be perfectly fine. However when I do exactly the same for the boroxine dimer, things look different:; ![boroxine_boroxine_rot60](https://cloud.githubusercontent.com/assets/4300354/16049322/92511392-3257-11e6-9e03-9e2922fe86e6.png); Clearly PSI4 produces some weird results for the DF-MP2 energy in the case of aug-cc-pvtz and aug-cc-pvqz.; I attach the input/output for one case where PSI4 does something weird. (Note that you can skip the CC part to reproduce the problem). [cbs.in.txt](https://github.com/psi4/psi4/files/314339/cbs.in.txt); [cbs.out.txt](https://github.com/psi4/psi4/files/314340/cbs.out.txt). My PSI4 version is Git: Rev {master} e4070d002474257",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408
https://github.com/psi4/psi4/issues/408:779,Usability,Clear,Clearly,779,"I am trying to calculate DF-MP2 counterpoise-corrected energies for some dimers.; PSI4 gives some weird results for aug-cc-pvtz and aug-cc-pvqz (while all seems well for aug-cc-pvdz). First I provide the results for the benzene-benzene dimer.; ![benzene_benzene](https://cloud.githubusercontent.com/assets/4300354/16049263/4eba59cc-3257-11e6-9fb4-7270fba551ed.png); I plot 4 points of the dissociation curve, show both HF and DF-MP2 interaction energies for the three basis sets mentioned earlier and compare with MOLPRO. Here everything seems to be perfectly fine. However when I do exactly the same for the boroxine dimer, things look different:; ![boroxine_boroxine_rot60](https://cloud.githubusercontent.com/assets/4300354/16049322/92511392-3257-11e6-9e03-9e2922fe86e6.png); Clearly PSI4 produces some weird results for the DF-MP2 energy in the case of aug-cc-pvtz and aug-cc-pvqz.; I attach the input/output for one case where PSI4 does something weird. (Note that you can skip the CC part to reproduce the problem). [cbs.in.txt](https://github.com/psi4/psi4/files/314339/cbs.in.txt); [cbs.out.txt](https://github.com/psi4/psi4/files/314340/cbs.out.txt). My PSI4 version is Git: Rev {master} e4070d002474257",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408
https://github.com/psi4/psi4/issues/410:14,Deployability,install,install,14,"I'm trying to install Psi4 for a user, but noticed something a little odd. When I run:. ```; psi4 --new-plugin myplugin; ```. the Makefile it creates references the header files in the build directory, not the installation directory. Since I'm building on scratch space (temporary storage), it gets deleted automatically. I would think that it should default to pointing to the installation directory instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410
https://github.com/psi4/psi4/issues/410:210,Deployability,install,installation,210,"I'm trying to install Psi4 for a user, but noticed something a little odd. When I run:. ```; psi4 --new-plugin myplugin; ```. the Makefile it creates references the header files in the build directory, not the installation directory. Since I'm building on scratch space (temporary storage), it gets deleted automatically. I would think that it should default to pointing to the installation directory instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410
https://github.com/psi4/psi4/issues/410:378,Deployability,install,installation,378,"I'm trying to install Psi4 for a user, but noticed something a little odd. When I run:. ```; psi4 --new-plugin myplugin; ```. the Makefile it creates references the header files in the build directory, not the installation directory. Since I'm building on scratch space (temporary storage), it gets deleted automatically. I would think that it should default to pointing to the installation directory instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410
https://github.com/psi4/psi4/issues/410:104,Modifiability,plugin,plugin,104,"I'm trying to install Psi4 for a user, but noticed something a little odd. When I run:. ```; psi4 --new-plugin myplugin; ```. the Makefile it creates references the header files in the build directory, not the installation directory. Since I'm building on scratch space (temporary storage), it gets deleted automatically. I would think that it should default to pointing to the installation directory instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410
https://github.com/psi4/psi4/issues/411:36361,Availability,error,error,36361," In function `boost::mpi::detail::packed_archive_recv(int, int, int, boost::mpi::packed_iarchive&, MPI_Status&)':; point_to_point.cpp:(.text+0x2c1): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x318): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x40a): undefined reference to `MPI_Free_mem'; point_to_point.cpp:(.text+0x4a7): undefined reference to `MPI_Alloc_mem'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::wait()':; request.cpp:(.text+0x82): undefined reference to `MPI_Waitall'; request.cpp:(.text+0xd4): undefined reference to `MPI_Wait'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::test()':; request.cpp:(.text+0x201): undefined reference to `MPI_Testall'; request.cpp:(.text+0x283): undefined reference to `MPI_Test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::cancel()':; request.cpp:(.text+0x38e): undefined reference to `MPI_Cancel'; request.cpp:(.text+0x3a9): undefined reference to `MPI_Cancel'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(exception.o): In function `boost::mpi::exception::exception(char const*, int)':; exception.cpp:(.text+0xaf): undefined reference to `MPI_Error_string'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```. It looks to me like a problem with my external Boost installation. Can you confirm this? I just wanted to make sure there wasn't some linking flag I'm missing before contacting the Boost developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411
https://github.com/psi4/psi4/issues/411:36419,Availability,Error,Error,36419," In function `boost::mpi::detail::packed_archive_recv(int, int, int, boost::mpi::packed_iarchive&, MPI_Status&)':; point_to_point.cpp:(.text+0x2c1): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x318): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x40a): undefined reference to `MPI_Free_mem'; point_to_point.cpp:(.text+0x4a7): undefined reference to `MPI_Alloc_mem'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::wait()':; request.cpp:(.text+0x82): undefined reference to `MPI_Waitall'; request.cpp:(.text+0xd4): undefined reference to `MPI_Wait'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::test()':; request.cpp:(.text+0x201): undefined reference to `MPI_Testall'; request.cpp:(.text+0x283): undefined reference to `MPI_Test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::cancel()':; request.cpp:(.text+0x38e): undefined reference to `MPI_Cancel'; request.cpp:(.text+0x3a9): undefined reference to `MPI_Cancel'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(exception.o): In function `boost::mpi::exception::exception(char const*, int)':; exception.cpp:(.text+0xaf): undefined reference to `MPI_Error_string'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```. It looks to me like a problem with my external Boost installation. Can you confirm this? I just wanted to make sure there wasn't some linking flag I'm missing before contacting the Boost developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411
https://github.com/psi4/psi4/issues/411:36480,Availability,Error,Error,36480," In function `boost::mpi::detail::packed_archive_recv(int, int, int, boost::mpi::packed_iarchive&, MPI_Status&)':; point_to_point.cpp:(.text+0x2c1): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x318): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x40a): undefined reference to `MPI_Free_mem'; point_to_point.cpp:(.text+0x4a7): undefined reference to `MPI_Alloc_mem'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::wait()':; request.cpp:(.text+0x82): undefined reference to `MPI_Waitall'; request.cpp:(.text+0xd4): undefined reference to `MPI_Wait'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::test()':; request.cpp:(.text+0x201): undefined reference to `MPI_Testall'; request.cpp:(.text+0x283): undefined reference to `MPI_Test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::cancel()':; request.cpp:(.text+0x38e): undefined reference to `MPI_Cancel'; request.cpp:(.text+0x3a9): undefined reference to `MPI_Cancel'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(exception.o): In function `boost::mpi::exception::exception(char const*, int)':; exception.cpp:(.text+0xaf): undefined reference to `MPI_Error_string'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```. It looks to me like a problem with my external Boost installation. Can you confirm this? I just wanted to make sure there wasn't some linking flag I'm missing before contacting the Boost developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411
https://github.com/psi4/psi4/issues/411:36505,Availability,Error,Error,36505," In function `boost::mpi::detail::packed_archive_recv(int, int, int, boost::mpi::packed_iarchive&, MPI_Status&)':; point_to_point.cpp:(.text+0x2c1): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x318): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x40a): undefined reference to `MPI_Free_mem'; point_to_point.cpp:(.text+0x4a7): undefined reference to `MPI_Alloc_mem'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::wait()':; request.cpp:(.text+0x82): undefined reference to `MPI_Waitall'; request.cpp:(.text+0xd4): undefined reference to `MPI_Wait'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::test()':; request.cpp:(.text+0x201): undefined reference to `MPI_Testall'; request.cpp:(.text+0x283): undefined reference to `MPI_Test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::cancel()':; request.cpp:(.text+0x38e): undefined reference to `MPI_Cancel'; request.cpp:(.text+0x3a9): undefined reference to `MPI_Cancel'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(exception.o): In function `boost::mpi::exception::exception(char const*, int)':; exception.cpp:(.text+0xaf): undefined reference to `MPI_Error_string'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```. It looks to me like a problem with my external Boost installation. Can you confirm this? I just wanted to make sure there wasn't some linking flag I'm missing before contacting the Boost developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411
https://github.com/psi4/psi4/issues/411:36572,Deployability,install,installation,36572," In function `boost::mpi::detail::packed_archive_recv(int, int, int, boost::mpi::packed_iarchive&, MPI_Status&)':; point_to_point.cpp:(.text+0x2c1): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x318): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x40a): undefined reference to `MPI_Free_mem'; point_to_point.cpp:(.text+0x4a7): undefined reference to `MPI_Alloc_mem'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::wait()':; request.cpp:(.text+0x82): undefined reference to `MPI_Waitall'; request.cpp:(.text+0xd4): undefined reference to `MPI_Wait'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::test()':; request.cpp:(.text+0x201): undefined reference to `MPI_Testall'; request.cpp:(.text+0x283): undefined reference to `MPI_Test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::cancel()':; request.cpp:(.text+0x38e): undefined reference to `MPI_Cancel'; request.cpp:(.text+0x3a9): undefined reference to `MPI_Cancel'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(exception.o): In function `boost::mpi::exception::exception(char const*, int)':; exception.cpp:(.text+0xaf): undefined reference to `MPI_Error_string'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```. It looks to me like a problem with my external Boost installation. Can you confirm this? I just wanted to make sure there wasn't some linking flag I'm missing before contacting the Boost developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411
https://github.com/psi4/psi4/issues/411:15099,Safety,abort,abort,15099,".o): In function `boost::mpi::communicator::as_intercommunicator() const':; communicator.cpp:(.text+0xdc2): undefined reference to `MPI_Comm_test_inter'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::communicator::as_graph_communicator() const':; communicator.cpp:(.text+0xef4): undefined reference to `MPI_Topo_test'; communicator.cpp:(.text+0xf40): undefined reference to `MPI_Topo_test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::communicator::has_cartesian_topology() const':; communicator.cpp:(.text+0x1195): undefined reference to `MPI_Topo_test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::communicator::abort(int) const':; communicator.cpp:(.text+0x1200): undefined reference to `MPI_Abort'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `void boost::mpi::communicator::send<boost::mpi::content>(int, int, boost::mpi::content const&) const':; communicator.cpp:(.text+0x1272): undefined reference to `MPI_Send'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::status boost::mpi::communicator::recv<boost::mpi::content const>(int, int, boost::mpi::content const&) const':; communicator.cpp:(.text+0x12f1): undefined reference to `MPI_Recv'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::request boost::mpi::communicator::isend<b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411
https://github.com/psi4/psi4/issues/411:27799,Safety,abort,abort,27799,"clude/boost/mpi/collectives/broadcast.hpp:96: undefined reference to `MPI_Bcast'; ../../../lib/libpsio.a(rw.cc.o): In function `void boost::mpi::detail::broadcast_impl<unsigned long>(boost::mpi::communicator const&, unsigned long*, int, int, mpl_::bool_<true>)':; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/include/boost/mpi/collectives/broadcast.hpp:96: undefined reference to `MPI_Bcast'; ../../../lib/libpsio.a(volseek.cc.o): In function `void boost::mpi::detail::broadcast_impl<int>(boost::mpi::communicator const&, int*, int, int, mpl_::bool_<true>)':; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/include/boost/mpi/collectives/broadcast.hpp:96: undefined reference to `MPI_Bcast'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::abort(int)':; environment.cpp:(.text+0x21d): undefined reference to `MPI_Abort'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::initialized()':; environment.cpp:(.text+0x26b): undefined reference to `MPI_Initialized'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::finalized()':; environment.cpp:(.text+0x2cb): undefined reference to `MPI_Finalized'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::max_tag()':; environment.cpp:(.text+0x342): undefined reference to `MPI_Attr_get'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411
https://github.com/psi4/psi4/issues/411:35610,Testability,test,test,35610,"t/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(point_to_point.o): In function `boost::mpi::detail::packed_archive_recv(int, int, int, boost::mpi::packed_iarchive&, MPI_Status&)':; point_to_point.cpp:(.text+0x2c1): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x318): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x40a): undefined reference to `MPI_Free_mem'; point_to_point.cpp:(.text+0x4a7): undefined reference to `MPI_Alloc_mem'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::wait()':; request.cpp:(.text+0x82): undefined reference to `MPI_Waitall'; request.cpp:(.text+0xd4): undefined reference to `MPI_Wait'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::test()':; request.cpp:(.text+0x201): undefined reference to `MPI_Testall'; request.cpp:(.text+0x283): undefined reference to `MPI_Test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::cancel()':; request.cpp:(.text+0x38e): undefined reference to `MPI_Cancel'; request.cpp:(.text+0x3a9): undefined reference to `MPI_Cancel'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(exception.o): In function `boost::mpi::exception::exception(char const*, int)':; exception.cpp:(.text+0xaf): undefined reference to `MPI_Error_string'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```. It looks to me like a problem with my external Boost installation. Can you confir",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411
https://github.com/psi4/psi4/issues/411:32796,Usability,clear,clear,32796,"t.a(environment.o): In function `boost::mpi::environment::environment(boost::mpi::threading::level, bool)':; environment.cpp:(.text+0x8ff): undefined reference to `MPI_Initialized'; environment.cpp:(.text+0x91b): undefined reference to `MPI_Init_thread'; environment.cpp:(.text+0x931): undefined reference to `MPI_Errhandler_set'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::environment(int&, char**&, boost::mpi::threading::level, bool)':; environment.cpp:(.text+0x9bb): undefined reference to `MPI_Initialized'; environment.cpp:(.text+0x9da): undefined reference to `MPI_Init_thread'; environment.cpp:(.text+0x9f0): undefined reference to `MPI_Errhandler_set'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(mpi_datatype_cache.o): In function `boost::mpi::detail::mpi_datatype_map::clear()':; mpi_datatype_cache.cpp:(.text+0x1c7): undefined reference to `MPI_Finalized'; mpi_datatype_cache.cpp:(.text+0x1f5): undefined reference to `MPI_Type_free'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(mpi_datatype_cache.o): In function `boost::mpi::detail::mpi_datatype_map::~mpi_datatype_map()':; mpi_datatype_cache.cpp:(.text+0x269): undefined reference to `MPI_Finalized'; mpi_datatype_cache.cpp:(.text+0x295): undefined reference to `MPI_Type_free'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(point_to_point.o): In function `boost::mpi::detail::packed_archive_send(int, int, int, boost::mpi::packed_oarchive const&)':; point_to_point.cpp:(.text+0x41): undefined reference to `MPI_Send'; point_to_point.cpp:(.text+0x69): undefined reference to `MPI_Send'; /blues/gpfs/home/software/spack/opt/spac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411
https://github.com/psi4/psi4/pull/412:89,Availability,error,error,89,"## Description. Several tweaks to prepare for the 1.0 release.; ## Todos; - [x] Throws a error if NumPy is not install and prints documentation for installation, closes #407.; - [x] Tweaks CI convergence and will throw PsiException if CI/MCSCF does not converge, closes #394.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/412
https://github.com/psi4/psi4/pull/412:54,Deployability,release,release,54,"## Description. Several tweaks to prepare for the 1.0 release.; ## Todos; - [x] Throws a error if NumPy is not install and prints documentation for installation, closes #407.; - [x] Tweaks CI convergence and will throw PsiException if CI/MCSCF does not converge, closes #394.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/412
https://github.com/psi4/psi4/pull/412:111,Deployability,install,install,111,"## Description. Several tweaks to prepare for the 1.0 release.; ## Todos; - [x] Throws a error if NumPy is not install and prints documentation for installation, closes #407.; - [x] Tweaks CI convergence and will throw PsiException if CI/MCSCF does not converge, closes #394.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/412
https://github.com/psi4/psi4/pull/412:148,Deployability,install,installation,148,"## Description. Several tweaks to prepare for the 1.0 release.; ## Todos; - [x] Throws a error if NumPy is not install and prints documentation for installation, closes #407.; - [x] Tweaks CI convergence and will throw PsiException if CI/MCSCF does not converge, closes #394.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/412
https://github.com/psi4/psi4/pull/413:423,Deployability,install,install,423,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/413
https://github.com/psi4/psi4/pull/413:658,Deployability,install,installed,658,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/413
https://github.com/psi4/psi4/pull/413:499,Modifiability,plugin,plugin,499,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/413
https://github.com/psi4/psi4/pull/413:602,Modifiability,plugin,plugin,602,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/413
https://github.com/psi4/psi4/pull/413:626,Modifiability,plugin,plugins,626,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/413
https://github.com/psi4/psi4/pull/413:728,Modifiability,plugin,plugin,728,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/413
https://github.com/psi4/psi4/pull/413:342,Safety,detect,detected,342,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/413
https://github.com/psi4/psi4/pull/413:383,Safety,detect,detection,383,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/413
https://github.com/psi4/psi4/issues/414:280,Integrability,interface,interfaces,280,"I just tried to build the present trunk using the instructions in the wiki; https://github.com/psi4/psi4/wiki/1_Obtaining#clonepsi4public. but the compilation fails in a bunch of unresolved symbols. /tmp/ccVe3Y02.ltrans0.ltrans.o: In function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:431,Integrability,interface,interfaces,431,"I just tried to build the present trunk using the instructions in the wiki; https://github.com/psi4/psi4/wiki/1_Obtaining#clonepsi4public. but the compilation fails in a bunch of unresolved symbols. /tmp/ccVe3Y02.ltrans0.ltrans.o: In function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:597,Integrability,interface,interfaces,597,"I just tried to build the present trunk using the instructions in the wiki; https://github.com/psi4/psi4/wiki/1_Obtaining#clonepsi4public. but the compilation fails in a bunch of unresolved symbols. /tmp/ccVe3Y02.ltrans0.ltrans.o: In function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:764,Integrability,interface,interfaces,764,"I just tried to build the present trunk using the instructions in the wiki; https://github.com/psi4/psi4/wiki/1_Obtaining#clonepsi4public. but the compilation fails in a bunch of unresolved symbols. /tmp/ccVe3Y02.ltrans0.ltrans.o: In function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:914,Integrability,interface,interfaces,914,"I just tried to build the present trunk using the instructions in the wiki; https://github.com/psi4/psi4/wiki/1_Obtaining#clonepsi4public. but the compilation fails in a bunch of unresolved symbols. /tmp/ccVe3Y02.ltrans0.ltrans.o: In function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:1085,Integrability,interface,interfaces,1085,"ons in the wiki; https://github.com/psi4/psi4/wiki/1_Obtaining#clonepsi4public. but the compilation fails in a bunch of unresolved symbols. /tmp/ccVe3Y02.ltrans0.ltrans.o: In function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to han",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:1260,Integrability,interface,interfaces,1260,"n function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:1577,Integrability,message,messages,1577,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:1687,Modifiability,plugin,plugin,1687,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:1770,Modifiability,plugin,plugin,1770,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:1858,Modifiability,plugin,plugin,1858,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:1954,Modifiability,plugin,plugin,1954,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:2040,Modifiability,plugin,plugin,2040,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/414:1401,Testability,log,log,1401,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/414
https://github.com/psi4/psi4/issues/415:137,Deployability,install,install,137,"Configuring my psi4 I get the warning message. WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case. Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415
https://github.com/psi4/psi4/issues/415:237,Deployability,install,install,237,"Configuring my psi4 I get the warning message. WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case. Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415
https://github.com/psi4/psi4/issues/415:38,Integrability,message,message,38,"Configuring my psi4 I get the warning message. WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case. Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415
https://github.com/psi4/psi4/issues/415:0,Modifiability,Config,Configuring,0,"Configuring my psi4 I get the warning message. WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case. Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415
https://github.com/psi4/psi4/issues/417:254,Availability,error,error,254,"Both PCMSolver (in `pcmsolver.h`) and psi (in `src/lib/libpsipcm/psipcm.cc`) defined a `extern ""C""` function called:. ``` c++; extern ""C"" void host_writer(const char * message, int message_length);; ```. The fails to build of course (icpc 16.0.1):. ```; error: more than one instance of overloaded function ""host_writer"" has ""C"" linkage; ```. Please rename or adjust the function.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/417
https://github.com/psi4/psi4/issues/417:168,Integrability,message,message,168,"Both PCMSolver (in `pcmsolver.h`) and psi (in `src/lib/libpsipcm/psipcm.cc`) defined a `extern ""C""` function called:. ``` c++; extern ""C"" void host_writer(const char * message, int message_length);; ```. The fails to build of course (icpc 16.0.1):. ```; error: more than one instance of overloaded function ""host_writer"" has ""C"" linkage; ```. Please rename or adjust the function.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/417
https://github.com/psi4/psi4/issues/418:42,Energy Efficiency,charge,charges,42,"The xyz format sometimes specifies atomic charges instead of atomic symbols, e.g. 6 0.0 0.0 0.0. instead of. C 0.0 0.0 0.0. If possible, it would be nice for the parser to be able to cope with this kind of a definition.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/418
https://github.com/psi4/psi4/issues/419:824,Energy Efficiency,energy,energy,824,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/419:856,Energy Efficiency,energy,energy,856,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/419:956,Energy Efficiency,Energy,Energy,956,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/419:37,Modifiability,plugin,plugin,37,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/419:92,Modifiability,plugin,plugin,92,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/419:187,Modifiability,plugin,plugin,187,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/419:326,Modifiability,plugin,plugin,326,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/419:578,Modifiability,plugin,plugin,578,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/419:1465,Modifiability,plugin,plugin,1465,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/419:47,Testability,test,test,47,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/419:103,Testability,test,test,103,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419
https://github.com/psi4/psi4/issues/420:35,Energy Efficiency,Reduce,Reduced,35,"Psi4 forgets socc when guess=core. Reduced test case. molecule {; 0 2; Li; }. set basis STO-3G; set reference rohf; set guess sad; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). With SAD guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.13546721504551. With core guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.31554523444454",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/420
https://github.com/psi4/psi4/issues/420:205,Energy Efficiency,energy,energy,205,"Psi4 forgets socc when guess=core. Reduced test case. molecule {; 0 2; Li; }. set basis STO-3G; set reference rohf; set guess sad; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). With SAD guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.13546721504551. With core guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.31554523444454",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/420
https://github.com/psi4/psi4/issues/420:382,Energy Efficiency,Energy,Energy,382,"Psi4 forgets socc when guess=core. Reduced test case. molecule {; 0 2; Li; }. set basis STO-3G; set reference rohf; set guess sad; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). With SAD guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.13546721504551. With core guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.31554523444454",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/420
https://github.com/psi4/psi4/issues/420:415,Energy Efficiency,Energy,Energy,415,"Psi4 forgets socc when guess=core. Reduced test case. molecule {; 0 2; Li; }. set basis STO-3G; set reference rohf; set guess sad; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). With SAD guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.13546721504551. With core guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.31554523444454",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/420
https://github.com/psi4/psi4/issues/420:605,Energy Efficiency,Energy,Energy,605,"Psi4 forgets socc when guess=core. Reduced test case. molecule {; 0 2; Li; }. set basis STO-3G; set reference rohf; set guess sad; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). With SAD guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.13546721504551. With core guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.31554523444454",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/420
https://github.com/psi4/psi4/issues/420:638,Energy Efficiency,Energy,Energy,638,"Psi4 forgets socc when guess=core. Reduced test case. molecule {; 0 2; Li; }. set basis STO-3G; set reference rohf; set guess sad; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). With SAD guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.13546721504551. With core guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.31554523444454",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/420
https://github.com/psi4/psi4/issues/420:43,Testability,test,test,43,"Psi4 forgets socc when guess=core. Reduced test case. molecule {; 0 2; Li; }. set basis STO-3G; set reference rohf; set guess sad; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). With SAD guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.13546721504551. With core guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.31554523444454",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/420
https://github.com/psi4/psi4/issues/421:264,Energy Efficiency,energy,energy,264,"This may be related to issue #420, but the read guess also behaves in a crazy fashion if you try to set docc and socc. Test case:. molecule neutral{; 0 2; Na; }. molecule cation {; 1 1; Na; }. activate(cation); set basis STO-3G; set reference rhf; set guess core; energy('scf'). activate(neutral); set basis STO-3G; set reference rohf; set guess read; set docc [ 2, 0, 0, 0, 0, 1, 1, 1 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). If one does not supply the latter step with the docc/socc specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.66461226804716. If one does include the specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.78073099020281. so the odd electron vanishes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/421
https://github.com/psi4/psi4/issues/421:426,Energy Efficiency,energy,energy,426,"This may be related to issue #420, but the read guess also behaves in a crazy fashion if you try to set docc and socc. Test case:. molecule neutral{; 0 2; Na; }. molecule cation {; 1 1; Na; }. activate(cation); set basis STO-3G; set reference rhf; set guess core; energy('scf'). activate(neutral); set basis STO-3G; set reference rohf; set guess read; set docc [ 2, 0, 0, 0, 0, 1, 1, 1 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). If one does not supply the latter step with the docc/socc specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.66461226804716. If one does include the specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.78073099020281. so the odd electron vanishes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/421
https://github.com/psi4/psi4/issues/421:665,Energy Efficiency,Energy,Energy,665,"This may be related to issue #420, but the read guess also behaves in a crazy fashion if you try to set docc and socc. Test case:. molecule neutral{; 0 2; Na; }. molecule cation {; 1 1; Na; }. activate(cation); set basis STO-3G; set reference rhf; set guess core; energy('scf'). activate(neutral); set basis STO-3G; set reference rohf; set guess read; set docc [ 2, 0, 0, 0, 0, 1, 1, 1 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). If one does not supply the latter step with the docc/socc specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.66461226804716. If one does include the specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.78073099020281. so the odd electron vanishes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/421
https://github.com/psi4/psi4/issues/421:698,Energy Efficiency,Energy,Energy,698,"This may be related to issue #420, but the read guess also behaves in a crazy fashion if you try to set docc and socc. Test case:. molecule neutral{; 0 2; Na; }. molecule cation {; 1 1; Na; }. activate(cation); set basis STO-3G; set reference rhf; set guess core; energy('scf'). activate(neutral); set basis STO-3G; set reference rohf; set guess read; set docc [ 2, 0, 0, 0, 0, 1, 1, 1 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). If one does not supply the latter step with the docc/socc specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.66461226804716. If one does include the specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.78073099020281. so the odd electron vanishes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/421
https://github.com/psi4/psi4/issues/421:917,Energy Efficiency,Energy,Energy,917,"This may be related to issue #420, but the read guess also behaves in a crazy fashion if you try to set docc and socc. Test case:. molecule neutral{; 0 2; Na; }. molecule cation {; 1 1; Na; }. activate(cation); set basis STO-3G; set reference rhf; set guess core; energy('scf'). activate(neutral); set basis STO-3G; set reference rohf; set guess read; set docc [ 2, 0, 0, 0, 0, 1, 1, 1 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). If one does not supply the latter step with the docc/socc specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.66461226804716. If one does include the specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.78073099020281. so the odd electron vanishes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/421
https://github.com/psi4/psi4/issues/421:950,Energy Efficiency,Energy,Energy,950,"This may be related to issue #420, but the read guess also behaves in a crazy fashion if you try to set docc and socc. Test case:. molecule neutral{; 0 2; Na; }. molecule cation {; 1 1; Na; }. activate(cation); set basis STO-3G; set reference rhf; set guess core; energy('scf'). activate(neutral); set basis STO-3G; set reference rohf; set guess read; set docc [ 2, 0, 0, 0, 0, 1, 1, 1 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). If one does not supply the latter step with the docc/socc specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.66461226804716. If one does include the specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.78073099020281. so the odd electron vanishes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/421
https://github.com/psi4/psi4/issues/421:119,Testability,Test,Test,119,"This may be related to issue #420, but the read guess also behaves in a crazy fashion if you try to set docc and socc. Test case:. molecule neutral{; 0 2; Na; }. molecule cation {; 1 1; Na; }. activate(cation); set basis STO-3G; set reference rhf; set guess core; energy('scf'). activate(neutral); set basis STO-3G; set reference rohf; set guess read; set docc [ 2, 0, 0, 0, 0, 1, 1, 1 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). If one does not supply the latter step with the docc/socc specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.66461226804716. If one does include the specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.78073099020281. so the odd electron vanishes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/421
https://github.com/psi4/psi4/issues/423:656,Availability,error,error,656,"The documentation in the manual for detci; http://www.psicode.org/psi4manual/master/detci.html. states that the maximum number of iterations to diagonalize the Hamiltonian is set by MAXITER, the default of which is 12. However, if one sets maxiter to 5 in the runfile, psi4 crashes because SCF convergence wasn't attained in 5 iterations, and if one sets maxiter to 50, detci crashes due to non-convergence after 25 iterations. So, there are two problems:. 1) I think the keyword specified in the manual is incorrect, because plain MAXITER does not control DETCI but rather the SCF parameter. Increasing the value of CI_MAXITER (which I found by trial and error) I was able to get FCI to converge.; 2) The default value is not 12, but 25, as demonstrated by the trial.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/423
https://github.com/psi4/psi4/issues/424:276,Safety,avoid,avoid,276,I'm trying 1.0rc on a system with 128 GB of RAM. I've put `memory 90 gb` in the input file (meaning 70% of the memory) and started a calculation. What I see is that the memory usage indeed doesn't go above 70% but lots of swap is being used. This is not what I want: how do I avoid PSI of using more memory and starting swapping?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/424
https://github.com/psi4/psi4/pull/425:177,Deployability,rolling,rolling,177,"## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] there were some Boost.Python class inheritance issues when Boost linked dynamically, so rolling that back; - [x] install boost lib.a and headers when build custom Boost (needed by plugins); - [x] notes on building `psi4.so` with Intel+static; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/425
https://github.com/psi4/psi4/pull/425:202,Deployability,install,install,202,"## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] there were some Boost.Python class inheritance issues when Boost linked dynamically, so rolling that back; - [x] install boost lib.a and headers when build custom Boost (needed by plugins); - [x] notes on building `psi4.so` with Intel+static; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/425
https://github.com/psi4/psi4/pull/425:124,Modifiability,inherit,inheritance,124,"## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] there were some Boost.Python class inheritance issues when Boost linked dynamically, so rolling that back; - [x] install boost lib.a and headers when build custom Boost (needed by plugins); - [x] notes on building `psi4.so` with Intel+static; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/425
https://github.com/psi4/psi4/pull/425:269,Modifiability,plugin,plugins,269,"## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] there were some Boost.Python class inheritance issues when Boost linked dynamically, so rolling that back; - [x] install boost lib.a and headers when build custom Boost (needed by plugins); - [x] notes on building `psi4.so` with Intel+static; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/425
https://github.com/psi4/psi4/pull/427:135,Deployability,update,update,135,"## Description. mostly, polishes off CheMPS2; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] update dmrg keywords. add docs. fixes #414, #150; - [x] updates some tests for documentation; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/427
https://github.com/psi4/psi4/pull/427:191,Deployability,update,updates,191,"## Description. mostly, polishes off CheMPS2; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] update dmrg keywords. add docs. fixes #414, #150; - [x] updates some tests for documentation; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/427
https://github.com/psi4/psi4/pull/427:204,Testability,test,tests,204,"## Description. mostly, polishes off CheMPS2; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] update dmrg keywords. add docs. fixes #414, #150; - [x] updates some tests for documentation; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/427
https://github.com/psi4/psi4/issues/428:57,Availability,error,error,57,"When I run a df-mp3 geometry opt job I got the following error:. An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 44, in <module>. File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 1019, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 588, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 364, in select_mp3_gradient; return func(name, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 1381, in run_dfocc_gradient; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/ubgroup/psi4/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const_, char_, unsigned long, psi::psio_address, psi::psio_address_); psi::PSIO::read_entry(unsigned int, char const_, char_, unsigned long); psi::dfoccwave::Tensor2d::read(boost::shared_ptrpsi::PSIO, unsigned int). @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/428
https://github.com/psi4/psi4/issues/428:68,Availability,error,error,68,"When I run a df-mp3 geometry opt job I got the following error:. An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 44, in <module>. File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 1019, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 588, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 364, in select_mp3_gradient; return func(name, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 1381, in run_dfocc_gradient; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/ubgroup/psi4/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const_, char_, unsigned long, psi::psio_address, psi::psio_address_); psi::PSIO::read_entry(unsigned int, char const_, char_, unsigned long); psi::dfoccwave::Tensor2d::read(boost::shared_ptrpsi::PSIO, unsigned int). @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/428
https://github.com/psi4/psi4/issues/428:817,Availability,Error,Error,817,"When I run a df-mp3 geometry opt job I got the following error:. An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 44, in <module>. File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 1019, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 588, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 364, in select_mp3_gradient; return func(name, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 1381, in run_dfocc_gradient; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/ubgroup/psi4/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const_, char_, unsigned long, psi::psio_address, psi::psio_address_); psi::PSIO::read_entry(unsigned int, char const_, char_, unsigned long); psi::dfoccwave::Tensor2d::read(boost::shared_ptrpsi::PSIO, unsigned int). @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/428
https://github.com/psi4/psi4/issues/428:829,Availability,Error,Error,829,"When I run a df-mp3 geometry opt job I got the following error:. An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 44, in <module>. File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 1019, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 588, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 364, in select_mp3_gradient; return func(name, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 1381, in run_dfocc_gradient; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/ubgroup/psi4/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const_, char_, unsigned long, psi::psio_address, psi::psio_address_); psi::PSIO::read_entry(unsigned int, char const_, char_, unsigned long); psi::dfoccwave::Tensor2d::read(boost::shared_ptrpsi::PSIO, unsigned int). @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/428
https://github.com/psi4/psi4/issues/428:836,Availability,Error,Error,836,"When I run a df-mp3 geometry opt job I got the following error:. An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 44, in <module>. File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 1019, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 588, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 364, in select_mp3_gradient; return func(name, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 1381, in run_dfocc_gradient; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/ubgroup/psi4/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const_, char_, unsigned long, psi::psio_address, psi::psio_address_); psi::PSIO::read_entry(unsigned int, char const_, char_, unsigned long); psi::dfoccwave::Tensor2d::read(boost::shared_ptrpsi::PSIO, unsigned int). @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/428
https://github.com/psi4/psi4/issues/428:895,Availability,error,error,895,"When I run a df-mp3 geometry opt job I got the following error:. An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 44, in <module>. File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 1019, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 588, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 364, in select_mp3_gradient; return func(name, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 1381, in run_dfocc_gradient; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/ubgroup/psi4/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const_, char_, unsigned long, psi::psio_address, psi::psio_address_); psi::PSIO::read_entry(unsigned int, char const_, char_, unsigned long); psi::dfoccwave::Tensor2d::read(boost::shared_ptrpsi::PSIO, unsigned int). @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/428
https://github.com/psi4/psi4/issues/428:255,Performance,optimiz,optimize,255,"When I run a df-mp3 geometry opt job I got the following error:. An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 44, in <module>. File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 1019, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 588, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 364, in select_mp3_gradient; return func(name, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 1381, in run_dfocc_gradient; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/ubgroup/psi4/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const_, char_, unsigned long, psi::psio_address, psi::psio_address_); psi::PSIO::read_entry(unsigned int, char const_, char_, unsigned long); psi::dfoccwave::Tensor2d::read(boost::shared_ptrpsi::PSIO, unsigned int). @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/428
https://github.com/psi4/psi4/pull/429:29,Availability,error,error,29,"## Description. There was an error in df-mp3 grad. I was comment out the wrong line. Now, it is fixed and DF-MP3 grad works!; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [ ] Feature1; ## Questions; - [ ] Question1; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/429
https://github.com/psi4/psi4/pull/430:155,Modifiability,plugin,plugins,155,## Description. `1.0rc2` prep; ## Todones; - [x] pull ambit and chemps repos from proper upstream; - [x] bump chemps to `1.7.1`; - [x] fix that +something plugins weren't actually getting their specialized code. ambit couldn't run with default (c2v) input file; - [x] prep version computer for `1.0rc2`; ## Status; - [x] Ready to go. curious about travis and scf5,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/430
https://github.com/psi4/psi4/pull/432:479,Availability,toler,tolerance,479,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432
https://github.com/psi4/psi4/pull/432:695,Availability,redundant,redundant,695,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432
https://github.com/psi4/psi4/pull/432:264,Performance,optimiz,optimizations,264,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432
https://github.com/psi4/psi4/pull/432:347,Safety,detect,detection,347,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432
https://github.com/psi4/psi4/pull/432:695,Safety,redund,redundant,695,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432
https://github.com/psi4/psi4/pull/432:765,Safety,hazard,hazardous,765,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432
https://github.com/psi4/psi4/pull/432:970,Testability,test,test,970,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432
https://github.com/psi4/psi4/pull/432:1154,Testability,test,tests,1154,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432
https://github.com/psi4/psi4/pull/433:307,Energy Efficiency,ENERGY,ENERGY,307,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433
https://github.com/psi4/psi4/pull/433:376,Energy Efficiency,ENERGY,ENERGY,376,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433
https://github.com/psi4/psi4/pull/433:893,Energy Efficiency,ENERGY,ENERGY,893,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433
https://github.com/psi4/psi4/pull/433:1112,Energy Efficiency,energy,energy,1112,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433
https://github.com/psi4/psi4/pull/433:1136,Energy Efficiency,energy,energy,1136,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433
https://github.com/psi4/psi4/pull/433:99,Modifiability,flexible,flexible,99,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433
https://github.com/psi4/psi4/pull/433:472,Modifiability,variab,variable,472,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433
https://github.com/psi4/psi4/pull/433:1288,Modifiability,flexible,flexible,1288,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433
https://github.com/psi4/psi4/pull/433:987,Testability,test,test,987,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433
https://github.com/psi4/psi4/pull/433:1000,Testability,test,test,1000,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433
https://github.com/psi4/psi4/pull/434:168,Deployability,release,releases,168,## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.3` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.3); ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [ ] @loriab should re-build the conda package; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/434
https://github.com/psi4/psi4/pull/434:206,Deployability,Update,Update,206,## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.3` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.3); ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [ ] @loriab should re-build the conda package; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/434
https://github.com/psi4/psi4/pull/436:38,Modifiability,plugin,plugin,38,## Description. Don't build the ambit plugin if ambit is not present.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436
https://github.com/psi4/psi4/pull/437:160,Testability,test,tests,160,"## Description. Adds analytic RHF Hessians. Still much cleanup/fixing to be done, but I thought I'd open a PR to allow others to chime in.; ## Todos; - [x] Add tests.; - [x] Hook into driver (with help from @loriab).; - [x] Add batching to allow fock derivatives to be computed without using too much memory.; - [x] Fix bug in spherical harmonic second derivative integrals.; ## Questions; - [x] Should we just merge this in when UHF is working, or should we also push to get the XC Hessian terms, @dgasmith / @robparrish ? I don't know how involved the XC terms will be, but I'm happy to help get them cranked out.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437
https://github.com/psi4/psi4/pull/439:185,Deployability,release,release,185,"## Description. Bumped Clang Travis test to clang-3.8 from clang-3.7; - [x] Makes me hum ""New Slang"" by The Shins.; - [x] Makes Travis use the latest Clang (3.8) instead of 3.7 for the release build.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/439
https://github.com/psi4/psi4/pull/439:36,Testability,test,test,36,"## Description. Bumped Clang Travis test to clang-3.8 from clang-3.7; - [x] Makes me hum ""New Slang"" by The Shins.; - [x] Makes Travis use the latest Clang (3.8) instead of 3.7 for the release build.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/439
https://github.com/psi4/psi4/pull/440:271,Availability,degraded,degraded,271,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440
https://github.com/psi4/psi4/pull/440:450,Availability,avail,available,450,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440
https://github.com/psi4/psi4/pull/440:168,Deployability,release,releases,168,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440
https://github.com/psi4/psi4/pull/440:568,Deployability,Update,Update,568,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440
https://github.com/psi4/psi4/pull/440:242,Energy Efficiency,charge,charges,242,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440
https://github.com/psi4/psi4/pull/440:338,Testability,test,tests,338,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440
https://github.com/psi4/psi4/pull/440:356,Testability,test,tests,356,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440
https://github.com/psi4/psi4/pull/440:499,Testability,test,tests,499,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440
https://github.com/psi4/psi4/pull/441:115,Testability,test,test,115,"## Description. After rebasing, hopefully this pull request is cleaner. Interfragment coordinates fixed with 3 new test cases.; ## Todos; - [x] Feature1; ## Questions; - [x] Question1; ## Status; - [X] Ready to go; All opt tests pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/441
https://github.com/psi4/psi4/pull/441:223,Testability,test,tests,223,"## Description. After rebasing, hopefully this pull request is cleaner. Interfragment coordinates fixed with 3 new test cases.; ## Todos; - [x] Feature1; ## Questions; - [x] Question1; ## Status; - [X] Ready to go; All opt tests pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/441
https://github.com/psi4/psi4/pull/442:3086,Availability,redundant,redundant,3086,"h of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:562,Deployability,install,installed,562,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:6830,Deployability,toggle,toggle,6830,"ething is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:8932,Energy Efficiency,energy,energy,8932,"conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:1261,Integrability,depend,dependencies,1261,"_NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:1695,Integrability,depend,dependencies,1695,"- [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:1737,Integrability,interface,interfaces,1737,"- [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:1995,Integrability,depend,dependencies,1995,"ook 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:2152,Integrability,depend,dependencies,2152,"default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProje",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:2471,Integrability,depend,dependencies,2471,"will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:3467,Integrability,depend,dependencies,3467," appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the exter",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:3800,Integrability,depend,dependencies,3800,"re were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:3906,Integrability,wrap,wrapper,3906,"gin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/psi4/wiki/BestPractices) wiki. There is a lot of copy/paste going on in the preamble of source files. You really should be assembling",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:4395,Integrability,depend,dependencies,4395,"e core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/psi4/wiki/BestPractices) wiki. There is a lot of copy/paste going on in the preamble of source files. You really should be assembling you includes/typedefs/etc. on a file by file basis to ensure you know what you are including, where it is coming from, and most importantly are only including what you need. The reason the build is so much faster is that I have trimmed many of the unneeded includes.; ### Unified Header Inclusions. All include files are (or should be) relative to root (In practice I missed some, but they are in the same directory as the file they are included in and are fine for now). The reason for this ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:6332,Integrability,interface,interface,6332,"o transition to a modular nature and it is easiest for the users of these modules if they only have to specify the Psi4 include directory as an include and not each subdirectory of it. Note that this is how nearly every professional C++ library I am aware of does this (Boost, Eigen, TBB, ...). The second (and arguably better reason) is doing it any other way makes the superbuild a lot harder when something is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:7072,Integrability,wrap,wrapped,7072,"ns you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consol",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:7618,Integrability,depend,dependency,7618,"psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #T",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:9216,Integrability,interface,interface,9216," and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:11462,Integrability,wrap,wrapping,11462," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:857,Modifiability,plugin,plugin,857,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:1716,Modifiability,plugin,plugins,1716,"- [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:3004,Modifiability,variab,variables,3004,"ing the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:3221,Modifiability,variab,variables,3221,"l project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:6798,Modifiability,variab,variable,6798,"ething is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:8585,Modifiability,variab,variables,8585,"ate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are buil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:10307,Modifiability,rewrite,rewrite,10307,"ork well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:11363,Modifiability,Config,ConfigX,11363," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:11831,Modifiability,variab,variable,11831," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:2883,Performance,optimiz,optimizations,2883," what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:2945,Performance,optimiz,optimizations,2945," what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:3086,Safety,redund,redundant,3086,"h of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:3234,Safety,avoid,avoid,3234,"l project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:6022,Safety,avoid,avoiding,6022,"rtantly are only including what you need. The reason the build is so much faster is that I have trimmed many of the unneeded includes.; ### Unified Header Inclusions. All include files are (or should be) relative to root (In practice I missed some, but they are in the same directory as the file they are included in and are fine for now). The reason for this is we want to transition to a modular nature and it is easiest for the users of these modules if they only have to specify the Psi4 include directory as an include and not each subdirectory of it. Note that this is how nearly every professional C++ library I am aware of does this (Boost, Eigen, TBB, ...). The second (and arguably better reason) is doing it any other way makes the superbuild a lot harder when something is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:7267,Safety,safe,safe,7267,"h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:8059,Safety,redund,redundancy,8059,"e CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:9678,Safety,detect,detection,9678,"gstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:10399,Safety,detect,detecting,10399," that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:10927,Safety,detect,detection,10927," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:11262,Safety,avoid,avoid,11262," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:11334,Safety,avoid,avoid,11334," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:7861,Security,Access,Accessing,7861,"nd have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:477,Testability,test,tests,477,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:545,Testability,test,tests,545,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:598,Testability,test,test,598,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:825,Testability,Test,Test,825,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:2546,Testability,Log,Log,2546,"ce so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:362,Usability,feedback,feedback,362,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:2125,Usability,simpl,simply,2125,"default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProje",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:2441,Usability,simpl,simply,2441,"will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:4268,Usability,clear,clear,4268,". The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/psi4/wiki/BestPractices) wiki. There is a lot of copy/paste going on in the preamble of source files. You really should be assembling you includes/typedefs/etc. on a file by file basis to ensure you know what you are including, where it is coming from, and most importantly are only including what you need. The reason the build is so much faster is that I have trimmed many of the unneeded includes.; ### Unified Header Inclusions. All include files are (or should be) relative to root (In practice I missed some, but they are",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:6633,Usability,clear,clears,6633,"how nearly every professional C++ library I am aware of does this (Boost, Eigen, TBB, ...). The second (and arguably better reason) is doing it any other way makes the superbuild a lot harder when something is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an ex",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/442:8245,Usability,simpl,simply,8245,"'s safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a he",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442
https://github.com/psi4/psi4/pull/445:73,Deployability,update,updates,73,## Description. Distilli should provide PR testing on mac for all future updates. This is a test PR for this functionality.; ## Status; - [ ] Do NOT merge me.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/445
https://github.com/psi4/psi4/pull/445:43,Testability,test,testing,43,## Description. Distilli should provide PR testing on mac for all future updates. This is a test PR for this functionality.; ## Status; - [ ] Do NOT merge me.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/445
https://github.com/psi4/psi4/pull/445:92,Testability,test,test,92,## Description. Distilli should provide PR testing on mac for all future updates. This is a test PR for this functionality.; ## Status; - [ ] Do NOT merge me.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/445
https://github.com/psi4/psi4/pull/446:19,Testability,test,test,19,"This is a distelli test, do not merge me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/446
https://github.com/psi4/psi4/pull/447:488,Availability,avail,available,488,"## OEProp bug fix. Some OEProp routines contracted Cartesian density matrices with spherical harmonic integrals, which is bad (and caused by me, I believe). Thanks to Coleman Howard in @lothian's group for pointing this out. For Cartesian basis sets, there was never a problem. For spherical harmonics, the multipoles were bad only if the origin was chosen such that it broke symmetry; spherical harmonic fields and ESPs were all wrong. I added a test for the multipoles, because they're available in Psi vars (reference values confirmed by Molpro). I also confirmed the ESP and Fields on a small grid against Molpro values, but they're not available in Psi vars, so are harder to test.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447
https://github.com/psi4/psi4/pull/447:641,Availability,avail,available,641,"## OEProp bug fix. Some OEProp routines contracted Cartesian density matrices with spherical harmonic integrals, which is bad (and caused by me, I believe). Thanks to Coleman Howard in @lothian's group for pointing this out. For Cartesian basis sets, there was never a problem. For spherical harmonics, the multipoles were bad only if the origin was chosen such that it broke symmetry; spherical harmonic fields and ESPs were all wrong. I added a test for the multipoles, because they're available in Psi vars (reference values confirmed by Molpro). I also confirmed the ESP and Fields on a small grid against Molpro values, but they're not available in Psi vars, so are harder to test.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447
https://github.com/psi4/psi4/pull/447:31,Integrability,rout,routines,31,"## OEProp bug fix. Some OEProp routines contracted Cartesian density matrices with spherical harmonic integrals, which is bad (and caused by me, I believe). Thanks to Coleman Howard in @lothian's group for pointing this out. For Cartesian basis sets, there was never a problem. For spherical harmonics, the multipoles were bad only if the origin was chosen such that it broke symmetry; spherical harmonic fields and ESPs were all wrong. I added a test for the multipoles, because they're available in Psi vars (reference values confirmed by Molpro). I also confirmed the ESP and Fields on a small grid against Molpro values, but they're not available in Psi vars, so are harder to test.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447
https://github.com/psi4/psi4/pull/447:40,Integrability,contract,contracted,40,"## OEProp bug fix. Some OEProp routines contracted Cartesian density matrices with spherical harmonic integrals, which is bad (and caused by me, I believe). Thanks to Coleman Howard in @lothian's group for pointing this out. For Cartesian basis sets, there was never a problem. For spherical harmonics, the multipoles were bad only if the origin was chosen such that it broke symmetry; spherical harmonic fields and ESPs were all wrong. I added a test for the multipoles, because they're available in Psi vars (reference values confirmed by Molpro). I also confirmed the ESP and Fields on a small grid against Molpro values, but they're not available in Psi vars, so are harder to test.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447
https://github.com/psi4/psi4/pull/447:447,Testability,test,test,447,"## OEProp bug fix. Some OEProp routines contracted Cartesian density matrices with spherical harmonic integrals, which is bad (and caused by me, I believe). Thanks to Coleman Howard in @lothian's group for pointing this out. For Cartesian basis sets, there was never a problem. For spherical harmonics, the multipoles were bad only if the origin was chosen such that it broke symmetry; spherical harmonic fields and ESPs were all wrong. I added a test for the multipoles, because they're available in Psi vars (reference values confirmed by Molpro). I also confirmed the ESP and Fields on a small grid against Molpro values, but they're not available in Psi vars, so are harder to test.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447
https://github.com/psi4/psi4/pull/447:681,Testability,test,test,681,"## OEProp bug fix. Some OEProp routines contracted Cartesian density matrices with spherical harmonic integrals, which is bad (and caused by me, I believe). Thanks to Coleman Howard in @lothian's group for pointing this out. For Cartesian basis sets, there was never a problem. For spherical harmonics, the multipoles were bad only if the origin was chosen such that it broke symmetry; spherical harmonic fields and ESPs were all wrong. I added a test for the multipoles, because they're available in Psi vars (reference values confirmed by Molpro). I also confirmed the ESP and Fields on a small grid against Molpro values, but they're not available in Psi vars, so are harder to test.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447
https://github.com/psi4/psi4/issues/448:240,Energy Efficiency,energy,energy,240,"==> Input File <==. ---. molecule N2{; N; N 1 2.58; units bohr; }; set {; basis cc-pVDZ; scf_type pk; DOCC [3,0,0,0,0,2,1,1]; e_convergence 10; d_convergence 10; r_convergence 10; FROZEN_DOCC [1,0,0,0,0,1,0,0]; Maxiter 100; Num_roots 1; }. energy('fci'). ---. This calculation diverge after iteration 50. ==> End Of Output File <==; Iter 41 Root 1 = -109.192522175 Delta_E -1.929E-12 Delta_C 4.066E-06; Iter 42 Root 1 = -109.192522175 Delta_E -9.223E-12 Delta_C 8.618E-06; Iter 43 Root 1 = -109.192522175 Delta_E -4.168E-11 Delta_C 1.799E-05; Iter 44 Root 1 = -109.192522175 Delta_E -1.870E-10 Delta_C 3.800E-05; Iter 45 Root 1 = -109.192522176 Delta_E -8.855E-10 Delta_C 8.431E-05; Iter 46 Root 1 = -109.192522181 Delta_E -4.538E-09 Delta_C 1.955E-04; Iter 47 Root 1 = -109.192522205 Delta_E -2.466E-08 Delta_C 4.665E-04; Iter 48 Root 1 = -109.192522355 Delta_E -1.496E-07 Delta_C 1.179E-03; Iter 49 Root 1 = -109.192523753 Delta_E -1.398E-06 Delta_C 4.152E-03; Iter 50 Root 1 = -109.968750624 Delta_E -7.762E-01 Delta_C 3.339E+00; Iter 51 Root 1 = -118.722003520 Delta_E -8.753E+00 Delta_C 1.458E+01; Iter 52 Root 1 = -145.122489317 Delta_E -2.640E+01 Delta_C 5.957E+01; Iter 53 Root 1 = -172.017439239 Delta_E -2.689E+01 Delta_C 1.206E+02; Iter 54 Root 1 = -198.930392334 Delta_E -2.691E+01 Delta_C 1.936E+02; Iter 55 Root 1 = -225.849104619 Delta_E -2.692E+01 Delta_C 2.771E+02; Iter 56 Root 1 = -252.770463097 Delta_E -2.692E+01 Delta_C 3.698E+02; Iter 57 Root 1 = -279.693265542 Delta_E -2.692E+01 Delta_C 4.709E+02; Iter 58 Root 1 = -306.616944155 Delta_E -2.692E+01 Delta_C 5.797E+02; Iter 59 Root 1 = -333.541194861 Delta_E -2.692E+01 Delta_C 6.958E+02; Iter 60 Root 1 = -360.465839881 Delta_E -2.692E+01 Delta_C 8.188E+02; Iter 61 Root 1 = -387.390768249 Delta_E -2.692E+01 Delta_C 9.481E+02; Iter 62 Root 1 = -414.315907096 Delta_E -2.693E+01 Delta_C 1.084E+03; Iter 63 Root 1 = -441.241206582 Delta_E -2.693E+01 Delta_C 1.225E+03; Iter 64 Root 1 = -468.166631458 Delta_E -2.693E+01 Delta_C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/448
https://github.com/psi4/psi4/pull/449:10,Testability,test,test,10,This is a test branch.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449
https://github.com/psi4/psi4/issues/450:429,Availability,error,error,429,"Greetings friends,; As per the developer wish list ( #402) it was decided that boost should be removed from Psi4 as there is little point in keeping it around when all the needed features are in C++11. When removing boost we gain:; - Fewer dependencies; - More canonical operations through C++ standards; - Simpler and more expressive python bindings; - Fewer python lib issues (in theory); - You will no longer get six pages of error messages when boost templates fail in some way; - Build simplification and faster compiler time; - Fewer compiler warning (lots from boost); - Less CI hassle; - There will be a party with cake and burning of a boost effigy (streamed and tweeted); ## . My primary goal is to tackle boost python and convert all existing code to PyBind11. Through this I will tackle the following boost libraries: python, tuple, lexical, shared_ptr, and math. I have a reasonable plan to accomplish this and initial tests show that I should be able to pull it off.; ## . However, there are other libraries that I could use help converting either in the form ideas or some of the grunt work. These are:. Boost filesystem:; - [x] `bin/fisapt/fisapt.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem/operations.hpp>`; - [x] `bin/psi4/export_plugins.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/psi_start.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/python.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/csg.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/cubeprop.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libefp_solver/efp_solver.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/filesystem.hpp>`. For most of these we would likely let Python handle the filesystem paths and just pass them into C-side as a `std::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450
https://github.com/psi4/psi4/issues/450:240,Integrability,depend,dependencies,240,"Greetings friends,; As per the developer wish list ( #402) it was decided that boost should be removed from Psi4 as there is little point in keeping it around when all the needed features are in C++11. When removing boost we gain:; - Fewer dependencies; - More canonical operations through C++ standards; - Simpler and more expressive python bindings; - Fewer python lib issues (in theory); - You will no longer get six pages of error messages when boost templates fail in some way; - Build simplification and faster compiler time; - Fewer compiler warning (lots from boost); - Less CI hassle; - There will be a party with cake and burning of a boost effigy (streamed and tweeted); ## . My primary goal is to tackle boost python and convert all existing code to PyBind11. Through this I will tackle the following boost libraries: python, tuple, lexical, shared_ptr, and math. I have a reasonable plan to accomplish this and initial tests show that I should be able to pull it off.; ## . However, there are other libraries that I could use help converting either in the form ideas or some of the grunt work. These are:. Boost filesystem:; - [x] `bin/fisapt/fisapt.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem/operations.hpp>`; - [x] `bin/psi4/export_plugins.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/psi_start.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/python.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/csg.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/cubeprop.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libefp_solver/efp_solver.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/filesystem.hpp>`. For most of these we would likely let Python handle the filesystem paths and just pass them into C-side as a `std::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450
https://github.com/psi4/psi4/issues/450:435,Integrability,message,messages,435,"Greetings friends,; As per the developer wish list ( #402) it was decided that boost should be removed from Psi4 as there is little point in keeping it around when all the needed features are in C++11. When removing boost we gain:; - Fewer dependencies; - More canonical operations through C++ standards; - Simpler and more expressive python bindings; - Fewer python lib issues (in theory); - You will no longer get six pages of error messages when boost templates fail in some way; - Build simplification and faster compiler time; - Fewer compiler warning (lots from boost); - Less CI hassle; - There will be a party with cake and burning of a boost effigy (streamed and tweeted); ## . My primary goal is to tackle boost python and convert all existing code to PyBind11. Through this I will tackle the following boost libraries: python, tuple, lexical, shared_ptr, and math. I have a reasonable plan to accomplish this and initial tests show that I should be able to pull it off.; ## . However, there are other libraries that I could use help converting either in the form ideas or some of the grunt work. These are:. Boost filesystem:; - [x] `bin/fisapt/fisapt.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem/operations.hpp>`; - [x] `bin/psi4/export_plugins.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/psi_start.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/python.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/csg.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/cubeprop.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libefp_solver/efp_solver.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/filesystem.hpp>`. For most of these we would likely let Python handle the filesystem paths and just pass them into C-side as a `std::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450
https://github.com/psi4/psi4/issues/450:4365,Integrability,depend,dependencies,4365,"include <boost/regex.hpp>`; - [x] `lib/libmints/get_writer_file_prefix.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/matrix.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/molecule.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/oeprop.cc:#include <boost/regex.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/regex.hpp>`; - [x] `lib/libthce/laplace.cc:#include <boost/regex.hpp>`. `std::regex` is a drop in replacement **except** no more pearl syntax support. Not sure how much pearl we use, I think its all python based so we _should_ be fine.; ## . Boost serial:; - [x] `lib/libmints/serializers.h:#include <boost/serialization/serialization.hpp>`. No idea here, do we actually use our serialization capability?; ## . Boost xpressive(??):; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/lib3index/denominator.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/basisset_parser.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/matrix.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libthce/laplace.cc:#include <boost/xpressive/xpressive.hpp>`. Since Xpressive is based off boost spirit it scares me a bit. Not sure what this does exactly.; ## . Also, @andysim I still have no idea on EFP. I would need your help to remove boost from that. I will be traveling until August 10th at which point ill start ripping this out provided we have a path forward for the remaining issues.; ## ; ### LAB edit, 4 Aug. big ticket items/dependencies:; - [x] `add_custom_target(BoostPy)` convert Boost Python to Pybind11; - [x] `add_custom_target(BoostNonPy)` evict all the other Boost libraries we depend on (checkboxed above); - [x] `add_custom_target(FilterBranch DEPENDS BoostPy BoostNonPy)` remove all Boost tarballs and other large files from repo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450
https://github.com/psi4/psi4/issues/450:4526,Integrability,depend,depend,4526,"include <boost/regex.hpp>`; - [x] `lib/libmints/get_writer_file_prefix.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/matrix.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/molecule.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/oeprop.cc:#include <boost/regex.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/regex.hpp>`; - [x] `lib/libthce/laplace.cc:#include <boost/regex.hpp>`. `std::regex` is a drop in replacement **except** no more pearl syntax support. Not sure how much pearl we use, I think its all python based so we _should_ be fine.; ## . Boost serial:; - [x] `lib/libmints/serializers.h:#include <boost/serialization/serialization.hpp>`. No idea here, do we actually use our serialization capability?; ## . Boost xpressive(??):; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/lib3index/denominator.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/basisset_parser.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/matrix.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libthce/laplace.cc:#include <boost/xpressive/xpressive.hpp>`. Since Xpressive is based off boost spirit it scares me a bit. Not sure what this does exactly.; ## . Also, @andysim I still have no idea on EFP. I would need your help to remove boost from that. I will be traveling until August 10th at which point ill start ripping this out provided we have a path forward for the remaining issues.; ## ; ### LAB edit, 4 Aug. big ticket items/dependencies:; - [x] `add_custom_target(BoostPy)` convert Boost Python to Pybind11; - [x] `add_custom_target(BoostNonPy)` evict all the other Boost libraries we depend on (checkboxed above); - [x] `add_custom_target(FilterBranch DEPENDS BoostPy BoostNonPy)` remove all Boost tarballs and other large files from repo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450
https://github.com/psi4/psi4/issues/450:4594,Integrability,DEPEND,DEPENDS,4594,"include <boost/regex.hpp>`; - [x] `lib/libmints/get_writer_file_prefix.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/matrix.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/molecule.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/oeprop.cc:#include <boost/regex.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/regex.hpp>`; - [x] `lib/libthce/laplace.cc:#include <boost/regex.hpp>`. `std::regex` is a drop in replacement **except** no more pearl syntax support. Not sure how much pearl we use, I think its all python based so we _should_ be fine.; ## . Boost serial:; - [x] `lib/libmints/serializers.h:#include <boost/serialization/serialization.hpp>`. No idea here, do we actually use our serialization capability?; ## . Boost xpressive(??):; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/lib3index/denominator.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/basisset_parser.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/matrix.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libthce/laplace.cc:#include <boost/xpressive/xpressive.hpp>`. Since Xpressive is based off boost spirit it scares me a bit. Not sure what this does exactly.; ## . Also, @andysim I still have no idea on EFP. I would need your help to remove boost from that. I will be traveling until August 10th at which point ill start ripping this out provided we have a path forward for the remaining issues.; ## ; ### LAB edit, 4 Aug. big ticket items/dependencies:; - [x] `add_custom_target(BoostPy)` convert Boost Python to Pybind11; - [x] `add_custom_target(BoostNonPy)` evict all the other Boost libraries we depend on (checkboxed above); - [x] `add_custom_target(FilterBranch DEPENDS BoostPy BoostNonPy)` remove all Boost tarballs and other large files from repo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450
https://github.com/psi4/psi4/issues/450:932,Testability,test,tests,932,"Greetings friends,; As per the developer wish list ( #402) it was decided that boost should be removed from Psi4 as there is little point in keeping it around when all the needed features are in C++11. When removing boost we gain:; - Fewer dependencies; - More canonical operations through C++ standards; - Simpler and more expressive python bindings; - Fewer python lib issues (in theory); - You will no longer get six pages of error messages when boost templates fail in some way; - Build simplification and faster compiler time; - Fewer compiler warning (lots from boost); - Less CI hassle; - There will be a party with cake and burning of a boost effigy (streamed and tweeted); ## . My primary goal is to tackle boost python and convert all existing code to PyBind11. Through this I will tackle the following boost libraries: python, tuple, lexical, shared_ptr, and math. I have a reasonable plan to accomplish this and initial tests show that I should be able to pull it off.; ## . However, there are other libraries that I could use help converting either in the form ideas or some of the grunt work. These are:. Boost filesystem:; - [x] `bin/fisapt/fisapt.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem/operations.hpp>`; - [x] `bin/psi4/export_plugins.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/psi_start.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/python.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/csg.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/cubeprop.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libefp_solver/efp_solver.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/filesystem.hpp>`. For most of these we would likely let Python handle the filesystem paths and just pass them into C-side as a `std::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450
https://github.com/psi4/psi4/issues/450:307,Usability,Simpl,Simpler,307,"Greetings friends,; As per the developer wish list ( #402) it was decided that boost should be removed from Psi4 as there is little point in keeping it around when all the needed features are in C++11. When removing boost we gain:; - Fewer dependencies; - More canonical operations through C++ standards; - Simpler and more expressive python bindings; - Fewer python lib issues (in theory); - You will no longer get six pages of error messages when boost templates fail in some way; - Build simplification and faster compiler time; - Fewer compiler warning (lots from boost); - Less CI hassle; - There will be a party with cake and burning of a boost effigy (streamed and tweeted); ## . My primary goal is to tackle boost python and convert all existing code to PyBind11. Through this I will tackle the following boost libraries: python, tuple, lexical, shared_ptr, and math. I have a reasonable plan to accomplish this and initial tests show that I should be able to pull it off.; ## . However, there are other libraries that I could use help converting either in the form ideas or some of the grunt work. These are:. Boost filesystem:; - [x] `bin/fisapt/fisapt.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem/operations.hpp>`; - [x] `bin/psi4/export_plugins.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/psi_start.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/python.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/csg.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/cubeprop.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libefp_solver/efp_solver.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/filesystem.hpp>`. For most of these we would likely let Python handle the filesystem paths and just pass them into C-side as a `std::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450
https://github.com/psi4/psi4/issues/450:491,Usability,simpl,simplification,491,"Greetings friends,; As per the developer wish list ( #402) it was decided that boost should be removed from Psi4 as there is little point in keeping it around when all the needed features are in C++11. When removing boost we gain:; - Fewer dependencies; - More canonical operations through C++ standards; - Simpler and more expressive python bindings; - Fewer python lib issues (in theory); - You will no longer get six pages of error messages when boost templates fail in some way; - Build simplification and faster compiler time; - Fewer compiler warning (lots from boost); - Less CI hassle; - There will be a party with cake and burning of a boost effigy (streamed and tweeted); ## . My primary goal is to tackle boost python and convert all existing code to PyBind11. Through this I will tackle the following boost libraries: python, tuple, lexical, shared_ptr, and math. I have a reasonable plan to accomplish this and initial tests show that I should be able to pull it off.; ## . However, there are other libraries that I could use help converting either in the form ideas or some of the grunt work. These are:. Boost filesystem:; - [x] `bin/fisapt/fisapt.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem/operations.hpp>`; - [x] `bin/psi4/export_plugins.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/psi_start.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/python.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/csg.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/cubeprop.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libefp_solver/efp_solver.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/filesystem.hpp>`. For most of these we would likely let Python handle the filesystem paths and just pass them into C-side as a `std::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450
https://github.com/psi4/psi4/pull/451:110,Availability,avail,available,110,"## Todos; - [x] This prevents partial frequencies from hanging (causing ctest timeout) when analytic freq are available and user hasn't specified a findif.; - [x] Clarifies extrapolations syntax with e.g., aug-cc-pv(d+d)z basis sets used; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/451
https://github.com/psi4/psi4/pull/451:78,Safety,timeout,timeout,78,"## Todos; - [x] This prevents partial frequencies from hanging (causing ctest timeout) when analytic freq are available and user hasn't specified a findif.; - [x] Clarifies extrapolations syntax with e.g., aug-cc-pv(d+d)z basis sets used; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/451
https://github.com/psi4/psi4/issues/452:314,Availability,error,error,314,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:1397,Availability,error,errors,1397,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:140,Deployability,install,install,140,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:360,Deployability,install,install,360,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:807,Deployability,install,install,807,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:1253,Deployability,install,install,1253,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:341,Integrability,interface,interfaces,341,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:509,Integrability,interface,interfaces,509,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:668,Integrability,interface,interfaces,668,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:788,Integrability,interface,interfaces,788,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:955,Integrability,interface,interfaces,955,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:1115,Integrability,interface,interfaces,1115,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:1234,Integrability,interface,interfaces,1234,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/issues/452:150,Modifiability,plugin,plugins,150,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452
https://github.com/psi4/psi4/pull/453:390,Availability,avail,available,390,"## Description. The semilocal PW86 exchange functional (PRB 33:8800(R), 1986) is implemented. The dft1 test case includes four test cases for this functional on a water molecule. The energies are compared against the nwchem reference implementation. The PW86PBE exchange-correlation functional (keyword: pw86pbe), built as the combination of PW86 exchange and PBE correlation, is also made available.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/453
https://github.com/psi4/psi4/pull/453:103,Testability,test,test,103,"## Description. The semilocal PW86 exchange functional (PRB 33:8800(R), 1986) is implemented. The dft1 test case includes four test cases for this functional on a water molecule. The energies are compared against the nwchem reference implementation. The PW86PBE exchange-correlation functional (keyword: pw86pbe), built as the combination of PW86 exchange and PBE correlation, is also made available.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/453
https://github.com/psi4/psi4/pull/453:127,Testability,test,test,127,"## Description. The semilocal PW86 exchange functional (PRB 33:8800(R), 1986) is implemented. The dft1 test case includes four test cases for this functional on a water molecule. The energies are compared against the nwchem reference implementation. The PW86PBE exchange-correlation functional (keyword: pw86pbe), built as the combination of PW86 exchange and PBE correlation, is also made available.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/453
https://github.com/psi4/psi4/pull/454:360,Availability,down,down,360,"## Description. The MOLDEN file written by psi4, which can be used by our external programs, is HUGE when a reasonably-sized molecule is calculated using a large basis set. Since for many post-processing purposes the virtual orbitals are unnecessary, it would be interesting to have an option to drop writing most virtual MOs to the file, dramatically cutting down its size. This PR implements the molden_novirtual option to SCF. If true (it is false by default to preserve the original behavior), only the occupied orbitals are written to the molden file in a closed-shell molecule. In an open-shell system, 2*max(nocca,noccb) orbitals are written.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/454
https://github.com/psi4/psi4/issues/455:73,Energy Efficiency,energy,energy,73,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:209,Energy Efficiency,energy,energy,209,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:264,Energy Efficiency,Energy,Energy,264,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:349,Energy Efficiency,ENERGY,ENERGY,349,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:403,Energy Efficiency,ENERGY,ENERGY,403,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:457,Energy Efficiency,ENERGY,ENERGY,457,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:513,Energy Efficiency,ENERGY,ENERGY,513,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:581,Energy Efficiency,ENERGY,ENERGY,581,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:637,Energy Efficiency,ENERGY,ENERGY,637,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:705,Energy Efficiency,Energy,Energy,705,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:1117,Energy Efficiency,Energy,Energy,1117,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/issues/455:276,Modifiability,Variab,Variable,276,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455
https://github.com/psi4/psi4/pull/456:486,Usability,usab,usable,486,"## Description. In the last `cbs()` pass, I refined the encoding of ""an SCF is produced in the course of a CCSD"" to ""a HF is produced in the course of a CCSD"". Unfortunately, I only refined it in a first pass that hit mp2, ccsd, ccsd(t), etc., not the lesser used fno-ccsd(t), mp3, cisd, etc. which can also be extrapolated. The alarming result is that if you used the latter, you'd get that the extrapolation of HF between 0 and –300 is –600.; ## Todos; - [x] Now all methods that are usable in `cbs()` use the same psivar.; ## Status; - [x] Ready to go whenever but not so pressing as to disrupt the CMakeRewrite branch.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/456
https://github.com/psi4/psi4/issues/458:55,Deployability,install,installation,55,"Dear Developers, . I like to know (before doing a full installation of the code) whether the new PSI4 for generation of FCIDUMP file for a subsequent dmrg calculation takes advantage of density fitting or not ?. I remember it performed a full 2-electron integral calculation in serial before entering dmrg calculation in the older version of the code. . Bests; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/458
https://github.com/psi4/psi4/issues/458:226,Performance,perform,performed,226,"Dear Developers, . I like to know (before doing a full installation of the code) whether the new PSI4 for generation of FCIDUMP file for a subsequent dmrg calculation takes advantage of density fitting or not ?. I remember it performed a full 2-electron integral calculation in serial before entering dmrg calculation in the older version of the code. . Bests; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/458
https://github.com/psi4/psi4/issues/460:47,Deployability,install,install,47,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:66,Deployability,install,install,66,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:236,Deployability,Install,Installing,236,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:291,Deployability,Install,Installing,291,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:357,Deployability,Install,Installing,357,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:417,Deployability,Install,Installing,417,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:488,Deployability,Install,Installing,488,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:553,Deployability,Install,Installing,553,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:629,Deployability,Install,Installing,629,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:699,Deployability,Install,Installing,699,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:780,Deployability,Install,Installing,780,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:855,Deployability,Install,Installing,855,There seems to be an eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:941,Deployability,Install,Installing,941, eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/wo,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:1021,Deployability,Install,Installing,1021, eternal loop in the ambit install. Trying to install the current HEAD with ambit enabled results in. -- Up-to-date: /home/work/psi4/psi4/include/psi4/FCMangle.h; -- Up-to-date: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/wo,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:1112,Deployability,Install,Installing,1112,: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:1197,Deployability,Install,Installing,1197,: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:1293,Deployability,Install,Installing,1293,i4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/in,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:1383,Deployability,Install,Installing,1383,i4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/in,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:1484,Deployability,Install,Installing,1484,i4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMan,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:1579,Deployability,Install,Installing,1579,i4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMan,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:1685,Deployability,Install,Installing,1685,alling: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:1785,Deployability,Install,Installing,1785,alling: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:1896,Deployability,Install,Installing,1896,4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/inc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:2001,Deployability,Install,Installing,2001,4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/inc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:2117,Deployability,Install,Installing,2117,si4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4;,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:2227,Deployability,Install,Installing,2227,si4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4;,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:2348,Deployability,Install,Installing,2348,4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:2463,Deployability,Install,Installing,2463,4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:2589,Deployability,Install,Installing,2589,psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:2709,Deployability,Install,Installing,2709,psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:2840,Deployability,Install,Installing,2840,si4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h. (and on and on and on),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:2965,Deployability,Install,Installing,2965,si4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h. (and on and on and on),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:3101,Deployability,Install,Installing,3101,si4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h. (and on and on and on),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:3231,Deployability,Install,Installing,3231,si4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h. (and on and on and on),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:3372,Deployability,Install,Installing,3372,si4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h. (and on and on and on),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:3507,Deployability,Install,Installing,3507,si4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h. (and on and on and on),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:3653,Deployability,Install,Installing,3653,si4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h. (and on and on and on),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/460:3793,Deployability,Install,Installing,3793,si4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h. (and on and on and on),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460
https://github.com/psi4/psi4/issues/463:141,Availability,fault,fault,141,"I just compiled psi4 using Intel compilers 16.0.3 20160415 (icc icpc ifort). When I tested it with opt-irc-1 and opt-irc-2, the segmentation fault appeared. (System Ubuntu 14.04). Output for opt-irc-1: (It seems to be interrupted after the first SCF HESS). ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.0.54 Driver. Git: Rev {master} 8d4cec3 . J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, U. Bozkaya, A. Yu. Sokolov, D. G. A. Smith, R. Di Remigio,; R. M. Richard, J. F. Gonthier, H. R. McAlexander, M. Saitow, and; B. P. Pritchard; -----------------------------------------------------------------------. Psi4 started on: Mon Aug 22 01:48:05 2016. Process ID: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:1986,Energy Efficiency,energy,energy,1986,"rd; -----------------------------------------------------------------------. Psi4 started on: Mon Aug 22 01:48:05 2016. Process ID: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.00000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:2047,Energy Efficiency,energy,energy,2047,"D: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:2059,Energy Efficiency,Energy,Energy,2059,"D: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:2719,Energy Efficiency,charge,charge,2719,"530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c2v symmetry. Rotational constants: A = 10.89064 B = 0.95995 C = 0.88219 [cm^-1]; Rotational constants: A = 326493.09066 B = 28778.51563 C = 26447.33310 [MHz]; Nuclear repulsion = 37.887601626303692. Charge = 0; Multiplicity = 1; Electrons = 18; Nalpha = 9; Nbeta = 9. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:3327,Energy Efficiency,Charge,Charge,3327," mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c2v symmetry. Rotational constants: A = 10.89064 B = 0.95995 C = 0.88219 [cm^-1]; Rotational constants: A = 326493.09066 B = 28778.51563 C = 26447.33310 [MHz]; Nuclear repulsion = 37.887601626303692. Charge = 0; Multiplicity = 1; Electrons = 18; Nalpha = 9; Nbeta = 9. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartesian functions: 42; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 16 16 0 0 0 0; A2 5 5 0 0 0 0; B1 5 5 0 0 0 0; B2 16 16 0 0 0 0; -------------------------------------------------------; Total 42 42 9 9 9 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 183; Algorithm: Cor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:3525,Energy Efficiency,Energy,Energy,3525,"erence; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c2v symmetry. Rotational constants: A = 10.89064 B = 0.95995 C = 0.88219 [cm^-1]; Rotational constants: A = 326493.09066 B = 28778.51563 C = 26447.33310 [MHz]; Nuclear repulsion = 37.887601626303692. Charge = 0; Multiplicity = 1; Electrons = 18; Nalpha = 9; Nbeta = 9. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartesian functions: 42; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 16 16 0 0 0 0; A2 5 5 0 0 0 0; B1 5 5 0 0 0 0; B2 16 16 0 0 0 0; -------------------------------------------------------; Total 42 42 9 9 9 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 62; Number of basis function: 226; Number ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:4815,Energy Efficiency,Energy,Energy,4815,"-------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 16 16 0 0 0 0; A2 5 5 0 0 0 0; B1 5 5 0 0 0 0; B2 16 16 0 0 0 0; -------------------------------------------------------; Total 42 42 9 9 9 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 62; Number of basis function: 226; Number of Cartesian functions: 226; Spherical Harmonics?: false; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 9.4278934862E-03.; Using Symmetric Orthogonalization.; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -151.27216259883716 -1.51272e+02 1.06941e-01 ; @DF-RHF iter 1: -150.75117737973858 5.20985e-01 1.41546e-02 ; @DF-RHF iter 2: -150.80128895895751 -5.01116e-02 4.59853e-03 DIIS; @DF-RHF iter 3: -150.80585921166312 -4.57025e-03 1.25933e-03 DIIS; @DF-RHF iter 4: -150.80646429745690 -6.05086e-04 4.11701e-04 DIIS; @DF-RHF iter 5: -150.80654183074188 -7.75333e-05 7.17643e-05 DIIS; @DF-RHF iter 6: -150.80654589438382 -4.06364e-06 1.72552e-05 DIIS; @DF-RHF iter 7: -150.80654619116103 -2.96777e-07 4.19381e-06 DIIS; @DF-RHF iter 8: -150.80654620932552 -1.81645e-08 7.59453e-07 DIIS; @DF-RHF iter 9: -150.80654620984450 -5.18980e-10 1.53431e-07 DIIS; @DF-RHF iter 10: -150.80654620986070 -1.62004e-11 2.35473e-08 DIIS; @DF-RHF iter 11: -150.80654620986098 -2.84217e-13 4.64793e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:6409,Energy Efficiency,Energy,Energy,6409,"8 7.59453e-07 DIIS; @DF-RHF iter 9: -150.80654620984450 -5.18980e-10 1.53431e-07 DIIS; @DF-RHF iter 10: -150.80654620986070 -1.62004e-11 2.35473e-08 DIIS; @DF-RHF iter 11: -150.80654620986098 -2.84217e-13 4.64793e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic D",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:6441,Energy Efficiency,Energy,Energy,6441,"-RHF iter 9: -150.80654620984450 -5.18980e-10 1.53431e-07 DIIS; @DF-RHF iter 10: -150.80654620986070 -1.62004e-11 2.35473e-08 DIIS; @DF-RHF iter 11: -150.80654620986098 -2.84217e-13 4.64793e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:6506,Energy Efficiency,Energy,Energy,6506,"; @DF-RHF iter 10: -150.80654620986070 -1.62004e-11 2.35473e-08 DIIS; @DF-RHF iter 11: -150.80654620986098 -2.84217e-13 4.64793e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:6549,Energy Efficiency,Energy,Energy,6549," -1.62004e-11 2.35473e-08 DIIS; @DF-RHF iter 11: -150.80654620986098 -2.84217e-13 4.64793e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. D",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:6594,Energy Efficiency,Energy,Energy,6594," 11: -150.80654620986098 -2.84217e-13 4.64793e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:6649,Energy Efficiency,Energy,Energy,6649," DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:6699,Energy Efficiency,Energy,Energy,6699,"u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:6745,Energy Efficiency,Energy,Energy,6745," 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:6778,Energy Efficiency,Energy,Energy,6778,"00485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ------------------------------------------------------------; SCF HESS ; Rob Parrish, Ju",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:6813,Energy Efficiency,Energy,Energy,6813,"1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ------------------------------------------------------------; SCF HESS ; Rob Parrish, Justin Turney, ; Andy Simmonett, and ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:7978,Energy Efficiency,charge,charge,7978,"2 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ------------------------------------------------------------; SCF HESS ; Rob Parrish, Justin Turney, ; Andy Simmonett, and Alex Sokolov ; ------------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Nuclear repulsion = 37.887601626303692. ==> Basis Set <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartesian functions: 42; Spherical Harmonics?: false; Max angular momentum: 2. ==> DFJKGrad: Density-Fitted SCF Gradients <==. Gradient: 2; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 183; Schwarz Cutoff: 0E+00; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 62; Number of basis function: 226; Number of Cartesian functions: 226; Spherical Harmonics?: false; Max angular moment",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:1995,Performance,optimiz,optimize,1995,"rd; -----------------------------------------------------------------------. Psi4 started on: Mon Aug 22 01:48:05 2016. Process ID: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.00000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:2184,Performance,perform,perform,2184,"D: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:4373,Performance,Cache,Cache,4373," Multiplicity = 1; Electrons = 18; Nalpha = 9; Nbeta = 9. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartesian functions: 42; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 16 16 0 0 0 0; A2 5 5 0 0 0 0; B1 5 5 0 0 0 0; B2 16 16 0 0 0 0; -------------------------------------------------------; Total 42 42 9 9 9 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 62; Number of basis function: 226; Number of Cartesian functions: 226; Spherical Harmonics?: false; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 9.4278934862E-03.; Using Symmetric Orthogonalization.; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -151.27216259883716 -1.51272e+02 1.06941e-01 ; @DF-RHF iter 1: -150.75117737973858 5.20985e-01 1.41546e-02 ; @DF-RHF iter 2: -150.80128895895751 -5.01116e-02 4.59853e-03 DIIS; @DF-RHF iter 3: -150.80585921166312 -4.57025e-03 1.25933e-03 DIIS; @DF-RHF iter 4: -150.80646429745690 -6.05086e-04 4.11701e-04 DIIS; @DF-RHF iter 5: -150.80654183074188 -7.75333e-05 7.17643e-05 DIIS; @DF-RHF iter 6: -150.80654589438382 -4.06364e-06 1.72552e-05 DIIS; @DF-RHF iter 7: -150.80654619116103",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:84,Testability,test,tested,84,"I just compiled psi4 using Intel compilers 16.0.3 20160415 (icc icpc ifort). When I tested it with opt-irc-1 and opt-irc-2, the segmentation fault appeared. (System Ubuntu 14.04). Output for opt-irc-1: (It seems to be interrupted after the first SCF HESS). ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.0.54 Driver. Git: Rev {master} 8d4cec3 . J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, U. Bozkaya, A. Yu. Sokolov, D. G. A. Smith, R. Di Remigio,; R. M. Richard, J. F. Gonthier, H. R. McAlexander, M. Saitow, and; B. P. Pritchard; -----------------------------------------------------------------------. Psi4 started on: Mon Aug 22 01:48:05 2016. Process ID: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/463:2087,Testability,TEST,TEST,2087,"D: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463
https://github.com/psi4/psi4/issues/464:131,Availability,error,error,131,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:627,Availability,error,error,627,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:1074,Availability,Error,Error,1074,"However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would still only need 143MB of storage. All the jobs smaller than above run succesfully, and all the jobs l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:1086,Availability,Error,Error,1086,"However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would still only need 143MB of storage. All the jobs smaller than above run succesfully, and all the jobs l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:1093,Availability,Error,Error,1093,"However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would still only need 143MB of storage. All the jobs smaller than above run succesfully, and all the jobs l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:1174,Availability,error,error,1174,"########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would still only need 143MB of storage. All the jobs smaller than above run succesfully, and all the jobs larger than above fail with a similar error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:2140,Availability,error,error,2140,"########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would still only need 143MB of storage. All the jobs smaller than above run succesfully, and all the jobs larger than above fail with a similar error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:772,Deployability,install,install,772,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:948,Deployability,install,install,948,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:823,Energy Efficiency,energy,energy,823,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:849,Energy Efficiency,energy,energy,849,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/issues/464:462,Modifiability,variab,variables,462,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464
https://github.com/psi4/psi4/pull/467:129,Availability,avail,available,129,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share. ; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [ ] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/467
https://github.com/psi4/psi4/pull/467:142,Deployability,install,install,142,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share. ; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [ ] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/467
https://github.com/psi4/psi4/pull/467:63,Testability,test,test,63,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share. ; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [ ] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/467
https://github.com/psi4/psi4/issues/468:1794,Availability,error,error,1794,"ult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:2267,Availability,down,downloaded,2267," Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:2974,Availability,error,errors,2974,"ipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if yo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:3028,Availability,mainten,maintenance,3028," **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:3084,Deployability,update,updated,3084," **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:3111,Deployability,release,release,3111,"epository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on Oc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:3525,Deployability,patch,patch,3525,". These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Cha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:5114,Deployability,release,release,5114," no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [x] Inversion; - [x] History rewrite; - [x] Official 1.1 release; ## . Sincerely,; - Lori, Jet, Andy, and Daniel",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:451,Energy Efficiency,reduce,reduces,451,"Greeting friends,; As you may have heard we are in the process of several fundamental Psi4 change. These include: rewriting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:1104,Energy Efficiency,reduce,reduce,1104,"ting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git reposit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:2432,Energy Efficiency,reduce,reduce,2432,"input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff be",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:2644,Energy Efficiency,Schedul,Schedule,2644,"ow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:695,Integrability,depend,dependancies,695,"Greeting friends,; As you may have heard we are in the process of several fundamental Psi4 change. These include: rewriting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:993,Integrability,depend,depended,993,"Greeting friends,; As you may have heard we are in the process of several fundamental Psi4 change. These include: rewriting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:1800,Integrability,message,messages,1800,"ult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:1887,Integrability,interface,interface,1887,"ormation. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:3655,Integrability,rout,route,3655,". These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Cha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:199,Modifiability,rewrite,rewrite,199,"Greeting friends,; As you may have heard we are in the process of several fundamental Psi4 change. These include: rewriting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:2078,Modifiability,rewrite,rewrite,2078," Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:3417,Modifiability,rewrite,rewrite,3417,"y about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:3776,Modifiability,rewrite,rewrite,3776,"while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh comp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:4094,Modifiability,rewrite,rewrite,4094,"hat contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:4469,Modifiability,Plugin,Plugin,4469," no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [x] Inversion; - [x] History rewrite; - [x] Official 1.1 release; ## . Sincerely,; - Lori, Jet, Andy, and Daniel",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:5024,Modifiability,Rewrite,Rewrite,5024," no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [x] Inversion; - [x] History rewrite; - [x] Official 1.1 release; ## . Sincerely,; - Lori, Jet, Andy, and Daniel",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:5086,Modifiability,rewrite,rewrite,5086," no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [x] Inversion; - [x] History rewrite; - [x] Official 1.1 release; ## . Sincerely,; - Lori, Jet, Andy, and Daniel",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:4290,Testability,test,tested,4290," no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [x] Inversion; - [x] History rewrite; - [x] Official 1.1 release; ## . Sincerely,; - Lori, Jet, Andy, and Daniel",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/issues/468:3397,Usability,learn,learn,3397,"y about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468
https://github.com/psi4/psi4/pull/469:16,Modifiability,Config,Configures,16,"## Description. Configures LGTM properly. In the last cbs() pass, I refined the encoding of ""an SCF is produced in the course of a CCSD"" to ""a HF is produced in the course of a CCSD"". Unfortunately, I only refined it in a first pass that hit mp2, ccsd, ccsd(t), etc., not the lesser used fno-ccsd(t), mp3, cisd, etc. which can also be extrapolated. The alarming result is that if you used the latter, you'd get that the extrapolation of HF between 0 and –300 is –600.; ## Todos; - [x] introduces a `.lgtm` file to define the approval regex and number of approvers.; - [x] Now all methods that are usable in cbs() use the same psivar.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/469
https://github.com/psi4/psi4/pull/469:597,Usability,usab,usable,597,"## Description. Configures LGTM properly. In the last cbs() pass, I refined the encoding of ""an SCF is produced in the course of a CCSD"" to ""a HF is produced in the course of a CCSD"". Unfortunately, I only refined it in a first pass that hit mp2, ccsd, ccsd(t), etc., not the lesser used fno-ccsd(t), mp3, cisd, etc. which can also be extrapolated. The alarming result is that if you used the latter, you'd get that the extrapolation of HF between 0 and –300 is –600.; ## Todos; - [x] introduces a `.lgtm` file to define the approval regex and number of approvers.; - [x] Now all methods that are usable in cbs() use the same psivar.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/469
https://github.com/psi4/psi4/pull/470:129,Availability,avail,available,129,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [x] Ready to go. Looks ready to me, though there may well be further reST changes after viewing the docs build. @robparrish may want to look it over. We'll close the other PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470
https://github.com/psi4/psi4/pull/470:142,Deployability,install,install,142,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [x] Ready to go. Looks ready to me, though there may well be further reST changes after viewing the docs build. @robparrish may want to look it over. We'll close the other PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470
https://github.com/psi4/psi4/pull/470:63,Testability,test,test,63,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [x] Ready to go. Looks ready to me, though there may well be further reST changes after viewing the docs build. @robparrish may want to look it over. We'll close the other PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470
https://github.com/psi4/psi4/pull/471:390,Availability,avail,available,390,"## Description. The semilocal PW86 exchange functional (PRB 33:8800(R), 1986) is implemented. The dft1 test case includes four test cases for this functional on a water molecule. The energies are compared against the nwchem reference implementation. The PW86PBE exchange-correlation functional (keyword: pw86pbe), built as the combination of PW86 exchange and PBE correlation, is also made available.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/471
https://github.com/psi4/psi4/pull/471:103,Testability,test,test,103,"## Description. The semilocal PW86 exchange functional (PRB 33:8800(R), 1986) is implemented. The dft1 test case includes four test cases for this functional on a water molecule. The energies are compared against the nwchem reference implementation. The PW86PBE exchange-correlation functional (keyword: pw86pbe), built as the combination of PW86 exchange and PBE correlation, is also made available.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/471
https://github.com/psi4/psi4/pull/471:127,Testability,test,test,127,"## Description. The semilocal PW86 exchange functional (PRB 33:8800(R), 1986) is implemented. The dft1 test case includes four test cases for this functional on a water molecule. The energies are compared against the nwchem reference implementation. The PW86PBE exchange-correlation functional (keyword: pw86pbe), built as the combination of PW86 exchange and PBE correlation, is also made available.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/471
https://github.com/psi4/psi4/pull/472:360,Availability,down,down,360,"## Description. The MOLDEN file written by psi4, which can be used by our external programs, is HUGE when a reasonably-sized molecule is calculated using a large basis set. Since for many post-processing purposes the virtual orbitals are unnecessary, it would be interesting to have an option to drop writing most virtual MOs to the file, dramatically cutting down its size. This PR implements the molden_novirtual option to SCF. If true (it is false by default to preserve the original behavior), only the occupied orbitals are written to the molden file in a closed-shell molecule. In an open-shell system, 2*max(nocca,noccb) orbitals are written.; ## Questions; - [x] @dgasmith, input file seems unresponsive to `set MOLDEN_WRITE true`. Instead have to keep Wfn and call `molden(Wfn)`. Does that sound right for the new scheme? Otherwise, can just have `molden()` called at end of `energy()` if kw is on. The PR's molden writing was in `src/bin/scf` which is now gone. Is the driver `molden()` the replacement location or did I miss it? Currently set up to be sensitive to `MOLDEN_WITH_VIRTUAL` but whatever's decided about `MOLDEN_WRTIE`, should probably go the same way.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/472
https://github.com/psi4/psi4/pull/472:885,Energy Efficiency,energy,energy,885,"## Description. The MOLDEN file written by psi4, which can be used by our external programs, is HUGE when a reasonably-sized molecule is calculated using a large basis set. Since for many post-processing purposes the virtual orbitals are unnecessary, it would be interesting to have an option to drop writing most virtual MOs to the file, dramatically cutting down its size. This PR implements the molden_novirtual option to SCF. If true (it is false by default to preserve the original behavior), only the occupied orbitals are written to the molden file in a closed-shell molecule. In an open-shell system, 2*max(nocca,noccb) orbitals are written.; ## Questions; - [x] @dgasmith, input file seems unresponsive to `set MOLDEN_WRITE true`. Instead have to keep Wfn and call `molden(Wfn)`. Does that sound right for the new scheme? Otherwise, can just have `molden()` called at end of `energy()` if kw is on. The PR's molden writing was in `src/bin/scf` which is now gone. Is the driver `molden()` the replacement location or did I miss it? Currently set up to be sensitive to `MOLDEN_WITH_VIRTUAL` but whatever's decided about `MOLDEN_WRTIE`, should probably go the same way.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/472
https://github.com/psi4/psi4/issues/474:106,Availability,down,down,106,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:194,Deployability,patch,patch,194,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:737,Energy Efficiency,energy,energy,737,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:817,Energy Efficiency,ENERGY,ENERGY,817,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:840,Energy Efficiency,Energy,Energy,840,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:911,Energy Efficiency,ENERGY,ENERGY,911,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:937,Energy Efficiency,Energy,Energy,937,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:1009,Energy Efficiency,ENERGY,ENERGY,1009,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:1032,Energy Efficiency,Energy,Energy,1032,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:1103,Energy Efficiency,ENERGY,ENERGY,1103,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:1129,Energy Efficiency,Energy,Energy,1129,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:223,Testability,test,tests,223,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:302,Testability,test,tests,302,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:850,Testability,TEST,TEST,850,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:947,Testability,TEST,TEST,947,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:1042,Testability,TEST,TEST,1042,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/issues/474:1139,Testability,TEST,TEST,1139,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474
https://github.com/psi4/psi4/pull/475:250,Energy Efficiency,adapt,adapt,250,"## Description. Add Jensen [aug-]pc[[s][seg]-N basis sets; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Add the segmented Jensen basis sets; - [x] Fix up some default auxilliary fns for them; - [x] Need to adapt CBS wrapper [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/driver_cbs.py#L59-L73); ## Questions; - [ ] @jvansan should look it over, particularly the default auxiliary basis sets I chose; ## Status; - [x] Ready to go; ## Other good stuff provided by @jvansan that we don't want to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/475
https://github.com/psi4/psi4/pull/475:260,Integrability,wrap,wrapper,260,"## Description. Add Jensen [aug-]pc[[s][seg]-N basis sets; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Add the segmented Jensen basis sets; - [x] Fix up some default auxilliary fns for them; - [x] Need to adapt CBS wrapper [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/driver_cbs.py#L59-L73); ## Questions; - [ ] @jvansan should look it over, particularly the default auxiliary basis sets I chose; ## Status; - [x] Ready to go; ## Other good stuff provided by @jvansan that we don't want to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/475
https://github.com/psi4/psi4/pull/475:1561,Integrability,wrap,wrapper,1561," to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/475
https://github.com/psi4/psi4/pull/475:2830,Integrability,Contract,Contracted,2830,"rger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/475
https://github.com/psi4/psi4/pull/475:3018,Integrability,Contract,Contracted,3018,"rger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/475
https://github.com/psi4/psi4/pull/475:250,Modifiability,adapt,adapt,250,"## Description. Add Jensen [aug-]pc[[s][seg]-N basis sets; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Add the segmented Jensen basis sets; - [x] Fix up some default auxilliary fns for them; - [x] Need to adapt CBS wrapper [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/driver_cbs.py#L59-L73); ## Questions; - [ ] @jvansan should look it over, particularly the default auxiliary basis sets I chose; ## Status; - [x] Ready to go; ## Other good stuff provided by @jvansan that we don't want to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/475
https://github.com/psi4/psi4/pull/475:1166,Performance,optimiz,optimized,1166," the segmented Jensen basis sets; - [x] Fix up some default auxilliary fns for them; - [x] Need to adapt CBS wrapper [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/driver_cbs.py#L59-L73); ## Questions; - [ ] @jvansan should look it over, particularly the default auxiliary basis sets I chose; ## Status; - [x] Ready to go; ## Other good stuff provided by @jvansan that we don't want to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/475
https://github.com/psi4/psi4/pull/475:3040,Performance,Optimiz,Optimized,3040,"rger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/475
https://github.com/psi4/psi4/pull/475:2693,Safety,Predict,Predicting,2693,"rger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/475
https://github.com/psi4/psi4/issues/476:475,Availability,avail,available,475,"Here lie uses for general Cholesky machinery.; - Fock-type terms in DF-SAPT, particularly higher-order, see #317 ; - If you care about 6-zeta accuracy, you probably oughtn't to be using density fitting. Nevertheless, having orbital basis sets for which _no_ auxiliary is appropriate (even as overkill, like QZ for sto-3g) is troubling for the auxiliary defaulting machinery. On-the-fly construction could help. Maybe a more plausible case is when auxiliary basis sets aren't available for a particular element or for tight functions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/476
https://github.com/psi4/psi4/issues/477:251,Energy Efficiency,energy,energy,251,"When running psi4 with the input file, i.e. psi4 h2.in h2.out. > memory 2500 mb; > ; > molecule h2 {; > H ; > H 1 0.75; > }; > ; > set basis def2-QZVPP; > set FCI true; > set OPDM true; > set OPDM_PRINT true; > set TPDM true; > set TPDM_PRINT true; > energy('detci'). no one-particle density matrix or two-particle density matrix is written to the output file h2.out and other files except the output file h2.out and timer.dat are created.; See also: http://www.psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-opdm-print-detci",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/477
https://github.com/psi4/psi4/pull/479:311,Availability,avail,available,311,"## Description. The open-shell SAPT0 code, with documentation included.; ## Todos; - [x] Implement all open-shell SAPT0 terms; - [x] Add documentation; - [x] Add export of Psi variables; ## Questions; - [ ] When ROHF is requested, we cannot compute the relaxed induction term, hence only unrelaxed induction is available for the Psi variables. For now, I export it in the `SAPT IND20,R ENERGY` and `SAPT EXCH-IND20,R ENERGY` and I issue a warning in the output file that these variables actually contain the unrelaxed induction. This way, the PsiVar machinery computes the total induction energy correctly. @loriab, is that fine ? It should be quite rarely used anyway.; ## Status; - [x] Ready to go, as far as I'm concerned.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/479
https://github.com/psi4/psi4/pull/479:386,Energy Efficiency,ENERGY,ENERGY,386,"## Description. The open-shell SAPT0 code, with documentation included.; ## Todos; - [x] Implement all open-shell SAPT0 terms; - [x] Add documentation; - [x] Add export of Psi variables; ## Questions; - [ ] When ROHF is requested, we cannot compute the relaxed induction term, hence only unrelaxed induction is available for the Psi variables. For now, I export it in the `SAPT IND20,R ENERGY` and `SAPT EXCH-IND20,R ENERGY` and I issue a warning in the output file that these variables actually contain the unrelaxed induction. This way, the PsiVar machinery computes the total induction energy correctly. @loriab, is that fine ? It should be quite rarely used anyway.; ## Status; - [x] Ready to go, as far as I'm concerned.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/479
https://github.com/psi4/psi4/pull/479:417,Energy Efficiency,ENERGY,ENERGY,417,"## Description. The open-shell SAPT0 code, with documentation included.; ## Todos; - [x] Implement all open-shell SAPT0 terms; - [x] Add documentation; - [x] Add export of Psi variables; ## Questions; - [ ] When ROHF is requested, we cannot compute the relaxed induction term, hence only unrelaxed induction is available for the Psi variables. For now, I export it in the `SAPT IND20,R ENERGY` and `SAPT EXCH-IND20,R ENERGY` and I issue a warning in the output file that these variables actually contain the unrelaxed induction. This way, the PsiVar machinery computes the total induction energy correctly. @loriab, is that fine ? It should be quite rarely used anyway.; ## Status; - [x] Ready to go, as far as I'm concerned.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/479
https://github.com/psi4/psi4/pull/479:589,Energy Efficiency,energy,energy,589,"## Description. The open-shell SAPT0 code, with documentation included.; ## Todos; - [x] Implement all open-shell SAPT0 terms; - [x] Add documentation; - [x] Add export of Psi variables; ## Questions; - [ ] When ROHF is requested, we cannot compute the relaxed induction term, hence only unrelaxed induction is available for the Psi variables. For now, I export it in the `SAPT IND20,R ENERGY` and `SAPT EXCH-IND20,R ENERGY` and I issue a warning in the output file that these variables actually contain the unrelaxed induction. This way, the PsiVar machinery computes the total induction energy correctly. @loriab, is that fine ? It should be quite rarely used anyway.; ## Status; - [x] Ready to go, as far as I'm concerned.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/479
https://github.com/psi4/psi4/pull/479:176,Modifiability,variab,variables,176,"## Description. The open-shell SAPT0 code, with documentation included.; ## Todos; - [x] Implement all open-shell SAPT0 terms; - [x] Add documentation; - [x] Add export of Psi variables; ## Questions; - [ ] When ROHF is requested, we cannot compute the relaxed induction term, hence only unrelaxed induction is available for the Psi variables. For now, I export it in the `SAPT IND20,R ENERGY` and `SAPT EXCH-IND20,R ENERGY` and I issue a warning in the output file that these variables actually contain the unrelaxed induction. This way, the PsiVar machinery computes the total induction energy correctly. @loriab, is that fine ? It should be quite rarely used anyway.; ## Status; - [x] Ready to go, as far as I'm concerned.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/479
https://github.com/psi4/psi4/pull/479:333,Modifiability,variab,variables,333,"## Description. The open-shell SAPT0 code, with documentation included.; ## Todos; - [x] Implement all open-shell SAPT0 terms; - [x] Add documentation; - [x] Add export of Psi variables; ## Questions; - [ ] When ROHF is requested, we cannot compute the relaxed induction term, hence only unrelaxed induction is available for the Psi variables. For now, I export it in the `SAPT IND20,R ENERGY` and `SAPT EXCH-IND20,R ENERGY` and I issue a warning in the output file that these variables actually contain the unrelaxed induction. This way, the PsiVar machinery computes the total induction energy correctly. @loriab, is that fine ? It should be quite rarely used anyway.; ## Status; - [x] Ready to go, as far as I'm concerned.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/479
https://github.com/psi4/psi4/pull/479:477,Modifiability,variab,variables,477,"## Description. The open-shell SAPT0 code, with documentation included.; ## Todos; - [x] Implement all open-shell SAPT0 terms; - [x] Add documentation; - [x] Add export of Psi variables; ## Questions; - [ ] When ROHF is requested, we cannot compute the relaxed induction term, hence only unrelaxed induction is available for the Psi variables. For now, I export it in the `SAPT IND20,R ENERGY` and `SAPT EXCH-IND20,R ENERGY` and I issue a warning in the output file that these variables actually contain the unrelaxed induction. This way, the PsiVar machinery computes the total induction energy correctly. @loriab, is that fine ? It should be quite rarely used anyway.; ## Status; - [x] Ready to go, as far as I'm concerned.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/479
https://github.com/psi4/psi4/pull/480:70,Availability,avail,available,70,## Description. Makes all components of the dHF computation in FISAPT available as Psi Variables.; ## Todos; - [x] Export detailed components of FISAPT dHF as Psi variables; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480
https://github.com/psi4/psi4/pull/480:87,Modifiability,Variab,Variables,87,## Description. Makes all components of the dHF computation in FISAPT available as Psi Variables.; ## Todos; - [x] Export detailed components of FISAPT dHF as Psi variables; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480
https://github.com/psi4/psi4/pull/480:163,Modifiability,variab,variables,163,## Description. Makes all components of the dHF computation in FISAPT available as Psi Variables.; ## Todos; - [x] Export detailed components of FISAPT dHF as Psi variables; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480
https://github.com/psi4/psi4/pull/481:242,Integrability,interface,interface,242,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481
https://github.com/psi4/psi4/pull/481:355,Integrability,interface,interface,355,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481
https://github.com/psi4/psi4/pull/481:659,Security,access,accessed,659,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481
https://github.com/psi4/psi4/pull/481:774,Security,access,access,774,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481
https://github.com/psi4/psi4/pull/481:1109,Testability,test,test,1109,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481
https://github.com/psi4/psi4/pull/482:26,Deployability,update,update,26,"## Description. A general update to the MCSCF module within Psi4.; ## Features; - [x] More canonical MCSCF printing, including NO occupation numbers.; - [x] Adds Augmented Hessian iterations.; - [x] Adds the popular MCSCF ""rotate"" command; - [x] Fixed rare segfault on macs.; - [x] Removed many memory leaks.; - [x] Switched a python-based driver for more flexibility in the future.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/482
https://github.com/psi4/psi4/issues/483:488,Performance,perform,perform,488,"We have the following SCF functionality as options:; - guess_read - Uses a previously computed guess orbitals, can cast up; - guess_basis - Computes a small-basis DF guess, can cast up; - broken_symmetry (no test cases, currently disabled); - guess_mix - Conventional orbital guess proceeded by a mixing of orbitals. We can obtain orbitals from:; - Build a guess - HF internal function such as CORE/SAD/etc; - `geuss_Ca/Cb` - HF functions, need to be called before `iterations()`. We can perform the following internal conversions:; - Cast between basis sets, however not between symmetries; - Cast occupations between symmetries; - Build orbitals from a Fock guess. We can set occupation numbers in the following manner:; - Read from Nalpha/Nbeta; - User defined docc/socc; - Broken_symmetry forcing; - Read in occupation. As these are not mutually exclusive options a user can get some strange results for edge cases. Currently the following hierarchy is implemented:; 1. User `DOCC`/`SOCC` always takes precedence (occasionally after the first iteration in SAD/cast examples); 2. `guess_read` occupation values _unless_ the reference has changed; 3. Nalpha/Nbeta as determined by the number of electrons and multiplicity. SCF is a bit strange as it is (effectively) the only wavefunction originator within Psi4 and cannot take in a reference_wavefunction. Some operations could be simplified if SCF could take in a wavefunction and always use the incoming values as its defaults. In addition, the current scheme could lead to some confusion if for example `broken_symmetry` and `DOCC` were both set. Its not overwhelmingly clear to me what the exact hierarchy should be and it may not be possible to catch every invalid input. Those of you who require strict SCF input settings should probably comment on what this logic should look like. As some of this logic has been reworked in the latest commits, difficult test cases should be tried. See issues, #421, #420, and #419.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/483
https://github.com/psi4/psi4/issues/483:208,Testability,test,test,208,"We have the following SCF functionality as options:; - guess_read - Uses a previously computed guess orbitals, can cast up; - guess_basis - Computes a small-basis DF guess, can cast up; - broken_symmetry (no test cases, currently disabled); - guess_mix - Conventional orbital guess proceeded by a mixing of orbitals. We can obtain orbitals from:; - Build a guess - HF internal function such as CORE/SAD/etc; - `geuss_Ca/Cb` - HF functions, need to be called before `iterations()`. We can perform the following internal conversions:; - Cast between basis sets, however not between symmetries; - Cast occupations between symmetries; - Build orbitals from a Fock guess. We can set occupation numbers in the following manner:; - Read from Nalpha/Nbeta; - User defined docc/socc; - Broken_symmetry forcing; - Read in occupation. As these are not mutually exclusive options a user can get some strange results for edge cases. Currently the following hierarchy is implemented:; 1. User `DOCC`/`SOCC` always takes precedence (occasionally after the first iteration in SAD/cast examples); 2. `guess_read` occupation values _unless_ the reference has changed; 3. Nalpha/Nbeta as determined by the number of electrons and multiplicity. SCF is a bit strange as it is (effectively) the only wavefunction originator within Psi4 and cannot take in a reference_wavefunction. Some operations could be simplified if SCF could take in a wavefunction and always use the incoming values as its defaults. In addition, the current scheme could lead to some confusion if for example `broken_symmetry` and `DOCC` were both set. Its not overwhelmingly clear to me what the exact hierarchy should be and it may not be possible to catch every invalid input. Those of you who require strict SCF input settings should probably comment on what this logic should look like. As some of this logic has been reworked in the latest commits, difficult test cases should be tried. See issues, #421, #420, and #419.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/483
https://github.com/psi4/psi4/issues/483:1818,Testability,log,logic,1818,"We have the following SCF functionality as options:; - guess_read - Uses a previously computed guess orbitals, can cast up; - guess_basis - Computes a small-basis DF guess, can cast up; - broken_symmetry (no test cases, currently disabled); - guess_mix - Conventional orbital guess proceeded by a mixing of orbitals. We can obtain orbitals from:; - Build a guess - HF internal function such as CORE/SAD/etc; - `geuss_Ca/Cb` - HF functions, need to be called before `iterations()`. We can perform the following internal conversions:; - Cast between basis sets, however not between symmetries; - Cast occupations between symmetries; - Build orbitals from a Fock guess. We can set occupation numbers in the following manner:; - Read from Nalpha/Nbeta; - User defined docc/socc; - Broken_symmetry forcing; - Read in occupation. As these are not mutually exclusive options a user can get some strange results for edge cases. Currently the following hierarchy is implemented:; 1. User `DOCC`/`SOCC` always takes precedence (occasionally after the first iteration in SAD/cast examples); 2. `guess_read` occupation values _unless_ the reference has changed; 3. Nalpha/Nbeta as determined by the number of electrons and multiplicity. SCF is a bit strange as it is (effectively) the only wavefunction originator within Psi4 and cannot take in a reference_wavefunction. Some operations could be simplified if SCF could take in a wavefunction and always use the incoming values as its defaults. In addition, the current scheme could lead to some confusion if for example `broken_symmetry` and `DOCC` were both set. Its not overwhelmingly clear to me what the exact hierarchy should be and it may not be possible to catch every invalid input. Those of you who require strict SCF input settings should probably comment on what this logic should look like. As some of this logic has been reworked in the latest commits, difficult test cases should be tried. See issues, #421, #420, and #419.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/483
https://github.com/psi4/psi4/issues/483:1858,Testability,log,logic,1858,"We have the following SCF functionality as options:; - guess_read - Uses a previously computed guess orbitals, can cast up; - guess_basis - Computes a small-basis DF guess, can cast up; - broken_symmetry (no test cases, currently disabled); - guess_mix - Conventional orbital guess proceeded by a mixing of orbitals. We can obtain orbitals from:; - Build a guess - HF internal function such as CORE/SAD/etc; - `geuss_Ca/Cb` - HF functions, need to be called before `iterations()`. We can perform the following internal conversions:; - Cast between basis sets, however not between symmetries; - Cast occupations between symmetries; - Build orbitals from a Fock guess. We can set occupation numbers in the following manner:; - Read from Nalpha/Nbeta; - User defined docc/socc; - Broken_symmetry forcing; - Read in occupation. As these are not mutually exclusive options a user can get some strange results for edge cases. Currently the following hierarchy is implemented:; 1. User `DOCC`/`SOCC` always takes precedence (occasionally after the first iteration in SAD/cast examples); 2. `guess_read` occupation values _unless_ the reference has changed; 3. Nalpha/Nbeta as determined by the number of electrons and multiplicity. SCF is a bit strange as it is (effectively) the only wavefunction originator within Psi4 and cannot take in a reference_wavefunction. Some operations could be simplified if SCF could take in a wavefunction and always use the incoming values as its defaults. In addition, the current scheme could lead to some confusion if for example `broken_symmetry` and `DOCC` were both set. Its not overwhelmingly clear to me what the exact hierarchy should be and it may not be possible to catch every invalid input. Those of you who require strict SCF input settings should probably comment on what this logic should look like. As some of this logic has been reworked in the latest commits, difficult test cases should be tried. See issues, #421, #420, and #419.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/483
https://github.com/psi4/psi4/issues/483:1915,Testability,test,test,1915,"We have the following SCF functionality as options:; - guess_read - Uses a previously computed guess orbitals, can cast up; - guess_basis - Computes a small-basis DF guess, can cast up; - broken_symmetry (no test cases, currently disabled); - guess_mix - Conventional orbital guess proceeded by a mixing of orbitals. We can obtain orbitals from:; - Build a guess - HF internal function such as CORE/SAD/etc; - `geuss_Ca/Cb` - HF functions, need to be called before `iterations()`. We can perform the following internal conversions:; - Cast between basis sets, however not between symmetries; - Cast occupations between symmetries; - Build orbitals from a Fock guess. We can set occupation numbers in the following manner:; - Read from Nalpha/Nbeta; - User defined docc/socc; - Broken_symmetry forcing; - Read in occupation. As these are not mutually exclusive options a user can get some strange results for edge cases. Currently the following hierarchy is implemented:; 1. User `DOCC`/`SOCC` always takes precedence (occasionally after the first iteration in SAD/cast examples); 2. `guess_read` occupation values _unless_ the reference has changed; 3. Nalpha/Nbeta as determined by the number of electrons and multiplicity. SCF is a bit strange as it is (effectively) the only wavefunction originator within Psi4 and cannot take in a reference_wavefunction. Some operations could be simplified if SCF could take in a wavefunction and always use the incoming values as its defaults. In addition, the current scheme could lead to some confusion if for example `broken_symmetry` and `DOCC` were both set. Its not overwhelmingly clear to me what the exact hierarchy should be and it may not be possible to catch every invalid input. Those of you who require strict SCF input settings should probably comment on what this logic should look like. As some of this logic has been reworked in the latest commits, difficult test cases should be tried. See issues, #421, #420, and #419.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/483
https://github.com/psi4/psi4/issues/483:1384,Usability,simpl,simplified,1384,"We have the following SCF functionality as options:; - guess_read - Uses a previously computed guess orbitals, can cast up; - guess_basis - Computes a small-basis DF guess, can cast up; - broken_symmetry (no test cases, currently disabled); - guess_mix - Conventional orbital guess proceeded by a mixing of orbitals. We can obtain orbitals from:; - Build a guess - HF internal function such as CORE/SAD/etc; - `geuss_Ca/Cb` - HF functions, need to be called before `iterations()`. We can perform the following internal conversions:; - Cast between basis sets, however not between symmetries; - Cast occupations between symmetries; - Build orbitals from a Fock guess. We can set occupation numbers in the following manner:; - Read from Nalpha/Nbeta; - User defined docc/socc; - Broken_symmetry forcing; - Read in occupation. As these are not mutually exclusive options a user can get some strange results for edge cases. Currently the following hierarchy is implemented:; 1. User `DOCC`/`SOCC` always takes precedence (occasionally after the first iteration in SAD/cast examples); 2. `guess_read` occupation values _unless_ the reference has changed; 3. Nalpha/Nbeta as determined by the number of electrons and multiplicity. SCF is a bit strange as it is (effectively) the only wavefunction originator within Psi4 and cannot take in a reference_wavefunction. Some operations could be simplified if SCF could take in a wavefunction and always use the incoming values as its defaults. In addition, the current scheme could lead to some confusion if for example `broken_symmetry` and `DOCC` were both set. Its not overwhelmingly clear to me what the exact hierarchy should be and it may not be possible to catch every invalid input. Those of you who require strict SCF input settings should probably comment on what this logic should look like. As some of this logic has been reworked in the latest commits, difficult test cases should be tried. See issues, #421, #420, and #419.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/483
https://github.com/psi4/psi4/issues/483:1626,Usability,clear,clear,1626,"We have the following SCF functionality as options:; - guess_read - Uses a previously computed guess orbitals, can cast up; - guess_basis - Computes a small-basis DF guess, can cast up; - broken_symmetry (no test cases, currently disabled); - guess_mix - Conventional orbital guess proceeded by a mixing of orbitals. We can obtain orbitals from:; - Build a guess - HF internal function such as CORE/SAD/etc; - `geuss_Ca/Cb` - HF functions, need to be called before `iterations()`. We can perform the following internal conversions:; - Cast between basis sets, however not between symmetries; - Cast occupations between symmetries; - Build orbitals from a Fock guess. We can set occupation numbers in the following manner:; - Read from Nalpha/Nbeta; - User defined docc/socc; - Broken_symmetry forcing; - Read in occupation. As these are not mutually exclusive options a user can get some strange results for edge cases. Currently the following hierarchy is implemented:; 1. User `DOCC`/`SOCC` always takes precedence (occasionally after the first iteration in SAD/cast examples); 2. `guess_read` occupation values _unless_ the reference has changed; 3. Nalpha/Nbeta as determined by the number of electrons and multiplicity. SCF is a bit strange as it is (effectively) the only wavefunction originator within Psi4 and cannot take in a reference_wavefunction. Some operations could be simplified if SCF could take in a wavefunction and always use the incoming values as its defaults. In addition, the current scheme could lead to some confusion if for example `broken_symmetry` and `DOCC` were both set. Its not overwhelmingly clear to me what the exact hierarchy should be and it may not be possible to catch every invalid input. Those of you who require strict SCF input settings should probably comment on what this logic should look like. As some of this logic has been reworked in the latest commits, difficult test cases should be tried. See issues, #421, #420, and #419.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/483
https://github.com/psi4/psi4/issues/484:367,Availability,error,error,367,"The attached input uses basis_guess to specify a basis set for the initial guess: [sapt.zip](https://github.com/psi4/psi4/files/557209/sapt.zip). This worked with a previous PSI4 release. I guess that was 4.0b6 back then. With a recent development version of PSI4 (commit 7e4ecf968ec7920ab404cb357de827cf3785a254, Wed Oct 19 16:52:24 2016 -0400), I get the following error:. ```; toon@molmod49 ~/sapt> psi4 sapt.in . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""/home/toon/.local/bin/psi4"", line 161, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/home/toon/.local/bin/../lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 3133, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1199, in scf_helper; ref_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/.local/lib/psi4/driver/p4util/python_helpers.py"", line 60, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 805, in construct; (at + 1, role, text2)); psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/484
https://github.com/psi4/psi4/issues/484:2351,Availability,robust,robust,2351,"4 sapt.in . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""/home/toon/.local/bin/psi4"", line 161, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/home/toon/.local/bin/../lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 3133, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1199, in scf_helper; ref_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/.local/lib/psi4/driver/p4util/python_helpers.py"", line 60, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 805, in construct; (at + 1, role, text2)); psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: ; ```. Unlike the test cases that come with PSI4, this input explicitly refers to a basis set for the initial guess: cc-pvdz. (That may seem a heavy-handed choice but we found it to be more robust when processing databases of molecular dimers.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/484
https://github.com/psi4/psi4/issues/484:179,Deployability,release,release,179,"The attached input uses basis_guess to specify a basis set for the initial guess: [sapt.zip](https://github.com/psi4/psi4/files/557209/sapt.zip). This worked with a previous PSI4 release. I guess that was 4.0b6 back then. With a recent development version of PSI4 (commit 7e4ecf968ec7920ab404cb357de827cf3785a254, Wed Oct 19 16:52:24 2016 -0400), I get the following error:. ```; toon@molmod49 ~/sapt> psi4 sapt.in . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""/home/toon/.local/bin/psi4"", line 161, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/home/toon/.local/bin/../lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 3133, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1199, in scf_helper; ref_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/.local/lib/psi4/driver/p4util/python_helpers.py"", line 60, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 805, in construct; (at + 1, role, text2)); psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/484
https://github.com/psi4/psi4/issues/484:905,Energy Efficiency,energy,energy,905,"The attached input uses basis_guess to specify a basis set for the initial guess: [sapt.zip](https://github.com/psi4/psi4/files/557209/sapt.zip). This worked with a previous PSI4 release. I guess that was 4.0b6 back then. With a recent development version of PSI4 (commit 7e4ecf968ec7920ab404cb357de827cf3785a254, Wed Oct 19 16:52:24 2016 -0400), I get the following error:. ```; toon@molmod49 ~/sapt> psi4 sapt.in . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""/home/toon/.local/bin/psi4"", line 161, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/home/toon/.local/bin/../lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 3133, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1199, in scf_helper; ref_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/.local/lib/psi4/driver/p4util/python_helpers.py"", line 60, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 805, in construct; (at + 1, role, text2)); psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/484
https://github.com/psi4/psi4/issues/484:931,Energy Efficiency,energy,energy,931,"The attached input uses basis_guess to specify a basis set for the initial guess: [sapt.zip](https://github.com/psi4/psi4/files/557209/sapt.zip). This worked with a previous PSI4 release. I guess that was 4.0b6 back then. With a recent development version of PSI4 (commit 7e4ecf968ec7920ab404cb357de827cf3785a254, Wed Oct 19 16:52:24 2016 -0400), I get the following error:. ```; toon@molmod49 ~/sapt> psi4 sapt.in . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""/home/toon/.local/bin/psi4"", line 161, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/home/toon/.local/bin/../lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 3133, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1199, in scf_helper; ref_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/.local/lib/psi4/driver/p4util/python_helpers.py"", line 60, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 805, in construct; (at + 1, role, text2)); psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/484
https://github.com/psi4/psi4/issues/484:2179,Testability,test,test,2179,"4 sapt.in . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""/home/toon/.local/bin/psi4"", line 161, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/home/toon/.local/bin/../lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 3133, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1199, in scf_helper; ref_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/.local/lib/psi4/driver/p4util/python_helpers.py"", line 60, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 805, in construct; (at + 1, role, text2)); psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: ; ```. Unlike the test cases that come with PSI4, this input explicitly refers to a basis set for the initial guess: cc-pvdz. (That may seem a heavy-handed choice but we found it to be more robust when processing databases of molecular dimers.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/484
https://github.com/psi4/psi4/issues/485:1016,Availability,avail,available,1016,"About time to start patch notes again. As always please modify or comment as permissions allow. Please understand that these notes are not complete.; ## . The Psi4 1.1 update contains large changes to the internal infrastructure. The primary result of the internal changes is that Psi4 is now a normal Python module instead of a executable that calls Python. While these changes are substantial it should be stressed that the current Psi4 input including calling the executable `/bin/psi4` should behave in an identical way to the Psi4 1.0 release. A discussion and overview of the current changes can be found [here](https://github.com/psi4/psi4/issues/468). Points of interest:; - Psi4 is now a Python module (e.g. `python -c ""import psi4""`). [details](https://github.com/psi4/psi4/pull/481); - The build system has been rewritten to allow for more flexibility for external projects in the future. [details](https://github.com/psi4/psi4/pull/442). # New Features; - High-spin open-shell SAPT0 computations are now available.; - MCSCF now has Augmented Hessian as an additional convergence option.; - If Psi4 fails, users are now suggested to purchase developers coffee instead of beer. # Developer notes; - Psi4 now requires C++ 11 to compile (GCC 4.9+, clang 3.3+, Apple clang 6.1+, ICC 2016+). Note that ICC requires GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:20,Deployability,patch,patch,20,"About time to start patch notes again. As always please modify or comment as permissions allow. Please understand that these notes are not complete.; ## . The Psi4 1.1 update contains large changes to the internal infrastructure. The primary result of the internal changes is that Psi4 is now a normal Python module instead of a executable that calls Python. While these changes are substantial it should be stressed that the current Psi4 input including calling the executable `/bin/psi4` should behave in an identical way to the Psi4 1.0 release. A discussion and overview of the current changes can be found [here](https://github.com/psi4/psi4/issues/468). Points of interest:; - Psi4 is now a Python module (e.g. `python -c ""import psi4""`). [details](https://github.com/psi4/psi4/pull/481); - The build system has been rewritten to allow for more flexibility for external projects in the future. [details](https://github.com/psi4/psi4/pull/442). # New Features; - High-spin open-shell SAPT0 computations are now available.; - MCSCF now has Augmented Hessian as an additional convergence option.; - If Psi4 fails, users are now suggested to purchase developers coffee instead of beer. # Developer notes; - Psi4 now requires C++ 11 to compile (GCC 4.9+, clang 3.3+, Apple clang 6.1+, ICC 2016+). Note that ICC requires GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:168,Deployability,update,update,168,"About time to start patch notes again. As always please modify or comment as permissions allow. Please understand that these notes are not complete.; ## . The Psi4 1.1 update contains large changes to the internal infrastructure. The primary result of the internal changes is that Psi4 is now a normal Python module instead of a executable that calls Python. While these changes are substantial it should be stressed that the current Psi4 input including calling the executable `/bin/psi4` should behave in an identical way to the Psi4 1.0 release. A discussion and overview of the current changes can be found [here](https://github.com/psi4/psi4/issues/468). Points of interest:; - Psi4 is now a Python module (e.g. `python -c ""import psi4""`). [details](https://github.com/psi4/psi4/pull/481); - The build system has been rewritten to allow for more flexibility for external projects in the future. [details](https://github.com/psi4/psi4/pull/442). # New Features; - High-spin open-shell SAPT0 computations are now available.; - MCSCF now has Augmented Hessian as an additional convergence option.; - If Psi4 fails, users are now suggested to purchase developers coffee instead of beer. # Developer notes; - Psi4 now requires C++ 11 to compile (GCC 4.9+, clang 3.3+, Apple clang 6.1+, ICC 2016+). Note that ICC requires GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:540,Deployability,release,release,540,"About time to start patch notes again. As always please modify or comment as permissions allow. Please understand that these notes are not complete.; ## . The Psi4 1.1 update contains large changes to the internal infrastructure. The primary result of the internal changes is that Psi4 is now a normal Python module instead of a executable that calls Python. While these changes are substantial it should be stressed that the current Psi4 input including calling the executable `/bin/psi4` should behave in an identical way to the Psi4 1.0 release. A discussion and overview of the current changes can be found [here](https://github.com/psi4/psi4/issues/468). Points of interest:; - Psi4 is now a Python module (e.g. `python -c ""import psi4""`). [details](https://github.com/psi4/psi4/pull/481); - The build system has been rewritten to allow for more flexibility for external projects in the future. [details](https://github.com/psi4/psi4/pull/442). # New Features; - High-spin open-shell SAPT0 computations are now available.; - MCSCF now has Augmented Hessian as an additional convergence option.; - If Psi4 fails, users are now suggested to purchase developers coffee instead of beer. # Developer notes; - Psi4 now requires C++ 11 to compile (GCC 4.9+, clang 3.3+, Apple clang 6.1+, ICC 2016+). Note that ICC requires GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:2274,Deployability,integrat,integration,2274,"s GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:3346,Deployability,install,installed,3346,"and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `PSIDATADIR=/path/to/share/psi4` or `psi4 -l /path/to/share/psi4`.; - wB97X-based functionals were using the 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong.; - `print` in Psithon (input file syntax) no longer processed into `print_out` commands that redirect to output file. Now it means whatever your python print means. ## Suggest adopting conda/conda RN categories:. ### New Features. ### Deprecations/Breaking Changes. ### Improvements. ### Non-User-Facing Changes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:2274,Integrability,integrat,integration,2274,"s GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:2405,Integrability,interface,interface,2405,"are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `P",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:2636,Integrability,interface,interface,2636,"hon-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `PSIDATADIR=/path/to/share/psi4` or `psi4 -l /path/to/share/psi4`.; - wB97X-based functionals were using the 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:2254,Modifiability,variab,variables,2254,"quires C++ 11 to compile (GCC 4.9+, clang 3.3+, Apple clang 6.1+, ICC 2016+). Note that ICC requires GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be u",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:2587,Modifiability,Plugin,Plugins,2587,"hon-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `PSIDATADIR=/path/to/share/psi4` or `psi4 -l /path/to/share/psi4`.; - wB97X-based functionals were using the 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:3084,Modifiability,variab,variable,3084,"and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `PSIDATADIR=/path/to/share/psi4` or `psi4 -l /path/to/share/psi4`.; - wB97X-based functionals were using the 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong.; - `print` in Psithon (input file syntax) no longer processed into `print_out` commands that redirect to output file. Now it means whatever your python print means. ## Suggest adopting conda/conda RN categories:. ### New Features. ### Deprecations/Breaking Changes. ### Improvements. ### Non-User-Facing Changes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/issues/485:2387,Testability,test,tests,2387,"are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `P",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485
https://github.com/psi4/psi4/pull/486:693,Deployability,update,updates,693,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486
https://github.com/psi4/psi4/pull/486:817,Deployability,install,installed,817,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486
https://github.com/psi4/psi4/pull/486:244,Integrability,depend,dependence,244,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486
https://github.com/psi4/psi4/pull/486:683,Integrability,interface,interface,683,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486
https://github.com/psi4/psi4/pull/486:399,Modifiability,variab,variables,399,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486
https://github.com/psi4/psi4/pull/486:614,Testability,log,logic,614,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486
https://github.com/psi4/psi4/pull/486:661,Testability,test,testing,661,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486
https://github.com/psi4/psi4/issues/487:104,Deployability,install,installer,104,"On the semi-manual `psi4conda` [instructions](http://psicode.org/psi4manual/master/conda.html#psi4conda-installer), for both Linux and Mac, the `curl` flag should be changed from `-o` to `-O`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/487
https://github.com/psi4/psi4/pull/488:169,Deployability,release,releases,169,"## Description; More build changes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] enable py3 testing; - [x] fix versioning at releases, allow conda build to get version before build; - [x] fix case where Fortran compilers required, but not detectable, have to be passed in; - [x] dashboard back. ## Questions; - [x] After these two PRs, just waiting on plugins from @jturney . ## Status; - [x] Ready to go **after oct_cmake**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/488
https://github.com/psi4/psi4/pull/488:396,Modifiability,plugin,plugins,396,"## Description; More build changes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] enable py3 testing; - [x] fix versioning at releases, allow conda build to get version before build; - [x] fix case where Fortran compilers required, but not detectable, have to be passed in; - [x] dashboard back. ## Questions; - [x] After these two PRs, just waiting on plugins from @jturney . ## Status; - [x] Ready to go **after oct_cmake**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/488
https://github.com/psi4/psi4/pull/488:283,Safety,detect,detectable,283,"## Description; More build changes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] enable py3 testing; - [x] fix versioning at releases, allow conda build to get version before build; - [x] fix case where Fortran compilers required, but not detectable, have to be passed in; - [x] dashboard back. ## Questions; - [x] After these two PRs, just waiting on plugins from @jturney . ## Status; - [x] Ready to go **after oct_cmake**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/488
https://github.com/psi4/psi4/pull/488:136,Testability,test,testing,136,"## Description; More build changes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] enable py3 testing; - [x] fix versioning at releases, allow conda build to get version before build; - [x] fix case where Fortran compilers required, but not detectable, have to be passed in; - [x] dashboard back. ## Questions; - [x] After these two PRs, just waiting on plugins from @jturney . ## Status; - [x] Ready to go **after oct_cmake**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/488
https://github.com/psi4/psi4/pull/489:465,Availability,Failure,Failure,465,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:16,Deployability,Update,Updates,16,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:305,Deployability,install,install,305,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:530,Deployability,Update,Updates,530,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:24,Modifiability,plugin,plugins,24,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:289,Modifiability,plugin,plugins,289,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:436,Modifiability,config,configuring,436,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:457,Modifiability,plugin,plugin,457,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:498,Modifiability,plugin,plugin,498,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:547,Modifiability,plugin,plugin,547,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:659,Modifiability,plugin,plugin-template,659,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/489:731,Modifiability,plugin,plugin,731,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/489
https://github.com/psi4/psi4/pull/490:16,Deployability,Patch,Patch,16,## Description; Patch to the plugin code to work with ```PYMOD_INSTALL_LIBDIR``` paths. Tested with and without ```PYMOD_INSTALL_LIBDIR``` set to ```/python2.7/site-packages```. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/490
https://github.com/psi4/psi4/pull/490:29,Modifiability,plugin,plugin,29,## Description; Patch to the plugin code to work with ```PYMOD_INSTALL_LIBDIR``` paths. Tested with and without ```PYMOD_INSTALL_LIBDIR``` set to ```/python2.7/site-packages```. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/490
https://github.com/psi4/psi4/pull/490:88,Testability,Test,Tested,88,## Description; Patch to the plugin code to work with ```PYMOD_INSTALL_LIBDIR``` paths. Tested with and without ```PYMOD_INSTALL_LIBDIR``` set to ```/python2.7/site-packages```. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/490
https://github.com/psi4/psi4/issues/491:119,Availability,error,error,119,"When I try to debug psi4 on mac with ""lldb psi4"" I got the following messega:. lldb psi4; (lldb) target create ""psi4""; error: '/Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4' doesn't contain any 'host' platform architectures: x86_64h, x86_64, i386. How we can debug the current psi4? @loriab @dgasmith @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491
https://github.com/psi4/psi4/pull/493:40,Energy Efficiency,energy,energy,40,"## Description; Fix one instance of the energy() function reference not being clickable by changing ""~driver.energy()"" to be ""~psi4.energy()"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Make energy() clickable. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go. Fix energy() function reference to be clickable",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/493
https://github.com/psi4/psi4/pull/493:109,Energy Efficiency,energy,energy,109,"## Description; Fix one instance of the energy() function reference not being clickable by changing ""~driver.energy()"" to be ""~psi4.energy()"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Make energy() clickable. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go. Fix energy() function reference to be clickable",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/493
https://github.com/psi4/psi4/pull/493:132,Energy Efficiency,energy,energy,132,"## Description; Fix one instance of the energy() function reference not being clickable by changing ""~driver.energy()"" to be ""~psi4.energy()"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Make energy() clickable. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go. Fix energy() function reference to be clickable",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/493
https://github.com/psi4/psi4/pull/493:237,Energy Efficiency,energy,energy,237,"## Description; Fix one instance of the energy() function reference not being clickable by changing ""~driver.energy()"" to be ""~psi4.energy()"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Make energy() clickable. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go. Fix energy() function reference to be clickable",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/493
https://github.com/psi4/psi4/pull/493:322,Energy Efficiency,energy,energy,322,"## Description; Fix one instance of the energy() function reference not being clickable by changing ""~driver.energy()"" to be ""~psi4.energy()"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Make energy() clickable. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go. Fix energy() function reference to be clickable",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/493
https://github.com/psi4/psi4/pull/495:68,Availability,error,error,68,## Description; Resolved typo in code which would have given syntax error if copied verbatim. ## Todos; - [x] Fix typo. ## Status; - [x] Ready to go. Corrected print statement in NumPy Views section that was missing a `)'.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/495
https://github.com/psi4/psi4/pull/499:44,Testability,Test,Test,44,## Description; comment line in cceom code. Test of new fork. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [ ] Feature1. ## Questions; - [ ] Question1. ## Status; - [ X] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/499
https://github.com/psi4/psi4/pull/500:43,Energy Efficiency,energy,energy,43,"## Description; Broken hyperlinks to other energy, ... functions corrected. ## Todos; - [x] Fix broken hyperlinks. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/500
https://github.com/psi4/psi4/pull/501:69,Deployability,install,install,69,## Description; The added link gives current instructions for how to install Psi4 from source. ## Status; - [X] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/501
https://github.com/psi4/psi4/issues/502:551,Deployability,update,update,551,"Comments by @lothian in #307:. >I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. ### Notes; - Add tests for these types of EOM cases ; - If there is a bug under here it can probably be fixed in the up coming DPD update",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/502
https://github.com/psi4/psi4/issues/502:56,Testability,test,test,56,"Comments by @lothian in #307:. >I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. ### Notes; - Add tests for these types of EOM cases ; - If there is a bug under here it can probably be fixed in the up coming DPD update",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/502
https://github.com/psi4/psi4/issues/502:437,Testability,test,tests,437,"Comments by @lothian in #307:. >I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. ### Notes; - Add tests for these types of EOM cases ; - If there is a bug under here it can probably be fixed in the up coming DPD update",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/502
https://github.com/psi4/psi4/issues/503:326,Deployability,install,install,326,"[draco:~/src] crawdad% psi4 --new-plugin myplugin; Traceback (most recent call last):; File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'. This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503
https://github.com/psi4/psi4/issues/503:34,Modifiability,plugin,plugin,34,"[draco:~/src] crawdad% psi4 --new-plugin myplugin; Traceback (most recent call last):; File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'. This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503
https://github.com/psi4/psi4/issues/504:411,Energy Efficiency,energy,energy,411,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504
https://github.com/psi4/psi4/issues/504:555,Energy Efficiency,charge,charges,555,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504
https://github.com/psi4/psi4/issues/504:598,Energy Efficiency,Charge,Charges,598,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504
https://github.com/psi4/psi4/issues/504:689,Energy Efficiency,Charge,Charges,689,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504
https://github.com/psi4/psi4/issues/504:988,Energy Efficiency,charge,charges,988,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504
https://github.com/psi4/psi4/issues/504:568,Performance,load,loaded,568,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504
https://github.com/psi4/psi4/issues/504:148,Testability,test,test,148,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504
https://github.com/psi4/psi4/pull/506:873,Integrability,rout,routines,873,"## Description; Coupled Cluster methods in general do not compute the OPDM unless necessary, however when they do need to compute the OPDM they do not communicate that back to the wfn object. This has led to some confusion on the part of users trying to access CC density matrices. (see #504 ). . ~~The ccdensity module will now set `ref_wfn.arrays[""CC_OPDM_A""/""CC_OPDM_B""] ` with the ground state opdm.~~. CCdensity does the MO/AO transformation and sets the ref_wfn Da/Db members internally, no python, and no longer using the `arrays` map. ; ## Features; - CC OPDM can be accessed via wfn object returned from a property calculation that constructs it.; - eom root psivars for dipole/quadrupole components are now properly assigned.; ## Todos; - [x] ~~Python-side code to convert arrays[""CC_OPDM_A/B""] to ref_wfn.Da()/Db()~~; - [x] fix assignment of root psivars for cc routines ; - [x] add tests to check OPDM assignment in wfn through OEProps; ## Questions; - [x] @dgasmith re the suggestion you made in #504 : would that not give us a ref_wfn with two copies of the same data? One held in `ref_wfn.arrays[""CC_OPDM_A""]` and the second in `ref_wfn.Da` ? I think we would want the entry in the arrays table to be freed? . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506
https://github.com/psi4/psi4/pull/506:254,Security,access,access,254,"## Description; Coupled Cluster methods in general do not compute the OPDM unless necessary, however when they do need to compute the OPDM they do not communicate that back to the wfn object. This has led to some confusion on the part of users trying to access CC density matrices. (see #504 ). . ~~The ccdensity module will now set `ref_wfn.arrays[""CC_OPDM_A""/""CC_OPDM_B""] ` with the ground state opdm.~~. CCdensity does the MO/AO transformation and sets the ref_wfn Da/Db members internally, no python, and no longer using the `arrays` map. ; ## Features; - CC OPDM can be accessed via wfn object returned from a property calculation that constructs it.; - eom root psivars for dipole/quadrupole components are now properly assigned.; ## Todos; - [x] ~~Python-side code to convert arrays[""CC_OPDM_A/B""] to ref_wfn.Da()/Db()~~; - [x] fix assignment of root psivars for cc routines ; - [x] add tests to check OPDM assignment in wfn through OEProps; ## Questions; - [x] @dgasmith re the suggestion you made in #504 : would that not give us a ref_wfn with two copies of the same data? One held in `ref_wfn.arrays[""CC_OPDM_A""]` and the second in `ref_wfn.Da` ? I think we would want the entry in the arrays table to be freed? . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506
https://github.com/psi4/psi4/pull/506:575,Security,access,accessed,575,"## Description; Coupled Cluster methods in general do not compute the OPDM unless necessary, however when they do need to compute the OPDM they do not communicate that back to the wfn object. This has led to some confusion on the part of users trying to access CC density matrices. (see #504 ). . ~~The ccdensity module will now set `ref_wfn.arrays[""CC_OPDM_A""/""CC_OPDM_B""] ` with the ground state opdm.~~. CCdensity does the MO/AO transformation and sets the ref_wfn Da/Db members internally, no python, and no longer using the `arrays` map. ; ## Features; - CC OPDM can be accessed via wfn object returned from a property calculation that constructs it.; - eom root psivars for dipole/quadrupole components are now properly assigned.; ## Todos; - [x] ~~Python-side code to convert arrays[""CC_OPDM_A/B""] to ref_wfn.Da()/Db()~~; - [x] fix assignment of root psivars for cc routines ; - [x] add tests to check OPDM assignment in wfn through OEProps; ## Questions; - [x] @dgasmith re the suggestion you made in #504 : would that not give us a ref_wfn with two copies of the same data? One held in `ref_wfn.arrays[""CC_OPDM_A""]` and the second in `ref_wfn.Da` ? I think we would want the entry in the arrays table to be freed? . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506
https://github.com/psi4/psi4/pull/506:894,Testability,test,tests,894,"## Description; Coupled Cluster methods in general do not compute the OPDM unless necessary, however when they do need to compute the OPDM they do not communicate that back to the wfn object. This has led to some confusion on the part of users trying to access CC density matrices. (see #504 ). . ~~The ccdensity module will now set `ref_wfn.arrays[""CC_OPDM_A""/""CC_OPDM_B""] ` with the ground state opdm.~~. CCdensity does the MO/AO transformation and sets the ref_wfn Da/Db members internally, no python, and no longer using the `arrays` map. ; ## Features; - CC OPDM can be accessed via wfn object returned from a property calculation that constructs it.; - eom root psivars for dipole/quadrupole components are now properly assigned.; ## Todos; - [x] ~~Python-side code to convert arrays[""CC_OPDM_A/B""] to ref_wfn.Da()/Db()~~; - [x] fix assignment of root psivars for cc routines ; - [x] add tests to check OPDM assignment in wfn through OEProps; ## Questions; - [x] @dgasmith re the suggestion you made in #504 : would that not give us a ref_wfn with two copies of the same data? One held in `ref_wfn.arrays[""CC_OPDM_A""]` and the second in `ref_wfn.Da` ? I think we would want the entry in the arrays table to be freed? . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506
https://github.com/psi4/psi4/pull/507:38,Integrability,interface,interface,38,## Description; Uses the [new RESTful interface](https://pubchem.ncbi.nlm.nih.gov/pug_rest/PUG_REST.html#_Toc458584218) to get PubChem hits.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes PubChem tests with Python 3. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507
https://github.com/psi4/psi4/pull/507:245,Testability,test,tests,245,## Description; Uses the [new RESTful interface](https://pubchem.ncbi.nlm.nih.gov/pug_rest/PUG_REST.html#_Toc458584218) to get PubChem hits.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes PubChem tests with Python 3. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507
https://github.com/psi4/psi4/issues/508:4721,Availability,error,error,4721,](https://github.com/psi4/psi4private/tree/c4) @loriab; - [ ] [nto](https://github.com/psi4/psi4private/tree/nto) @harls ; - [ ] [ash_fno](https://github.com/psi4/psi4private/tree/ash_fno) Ashutosh Kumar; - [ ] [ecp](https://github.com/psi4/psi4private/tree/ecp) @edeprince3 ; - [ ] [dfcc](https://github.com/psi4/psi4private/tree/dfcc) @andysim ; - [ ] [gfmm_cfmm](https://github.com/psi4/psi4private/tree/gfmm_cfmm) @bill-march; - [x] [asapt](https://github.com/psi4/psi4private/tree/asapt) @robparrish ; - [ ] [xtd](https://github.com/psi4/psi4private/tree/xtd) @harls ; - [ ] [cc](https://github.com/psi4/psi4private/tree/cc) @andysim ; - [x] [clean_python](https://github.com/psi4/psi4private/tree/clean_python) @loriab; - [ ] [gfmm_jk](https://github.com/psi4/psi4private/tree/gfmm_jk) @bill-march; - [ ] clear away old tickets; - **close** ; - [ ] psi4/psi4private#8; - [ ] psi4/psi4private#11 ; - [ ] psi4/psi4private#21 ; - [ ] psi4/psi4private#39 ; - [ ] psi4/psi4private#51 ; - [ ] psi4/psi4private#61 (after @robparrish signs off); - [ ] psi4/psi4private#79 (after @edeprince3 signs off) ; - [x] psi4/psi4private#110; - [x] psi4/psi4private#120 (after @dgasmith extract anything important into devel wishlist); - move to **developers wishlist** copying any good links or comments ; - [ ] psi4/psi4private#5 ; - [ ] psi4/psi4private#6 ; - [ ] psi4/psi4private#13 ; - [ ] psi4/psi4private#14 ; - [ ] psi4/psi4private#18 ; - [ ] psi4/psi4private#46 ; - [ ] psi4/psi4private#50 (keep the link) ; - [ ] psi4/psi4private#53 ; - [ ] psi4/psi4private#57 ; - [ ] psi4/psi4private#74; - **new ticket in psi4/psi4**; - [ ] psi4/psi4private#3 (hit a psio error trying to confirm-or-deny. will try to make gists public); - [ ] psi4/psi4private#16 ; - [ ] psi4/psi4private#20 ; - [ ] psi4/psi4private#54 ; - [ ] psi4/psi4private#75 + psi4/psi4private#92; - [x] repost as a public psi4/psi4betas repo with branches:; - [x] `4.0b1`; - [x] `4.0b2`; - [x] `4.0b3`; - [x] `4.0b4`; - [x] `4.0b5`; - [x] `1.0`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/508
https://github.com/psi4/psi4/issues/508:275,Usability,clear,clear,275,"At the last developers' workshop, we decided to close the longstanding psi4/psi4private repo. However, first we want to make sure we're not losing any good info. The Plan is below. People mentioned need to sign off on the deletion of branches or the closing of issues. - [ ] clear away old branches; - no commits ahead; - [ ] [ccenergy](https://github.com/psi4/psi4private/tree/ccenergy); - [ ] [cctransort](https://github.com/psi4/psi4private/tree/cctransort); - [ ] [rhf_ccsd_t_gradient](https://github.com/psi4/psi4private/tree/rhf_ccsd_t_gradient); - [ ] [ccwavefunction](https://github.com/psi4/psi4private/tree/ccwavefunction); - [ ] [roa](https://github.com/psi4/psi4private/tree/roa); - [ ] [eom_overlap](https://github.com/psi4/psi4private/tree/eom_overlap); - [ ] [optking](https://github.com/psi4/psi4private/tree/optking); - [ ] [ccs](https://github.com/psi4/psi4private/tree/ccs); - [ ] [higher_level_dcft](https://github.com/psi4/psi4private/tree/higher_level_dcft); - [ ] [newbasis](https://github.com/psi4/psi4private/tree/newbasis); - [ ] [broken_code](https://github.com/psi4/psi4private/tree/broken_code); - [ ] [onetep](https://github.com/psi4/psi4private/tree/onetep); - [x] [USAPT](https://github.com/psi4/psi4private/tree/USAPT) @jgonthier ; - [ ] [psi4sofix](https://github.com/psi4/psi4private/tree/psi4sofix) @bennybp; - [ ] [fancy_opts](https://github.com/psi4/psi4private/tree/fancy_opts) @bwb314 ; - [x] [roberto/alt-VPCM](https://github.com/psi4/psi4private/tree/alt-VPCM) @robertodr ; - [x] [VPCM](https://github.com/psi4/psi4private/tree/VPCM) @robertodr ; - [x] [ambit](https://github.com/psi4/psi4private/tree/ambit) @jturney ; - [x] [Rob-pcm](https://github.com/psi4/psi4private/tree/Rob-pcm) @robertodr ; - [ ] [andysim](https://github.com/psi4/psi4private/tree/hessians) @andysim ; - [x] [USAPT_parallel](https://github.com/psi4/psi4private/tree/USAPT_parallel) @jgonthier ; - [x] [PsiAPI](https://github.com/psi4/psi4private/tree/PsiAPI) @ryanmrichard ; - [x] [pc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/508
https://github.com/psi4/psi4/issues/508:3877,Usability,clear,clear,3877,](https://github.com/psi4/psi4private/tree/c4) @loriab; - [ ] [nto](https://github.com/psi4/psi4private/tree/nto) @harls ; - [ ] [ash_fno](https://github.com/psi4/psi4private/tree/ash_fno) Ashutosh Kumar; - [ ] [ecp](https://github.com/psi4/psi4private/tree/ecp) @edeprince3 ; - [ ] [dfcc](https://github.com/psi4/psi4private/tree/dfcc) @andysim ; - [ ] [gfmm_cfmm](https://github.com/psi4/psi4private/tree/gfmm_cfmm) @bill-march; - [x] [asapt](https://github.com/psi4/psi4private/tree/asapt) @robparrish ; - [ ] [xtd](https://github.com/psi4/psi4private/tree/xtd) @harls ; - [ ] [cc](https://github.com/psi4/psi4private/tree/cc) @andysim ; - [x] [clean_python](https://github.com/psi4/psi4private/tree/clean_python) @loriab; - [ ] [gfmm_jk](https://github.com/psi4/psi4private/tree/gfmm_jk) @bill-march; - [ ] clear away old tickets; - **close** ; - [ ] psi4/psi4private#8; - [ ] psi4/psi4private#11 ; - [ ] psi4/psi4private#21 ; - [ ] psi4/psi4private#39 ; - [ ] psi4/psi4private#51 ; - [ ] psi4/psi4private#61 (after @robparrish signs off); - [ ] psi4/psi4private#79 (after @edeprince3 signs off) ; - [x] psi4/psi4private#110; - [x] psi4/psi4private#120 (after @dgasmith extract anything important into devel wishlist); - move to **developers wishlist** copying any good links or comments ; - [ ] psi4/psi4private#5 ; - [ ] psi4/psi4private#6 ; - [ ] psi4/psi4private#13 ; - [ ] psi4/psi4private#14 ; - [ ] psi4/psi4private#18 ; - [ ] psi4/psi4private#46 ; - [ ] psi4/psi4private#50 (keep the link) ; - [ ] psi4/psi4private#53 ; - [ ] psi4/psi4private#57 ; - [ ] psi4/psi4private#74; - **new ticket in psi4/psi4**; - [ ] psi4/psi4private#3 (hit a psio error trying to confirm-or-deny. will try to make gists public); - [ ] psi4/psi4private#16 ; - [ ] psi4/psi4private#20 ; - [ ] psi4/psi4private#54 ; - [ ] psi4/psi4private#75 + psi4/psi4private#92; - [x] repost as a public psi4/psi4betas repo with branches:; - [x] `4.0b1`; - [x] `4.0b2`; - [x] `4.0b3`; - [x] `4.0b4`; - [x] `4.0b5`; - [x] `1.0`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/508
https://github.com/psi4/psi4/pull/509:81,Integrability,interface,interface,81,## Description; Provides serialized input and output capabilities through a JSON interface. This is an experimental feature and the JSON interface itself will likely evolve significantly over various iterations. ## Features; - `psi4 --json data.json` is now a valid Psi input.; - All python based exceptions (not just Psi exceptions) in Psithon should now be printed to the Psi output as well as stdout.; - Dimension objects now have an `__iter__` attribute. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/509
https://github.com/psi4/psi4/pull/509:137,Integrability,interface,interface,137,## Description; Provides serialized input and output capabilities through a JSON interface. This is an experimental feature and the JSON interface itself will likely evolve significantly over various iterations. ## Features; - `psi4 --json data.json` is now a valid Psi input.; - All python based exceptions (not just Psi exceptions) in Psithon should now be printed to the Psi output as well as stdout.; - Dimension objects now have an `__iter__` attribute. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/509
https://github.com/psi4/psi4/pull/509:166,Modifiability,evolve,evolve,166,## Description; Provides serialized input and output capabilities through a JSON interface. This is an experimental feature and the JSON interface itself will likely evolve significantly over various iterations. ## Features; - `psi4 --json data.json` is now a valid Psi input.; - All python based exceptions (not just Psi exceptions) in Psithon should now be printed to the Psi output as well as stdout.; - Dimension objects now have an `__iter__` attribute. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/509
https://github.com/psi4/psi4/pull/510:455,Deployability,Release,Release,455,"## Description; improve CI testing. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Use miniconda as a source for cmake, python, numpy, libint, libefp, gdma, libxc; - [x] Add a build case with python 3.5 (the clang 3.6, since it's the shortest); - [x] No more AM<=4 restrictions on quicktests. We should probably continue to keep tests runable w/default (AM=5) integrals, but Travis now using AM=7.; - [x] solicit Release Notes through PR template; - [x] fix up tagline; - [x] make docs build, and thus conda package, py3 compatible. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510
https://github.com/psi4/psi4/pull/510:27,Testability,test,testing,27,"## Description; improve CI testing. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Use miniconda as a source for cmake, python, numpy, libint, libefp, gdma, libxc; - [x] Add a build case with python 3.5 (the clang 3.6, since it's the shortest); - [x] No more AM<=4 restrictions on quicktests. We should probably continue to keep tests runable w/default (AM=5) integrals, but Travis now using AM=7.; - [x] solicit Release Notes through PR template; - [x] fix up tagline; - [x] make docs build, and thus conda package, py3 compatible. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510
https://github.com/psi4/psi4/pull/510:371,Testability,test,tests,371,"## Description; improve CI testing. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Use miniconda as a source for cmake, python, numpy, libint, libefp, gdma, libxc; - [x] Add a build case with python 3.5 (the clang 3.6, since it's the shortest); - [x] No more AM<=4 restrictions on quicktests. We should probably continue to keep tests runable w/default (AM=5) integrals, but Travis now using AM=7.; - [x] solicit Release Notes through PR template; - [x] fix up tagline; - [x] make docs build, and thus conda package, py3 compatible. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510
https://github.com/psi4/psi4/pull/511:1340,Energy Efficiency,energy,energy,1340,"## Description; Adds a helper functions to aid in options parsing from a Python input. For example currently one must do:. ```python; psi4.core.set_global_option(""SCF_TYPE"", ""DF""); psi4.core.set_global_option(""BASIS"", ""6-31G""); ...; ```. Through the new helper you can set options by:; ```python; psi4.set_options({""SCF_TYPE"": ""DF"",; ""BASIS"": ""6-31G""}); ```. The question comes into play of what about local options:. Scheme 1:; ```python; psi4.set_module_options(""SCF"", {""SCF_TYPE"": ""DF"", ...}); ```; or; ```python; psi4.set_module_options({""SCF"", {""SCF_TYPE"": ""DF"", ...},; ""DFMP2"", {""MP2_TYPE"": ""DF"", ...}}); ```. Scheme 2:; ```python; psi4.set_options([[""SCF_TYPE"", ""DF""], # 2 parameters - global; [""SCF"", ""SCF_TYPE"", ""DF""]]) # 3 parameters - local; ```. Scheme 3:; ```python; psi4.core.set_local_option(""SCF"", ""SCF_TYPE"", ""DF""); ```. Scheme 3 is the current setup where we leave local options alone as they are not all that common. . From writing quite a bit of Python-based Psi4 this is quite annoying and *something* needs to be done with globals at the very least. Hopefully we can figure out a logical local scheme as well. . As a note we are looking into ways to override global options. For example, the following could be a scheme that would accomplish this:. ```python; mol = psi4.geometry(""He""); opt = {""SCF_TYPE"": ""DF""}; psi4.energy('SCF', molecule=mol, options=opt); ```. Thoughts on any of the choices?. ## Questions; - [x] Decision on global options input; - [x] Decision on local options input. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511
https://github.com/psi4/psi4/pull/511:1102,Testability,log,logical,1102,"## Description; Adds a helper functions to aid in options parsing from a Python input. For example currently one must do:. ```python; psi4.core.set_global_option(""SCF_TYPE"", ""DF""); psi4.core.set_global_option(""BASIS"", ""6-31G""); ...; ```. Through the new helper you can set options by:; ```python; psi4.set_options({""SCF_TYPE"": ""DF"",; ""BASIS"": ""6-31G""}); ```. The question comes into play of what about local options:. Scheme 1:; ```python; psi4.set_module_options(""SCF"", {""SCF_TYPE"": ""DF"", ...}); ```; or; ```python; psi4.set_module_options({""SCF"", {""SCF_TYPE"": ""DF"", ...},; ""DFMP2"", {""MP2_TYPE"": ""DF"", ...}}); ```. Scheme 2:; ```python; psi4.set_options([[""SCF_TYPE"", ""DF""], # 2 parameters - global; [""SCF"", ""SCF_TYPE"", ""DF""]]) # 3 parameters - local; ```. Scheme 3:; ```python; psi4.core.set_local_option(""SCF"", ""SCF_TYPE"", ""DF""); ```. Scheme 3 is the current setup where we leave local options alone as they are not all that common. . From writing quite a bit of Python-based Psi4 this is quite annoying and *something* needs to be done with globals at the very least. Hopefully we can figure out a logical local scheme as well. . As a note we are looking into ways to override global options. For example, the following could be a scheme that would accomplish this:. ```python; mol = psi4.geometry(""He""); opt = {""SCF_TYPE"": ""DF""}; psi4.energy('SCF', molecule=mol, options=opt); ```. Thoughts on any of the choices?. ## Questions; - [x] Decision on global options input; - [x] Decision on local options input. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511
https://github.com/psi4/psi4/pull/515:447,Integrability,rout,routine,447,"## Description; Completely changes the algorithm used for fitting diatomic potentials from Lagrange interpolations (was tens of thousands of lines of Python) to using [weighted least squares](http://dx.doi.org/10.1063/1.4862157), which can be implemented with a couple of lines of Python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Remove the old interpolation code.; - [x] Add weighted least squares routine.; - [x] Add exception to handle non-convergent cases.; - [x] Document changes.; - [x] New function to plot the fit to screen/file using matplotlib. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/515
https://github.com/psi4/psi4/issues/516:334,Availability,down,download,334,"The new CMake system documentation is primarily in the comments within the top level CMakeLists.txt. I have noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /hom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:983,Availability,error,errors,983,"The new CMake system documentation is primarily in the comments within the top level CMakeLists.txt. I have noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /hom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:2361,Availability,Error,Error,2361,"Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:2798,Availability,error,errors,2798,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:3138,Availability,down,download,3138,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:689,Deployability,install,installed,689,"The new CMake system documentation is primarily in the comments within the top level CMakeLists.txt. I have noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /hom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:2430,Deployability,configurat,configuration,2430,"; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:2554,Deployability,install,installation,2554,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:2760,Deployability,install,installed,2760,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1013,Integrability,message,message,1013,"The new CMake system documentation is primarily in the comments within the top level CMakeLists.txt. I have noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /hom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1044,Modifiability,config,configure,1044,"ave noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:2430,Modifiability,config,configuration,2430,"; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:2532,Modifiability,config,config,2532,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:2774,Modifiability,Config,Configuring,2774,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1033,Performance,Perform,Performing,1033,"ave noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1076,Performance,load,loading,1076,"ave noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1092,Performance,cache,cache,1092,"ave noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1180,Performance,cache,cache,1180,"ave noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:667,Safety,detect,detect,667,"The new CMake system documentation is primarily in the comments within the top level CMakeLists.txt. I have noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /hom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1447,Safety,Detect,Detecting,1447," cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1481,Safety,Detect,Detecting,1481," cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1522,Safety,Detect,Detecting,1522," cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1555,Safety,Detect,Detecting,1555," cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1754,Safety,Detect,Detecting,1754,"ry and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1790,Safety,Detect,Detecting,1790,"ry and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1833,Safety,Detect,Detecting,1833,"ry and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:1868,Safety,Detect,Detecting,1868,"ry and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:3186,Safety,detect,detected,3186,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/issues/516:3257,Safety,detect,detecting,3257,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/516
https://github.com/psi4/psi4/pull/519:448,Deployability,Release,Release,448,"## Todos; * **Developer Interest**; - [x] fixed `CMAKE_DISABLE_FIND_PACKAGE_Addon` so that proj builds internally and only that build used; - [x] by analogy to psi4/meta, splitting up `LICENSE` and `CITATION` should allow GH to detect us and put a license box on page; - [x] pybind11 bumped; - [x] `qc_module` as local option is ineffective, so forced `cisd-h2o-clpse` to test detci, not fnocc.; - [x] py3-ed the share/scripts; * **User-Facing for Release Notes**; - [x] tag CheMPS2 at `1.8.3`. ## Questions; - [x] @amjames, look over the ""CC ROOT"" commit, please. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/519
https://github.com/psi4/psi4/pull/519:228,Safety,detect,detect,228,"## Todos; * **Developer Interest**; - [x] fixed `CMAKE_DISABLE_FIND_PACKAGE_Addon` so that proj builds internally and only that build used; - [x] by analogy to psi4/meta, splitting up `LICENSE` and `CITATION` should allow GH to detect us and put a license box on page; - [x] pybind11 bumped; - [x] `qc_module` as local option is ineffective, so forced `cisd-h2o-clpse` to test detci, not fnocc.; - [x] py3-ed the share/scripts; * **User-Facing for Release Notes**; - [x] tag CheMPS2 at `1.8.3`. ## Questions; - [x] @amjames, look over the ""CC ROOT"" commit, please. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/519
https://github.com/psi4/psi4/pull/519:372,Testability,test,test,372,"## Todos; * **Developer Interest**; - [x] fixed `CMAKE_DISABLE_FIND_PACKAGE_Addon` so that proj builds internally and only that build used; - [x] by analogy to psi4/meta, splitting up `LICENSE` and `CITATION` should allow GH to detect us and put a license box on page; - [x] pybind11 bumped; - [x] `qc_module` as local option is ineffective, so forced `cisd-h2o-clpse` to test detci, not fnocc.; - [x] py3-ed the share/scripts; * **User-Facing for Release Notes**; - [x] tag CheMPS2 at `1.8.3`. ## Questions; - [x] @amjames, look over the ""CC ROOT"" commit, please. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/519
https://github.com/psi4/psi4/pull/520:332,Performance,perform,performs,332,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520
https://github.com/psi4/psi4/pull/520:397,Performance,perform,performs,397,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520
https://github.com/psi4/psi4/pull/520:962,Testability,test,test,962,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520
https://github.com/psi4/psi4/pull/520:1390,Testability,test,test,1390,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520
https://github.com/psi4/psi4/pull/520:1455,Testability,test,test,1455,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520
https://github.com/psi4/psi4/pull/520:1112,Usability,guid,guidance,1112,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520
https://github.com/psi4/psi4/issues/521:642,Energy Efficiency,Energy,Energy,642,"Dear Developers, . I try to calculate excited states of H2 molecule using this input file : . molecule H2 { ; H -0.3836975 0.0000000 0.0000000 ; H 0.3836975 0.0000000 0.0000000; units ang; }. set basis aug-cc-pvqz ; set scf_type df; #set guess sad; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set freeze_core true; set roots_per_irrep [4,4,4,4,4,4,4,4]; set maxiter 100000. property('eom-ccsd', properties=['oscillator_strength']); ---------------------------------------------------------------------------------------------; However, for some of excited states i obtain 0 eV !. Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 12.964 104563.7 95.6 0.476427 0.0000 0.0000 0.0000 0.000000E+00; 	 2 Ag 16.771 135268.5 73.9 0.616329 0.0000 0.0000 0.0000 0.000000E+00; 	 3 Ag 18.773 151418.0 66.0 0.689911 0.0000 0.0000 0.0000 0.000000E+00; 	 4 Ag 25.910 208979.2 47.9 0.952179 0.0000 0.0000 0.0000 0.000000E+00; 	 1B1g 16.855 135946.4 73.6 0.619417 0.0000 0.0000 0.0000 0.000000E+00; 	 2B1g 19.351 156077.5 64.1 0.711142 0.0000 0.0000 0.0000 0.000000E+00; 	 3B1g 19.458 156942.8 63.7 0.715084 0.0000 0.0000 0.0000 0.000000E+00; 	 4B1g 19.513 157382.5 63.5 0.717087 0.0000 0.0000 0.0000 0.000000E+00; 	 1B2g 0.000 0.0 287864613790050.6 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 2B2g 0.000 0.0 168701352313695.2 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 3B2g 0.000 0.0 111616374313896.7 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 4B2g 0.000 0.0 95015600179548.7 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 1B3g 0.000 0.0 276652168953733.3 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 2B3g 0.000 0.0 202756770901990.0 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 3B3g 0.000 0.0 135821991365655.0 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 4B3g 0.000 0.0 114346140595797.4 0.000000 0.0000 0.0000 0.0000 0.000000E+00. 	 1 Au 0.000 0.0 300704927659592.6 0.000000 0.0000 0.0000 0.0000 0.00000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/521
https://github.com/psi4/psi4/issues/522:118,Availability,error,errors,118,"Dear all, . I try to compile PSI4 from github with intel 2017 compiler; CXX=icpc CC=icc cmake .. , however i get some errors.; Please see the attached file.; [psi4_error.txt](https://github.com/psi4/psi4/files/601557/psi4_error.txt). LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522
https://github.com/psi4/psi4/issues/523:60,Availability,error,error,60,"Dear all, . when using eom-ccsd module, i get the following error : . -----------------------------------------------------------------------------------------------; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=8 Out-of-core algorithm not yet coded for NN or TT DGEMM.; Error in: contract444; -----------------------------------------------------------------------------------------------. however, when i increase the number of frozen virtual orbitals, the error disappears !. here the input for which i get the error : . molecule pentamer { ; O -2.611 -0.00565 0.45789 ; O -1.30452 2.25724 -0.45568 ; O -2.611 4.51335 0.45789 ; O 1.30257 2.25385 0.45789 ; O -1.301 2.2647 -3.22291 ; H -2.63261 -0.00107 1.44733 ; H -2.63261 4.51793 1.44733 ; H 1.28096 2.25843 1.44733 ; H -1.31578 2.28044 -2.23347 ; H -1.7735 3.07887 -3.52876 ; H 0.36131 2.25462 0.1513 ; H -3.55226 -0.00488 0.1513 ; H -3.55226 4.51412 0.1513 ; H -1.78841 3.05064 -0.11356 ; H -1.78963 1.46139 -0.12277; units ang; SYMMETRY C1; }. set basis aug-cc-pvdz ; set scf_type df; set guess sad; set reference rhf; set e_convergence 1e-05; set d_convergence 1e-05; set ints_tolerance 1e-08. set FROZEN_DOCC [10]; set frozen_uocc [15]. #set freeze_core true; set roots_per_irrep [8]; set maxiter 100000; property('eom-ccsd', properties=['oscillator_strength'])",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/523
https://github.com/psi4/psi4/issues/523:341,Availability,Error,Error,341,"Dear all, . when using eom-ccsd module, i get the following error : . -----------------------------------------------------------------------------------------------; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=8 Out-of-core algorithm not yet coded for NN or TT DGEMM.; Error in: contract444; -----------------------------------------------------------------------------------------------. however, when i increase the number of frozen virtual orbitals, the error disappears !. here the input for which i get the error : . molecule pentamer { ; O -2.611 -0.00565 0.45789 ; O -1.30452 2.25724 -0.45568 ; O -2.611 4.51335 0.45789 ; O 1.30257 2.25385 0.45789 ; O -1.301 2.2647 -3.22291 ; H -2.63261 -0.00107 1.44733 ; H -2.63261 4.51793 1.44733 ; H 1.28096 2.25843 1.44733 ; H -1.31578 2.28044 -2.23347 ; H -1.7735 3.07887 -3.52876 ; H 0.36131 2.25462 0.1513 ; H -3.55226 -0.00488 0.1513 ; H -3.55226 4.51412 0.1513 ; H -1.78841 3.05064 -0.11356 ; H -1.78963 1.46139 -0.12277; units ang; SYMMETRY C1; }. set basis aug-cc-pvdz ; set scf_type df; set guess sad; set reference rhf; set e_convergence 1e-05; set d_convergence 1e-05; set ints_tolerance 1e-08. set FROZEN_DOCC [10]; set frozen_uocc [15]. #set freeze_core true; set roots_per_irrep [8]; set maxiter 100000; property('eom-ccsd', properties=['oscillator_strength'])",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/523
https://github.com/psi4/psi4/issues/523:529,Availability,error,error,529,"Dear all, . when using eom-ccsd module, i get the following error : . -----------------------------------------------------------------------------------------------; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=8 Out-of-core algorithm not yet coded for NN or TT DGEMM.; Error in: contract444; -----------------------------------------------------------------------------------------------. however, when i increase the number of frozen virtual orbitals, the error disappears !. here the input for which i get the error : . molecule pentamer { ; O -2.611 -0.00565 0.45789 ; O -1.30452 2.25724 -0.45568 ; O -2.611 4.51335 0.45789 ; O 1.30257 2.25385 0.45789 ; O -1.301 2.2647 -3.22291 ; H -2.63261 -0.00107 1.44733 ; H -2.63261 4.51793 1.44733 ; H 1.28096 2.25843 1.44733 ; H -1.31578 2.28044 -2.23347 ; H -1.7735 3.07887 -3.52876 ; H 0.36131 2.25462 0.1513 ; H -3.55226 -0.00488 0.1513 ; H -3.55226 4.51412 0.1513 ; H -1.78841 3.05064 -0.11356 ; H -1.78963 1.46139 -0.12277; units ang; SYMMETRY C1; }. set basis aug-cc-pvdz ; set scf_type df; set guess sad; set reference rhf; set e_convergence 1e-05; set d_convergence 1e-05; set ints_tolerance 1e-08. set FROZEN_DOCC [10]; set frozen_uocc [15]. #set freeze_core true; set roots_per_irrep [8]; set maxiter 100000; property('eom-ccsd', properties=['oscillator_strength'])",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/523
https://github.com/psi4/psi4/issues/523:584,Availability,error,error,584,"Dear all, . when using eom-ccsd module, i get the following error : . -----------------------------------------------------------------------------------------------; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=8 Out-of-core algorithm not yet coded for NN or TT DGEMM.; Error in: contract444; -----------------------------------------------------------------------------------------------. however, when i increase the number of frozen virtual orbitals, the error disappears !. here the input for which i get the error : . molecule pentamer { ; O -2.611 -0.00565 0.45789 ; O -1.30452 2.25724 -0.45568 ; O -2.611 4.51335 0.45789 ; O 1.30257 2.25385 0.45789 ; O -1.301 2.2647 -3.22291 ; H -2.63261 -0.00107 1.44733 ; H -2.63261 4.51793 1.44733 ; H 1.28096 2.25843 1.44733 ; H -1.31578 2.28044 -2.23347 ; H -1.7735 3.07887 -3.52876 ; H 0.36131 2.25462 0.1513 ; H -3.55226 -0.00488 0.1513 ; H -3.55226 4.51412 0.1513 ; H -1.78841 3.05064 -0.11356 ; H -1.78963 1.46139 -0.12277; units ang; SYMMETRY C1; }. set basis aug-cc-pvdz ; set scf_type df; set guess sad; set reference rhf; set e_convergence 1e-05; set d_convergence 1e-05; set ints_tolerance 1e-08. set FROZEN_DOCC [10]; set frozen_uocc [15]. #set freeze_core true; set roots_per_irrep [8]; set maxiter 100000; property('eom-ccsd', properties=['oscillator_strength'])",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/523
https://github.com/psi4/psi4/pull/524:538,Deployability,update,updates,538,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/pull/524:752,Deployability,Release,Release,752,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/pull/524:283,Integrability,message,message-coloring,283,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/pull/524:376,Safety,detect,detection,376,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/pull/524:101,Security,sanitiz,sanitize,101,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/pull/524:802,Security,access,accessed,802,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/pull/524:916,Security,access,accessible,916,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/pull/524:130,Testability,test,test,130,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/pull/524:782,Testability,test,tests,782,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/pull/524:848,Testability,test,tests,848,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/pull/524:882,Testability,test,tests,882,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524
https://github.com/psi4/psi4/issues/525:1721,Availability,echo,echo,1721,"Kicking out Boost and libint has substantially reduced our compile time. However, we're still running up against Travis-CI's 50 min max (~10 min of that are in tests). So, here's the facts. Any suggestions for reducing compile time welcome. There are thoughts in the air of moving `bin`s to external projects, where they can be tested separately, but less drastic suggestions preferred. ```; psi4 5216.132 100%; ---------------------------------; dfocc 490.372 9.4%; ccdensity 489.191 9.4%; mints 327.399 6.3%; dpd 321.392 6.2%; psimrcc 297.722 5.7%; core 285.259 5.5%; ccenergy 242.782 4.7%; occ 227.323 4.4%; cclambda 167.325 3.2%; dcft 156.295 3.0%; cceom 156.036 3.0%; ccresponse 137.6 2.6%; fock 136.653 2.6%; sapt_solver 125.653 2.4%; detci 123.652 2.4%; optking 118.63 2.3%; ccsort 118.255 2.3%; cchbar 107.15 2.1%; mcscf 106.969 2.1%; cctriple 91.443 1.8%; iwl 90.624 1.7%; fnocc 77.272 1.5%; qt 69.421 1.3%; functional 65.807 1.3%; psio 59.924 1.1%; scf_solver 57.751 1.1%; trans 51.991 1.0%; cctransort 49.189 0.9%; ciomr 47.597 0.9%; 3index 45.95 0.9%; fisapt 39.127 0.8%; adc 37.382 0.7%; transqt2 34.06 0.7%; thce 33.156 0.6%; findif 31.708 0.6%; scfgrad 30.889 0.6%; moinfo 26.539 0.5%; parallel 23.011 0.4%; dfmp2 19.045 0.4%; options 12.27 0.2%; psi4util 11.808 0.2%; plugin 10.044 0.2%; cubeprop 9.776 0.2%; efp_solver 9.012 0.2%; diis 7.406 0.1%; dmrg 7.377 0.1%; mrcc 6.772 0.1%; gdma_interface 4.447 0.1%; disp 4.221 0.1%; sapt 4.092 0.1%; cholesky 3.863 0.1%; thermo 3.677 0.1%; efp_interface 3.21 0.1%; filesystem 0.613 0.0%. ```. Note to future (http://stackoverflow.com/questions/5962285/cmake-compilation-statistics):. ```; >>> cat time-icpc; #!/bin/bash; { time /path/to/icpc ""$@""; } 2> >(cat <(echo ""/path/to/icpc $@"") - >> /path/to/timeresults.txt); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525
https://github.com/psi4/psi4/issues/525:47,Energy Efficiency,reduce,reduced,47,"Kicking out Boost and libint has substantially reduced our compile time. However, we're still running up against Travis-CI's 50 min max (~10 min of that are in tests). So, here's the facts. Any suggestions for reducing compile time welcome. There are thoughts in the air of moving `bin`s to external projects, where they can be tested separately, but less drastic suggestions preferred. ```; psi4 5216.132 100%; ---------------------------------; dfocc 490.372 9.4%; ccdensity 489.191 9.4%; mints 327.399 6.3%; dpd 321.392 6.2%; psimrcc 297.722 5.7%; core 285.259 5.5%; ccenergy 242.782 4.7%; occ 227.323 4.4%; cclambda 167.325 3.2%; dcft 156.295 3.0%; cceom 156.036 3.0%; ccresponse 137.6 2.6%; fock 136.653 2.6%; sapt_solver 125.653 2.4%; detci 123.652 2.4%; optking 118.63 2.3%; ccsort 118.255 2.3%; cchbar 107.15 2.1%; mcscf 106.969 2.1%; cctriple 91.443 1.8%; iwl 90.624 1.7%; fnocc 77.272 1.5%; qt 69.421 1.3%; functional 65.807 1.3%; psio 59.924 1.1%; scf_solver 57.751 1.1%; trans 51.991 1.0%; cctransort 49.189 0.9%; ciomr 47.597 0.9%; 3index 45.95 0.9%; fisapt 39.127 0.8%; adc 37.382 0.7%; transqt2 34.06 0.7%; thce 33.156 0.6%; findif 31.708 0.6%; scfgrad 30.889 0.6%; moinfo 26.539 0.5%; parallel 23.011 0.4%; dfmp2 19.045 0.4%; options 12.27 0.2%; psi4util 11.808 0.2%; plugin 10.044 0.2%; cubeprop 9.776 0.2%; efp_solver 9.012 0.2%; diis 7.406 0.1%; dmrg 7.377 0.1%; mrcc 6.772 0.1%; gdma_interface 4.447 0.1%; disp 4.221 0.1%; sapt 4.092 0.1%; cholesky 3.863 0.1%; thermo 3.677 0.1%; efp_interface 3.21 0.1%; filesystem 0.613 0.0%. ```. Note to future (http://stackoverflow.com/questions/5962285/cmake-compilation-statistics):. ```; >>> cat time-icpc; #!/bin/bash; { time /path/to/icpc ""$@""; } 2> >(cat <(echo ""/path/to/icpc $@"") - >> /path/to/timeresults.txt); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525
https://github.com/psi4/psi4/issues/525:1284,Modifiability,plugin,plugin,1284,"Kicking out Boost and libint has substantially reduced our compile time. However, we're still running up against Travis-CI's 50 min max (~10 min of that are in tests). So, here's the facts. Any suggestions for reducing compile time welcome. There are thoughts in the air of moving `bin`s to external projects, where they can be tested separately, but less drastic suggestions preferred. ```; psi4 5216.132 100%; ---------------------------------; dfocc 490.372 9.4%; ccdensity 489.191 9.4%; mints 327.399 6.3%; dpd 321.392 6.2%; psimrcc 297.722 5.7%; core 285.259 5.5%; ccenergy 242.782 4.7%; occ 227.323 4.4%; cclambda 167.325 3.2%; dcft 156.295 3.0%; cceom 156.036 3.0%; ccresponse 137.6 2.6%; fock 136.653 2.6%; sapt_solver 125.653 2.4%; detci 123.652 2.4%; optking 118.63 2.3%; ccsort 118.255 2.3%; cchbar 107.15 2.1%; mcscf 106.969 2.1%; cctriple 91.443 1.8%; iwl 90.624 1.7%; fnocc 77.272 1.5%; qt 69.421 1.3%; functional 65.807 1.3%; psio 59.924 1.1%; scf_solver 57.751 1.1%; trans 51.991 1.0%; cctransort 49.189 0.9%; ciomr 47.597 0.9%; 3index 45.95 0.9%; fisapt 39.127 0.8%; adc 37.382 0.7%; transqt2 34.06 0.7%; thce 33.156 0.6%; findif 31.708 0.6%; scfgrad 30.889 0.6%; moinfo 26.539 0.5%; parallel 23.011 0.4%; dfmp2 19.045 0.4%; options 12.27 0.2%; psi4util 11.808 0.2%; plugin 10.044 0.2%; cubeprop 9.776 0.2%; efp_solver 9.012 0.2%; diis 7.406 0.1%; dmrg 7.377 0.1%; mrcc 6.772 0.1%; gdma_interface 4.447 0.1%; disp 4.221 0.1%; sapt 4.092 0.1%; cholesky 3.863 0.1%; thermo 3.677 0.1%; efp_interface 3.21 0.1%; filesystem 0.613 0.0%. ```. Note to future (http://stackoverflow.com/questions/5962285/cmake-compilation-statistics):. ```; >>> cat time-icpc; #!/bin/bash; { time /path/to/icpc ""$@""; } 2> >(cat <(echo ""/path/to/icpc $@"") - >> /path/to/timeresults.txt); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525
https://github.com/psi4/psi4/issues/525:160,Testability,test,tests,160,"Kicking out Boost and libint has substantially reduced our compile time. However, we're still running up against Travis-CI's 50 min max (~10 min of that are in tests). So, here's the facts. Any suggestions for reducing compile time welcome. There are thoughts in the air of moving `bin`s to external projects, where they can be tested separately, but less drastic suggestions preferred. ```; psi4 5216.132 100%; ---------------------------------; dfocc 490.372 9.4%; ccdensity 489.191 9.4%; mints 327.399 6.3%; dpd 321.392 6.2%; psimrcc 297.722 5.7%; core 285.259 5.5%; ccenergy 242.782 4.7%; occ 227.323 4.4%; cclambda 167.325 3.2%; dcft 156.295 3.0%; cceom 156.036 3.0%; ccresponse 137.6 2.6%; fock 136.653 2.6%; sapt_solver 125.653 2.4%; detci 123.652 2.4%; optking 118.63 2.3%; ccsort 118.255 2.3%; cchbar 107.15 2.1%; mcscf 106.969 2.1%; cctriple 91.443 1.8%; iwl 90.624 1.7%; fnocc 77.272 1.5%; qt 69.421 1.3%; functional 65.807 1.3%; psio 59.924 1.1%; scf_solver 57.751 1.1%; trans 51.991 1.0%; cctransort 49.189 0.9%; ciomr 47.597 0.9%; 3index 45.95 0.9%; fisapt 39.127 0.8%; adc 37.382 0.7%; transqt2 34.06 0.7%; thce 33.156 0.6%; findif 31.708 0.6%; scfgrad 30.889 0.6%; moinfo 26.539 0.5%; parallel 23.011 0.4%; dfmp2 19.045 0.4%; options 12.27 0.2%; psi4util 11.808 0.2%; plugin 10.044 0.2%; cubeprop 9.776 0.2%; efp_solver 9.012 0.2%; diis 7.406 0.1%; dmrg 7.377 0.1%; mrcc 6.772 0.1%; gdma_interface 4.447 0.1%; disp 4.221 0.1%; sapt 4.092 0.1%; cholesky 3.863 0.1%; thermo 3.677 0.1%; efp_interface 3.21 0.1%; filesystem 0.613 0.0%. ```. Note to future (http://stackoverflow.com/questions/5962285/cmake-compilation-statistics):. ```; >>> cat time-icpc; #!/bin/bash; { time /path/to/icpc ""$@""; } 2> >(cat <(echo ""/path/to/icpc $@"") - >> /path/to/timeresults.txt); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525
https://github.com/psi4/psi4/issues/525:328,Testability,test,tested,328,"Kicking out Boost and libint has substantially reduced our compile time. However, we're still running up against Travis-CI's 50 min max (~10 min of that are in tests). So, here's the facts. Any suggestions for reducing compile time welcome. There are thoughts in the air of moving `bin`s to external projects, where they can be tested separately, but less drastic suggestions preferred. ```; psi4 5216.132 100%; ---------------------------------; dfocc 490.372 9.4%; ccdensity 489.191 9.4%; mints 327.399 6.3%; dpd 321.392 6.2%; psimrcc 297.722 5.7%; core 285.259 5.5%; ccenergy 242.782 4.7%; occ 227.323 4.4%; cclambda 167.325 3.2%; dcft 156.295 3.0%; cceom 156.036 3.0%; ccresponse 137.6 2.6%; fock 136.653 2.6%; sapt_solver 125.653 2.4%; detci 123.652 2.4%; optking 118.63 2.3%; ccsort 118.255 2.3%; cchbar 107.15 2.1%; mcscf 106.969 2.1%; cctriple 91.443 1.8%; iwl 90.624 1.7%; fnocc 77.272 1.5%; qt 69.421 1.3%; functional 65.807 1.3%; psio 59.924 1.1%; scf_solver 57.751 1.1%; trans 51.991 1.0%; cctransort 49.189 0.9%; ciomr 47.597 0.9%; 3index 45.95 0.9%; fisapt 39.127 0.8%; adc 37.382 0.7%; transqt2 34.06 0.7%; thce 33.156 0.6%; findif 31.708 0.6%; scfgrad 30.889 0.6%; moinfo 26.539 0.5%; parallel 23.011 0.4%; dfmp2 19.045 0.4%; options 12.27 0.2%; psi4util 11.808 0.2%; plugin 10.044 0.2%; cubeprop 9.776 0.2%; efp_solver 9.012 0.2%; diis 7.406 0.1%; dmrg 7.377 0.1%; mrcc 6.772 0.1%; gdma_interface 4.447 0.1%; disp 4.221 0.1%; sapt 4.092 0.1%; cholesky 3.863 0.1%; thermo 3.677 0.1%; efp_interface 3.21 0.1%; filesystem 0.613 0.0%. ```. Note to future (http://stackoverflow.com/questions/5962285/cmake-compilation-statistics):. ```; >>> cat time-icpc; #!/bin/bash; { time /path/to/icpc ""$@""; } 2> >(cat <(echo ""/path/to/icpc $@"") - >> /path/to/timeresults.txt); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525
https://github.com/psi4/psi4/pull/527:26,Energy Efficiency,reduce,reduce,26,## Description; Hopefully reduce compile time. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Removed all the lib files identified as unused except those in libdpd. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/527
https://github.com/psi4/psi4/issues/528:1242,Availability,error,error,1242,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528
https://github.com/psi4/psi4/issues/528:72,Energy Efficiency,energy,energy,72,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528
https://github.com/psi4/psi4/issues/528:1070,Energy Efficiency,energy,energy,1070,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528
https://github.com/psi4/psi4/issues/528:1249,Energy Efficiency,energy,energy,1249,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528
https://github.com/psi4/psi4/issues/528:1463,Energy Efficiency,energy,energy,1463,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528
https://github.com/psi4/psi4/issues/528:776,Testability,test,test,776,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528
https://github.com/psi4/psi4/issues/528:162,Usability,clear,clearly,162,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528
https://github.com/psi4/psi4/pull/530:882,Modifiability,config,configuring,882,"## Description; Modelled (esp. the bash) on pybind11, this imposes a script checking for tabs and trailing whitespace on the C++ and flake8 on the python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] a dozen or so python files converted, incl. driver/driver and driver/procedures/proc. Many more skipped for now.; - [x] flake governed by /.flake8 file; - [x] C++ goverened by /cmake/check-style.sh file . Right now, just has a couple checks, and it's not even run in the travis b/c so many tabs in C++ code. . ## Questions; - [ ] Do we want to do something like this? [Here's](https://travis-ci.org/loriab/psi4/builds/179363444) what it looks like. Compared to compiling, it's a very short build. Seems an easy way to get style checking that's non-binding (can still merge if fails) and doesn't involve everyone configuring their git hooks.; - [ ] I set max line width at 120, as I can live with that. It's open for discussion. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530
https://github.com/psi4/psi4/issues/531:257,Availability,error,error,257,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531
https://github.com/psi4/psi4/issues/531:323,Availability,error,error,323,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531
https://github.com/psi4/psi4/issues/531:218,Energy Efficiency,energy,energy,218,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531
https://github.com/psi4/psi4/issues/531:263,Integrability,message,message,263,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531
https://github.com/psi4/psi4/issues/531:308,Testability,test,teste,308,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531
https://github.com/psi4/psi4/issues/531:2,Usability,simpl,simple,2,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531
https://github.com/psi4/psi4/pull/532:288,Deployability,Release,Release,288,## Description; Prevents the user from using a C++ keyword as a name for a new plugin. It came up on [this](http://forum.psicode.org/t/trouble-in-build-plugin-for-psi4/349) forum post. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Prevents the user from using a C++ reserved keyword as a name for a new plugin. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/532
https://github.com/psi4/psi4/pull/532:79,Modifiability,plugin,plugin,79,## Description; Prevents the user from using a C++ keyword as a name for a new plugin. It came up on [this](http://forum.psicode.org/t/trouble-in-build-plugin-for-psi4/349) forum post. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Prevents the user from using a C++ reserved keyword as a name for a new plugin. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/532
https://github.com/psi4/psi4/pull/532:152,Modifiability,plugin,plugin-for-,152,## Description; Prevents the user from using a C++ keyword as a name for a new plugin. It came up on [this](http://forum.psicode.org/t/trouble-in-build-plugin-for-psi4/349) forum post. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Prevents the user from using a C++ reserved keyword as a name for a new plugin. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/532
https://github.com/psi4/psi4/pull/532:383,Modifiability,plugin,plugin,383,## Description; Prevents the user from using a C++ keyword as a name for a new plugin. It came up on [this](http://forum.psicode.org/t/trouble-in-build-plugin-for-psi4/349) forum post. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Prevents the user from using a C++ reserved keyword as a name for a new plugin. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/532
https://github.com/psi4/psi4/pull/533:305,Availability,Down,Download,305,"## Description; **Currently a work-in-progress**. **Currently requires intel compiler**. Implements the simint two-electron integral library into Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Implement ENABLE_SIMINT option; - [X] Download & build via ExternalProject_Add; - [ ] Download & use precompiled library; - [X] Simint is being used rather than libint; - [ ] Batching interface to interface classes in libmints (partially done); - [ ] Use batching in JK objects (partially done); - [ ] Fix some GCC issues in simint; - [ ] Port new batching interface to libint & erd; - [ ] Higher AM, or split between simint and erd; - [ ] Derivatives (WIP in simint...). * **User-Facing for Release Notes**; - [ ] Hmmm. ## Questions; - [ ] Where to put tarballs (that is more permanent for psi4). Git is probably not a good idea. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/533
https://github.com/psi4/psi4/pull/533:353,Availability,Down,Download,353,"## Description; **Currently a work-in-progress**. **Currently requires intel compiler**. Implements the simint two-electron integral library into Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Implement ENABLE_SIMINT option; - [X] Download & build via ExternalProject_Add; - [ ] Download & use precompiled library; - [X] Simint is being used rather than libint; - [ ] Batching interface to interface classes in libmints (partially done); - [ ] Use batching in JK objects (partially done); - [ ] Fix some GCC issues in simint; - [ ] Port new batching interface to libint & erd; - [ ] Higher AM, or split between simint and erd; - [ ] Derivatives (WIP in simint...). * **User-Facing for Release Notes**; - [ ] Hmmm. ## Questions; - [ ] Where to put tarballs (that is more permanent for psi4). Git is probably not a good idea. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/533
https://github.com/psi4/psi4/pull/533:759,Deployability,Release,Release,759,"## Description; **Currently a work-in-progress**. **Currently requires intel compiler**. Implements the simint two-electron integral library into Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Implement ENABLE_SIMINT option; - [X] Download & build via ExternalProject_Add; - [ ] Download & use precompiled library; - [X] Simint is being used rather than libint; - [ ] Batching interface to interface classes in libmints (partially done); - [ ] Use batching in JK objects (partially done); - [ ] Fix some GCC issues in simint; - [ ] Port new batching interface to libint & erd; - [ ] Higher AM, or split between simint and erd; - [ ] Derivatives (WIP in simint...). * **User-Facing for Release Notes**; - [ ] Hmmm. ## Questions; - [ ] Where to put tarballs (that is more permanent for psi4). Git is probably not a good idea. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/533
https://github.com/psi4/psi4/pull/533:451,Integrability,interface,interface,451,"## Description; **Currently a work-in-progress**. **Currently requires intel compiler**. Implements the simint two-electron integral library into Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Implement ENABLE_SIMINT option; - [X] Download & build via ExternalProject_Add; - [ ] Download & use precompiled library; - [X] Simint is being used rather than libint; - [ ] Batching interface to interface classes in libmints (partially done); - [ ] Use batching in JK objects (partially done); - [ ] Fix some GCC issues in simint; - [ ] Port new batching interface to libint & erd; - [ ] Higher AM, or split between simint and erd; - [ ] Derivatives (WIP in simint...). * **User-Facing for Release Notes**; - [ ] Hmmm. ## Questions; - [ ] Where to put tarballs (that is more permanent for psi4). Git is probably not a good idea. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/533
https://github.com/psi4/psi4/pull/533:464,Integrability,interface,interface,464,"## Description; **Currently a work-in-progress**. **Currently requires intel compiler**. Implements the simint two-electron integral library into Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Implement ENABLE_SIMINT option; - [X] Download & build via ExternalProject_Add; - [ ] Download & use precompiled library; - [X] Simint is being used rather than libint; - [ ] Batching interface to interface classes in libmints (partially done); - [ ] Use batching in JK objects (partially done); - [ ] Fix some GCC issues in simint; - [ ] Port new batching interface to libint & erd; - [ ] Higher AM, or split between simint and erd; - [ ] Derivatives (WIP in simint...). * **User-Facing for Release Notes**; - [ ] Hmmm. ## Questions; - [ ] Where to put tarballs (that is more permanent for psi4). Git is probably not a good idea. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/533
https://github.com/psi4/psi4/pull/533:624,Integrability,interface,interface,624,"## Description; **Currently a work-in-progress**. **Currently requires intel compiler**. Implements the simint two-electron integral library into Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Implement ENABLE_SIMINT option; - [X] Download & build via ExternalProject_Add; - [ ] Download & use precompiled library; - [X] Simint is being used rather than libint; - [ ] Batching interface to interface classes in libmints (partially done); - [ ] Use batching in JK objects (partially done); - [ ] Fix some GCC issues in simint; - [ ] Port new batching interface to libint & erd; - [ ] Higher AM, or split between simint and erd; - [ ] Derivatives (WIP in simint...). * **User-Facing for Release Notes**; - [ ] Hmmm. ## Questions; - [ ] Where to put tarballs (that is more permanent for psi4). Git is probably not a good idea. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/533
https://github.com/psi4/psi4/pull/534:240,Deployability,install,installing,240,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534
https://github.com/psi4/psi4/pull/534:342,Deployability,install,installed,342,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534
https://github.com/psi4/psi4/pull/534:979,Deployability,install,installed,979,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534
https://github.com/psi4/psi4/pull/534:1032,Deployability,Release,Release,1032,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534
https://github.com/psi4/psi4/pull/534:1167,Deployability,install,install,1167,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534
https://github.com/psi4/psi4/pull/534:832,Integrability,inject,injected,832,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534
https://github.com/psi4/psi4/pull/534:832,Security,inject,injected,832,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534
https://github.com/psi4/psi4/pull/534:621,Testability,Test,Tests,621,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534
https://github.com/psi4/psi4/pull/534:632,Testability,test,tests,632,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534
https://github.com/psi4/psi4/pull/535:97,Availability,error,error,97,## Description; Fixes bug reported [here](http://forum.psicode.org/t/fixed-dihedral-optimization-error/323). I was sloppy and apparently no one had tried a 0 degree fixed angle before. * **User-Facing for Release Notes**; - [ ] Fixes bug preventing fixed (target) values of exactly zero. ## Status; Passed HOOH at 0 degrees. Still need to run other psi standard tests. ; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/535
https://github.com/psi4/psi4/pull/535:205,Deployability,Release,Release,205,## Description; Fixes bug reported [here](http://forum.psicode.org/t/fixed-dihedral-optimization-error/323). I was sloppy and apparently no one had tried a 0 degree fixed angle before. * **User-Facing for Release Notes**; - [ ] Fixes bug preventing fixed (target) values of exactly zero. ## Status; Passed HOOH at 0 degrees. Still need to run other psi standard tests. ; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/535
https://github.com/psi4/psi4/pull/535:84,Performance,optimiz,optimization-error,84,## Description; Fixes bug reported [here](http://forum.psicode.org/t/fixed-dihedral-optimization-error/323). I was sloppy and apparently no one had tried a 0 degree fixed angle before. * **User-Facing for Release Notes**; - [ ] Fixes bug preventing fixed (target) values of exactly zero. ## Status; Passed HOOH at 0 degrees. Still need to run other psi standard tests. ; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/535
https://github.com/psi4/psi4/pull/535:362,Testability,test,tests,362,## Description; Fixes bug reported [here](http://forum.psicode.org/t/fixed-dihedral-optimization-error/323). I was sloppy and apparently no one had tried a 0 degree fixed angle before. * **User-Facing for Release Notes**; - [ ] Fixes bug preventing fixed (target) values of exactly zero. ## Status; Passed HOOH at 0 degrees. Still need to run other psi standard tests. ; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/535
https://github.com/psi4/psi4/issues/536:67,Availability,error,error,67,"After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile. . If it helps, I'm running Ubuntu, with gnu compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536
https://github.com/psi4/psi4/issues/536:336,Availability,error,error,336,"After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile. . If it helps, I'm running Ubuntu, with gnu compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536
https://github.com/psi4/psi4/issues/536:605,Availability,error,error,605,"After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile. . If it helps, I'm running Ubuntu, with gnu compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536
https://github.com/psi4/psi4/issues/536:766,Availability,error,error,766,"After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile. . If it helps, I'm running Ubuntu, with gnu compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536
https://github.com/psi4/psi4/issues/536:1096,Availability,error,error,1096,"l Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile. . If it helps, I'm running Ubuntu, with gnu compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe for target 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536
https://github.com/psi4/psi4/issues/536:1257,Availability,error,error,1257," compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe for target 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt; CMakeFiles/Makefile2:355: recipe for target 'CMakeFiles/psi4_core.dir/all' failed; make[1]: *** [CMakeFiles/psi4_core.dir/all] Interrupt; Makefile:138: recip",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536
https://github.com/psi4/psi4/issues/536:1508,Availability,Error,Error,1508,"l/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe for target 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt; CMakeFiles/Makefile2:355: recipe for target 'CMakeFiles/psi4_core.dir/all' failed; make[1]: *** [CMakeFiles/psi4_core.dir/all] Interrupt; Makefile:138: recipe for target 'all' failed; make: *** [all] Interrupt; `",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536
https://github.com/psi4/psi4/issues/536:342,Integrability,message,message,342,"After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile. . If it helps, I'm running Ubuntu, with gnu compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536
https://github.com/psi4/psi4/issues/537:955,Deployability,patch,patched,955,"A number of issues have come up and been bandaid-ed over regarding detecting math libs, propagating math libs, preloading math libs, statically linking math libs, etc. This issue is mainly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication cou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:1547,Deployability,patch,patched,1547,"st uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelis",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:1242,Integrability,depend,dependencies,1242,"inly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:2708,Integrability,depend,dependencies,2708,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:1659,Modifiability,Config,ConfigMath,1659,"can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 beca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:3205,Modifiability,Config,ConfigMath,3205,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:1441,Performance,optimiz,optimize,1441,"always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (na",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:2081,Performance,load,loader,2081,"master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:2885,Performance,optimiz,optimize,2885,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:67,Safety,detect,detecting,67,"A number of issues have come up and been bandaid-ed over regarding detecting math libs, propagating math libs, preloading math libs, statically linking math libs, etc. This issue is mainly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication cou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:359,Safety,detect,detection,359,"A number of issues have come up and been bandaid-ed over regarding detecting math libs, propagating math libs, preloading math libs, statically linking math libs, etc. This issue is mainly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication cou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:915,Safety,detect,detection,915,"A number of issues have come up and been bandaid-ed over regarding detecting math libs, propagating math libs, preloading math libs, statically linking math libs, etc. This issue is mainly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication cou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:989,Safety,detect,detection,989,"A number of issues have come up and been bandaid-ed over regarding detecting math libs, propagating math libs, preloading math libs, statically linking math libs, etc. This issue is mainly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication cou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:2339,Safety,detect,detect,2339,"://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:2413,Safety,detect,detection,2413,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/issues/537:3265,Safety,detect,detect,3265,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537
https://github.com/psi4/psi4/pull/538:91,Performance,optimiz,optimization,91,"## Description. Fixes cc14 by assigning SOCC and DOCC, which previously changed during the optimization. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/538
https://github.com/psi4/psi4/pull/539:269,Deployability,Release,Release,269,"## Description; Empty wiki and revise build docs for CMR-KTB-INV. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] all the user part of the Wiki migrated; - [x] `.lgtm` discontinued; * **User-Facing for Release Notes**; - [x] since Summer 2016, the default installation has actually been to `/usr/local/`. Now back to `/usr/local/psi4` as traditional. Naturally, you can choose your own install loc via `-DCMAKE_INSTALL_PREFIX=/path/to/install/dir`. ## Status; - [x] Ready to go. ~~This is very much a WIP, but I don't want it an invisible WIP.~~. Unpolished, but better than the Wiki, and better than nothing, so I'm calling it ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/539
https://github.com/psi4/psi4/pull/539:323,Deployability,install,installation,323,"## Description; Empty wiki and revise build docs for CMR-KTB-INV. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] all the user part of the Wiki migrated; - [x] `.lgtm` discontinued; * **User-Facing for Release Notes**; - [x] since Summer 2016, the default installation has actually been to `/usr/local/`. Now back to `/usr/local/psi4` as traditional. Naturally, you can choose your own install loc via `-DCMAKE_INSTALL_PREFIX=/path/to/install/dir`. ## Status; - [x] Ready to go. ~~This is very much a WIP, but I don't want it an invisible WIP.~~. Unpolished, but better than the Wiki, and better than nothing, so I'm calling it ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/539
https://github.com/psi4/psi4/pull/539:453,Deployability,install,install,453,"## Description; Empty wiki and revise build docs for CMR-KTB-INV. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] all the user part of the Wiki migrated; - [x] `.lgtm` discontinued; * **User-Facing for Release Notes**; - [x] since Summer 2016, the default installation has actually been to `/usr/local/`. Now back to `/usr/local/psi4` as traditional. Naturally, you can choose your own install loc via `-DCMAKE_INSTALL_PREFIX=/path/to/install/dir`. ## Status; - [x] Ready to go. ~~This is very much a WIP, but I don't want it an invisible WIP.~~. Unpolished, but better than the Wiki, and better than nothing, so I'm calling it ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/539
https://github.com/psi4/psi4/pull/539:502,Deployability,install,install,502,"## Description; Empty wiki and revise build docs for CMR-KTB-INV. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] all the user part of the Wiki migrated; - [x] `.lgtm` discontinued; * **User-Facing for Release Notes**; - [x] since Summer 2016, the default installation has actually been to `/usr/local/`. Now back to `/usr/local/psi4` as traditional. Naturally, you can choose your own install loc via `-DCMAKE_INSTALL_PREFIX=/path/to/install/dir`. ## Status; - [x] Ready to go. ~~This is very much a WIP, but I don't want it an invisible WIP.~~. Unpolished, but better than the Wiki, and better than nothing, so I'm calling it ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/539
https://github.com/psi4/psi4/pull/540:759,Deployability,Release,Release,759,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/540
https://github.com/psi4/psi4/pull/540:16,Modifiability,Rewrite,Rewrite,16,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/540
https://github.com/psi4/psi4/pull/540:801,Performance,perform,performance,801,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/540
https://github.com/psi4/psi4/pull/540:218,Safety,avoid,avoid,218,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/540
https://github.com/psi4/psi4/pull/540:273,Safety,avoid,avoid,273,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/540
https://github.com/psi4/psi4/pull/542:246,Deployability,Release,Release,246,## Description; As discussed CI moves to a zero-indexed scheme. ## Todos; * **Developer Interest**; - [x] Zero-indexing scheme.; - [x] Returned value for CAS was returning lowest root instead of average for SA computations. ; * **User-Facing for Release Notes**; - [x] CI Roots are now zero index (the ground state is now 0 instead of 1). ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/542
https://github.com/psi4/psi4/pull/543:393,Deployability,Release,Release,393,"## Description; Pulls in the C, CXX, and Fortran compiler flags from Psi4, this includes additional compiler flags the user provided in their initial cmake call, and passes them to the new plugin's CMakeLists.txt file. Need people to test to ensure all the needed flags are being obtained. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [ ] User provided Psi4 compiler flags are passed to new plugins. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/543
https://github.com/psi4/psi4/pull/543:189,Modifiability,plugin,plugin,189,"## Description; Pulls in the C, CXX, and Fortran compiler flags from Psi4, this includes additional compiler flags the user provided in their initial cmake call, and passes them to the new plugin's CMakeLists.txt file. Need people to test to ensure all the needed flags are being obtained. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [ ] User provided Psi4 compiler flags are passed to new plugins. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/543
https://github.com/psi4/psi4/pull/543:468,Modifiability,plugin,plugins,468,"## Description; Pulls in the C, CXX, and Fortran compiler flags from Psi4, this includes additional compiler flags the user provided in their initial cmake call, and passes them to the new plugin's CMakeLists.txt file. Need people to test to ensure all the needed flags are being obtained. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [ ] User provided Psi4 compiler flags are passed to new plugins. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/543
https://github.com/psi4/psi4/pull/543:234,Testability,test,test,234,"## Description; Pulls in the C, CXX, and Fortran compiler flags from Psi4, this includes additional compiler flags the user provided in their initial cmake call, and passes them to the new plugin's CMakeLists.txt file. Need people to test to ensure all the needed flags are being obtained. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [ ] User provided Psi4 compiler flags are passed to new plugins. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/543
https://github.com/psi4/psi4/pull/545:244,Usability,Simpl,Simply,244,## Description; Prints out the name of the missing basis set when a call to Wavefunction::get_basisset(std::string label) fails. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Simply life for developers. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/545
https://github.com/psi4/psi4/issues/546:930,Availability,Error,Error,930,"The following input runs a CISD computation and crashes with the current version of psi4 (fe3ab0d). ```; molecule {; O; H 1 R; H 1 R 2 A. R = .9; A = 104.5; symmetry c1; }. set basis sto-3g; energy('cisd'); ```. Here is the console output:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 946, in select_cisd; return func(name, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 3949, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /Users/francesco/Source/psi4-fork/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/546
https://github.com/psi4/psi4/issues/546:968,Availability,Error,Error,968,"The following input runs a CISD computation and crashes with the current version of psi4 (fe3ab0d). ```; molecule {; O; H 1 R; H 1 R 2 A. R = .9; A = 104.5; symmetry c1; }. set basis sto-3g; energy('cisd'); ```. Here is the console output:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 946, in select_cisd; return func(name, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 3949, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /Users/francesco/Source/psi4-fork/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/546
https://github.com/psi4/psi4/issues/546:191,Energy Efficiency,energy,energy,191,"The following input runs a CISD computation and crashes with the current version of psi4 (fe3ab0d). ```; molecule {; O; H 1 R; H 1 R 2 A. R = .9; A = 104.5; symmetry c1; }. set basis sto-3g; energy('cisd'); ```. Here is the console output:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 946, in select_cisd; return func(name, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 3949, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /Users/francesco/Source/psi4-fork/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/546
https://github.com/psi4/psi4/issues/546:519,Energy Efficiency,energy,energy,519,"The following input runs a CISD computation and crashes with the current version of psi4 (fe3ab0d). ```; molecule {; O; H 1 R; H 1 R 2 A. R = .9; A = 104.5; symmetry c1; }. set basis sto-3g; energy('cisd'); ```. Here is the console output:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 946, in select_cisd; return func(name, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 3949, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /Users/francesco/Source/psi4-fork/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/546
https://github.com/psi4/psi4/issues/546:545,Energy Efficiency,energy,energy,545,"The following input runs a CISD computation and crashes with the current version of psi4 (fe3ab0d). ```; molecule {; O; H 1 R; H 1 R 2 A. R = .9; A = 104.5; symmetry c1; }. set basis sto-3g; energy('cisd'); ```. Here is the console output:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 946, in select_cisd; return func(name, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 3949, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /Users/francesco/Source/psi4-fork/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/546
https://github.com/psi4/psi4/issues/548:451,Availability,error,error,451,"This issue is intended more as a discussion, than a real issue. At the moment it is not possible to call Psi4 under MPI with more than one process per node because of [this](https://github.com/psi4/psi4/blob/fe3ab0d351e05276185ad838f3bcf2c0321be2fe/psi4/driver/procedures/proc.py#L1340). Basically this creates a file that has a non-unique name on each process and then when it goes to delete the file each process deletes the same file leading to an error for every process after the first one. Although this could be fixed easily (either only write to some master process or ensure that the filename is unique. The latter is easily done [in python](http://stackoverflow.com/questions/2961509/python-how-to-create-a-unique-file-name) and [in C++](http://en.cppreference.com/w/cpp/io/c/tmpnam), or by using the process ID) this has been a problem before and is likely to be a problem again, hence I am hoping to reach a more permanent solution. To me the most obvious solution is to make a file writer (stream writer is even better as it then also works for printing, in turn killing two birds with one stone) object/library that handles all read/writes and does so in a way that will not interfere with MPI. In theory `libpsio` could be used for this, but it would have to be extended to writing other types of files aside from binary (I'm under the impression that it only writes binary files). Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/548
https://github.com/psi4/psi4/issues/548:1277,Modifiability,extend,extended,1277,"This issue is intended more as a discussion, than a real issue. At the moment it is not possible to call Psi4 under MPI with more than one process per node because of [this](https://github.com/psi4/psi4/blob/fe3ab0d351e05276185ad838f3bcf2c0321be2fe/psi4/driver/procedures/proc.py#L1340). Basically this creates a file that has a non-unique name on each process and then when it goes to delete the file each process deletes the same file leading to an error for every process after the first one. Although this could be fixed easily (either only write to some master process or ensure that the filename is unique. The latter is easily done [in python](http://stackoverflow.com/questions/2961509/python-how-to-create-a-unique-file-name) and [in C++](http://en.cppreference.com/w/cpp/io/c/tmpnam), or by using the process ID) this has been a problem before and is likely to be a problem again, hence I am hoping to reach a more permanent solution. To me the most obvious solution is to make a file writer (stream writer is even better as it then also works for printing, in turn killing two birds with one stone) object/library that handles all read/writes and does so in a way that will not interfere with MPI. In theory `libpsio` could be used for this, but it would have to be extended to writing other types of files aside from binary (I'm under the impression that it only writes binary files). Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/548
https://github.com/psi4/psi4/pull/549:578,Deployability,Release,Release,578,## Description; Addresses issue #548 by appending the process identification (PID) number to file prefixes generated with; the `get_writer_file_prefix` function. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PID is now appended to all file prefixes generated with the `get_writer_file_prefix` function; - [x] Fixes `const` correctness in this function as well as simplifies internal guts; - [x] Now ignores all file extensions (not just `.out` and `.dat`) when determining base file name; * **User-Facing for Release Notes**; - [x] Some (all at the moment) of the generated ASCII file's names now contain the PID. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/549
https://github.com/psi4/psi4/pull/549:432,Usability,simpl,simplifies,432,## Description; Addresses issue #548 by appending the process identification (PID) number to file prefixes generated with; the `get_writer_file_prefix` function. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PID is now appended to all file prefixes generated with the `get_writer_file_prefix` function; - [x] Fixes `const` correctness in this function as well as simplifies internal guts; - [x] Now ignores all file extensions (not just `.out` and `.dat`) when determining base file name; * **User-Facing for Release Notes**; - [x] Some (all at the moment) of the generated ASCII file's names now contain the PID. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/549
https://github.com/psi4/psi4/pull/550:425,Deployability,Release,Release,425,"## Description; It took me way too long to realize buf4_init could have non-zero data. Just adding a minor modification to the docstrings to clarify it a bit. . If accepted, please do a squash commit. I edited the docstring from github directly, so there's 1 commit per change. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550
https://github.com/psi4/psi4/pull/551:38,Testability,test,tests,38,"## Description; Apparently missed two tests when moving CI to a zero-indexing. A bit confused why there were not picked up by the ""ci"" tag, but oh well. Fixed now. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/551
https://github.com/psi4/psi4/issues/552:73,Availability,error,error,73,"I have compiled psi4 on Linux (Centos) then I got the following run time error . ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so."". I have already sourced MKL and intel compilers as usual, with the following lines. ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/bin/compilervars.sh intel64; source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/mkl/bin/mklvars.sh intel64"". In old versions of psi4 I never encounter such a problem with the same intel package. Thanks,. @loriab @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/552
https://github.com/psi4/psi4/issues/552:98,Availability,ERROR,ERROR,98,"I have compiled psi4 on Linux (Centos) then I got the following run time error . ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so."". I have already sourced MKL and intel compilers as usual, with the following lines. ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/bin/compilervars.sh intel64; source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/mkl/bin/mklvars.sh intel64"". In old versions of psi4 I never encounter such a problem with the same intel package. Thanks,. @loriab @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/552
https://github.com/psi4/psi4/issues/552:112,Performance,load,load,112,"I have compiled psi4 on Linux (Centos) then I got the following run time error . ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so."". I have already sourced MKL and intel compilers as usual, with the following lines. ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/bin/compilervars.sh intel64; source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/mkl/bin/mklvars.sh intel64"". In old versions of psi4 I never encounter such a problem with the same intel package. Thanks,. @loriab @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/552
https://github.com/psi4/psi4/pull/554:317,Availability,error,error,317,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:1782,Availability,down,downstream,1782,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:530,Deployability,install,installs,530,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:555,Deployability,install,install,555,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:692,Deployability,update,update,692,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:1850,Deployability,Release,Release,1850,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:2311,Deployability,update,update,2311,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:254,Integrability,message,message,254,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:79,Modifiability,config,config,79,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:474,Modifiability,plugin,plugin,474,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:633,Modifiability,plugin,plugins,633,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:656,Modifiability,plugin,plugin,656,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:860,Modifiability,plugin,plugin,860,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:1557,Modifiability,config,config,1557,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:1624,Modifiability,config,config,1624,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:2028,Modifiability,plugin,plugin-makefile,2028,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:2084,Modifiability,plugin,plugin-compile,2084,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:2181,Modifiability,plugin,plugin,2181,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:2196,Modifiability,plugin,plugin-name,2196,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:2339,Modifiability,plugin,plugin,2339,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:68,Safety,detect,detect,68,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:735,Safety,detect,detection,735,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:814,Safety,detect,detection,814,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:1895,Safety,detect,detection,1895,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:381,Testability,test,testing,381,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:848,Testability,test,testing,848,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:1324,Testability,test,test,1324,"ng when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:1496,Testability,test,test,1496,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:487,Usability,simpl,simplify,487,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/pull/554:1137,Usability,usab,usable,1137,"lts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/554
https://github.com/psi4/psi4/issues/556:463,Deployability,update,update,463,"Hi,. I'm trying to run some CASSCF calculations for systems where the HF reference is terrible. What I'd like to do is use e.g. BP86 orbitals to run CASSCF. However, when I use. energy('bp86'); set guess read; set maxiter 0; set fail_on_maxiter 0; energy('casscf'). it still runs a single HF iteration even though maxiter=0. Would it be possible to change the behavior of maxiter so that maxiter=0 only recomputes the energy and orbital eigenvalues, but does not update the orbitals? (Pseudocanonization should be OK.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556
https://github.com/psi4/psi4/issues/556:178,Energy Efficiency,energy,energy,178,"Hi,. I'm trying to run some CASSCF calculations for systems where the HF reference is terrible. What I'd like to do is use e.g. BP86 orbitals to run CASSCF. However, when I use. energy('bp86'); set guess read; set maxiter 0; set fail_on_maxiter 0; energy('casscf'). it still runs a single HF iteration even though maxiter=0. Would it be possible to change the behavior of maxiter so that maxiter=0 only recomputes the energy and orbital eigenvalues, but does not update the orbitals? (Pseudocanonization should be OK.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556
https://github.com/psi4/psi4/issues/556:248,Energy Efficiency,energy,energy,248,"Hi,. I'm trying to run some CASSCF calculations for systems where the HF reference is terrible. What I'd like to do is use e.g. BP86 orbitals to run CASSCF. However, when I use. energy('bp86'); set guess read; set maxiter 0; set fail_on_maxiter 0; energy('casscf'). it still runs a single HF iteration even though maxiter=0. Would it be possible to change the behavior of maxiter so that maxiter=0 only recomputes the energy and orbital eigenvalues, but does not update the orbitals? (Pseudocanonization should be OK.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556
https://github.com/psi4/psi4/issues/556:418,Energy Efficiency,energy,energy,418,"Hi,. I'm trying to run some CASSCF calculations for systems where the HF reference is terrible. What I'd like to do is use e.g. BP86 orbitals to run CASSCF. However, when I use. energy('bp86'); set guess read; set maxiter 0; set fail_on_maxiter 0; energy('casscf'). it still runs a single HF iteration even though maxiter=0. Would it be possible to change the behavior of maxiter so that maxiter=0 only recomputes the energy and orbital eigenvalues, but does not update the orbitals? (Pseudocanonization should be OK.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556
https://github.com/psi4/psi4/pull/557:77,Deployability,deploy,deployed,77,"## Description; Get Psi4 to a tagged version on pybind11 that's likely to be deployed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Seeks only >=2.0.0 pybind11. This has the cmake export stuff we need. Note that the current release 2.0.1 has material changes only for Windows.; - [x] @dgasmith note that I had to add the buffer_protocol flag to your CIVector for runtime functioning. This was part of py11's pypy push. [Details here](https://github.com/pybind/pybind11/commit/1d1f81b278d956445287b3c491125caa11b925bd) if you want to review. I'm a little surprised that neither more nor less was required in the way of changes.; - [x] `cbs-xtpl-func` broken, but not by this PR.; * **User-Facing for Release Notes**; - [x] Uses stable 2.0 pybind11 release. ## FYI; - @ryanmrichard and @bennybp, shall we agree upon 2.0.0 as our next set point? Not much code adaptation required. Note `pybind11::pybind11` --> `pybind11::module`. There's a one-word patch I'll forward to the pb11 people, but I don't think it'll interfere with you (leftover `::pybind11` in pybind11Config.cmake). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/557
https://github.com/psi4/psi4/pull/557:294,Deployability,release,release,294,"## Description; Get Psi4 to a tagged version on pybind11 that's likely to be deployed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Seeks only >=2.0.0 pybind11. This has the cmake export stuff we need. Note that the current release 2.0.1 has material changes only for Windows.; - [x] @dgasmith note that I had to add the buffer_protocol flag to your CIVector for runtime functioning. This was part of py11's pypy push. [Details here](https://github.com/pybind/pybind11/commit/1d1f81b278d956445287b3c491125caa11b925bd) if you want to review. I'm a little surprised that neither more nor less was required in the way of changes.; - [x] `cbs-xtpl-func` broken, but not by this PR.; * **User-Facing for Release Notes**; - [x] Uses stable 2.0 pybind11 release. ## FYI; - @ryanmrichard and @bennybp, shall we agree upon 2.0.0 as our next set point? Not much code adaptation required. Note `pybind11::pybind11` --> `pybind11::module`. There's a one-word patch I'll forward to the pb11 people, but I don't think it'll interfere with you (leftover `::pybind11` in pybind11Config.cmake). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/557
https://github.com/psi4/psi4/pull/557:769,Deployability,Release,Release,769,"## Description; Get Psi4 to a tagged version on pybind11 that's likely to be deployed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Seeks only >=2.0.0 pybind11. This has the cmake export stuff we need. Note that the current release 2.0.1 has material changes only for Windows.; - [x] @dgasmith note that I had to add the buffer_protocol flag to your CIVector for runtime functioning. This was part of py11's pypy push. [Details here](https://github.com/pybind/pybind11/commit/1d1f81b278d956445287b3c491125caa11b925bd) if you want to review. I'm a little surprised that neither more nor less was required in the way of changes.; - [x] `cbs-xtpl-func` broken, but not by this PR.; * **User-Facing for Release Notes**; - [x] Uses stable 2.0 pybind11 release. ## FYI; - @ryanmrichard and @bennybp, shall we agree upon 2.0.0 as our next set point? Not much code adaptation required. Note `pybind11::pybind11` --> `pybind11::module`. There's a one-word patch I'll forward to the pb11 people, but I don't think it'll interfere with you (leftover `::pybind11` in pybind11Config.cmake). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/557
https://github.com/psi4/psi4/pull/557:817,Deployability,release,release,817,"## Description; Get Psi4 to a tagged version on pybind11 that's likely to be deployed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Seeks only >=2.0.0 pybind11. This has the cmake export stuff we need. Note that the current release 2.0.1 has material changes only for Windows.; - [x] @dgasmith note that I had to add the buffer_protocol flag to your CIVector for runtime functioning. This was part of py11's pypy push. [Details here](https://github.com/pybind/pybind11/commit/1d1f81b278d956445287b3c491125caa11b925bd) if you want to review. I'm a little surprised that neither more nor less was required in the way of changes.; - [x] `cbs-xtpl-func` broken, but not by this PR.; * **User-Facing for Release Notes**; - [x] Uses stable 2.0 pybind11 release. ## FYI; - @ryanmrichard and @bennybp, shall we agree upon 2.0.0 as our next set point? Not much code adaptation required. Note `pybind11::pybind11` --> `pybind11::module`. There's a one-word patch I'll forward to the pb11 people, but I don't think it'll interfere with you (leftover `::pybind11` in pybind11Config.cmake). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/557
https://github.com/psi4/psi4/pull/557:1017,Deployability,patch,patch,1017,"## Description; Get Psi4 to a tagged version on pybind11 that's likely to be deployed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Seeks only >=2.0.0 pybind11. This has the cmake export stuff we need. Note that the current release 2.0.1 has material changes only for Windows.; - [x] @dgasmith note that I had to add the buffer_protocol flag to your CIVector for runtime functioning. This was part of py11's pypy push. [Details here](https://github.com/pybind/pybind11/commit/1d1f81b278d956445287b3c491125caa11b925bd) if you want to review. I'm a little surprised that neither more nor less was required in the way of changes.; - [x] `cbs-xtpl-func` broken, but not by this PR.; * **User-Facing for Release Notes**; - [x] Uses stable 2.0 pybind11 release. ## FYI; - @ryanmrichard and @bennybp, shall we agree upon 2.0.0 as our next set point? Not much code adaptation required. Note `pybind11::pybind11` --> `pybind11::module`. There's a one-word patch I'll forward to the pb11 people, but I don't think it'll interfere with you (leftover `::pybind11` in pybind11Config.cmake). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/557
https://github.com/psi4/psi4/pull/557:927,Energy Efficiency,adapt,adaptation,927,"## Description; Get Psi4 to a tagged version on pybind11 that's likely to be deployed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Seeks only >=2.0.0 pybind11. This has the cmake export stuff we need. Note that the current release 2.0.1 has material changes only for Windows.; - [x] @dgasmith note that I had to add the buffer_protocol flag to your CIVector for runtime functioning. This was part of py11's pypy push. [Details here](https://github.com/pybind/pybind11/commit/1d1f81b278d956445287b3c491125caa11b925bd) if you want to review. I'm a little surprised that neither more nor less was required in the way of changes.; - [x] `cbs-xtpl-func` broken, but not by this PR.; * **User-Facing for Release Notes**; - [x] Uses stable 2.0 pybind11 release. ## FYI; - @ryanmrichard and @bennybp, shall we agree upon 2.0.0 as our next set point? Not much code adaptation required. Note `pybind11::pybind11` --> `pybind11::module`. There's a one-word patch I'll forward to the pb11 people, but I don't think it'll interfere with you (leftover `::pybind11` in pybind11Config.cmake). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/557
https://github.com/psi4/psi4/pull/557:927,Modifiability,adapt,adaptation,927,"## Description; Get Psi4 to a tagged version on pybind11 that's likely to be deployed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Seeks only >=2.0.0 pybind11. This has the cmake export stuff we need. Note that the current release 2.0.1 has material changes only for Windows.; - [x] @dgasmith note that I had to add the buffer_protocol flag to your CIVector for runtime functioning. This was part of py11's pypy push. [Details here](https://github.com/pybind/pybind11/commit/1d1f81b278d956445287b3c491125caa11b925bd) if you want to review. I'm a little surprised that neither more nor less was required in the way of changes.; - [x] `cbs-xtpl-func` broken, but not by this PR.; * **User-Facing for Release Notes**; - [x] Uses stable 2.0 pybind11 release. ## FYI; - @ryanmrichard and @bennybp, shall we agree upon 2.0.0 as our next set point? Not much code adaptation required. Note `pybind11::pybind11` --> `pybind11::module`. There's a one-word patch I'll forward to the pb11 people, but I don't think it'll interfere with you (leftover `::pybind11` in pybind11Config.cmake). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/557
https://github.com/psi4/psi4/issues/558:241,Energy Efficiency,energy,energy,241,"Given the following input; ```; molecule {; symmetry c1; He 0.0 0.0 0.0; He 0.0 0.0 1000.0; }. set basis 6-31G; set GUESS_VECTOR UNIT; set NUM_DETS_PRINT 4000000000000; set e_convergence 1e-10; set r_convergence 1e-10; #set diag_method rsp; energy('fci'); ```. I get the same energy with SEM and RSP, but the wave functions are totally different: SEM yields; ```; The 36 most important determinants:. * 1 -0.995668 ( 0, 0) 1AX 2AX ; * 2 0.065607 ( 3, 3) 1AX 4AX ; * 3 0.065607 ( 2, 2) 2AX 3AX ; * 4 -0.004323 ( 5, 5) 3AX 4AX ; * 5 0.002076 ( 0, 3) 1AX 2AA 4AB ; * 6 0.002076 ( 3, 0) 1AX 2AB 4AA ; * 7 -0.002076 ( 0, 2) 1AA 2AX 3AB ; * 8 -0.002076 ( 2, 0) 1AB 2AX 3AA ; * 9 0.000137 ( 2, 5) 2AA 3AX 4AB ; * 10 0.000137 ( 5, 2) 2AB 3AX 4AA ; * 11 -0.000137 ( 3, 5) 1AA 3AB 4AX ; * 12 -0.000137 ( 5, 3) 1AB 3AA 4AX ; * 13 0.000004 ( 2, 3) 1AB 2AA 3AA 4AB ; * 14 0.000004 ( 3, 2) 1AA 2AB 3AB 4AA ; * 15 -0.000004 ( 0, 5) 1AA 2AA 3AB 4AB ; * 16 -0.000004 ( 5, 0) 1AB 2AB 3AA 4AA ; ```. while RSP gives; ```; The 36 most important determinants:. * 1 0.995668 ( 0, 0) 1AX 2AX ; * 2 0.089327 ( 2, 3) 1AB 2AA 3AA 4AB ; * 3 -0.023675 ( 2, 2) 2AX 3AX ; * 4 0.009265 ( 0, 4) 1AA 2AX 4AB ; * 5 0.004289 ( 5, 5) 3AX 4AX ; * 6 -0.000549 ( 4, 4) 2AX 4AX ; * 7 0.000262 ( 4, 3) 1AB 2AA 4AX ; * 8 0.000159 ( 0, 3) 1AX 2AA 4AB ; * 9 -0.000043 ( 2, 4) 2AX 3AA 4AB ; ```. The RSP solution is obviously wrong, since the quadruple excitation should be possible to write in terms of independent singles/doubles.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/558
https://github.com/psi4/psi4/issues/558:276,Energy Efficiency,energy,energy,276,"Given the following input; ```; molecule {; symmetry c1; He 0.0 0.0 0.0; He 0.0 0.0 1000.0; }. set basis 6-31G; set GUESS_VECTOR UNIT; set NUM_DETS_PRINT 4000000000000; set e_convergence 1e-10; set r_convergence 1e-10; #set diag_method rsp; energy('fci'); ```. I get the same energy with SEM and RSP, but the wave functions are totally different: SEM yields; ```; The 36 most important determinants:. * 1 -0.995668 ( 0, 0) 1AX 2AX ; * 2 0.065607 ( 3, 3) 1AX 4AX ; * 3 0.065607 ( 2, 2) 2AX 3AX ; * 4 -0.004323 ( 5, 5) 3AX 4AX ; * 5 0.002076 ( 0, 3) 1AX 2AA 4AB ; * 6 0.002076 ( 3, 0) 1AX 2AB 4AA ; * 7 -0.002076 ( 0, 2) 1AA 2AX 3AB ; * 8 -0.002076 ( 2, 0) 1AB 2AX 3AA ; * 9 0.000137 ( 2, 5) 2AA 3AX 4AB ; * 10 0.000137 ( 5, 2) 2AB 3AX 4AA ; * 11 -0.000137 ( 3, 5) 1AA 3AB 4AX ; * 12 -0.000137 ( 5, 3) 1AB 3AA 4AX ; * 13 0.000004 ( 2, 3) 1AB 2AA 3AA 4AB ; * 14 0.000004 ( 3, 2) 1AA 2AB 3AB 4AA ; * 15 -0.000004 ( 0, 5) 1AA 2AA 3AB 4AB ; * 16 -0.000004 ( 5, 0) 1AB 2AB 3AA 4AA ; ```. while RSP gives; ```; The 36 most important determinants:. * 1 0.995668 ( 0, 0) 1AX 2AX ; * 2 0.089327 ( 2, 3) 1AB 2AA 3AA 4AB ; * 3 -0.023675 ( 2, 2) 2AX 3AX ; * 4 0.009265 ( 0, 4) 1AA 2AX 4AB ; * 5 0.004289 ( 5, 5) 3AX 4AX ; * 6 -0.000549 ( 4, 4) 2AX 4AX ; * 7 0.000262 ( 4, 3) 1AB 2AA 4AX ; * 8 0.000159 ( 0, 3) 1AX 2AA 4AB ; * 9 -0.000043 ( 2, 4) 2AX 3AA 4AB ; ```. The RSP solution is obviously wrong, since the quadruple excitation should be possible to write in terms of independent singles/doubles.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/558
https://github.com/psi4/psi4/issues/559:215,Energy Efficiency,energy,energy,215,```; molecule {; symmetry c1; He 0.0 0.0 0.0; He 0.0 0.0 1000.0; }. set basis 6-31G; set GUESS_VECTOR UNIT; set NUM_DETS_PRINT 4000000000000; set e_convergence 1e-10; set r_convergence 1e-10; set diag_method olsen; energy('fci'); ```. gives either a segfault or; ```; *** H0 Block Eigenvalue = -5.71032085. Find the roots with Olsen's single vector algorithm; init_array: trouble allocating memory ; size = -1465995312; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/559
https://github.com/psi4/psi4/issues/560:222,Energy Efficiency,energy,energy,222,```; molecule {; symmetry c1; He 0.0 0.0 0.0; He 0.0 0.0 1000.0; }. set basis 6-31G; set GUESS_VECTOR UNIT; set NUM_DETS_PRINT 4000000000000; set e_convergence 1e-10; set r_convergence 1e-10; set diag_method mitrushenkov; energy('fci'); ```. segfaults.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/560
https://github.com/psi4/psi4/issues/561:84,Energy Efficiency,energy,energy,84,```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 1000.0; }. set basis STO-3G; energy('fci'); ```. gives out NaNs after the first iteration.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/561
https://github.com/psi4/psi4/issues/562:89,Availability,checkpoint,checkpoint,89,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/562
https://github.com/psi4/psi4/issues/562:355,Modifiability,extend,extending,355,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/562
https://github.com/psi4/psi4/issues/562:1294,Security,access,access,1294,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/562
https://github.com/psi4/psi4/issues/562:1372,Security,access,access,1372,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/562
https://github.com/psi4/psi4/issues/562:1103,Testability,log,log,1103,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/562
https://github.com/psi4/psi4/issues/562:743,Usability,simpl,simpler,743,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/562
https://github.com/psi4/psi4/pull/563:99,Deployability,install,install,99,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563
https://github.com/psi4/psi4/pull/563:665,Deployability,Release,Release,665,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563
https://github.com/psi4/psi4/pull/563:159,Integrability,depend,dependency,159,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563
https://github.com/psi4/psi4/pull/563:495,Modifiability,plugin,plugin,495,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563
https://github.com/psi4/psi4/pull/563:582,Modifiability,Plugin,Plugins,582,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563
https://github.com/psi4/psi4/pull/563:707,Modifiability,CONFIG,CONFIG,707,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563
https://github.com/psi4/psi4/pull/563:209,Testability,test,tests,209,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563
https://github.com/psi4/psi4/issues/564:633,Availability,avail,available,633,"The DFT section of the manual at http://www.psicode.org/psi4manual/master/dft.html as well as https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dft.rst contains references to RC1 in multiple places. Given that 1.0 has been released, I believe the manual should be updated in these parts..; ```; The spherical grids are rotated according to a common set of rules developed during the implementation of SG1. At the moment, the rules for tetrahedral, octohedral, and icosohedral systems are not complete, so there may be some ambiguity in the grid orientation for these systems. A complete grid orientation rule set will be available in RC1. Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which at the moment may be either TREUTLER or BECKE, while the number of radial points are controlled by the DFT_RADIAL_POINTS option, which is any positive integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater radius of each atom, as described in Becke’s 1988 paper. If inaccurate integration is suspected in systems with anions or very diffuse basis functions, the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The MultiExp, Mura, and EM radial grids will be available in RC1. The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann weighting scheme is under development, and will be available in RC1.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/564
https://github.com/psi4/psi4/issues/564:1288,Availability,avail,available,1288,"The DFT section of the manual at http://www.psicode.org/psi4manual/master/dft.html as well as https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dft.rst contains references to RC1 in multiple places. Given that 1.0 has been released, I believe the manual should be updated in these parts..; ```; The spherical grids are rotated according to a common set of rules developed during the implementation of SG1. At the moment, the rules for tetrahedral, octohedral, and icosohedral systems are not complete, so there may be some ambiguity in the grid orientation for these systems. A complete grid orientation rule set will be available in RC1. Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which at the moment may be either TREUTLER or BECKE, while the number of radial points are controlled by the DFT_RADIAL_POINTS option, which is any positive integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater radius of each atom, as described in Becke’s 1988 paper. If inaccurate integration is suspected in systems with anions or very diffuse basis functions, the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The MultiExp, Mura, and EM radial grids will be available in RC1. The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann weighting scheme is under development, and will be available in RC1.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/564
https://github.com/psi4/psi4/issues/564:1501,Availability,avail,available,1501,"The DFT section of the manual at http://www.psicode.org/psi4manual/master/dft.html as well as https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dft.rst contains references to RC1 in multiple places. Given that 1.0 has been released, I believe the manual should be updated in these parts..; ```; The spherical grids are rotated according to a common set of rules developed during the implementation of SG1. At the moment, the rules for tetrahedral, octohedral, and icosohedral systems are not complete, so there may be some ambiguity in the grid orientation for these systems. A complete grid orientation rule set will be available in RC1. Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which at the moment may be either TREUTLER or BECKE, while the number of radial points are controlled by the DFT_RADIAL_POINTS option, which is any positive integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater radius of each atom, as described in Becke’s 1988 paper. If inaccurate integration is suspected in systems with anions or very diffuse basis functions, the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The MultiExp, Mura, and EM radial grids will be available in RC1. The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann weighting scheme is under development, and will be available in RC1.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/564
https://github.com/psi4/psi4/issues/564:235,Deployability,release,released,235,"The DFT section of the manual at http://www.psicode.org/psi4manual/master/dft.html as well as https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dft.rst contains references to RC1 in multiple places. Given that 1.0 has been released, I believe the manual should be updated in these parts..; ```; The spherical grids are rotated according to a common set of rules developed during the implementation of SG1. At the moment, the rules for tetrahedral, octohedral, and icosohedral systems are not complete, so there may be some ambiguity in the grid orientation for these systems. A complete grid orientation rule set will be available in RC1. Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which at the moment may be either TREUTLER or BECKE, while the number of radial points are controlled by the DFT_RADIAL_POINTS option, which is any positive integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater radius of each atom, as described in Becke’s 1988 paper. If inaccurate integration is suspected in systems with anions or very diffuse basis functions, the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The MultiExp, Mura, and EM radial grids will be available in RC1. The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann weighting scheme is under development, and will be available in RC1.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/564
https://github.com/psi4/psi4/issues/564:276,Deployability,update,updated,276,"The DFT section of the manual at http://www.psicode.org/psi4manual/master/dft.html as well as https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dft.rst contains references to RC1 in multiple places. Given that 1.0 has been released, I believe the manual should be updated in these parts..; ```; The spherical grids are rotated according to a common set of rules developed during the implementation of SG1. At the moment, the rules for tetrahedral, octohedral, and icosohedral systems are not complete, so there may be some ambiguity in the grid orientation for these systems. A complete grid orientation rule set will be available in RC1. Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which at the moment may be either TREUTLER or BECKE, while the number of radial points are controlled by the DFT_RADIAL_POINTS option, which is any positive integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater radius of each atom, as described in Becke’s 1988 paper. If inaccurate integration is suspected in systems with anions or very diffuse basis functions, the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The MultiExp, Mura, and EM radial grids will be available in RC1. The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann weighting scheme is under development, and will be available in RC1.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/564
https://github.com/psi4/psi4/issues/564:1025,Deployability,integrat,integration,1025,"The DFT section of the manual at http://www.psicode.org/psi4manual/master/dft.html as well as https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dft.rst contains references to RC1 in multiple places. Given that 1.0 has been released, I believe the manual should be updated in these parts..; ```; The spherical grids are rotated according to a common set of rules developed during the implementation of SG1. At the moment, the rules for tetrahedral, octohedral, and icosohedral systems are not complete, so there may be some ambiguity in the grid orientation for these systems. A complete grid orientation rule set will be available in RC1. Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which at the moment may be either TREUTLER or BECKE, while the number of radial points are controlled by the DFT_RADIAL_POINTS option, which is any positive integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater radius of each atom, as described in Becke’s 1988 paper. If inaccurate integration is suspected in systems with anions or very diffuse basis functions, the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The MultiExp, Mura, and EM radial grids will be available in RC1. The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann weighting scheme is under development, and will be available in RC1.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/564
https://github.com/psi4/psi4/issues/564:1025,Integrability,integrat,integration,1025,"The DFT section of the manual at http://www.psicode.org/psi4manual/master/dft.html as well as https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dft.rst contains references to RC1 in multiple places. Given that 1.0 has been released, I believe the manual should be updated in these parts..; ```; The spherical grids are rotated according to a common set of rules developed during the implementation of SG1. At the moment, the rules for tetrahedral, octohedral, and icosohedral systems are not complete, so there may be some ambiguity in the grid orientation for these systems. A complete grid orientation rule set will be available in RC1. Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which at the moment may be either TREUTLER or BECKE, while the number of radial points are controlled by the DFT_RADIAL_POINTS option, which is any positive integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater radius of each atom, as described in Becke’s 1988 paper. If inaccurate integration is suspected in systems with anions or very diffuse basis functions, the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The MultiExp, Mura, and EM radial grids will be available in RC1. The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann weighting scheme is under development, and will be available in RC1.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/564
https://github.com/psi4/psi4/issues/565:124,Availability,error,error,124,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/issues/565:471,Availability,Error,Error,471,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/issues/565:832,Availability,error,errors,832,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/issues/565:102,Modifiability,plugin,plugin,102,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/issues/565:151,Modifiability,plugin,plugin,151,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/issues/565:243,Modifiability,plugin,plugin,243,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/issues/565:665,Modifiability,variab,variable,665,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/issues/565:808,Modifiability,Config,Configuring,808,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/issues/565:263,Performance,load,loading,263,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/issues/565:279,Performance,cache,cache,279,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/issues/565:693,Performance,cache,cache,693,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565
https://github.com/psi4/psi4/pull/566:25,Deployability,patch,patches,25,"## Description; Minor CI patches. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Closes https://github.com/psi4/psi4/issues/559 and moves these features to a wishlist.; - [x] Closes https://github.com/psi4/psi4/issues/558, RSP eigenvectors were indeed wrong. Adds a RSP MCSCF test case for future testing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/566
https://github.com/psi4/psi4/pull/566:344,Testability,test,test,344,"## Description; Minor CI patches. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Closes https://github.com/psi4/psi4/issues/559 and moves these features to a wishlist.; - [x] Closes https://github.com/psi4/psi4/issues/558, RSP eigenvectors were indeed wrong. Adds a RSP MCSCF test case for future testing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/566
https://github.com/psi4/psi4/pull/566:365,Testability,test,testing,365,"## Description; Minor CI patches. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Closes https://github.com/psi4/psi4/issues/559 and moves these features to a wishlist.; - [x] Closes https://github.com/psi4/psi4/issues/558, RSP eigenvectors were indeed wrong. Adds a RSP MCSCF test case for future testing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/566
https://github.com/psi4/psi4/pull/568:475,Testability,test,test,475,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] removes lingering RC1 refs, fixing psi4/psi4#564; - [x] ESP cubes had been broken by the basis set changes associated with inversion, so fixed that, as brought up on [forum]( http://forum.psicode.org/t/auxiliary-basis-set-not-found-in-cubeprop-esp-calculations/383); - [x] new cubeprop-esp test case. only 4 s with df-scf/qzvp electrostatic potential. any red flags?. ## Questions; - [ ] Note that I had to add a fn to wfn. I'm glad to go another way if ppl object and suggest. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/568
https://github.com/psi4/psi4/pull/569:25,Modifiability,plugin,plugin,25,## Description; Turn off plugin testing by default. Turn on for Travis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] enable plugin testing to be turned off (needed for conda packages); - [x] explicitly turn on plugin testing for Travis CI to keep plugins in working order. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/569
https://github.com/psi4/psi4/pull/569:194,Modifiability,plugin,plugin,194,## Description; Turn off plugin testing by default. Turn on for Travis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] enable plugin testing to be turned off (needed for conda packages); - [x] explicitly turn on plugin testing for Travis CI to keep plugins in working order. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/569
https://github.com/psi4/psi4/pull/569:280,Modifiability,plugin,plugin,280,## Description; Turn off plugin testing by default. Turn on for Travis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] enable plugin testing to be turned off (needed for conda packages); - [x] explicitly turn on plugin testing for Travis CI to keep plugins in working order. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/569
https://github.com/psi4/psi4/pull/569:317,Modifiability,plugin,plugins,317,## Description; Turn off plugin testing by default. Turn on for Travis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] enable plugin testing to be turned off (needed for conda packages); - [x] explicitly turn on plugin testing for Travis CI to keep plugins in working order. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/569
https://github.com/psi4/psi4/pull/569:32,Testability,test,testing,32,## Description; Turn off plugin testing by default. Turn on for Travis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] enable plugin testing to be turned off (needed for conda packages); - [x] explicitly turn on plugin testing for Travis CI to keep plugins in working order. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/569
https://github.com/psi4/psi4/pull/569:201,Testability,test,testing,201,## Description; Turn off plugin testing by default. Turn on for Travis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] enable plugin testing to be turned off (needed for conda packages); - [x] explicitly turn on plugin testing for Travis CI to keep plugins in working order. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/569
https://github.com/psi4/psi4/pull/569:287,Testability,test,testing,287,## Description; Turn off plugin testing by default. Turn on for Travis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] enable plugin testing to be turned off (needed for conda packages); - [x] explicitly turn on plugin testing for Travis CI to keep plugins in working order. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/569
https://github.com/psi4/psi4/pull/570:246,Availability,avail,available,246,"## Description; Ensures that the `Ct_` array is built when using initial guesses with ROHF Wavefunctions. Thereby fixing `GUESS READ` for ROHF Wavefunctions. As a note this still wont quite work for CUHF as we do not have a full orthogonal basis available. However, it works much better than for ROHF and generally stays in the same minima. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/570
https://github.com/psi4/psi4/pull/571:689,Energy Efficiency,reduce,reduce,689,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/571
https://github.com/psi4/psi4/pull/571:311,Integrability,depend,dependency,311,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/571
https://github.com/psi4/psi4/pull/571:35,Modifiability,refactor,refactored,35,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/571
https://github.com/psi4/psi4/pull/571:1095,Modifiability,Refactor,Refactors,1095,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/571
https://github.com/psi4/psi4/pull/571:1043,Safety,Avoid,Avoids,1043,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/571
https://github.com/psi4/psi4/pull/571:594,Security,expose,exposes,594,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/571
https://github.com/psi4/psi4/pull/574:106,Testability,test,testing,106,#571 has gone a little awry in its git history. This should be a clean version. Relying on CI for compile testing. Maybe should still be squash merged.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/574
https://github.com/psi4/psi4/pull/576:370,Availability,avail,available,370,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/576
https://github.com/psi4/psi4/pull/576:654,Deployability,Release,Release,654,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/576
https://github.com/psi4/psi4/pull/576:191,Integrability,interface,interface,191,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/576
https://github.com/psi4/psi4/pull/576:430,Integrability,interface,interface,430,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/576
https://github.com/psi4/psi4/pull/576:233,Testability,test,test,233,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/576
https://github.com/psi4/psi4/pull/576:567,Testability,test,tested,567,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/576
https://github.com/psi4/psi4/pull/576:540,Usability,simpl,simplified,540,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/576
https://github.com/psi4/psi4/issues/577:77,Availability,error,error,77,"after pulling a few commits to the current version I encounter the following error:. ```; [ 99%] Building CXX object src/CMakeFiles/core.dir/export_mints.cc.o; /usr/qc/psi4/psi4/src/export_mints.cc: In function ‘void export_mints(pybind11::module&)’:; /usr/qc/psi4/psi4/src/export_mints.cc:1029:79: error: ‘buffer_protocol’ is not a member of ‘py’; py::class_<detci::CIvect, std::shared_ptr<detci::CIvect> >(m, ""CIVector"", py::buffer_protocol(), ""docstring""); ```. guess it has to do with https://github.com/psi4/psi4/pull/557 which is way over my head.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577
https://github.com/psi4/psi4/issues/577:299,Availability,error,error,299,"after pulling a few commits to the current version I encounter the following error:. ```; [ 99%] Building CXX object src/CMakeFiles/core.dir/export_mints.cc.o; /usr/qc/psi4/psi4/src/export_mints.cc: In function ‘void export_mints(pybind11::module&)’:; /usr/qc/psi4/psi4/src/export_mints.cc:1029:79: error: ‘buffer_protocol’ is not a member of ‘py’; py::class_<detci::CIvect, std::shared_ptr<detci::CIvect> >(m, ""CIVector"", py::buffer_protocol(), ""docstring""); ```. guess it has to do with https://github.com/psi4/psi4/pull/557 which is way over my head.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577
https://github.com/psi4/psi4/pull/579:138,Availability,down,down,138,"## Description; According to [clang source](http://llvm.org/svn/llvm-project/cfe/trunk/lib/Frontend/InitPreprocessor.cpp) (about half way down the page), clang always reports version 4.2.1 when using ```__GNUC__```, ```__GNUC_MINOR__```, ```__GNUC_PATCHLEVEL__```. This PR updates the version tester to use ```__clang_major__```, ```__clang_minor__```, ```__clang_patchlevel__``` when clang is detected. This issue appeared when using Intel compilers on a Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/579
https://github.com/psi4/psi4/pull/579:273,Deployability,update,updates,273,"## Description; According to [clang source](http://llvm.org/svn/llvm-project/cfe/trunk/lib/Frontend/InitPreprocessor.cpp) (about half way down the page), clang always reports version 4.2.1 when using ```__GNUC__```, ```__GNUC_MINOR__```, ```__GNUC_PATCHLEVEL__```. This PR updates the version tester to use ```__clang_major__```, ```__clang_minor__```, ```__clang_patchlevel__``` when clang is detected. This issue appeared when using Intel compilers on a Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/579
https://github.com/psi4/psi4/pull/579:394,Safety,detect,detected,394,"## Description; According to [clang source](http://llvm.org/svn/llvm-project/cfe/trunk/lib/Frontend/InitPreprocessor.cpp) (about half way down the page), clang always reports version 4.2.1 when using ```__GNUC__```, ```__GNUC_MINOR__```, ```__GNUC_PATCHLEVEL__```. This PR updates the version tester to use ```__clang_major__```, ```__clang_minor__```, ```__clang_patchlevel__``` when clang is detected. This issue appeared when using Intel compilers on a Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/579
https://github.com/psi4/psi4/pull/579:293,Testability,test,tester,293,"## Description; According to [clang source](http://llvm.org/svn/llvm-project/cfe/trunk/lib/Frontend/InitPreprocessor.cpp) (about half way down the page), clang always reports version 4.2.1 when using ```__GNUC__```, ```__GNUC_MINOR__```, ```__GNUC_PATCHLEVEL__```. This PR updates the version tester to use ```__clang_major__```, ```__clang_minor__```, ```__clang_patchlevel__``` when clang is detected. This issue appeared when using Intel compilers on a Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/579
https://github.com/psi4/psi4/issues/580:14,Deployability,install,installing,14,"Hi all,. I am installing software on a HPC cluster. In general, I always install from source (whenever it is possible to get source code). I would like to ask if it is possible to get PSI 4 source code tarballs with a release number, because we use environment modules to manage different versions of a software. For a release 1.1 of PSI 4, I would for instance create a module named psi4/1.1. If I would start creating modules named after git commit tags, like. psi4/e0a3eb254d184eed69ab8f598c8601cab12c610b￼. users would not understand what version they are actually using. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580
https://github.com/psi4/psi4/issues/580:73,Deployability,install,install,73,"Hi all,. I am installing software on a HPC cluster. In general, I always install from source (whenever it is possible to get source code). I would like to ask if it is possible to get PSI 4 source code tarballs with a release number, because we use environment modules to manage different versions of a software. For a release 1.1 of PSI 4, I would for instance create a module named psi4/1.1. If I would start creating modules named after git commit tags, like. psi4/e0a3eb254d184eed69ab8f598c8601cab12c610b￼. users would not understand what version they are actually using. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580
https://github.com/psi4/psi4/issues/580:218,Deployability,release,release,218,"Hi all,. I am installing software on a HPC cluster. In general, I always install from source (whenever it is possible to get source code). I would like to ask if it is possible to get PSI 4 source code tarballs with a release number, because we use environment modules to manage different versions of a software. For a release 1.1 of PSI 4, I would for instance create a module named psi4/1.1. If I would start creating modules named after git commit tags, like. psi4/e0a3eb254d184eed69ab8f598c8601cab12c610b￼. users would not understand what version they are actually using. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580
https://github.com/psi4/psi4/issues/580:319,Deployability,release,release,319,"Hi all,. I am installing software on a HPC cluster. In general, I always install from source (whenever it is possible to get source code). I would like to ask if it is possible to get PSI 4 source code tarballs with a release number, because we use environment modules to manage different versions of a software. For a release 1.1 of PSI 4, I would for instance create a module named psi4/1.1. If I would start creating modules named after git commit tags, like. psi4/e0a3eb254d184eed69ab8f598c8601cab12c610b￼. users would not understand what version they are actually using. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580
https://github.com/psi4/psi4/issues/581:115,Availability,error,errors,115,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:199,Availability,Error,Errors,199,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:219,Availability,Error,Error,219,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:363,Availability,Error,Error,363,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:507,Availability,Error,Error,507,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:651,Availability,Error,Error,651,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:795,Availability,Error,Error,795,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:939,Availability,Error,Error,939,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1073,Availability,Error,Error,1073,"nstallation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1207,Availability,Error,Error,1207,"ror at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1341,Availability,Error,Error,1341,". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CM",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:6824,Availability,Error,Error,6824,"LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_filesystem.so -DBoost_PYTHON_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_python.so -DBoost_REGEX_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:6968,Availability,Error,Error,6968,"/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_python.so -DBoost_REGEX_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7112,Availability,Error,Error,7112,"libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7256,Availability,Error,Error,7256,"st_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DND",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7400,Availability,Error,Error,7400,"ps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7544,Availability,Error,Error,7544,"2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7678,Availability,Error,Error,7678,"lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7812,Availability,Error,Error,7812,"ror at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_L",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7946,Availability,Error,Error,7946,". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CX",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:12992,Availability,error,errors,12992,"-- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /cluster/apps/python/2.7.6/x86_64/bin/python (found version ""2.7.6"") ; -- Found Python: /cluster/apps/python/2.7.6/x86_64/lib64/libpython2.7.so ; -- Boost version: 1.55.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```. How can I disable the copying of the test files ? Any help is appreciated. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:16,Deployability,install,install,16,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:24,Deployability,release,release,24,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:86,Deployability,install,installation,86,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:145,Deployability,configurat,configuration,145,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2799,Deployability,release,release,2799,"D.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-fc-flags '-ftree-vectorize -march=corei7-avx -mavx' -D CMAKE_VERBOSE_MAKEFILE=ON -D HDF5_sz_LIBRARY_RELEASE=/cluster/apps/szip/2.1/x86_64/gcc_4.8.2/lib/libsz.so -D Boost_CHRONO_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_chrono.so -D Boost_FILESYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:5595,Deployability,release,release,5595,"NABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DLIBINT_OPT_AM=7 -DEXECUTABLE_SUFFIX= -DEXPLICIT_BLAS_LIB=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so -DENABLE_AUTO_BLAS=OFF -DEXPLICIT_LAPACK_LIB=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so -DENABLE_AUTO_LAPACK=OFF -DBOOST_INCLUDEDIR=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include -DBOOST_LIBRARYDIR=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 -DZLIB_ROOT=/usr -DGSL_ROOT_DIR=/cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 -DHDF5_ROOT=/cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial -DEXTRA_C_FLAGS=""-ftree-vectorize -march=corei7-avx -mavx"" -DEXTRA_CXX_FLAGS=""-ftree-vectorize -march=corei7-avx -mavx"" -DEXTRA_Fortran_FLAGS=""-ftree-vectorize -march=corei7-avx -mavx"" -DCMAKE_INSTALL_PREFIX=/cluster/apps/psi4/1.0/x86_64 -DCMAKE_BUILD_TYPE=release -DCMAKE_VERBOSE_MAKEFILE=ON -DHDF5_sz_LIBRARY_RELEASE=/cluster/apps/szip/2.1/x86_64/gcc_4.8.2/lib/libsz.so -DBoost_CHRONO_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_chrono.so -DBoost_FILESYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_filesystem.so -DBoost_PYTHON_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_python.so -DBoost_REGEX_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: usin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:10407,Integrability,Interface,Interface,10407,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:10441,Integrability,Interface,Interface,10441,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:71,Modifiability,config,configures,71,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:145,Modifiability,config,configuration,145,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:12968,Modifiability,Config,Configuring,12968,"-- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /cluster/apps/python/2.7.6/x86_64/bin/python (found version ""2.7.6"") ; -- Found Python: /cluster/apps/python/2.7.6/x86_64/lib64/libpython2.7.so ; -- Boost version: 1.55.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```. How can I disable the copying of the test files ? Any help is appreciated. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:10598,Performance,Perform,Performing,10598,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:10634,Performance,Perform,Performing,10634,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11011,Performance,Perform,Performing,11011,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11045,Performance,Perform,Performing,11045,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11124,Performance,Perform,Performing,11124,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11165,Performance,Perform,Performing,11165,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11253,Performance,Perform,Performing,11253,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11294,Performance,Perform,Performing,11294,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11386,Performance,Perform,Performing,11386,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11427,Performance,Perform,Performing,11427,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:9456,Safety,Detect,Detecting,9456,ectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:9492,Safety,Detect,Detecting,9492,ectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:9535,Safety,Detect,Detecting,9535,ectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:9570,Safety,Detect,Detecting,9570,ectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:9753,Safety,Detect,Detecting,9753,11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- l,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:9787,Safety,Detect,Detecting,9787,11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- l,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:9828,Safety,Detect,Detecting,9828,11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- l,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:9861,Safety,Detect,Detecting,9861,11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- l,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:10117,Safety,Detect,Detecting,10117,_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:10157,Safety,Detect,Detecting,10157,_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:10387,Safety,Detect,Detecting,10387,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:10421,Safety,Detect,Detecting,10421,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2392,Security,access,access,2392,"PY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2586,Security,access,access,2586,"cratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-fc-flags '-ftree-vectorize -march=corei7-avx -mavx' -D CMAKE_VERBOSE_MAKEFILE=ON -D HDF5_sz_LIBRARY_RELEASE=/cluster/apps/szip/2.1/x86_64/gcc_4.8.2/lib/libsz.so",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:134,Testability,log,log,134,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:228,Testability,test,tests,228,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:318,Testability,test,tests,318,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:372,Testability,test,tests,372,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:462,Testability,test,tests,462,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:516,Testability,test,tests,516,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:606,Testability,test,tests,606,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:660,Testability,test,tests,660,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:750,Testability,test,tests,750,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:804,Testability,test,tests,804,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:894,Testability,test,tests,894,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:948,Testability,test,tests,948,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1038,Testability,test,tests,1038,"e. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1082,Testability,test,tests,1082,"nstallation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1172,Testability,test,tests,1172,"tom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; S",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1216,Testability,test,tests,1216,"ror at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1306,Testability,test,tests,1306,"1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1350,Testability,test,tests,1350,". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CM",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1441,Testability,test,tests,1441,"ssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1539,Testability,test,tests,1539,"4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:1616,Testability,test,tests,1616,"1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMak",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2090,Testability,log,log,2090,"Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2172,Testability,log,log,2172,"sts/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2243,Testability,log,log,2243,":9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --h",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2261,Testability,log,log,2261,"nnot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/h",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2376,Testability,log,log,2376,"PY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2454,Testability,log,log,2454,"iles that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-fc-flags '-ftree-vectorize -march=corei7-avx -mav",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2570,Testability,log,log,2570,"cratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-fc-flags '-ftree-vectorize -march=corei7-avx -mavx' -D CMAKE_VERBOSE_MAKEFILE=ON -D HDF5_sz_LIBRARY_RELEASE=/cluster/apps/szip/2.1/x86_64/gcc_4.8.2/lib/libsz.so",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2647,Testability,log,log,2647,"_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-fc-flags '-ftree-vectorize -march=corei7-avx -mavx' -D CMAKE_VERBOSE_MAKEFILE=ON -D HDF5_sz_LIBRARY_RELEASE=/cluster/apps/szip/2.1/x86_64/gcc_4.8.2/lib/libsz.so -D Boost_CHRONO_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/seria",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:2693,Testability,log,log,2693,"ube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-fc-flags '-ftree-vectorize -march=corei7-avx -mavx' -D CMAKE_VERBOSE_MAKEFILE=ON -D HDF5_sz_LIBRARY_RELEASE=/cluster/apps/szip/2.1/x86_64/gcc_4.8.2/lib/libsz.so -D Boost_CHRONO_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_chrono.so",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:6833,Testability,test,tests,6833,"LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_filesystem.so -DBoost_PYTHON_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_python.so -DBoost_REGEX_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:6923,Testability,test,tests,6923,"ost_PYTHON_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_python.so -DBoost_REGEX_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:6977,Testability,test,tests,6977,"/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_python.so -DBoost_REGEX_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7067,Testability,test,tests,7067,"ps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- Sy",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7121,Testability,test,tests,7121,"libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7211,Testability,test,tests,7211,"cc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vecto",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7265,Testability,test,tests,7265,"st_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DND",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7355,Testability,test,tests,7355,".so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ft",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7409,Testability,test,tests,7409,"ps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7499,Testability,test,tests,7499,"uster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7553,Testability,test,tests,7553,"2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7643,Testability,test,tests,7643,"pps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7687,Testability,test,tests,7687,"lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7777,Testability,test,tests,7777,"4/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7821,Testability,test,tests,7821,"ror at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_L",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7911,Testability,test,tests,7911,"1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:7955,Testability,test,tests,7955,". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CX",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:8046,Testability,test,tests,8046,"ssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_R",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:10609,Testability,Test,Test,10609,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:10645,Testability,Test,Test,10645,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11022,Testability,Test,Test,11022,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11056,Testability,Test,Test,11056,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11135,Testability,Test,Test,11135,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11176,Testability,Test,Test,11176,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11264,Testability,Test,Test,11264,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11305,Testability,Test,Test,11305,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11397,Testability,Test,Test,11397,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:11438,Testability,Test,Test,11438,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:13075,Testability,log,log,13075,"-- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /cluster/apps/python/2.7.6/x86_64/bin/python (found version ""2.7.6"") ; -- Found Python: /cluster/apps/python/2.7.6/x86_64/lib64/libpython2.7.so ; -- Boost version: 1.55.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```. How can I disable the copying of the test files ? Any help is appreciated. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:13146,Testability,log,log,13146,"-- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /cluster/apps/python/2.7.6/x86_64/bin/python (found version ""2.7.6"") ; -- Found Python: /cluster/apps/python/2.7.6/x86_64/lib64/libpython2.7.so ; -- Boost version: 1.55.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```. How can I disable the copying of the test files ? Any help is appreciated. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/issues/581:13195,Testability,test,test,13195,"-- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /cluster/apps/python/2.7.6/x86_64/bin/python (found version ""2.7.6"") ; -- Found Python: /cluster/apps/python/2.7.6/x86_64/lib64/libpython2.7.so ; -- Boost version: 1.55.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```. How can I disable the copying of the test files ? Any help is appreciated. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581
https://github.com/psi4/psi4/pull/582:534,Deployability,Release,Release,534,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/582
https://github.com/psi4/psi4/pull/582:302,Integrability,depend,dependencies,302,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/582
https://github.com/psi4/psi4/pull/582:77,Modifiability,plugin,plugin,77,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/582
https://github.com/psi4/psi4/pull/582:264,Modifiability,plugin,plugins,264,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/582
https://github.com/psi4/psi4/pull/582:449,Modifiability,plugin,plugin,449,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/582
https://github.com/psi4/psi4/pull/582:637,Modifiability,plugin,plugins,637,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/582
https://github.com/psi4/psi4/pull/582:115,Safety,avoid,avoid,115,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/582
https://github.com/psi4/psi4/pull/582:502,Usability,simpl,simplified,502,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/582
https://github.com/psi4/psi4/pull/583:297,Deployability,Release,Release,297,"## Description; shorten quicktests for Travis' sake. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] moved `sapt6` and `nbody-he-cluster` out of quicktests; - in tests, make sure you say `#TEST`, not `# TEST`; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/583
https://github.com/psi4/psi4/pull/583:229,Testability,test,tests,229,"## Description; shorten quicktests for Travis' sake. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] moved `sapt6` and `nbody-he-cluster` out of quicktests; - in tests, make sure you say `#TEST`, not `# TEST`; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/583
https://github.com/psi4/psi4/pull/583:256,Testability,TEST,TEST,256,"## Description; shorten quicktests for Travis' sake. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] moved `sapt6` and `nbody-he-cluster` out of quicktests; - in tests, make sure you say `#TEST`, not `# TEST`; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/583
https://github.com/psi4/psi4/pull/583:270,Testability,TEST,TEST,270,"## Description; shorten quicktests for Travis' sake. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] moved `sapt6` and `nbody-he-cluster` out of quicktests; - in tests, make sure you say `#TEST`, not `# TEST`; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/583
https://github.com/psi4/psi4/pull/584:24,Usability,simpl,simply,24,## Description; This PR simply adds atom and AO labels to the printing of MO's. . An example of the way it currently looks with this PR: ; ```; ==> Molecular Orbitals <==. 1 2 3 4 5. 1 KR1 s 0.9940785 0.4464603 0.0000000 0.0000000 0.0000000; 2 KR1 s 0.0144528 -1.0568053 0.0000000 0.0000000 0.0000000; 3 KR1 px 0.0000000 0.0000000 0.9928515 0.0000000 0.0000000; 4 KR1 py 0.0000000 0.0000000 0.0000000 0.9928515 0.0000000; 5 KR1 pz 0.0000000 0.0000000 0.0000000 0.0000000 0.9928515; 6 KR1 s -0.0017038 -0.0826135 0.0000000 0.0000000 0.0000000; 7 KR1 px 0.0000000 0.0000000 0.0182476 0.0000000 0.0000000; 8 KR1 py 0.0000000 0.0000000 0.0000000 0.0182476 0.0000000; 9 KR1 pz 0.0000000 0.0000000 0.0000000 0.0000000 0.0182476; 10 KR1 s 0.0002777 0.0113144 0.0000000 0.0000000 0.0000000; 11 KR1 px 0.0000000 0.0000000 -0.0011943 0.0000000 0.0000000; 12 KR1 py 0.0000000 0.0000000 0.0000000 -0.0011943 0.0000000; 13 KR1 pz 0.0000000 0.0000000 0.0000000 0.0000000 -0.0011943; 14 KR1 d 1 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 15 KR1 d 2 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 16 KR1 d 3 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 17 KR1 d 4 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 18 KR1 d 5 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000. Ene -514.2800590 -67.8376091 -62.2184762 -62.2184762 -62.2184762; Sym Ag Ag B1u B3u B2u; Occ 2 2 2 2 2. 6 7 8 9 10. 1 KR1 s 0.1885186 0.0000000 0.0000000 0.0000000 0.0000000; 2 KR1 s -0.5439134 0.0000000 0.0000000 0.0000000 -0.0000000; 3 KR1 px 0.0000000 0.4297751 0.0000000 0.0000000 0.0000000; 4 KR1 py 0.0000000 0.0000000 0.4297751 0.0000000 0.0000000; 5 KR1 pz 0.0000000 0.0000000 0.0000000 0.4297751 0.0000000; 6 KR1 s 1.0767986 0.0000000 0.0000000 0.0000000 0.0000000; 7 KR1 px 0.0000000 -1.0708210 0.0000000 0.0000000 0.0000000; 8 KR1 py 0.0000000 0.0000000 -1.0708210 0.0000000 0.0000000; 9 KR1 pz 0.0000000 0.0000000 0.0000000 -1.0708210 0.0000000; 10 KR1 s 0.0326973 0.0000000 0.0000000 0.0000000 0.0000000; 11 K,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/584
https://github.com/psi4/psi4/pull/585:18,Testability,test,test,18,## Description; A test case for dgasmith's orbital rotation code using an ROHF reference.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/585
https://github.com/psi4/psi4/issues/586:726,Availability,Error,Error,726,"I'm trying to run some FCI calculations without symmetry to ensure I land on the ground state. However, the SCF is sometimes very hard to do without symmetry, so I'd like to run SCF with symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eige",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/586
https://github.com/psi4/psi4/issues/586:790,Availability,Error,Error,790,"I'm trying to run some FCI calculations without symmetry to ensure I land on the ground state. However, the SCF is sometimes very hard to do without symmetry, so I'd like to run SCF with symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eige",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/586
https://github.com/psi4/psi4/issues/586:1804,Deployability,install,install,1804,"symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 2.8114045453E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```; followed by the crash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/586
https://github.com/psi4/psi4/issues/586:340,Energy Efficiency,charge,charge,340,"I'm trying to run some FCI calculations without symmetry to ensure I land on the ground state. However, the SCF is sometimes very hard to do without symmetry, so I'd like to run SCF with symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eige",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/586
https://github.com/psi4/psi4/issues/586:506,Energy Efficiency,energy,energy,506,"I'm trying to run some FCI calculations without symmetry to ensure I land on the ground state. However, the SCF is sometimes very hard to do without symmetry, so I'd like to run SCF with symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eige",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/586
https://github.com/psi4/psi4/issues/586:627,Energy Efficiency,energy,energy,627,"I'm trying to run some FCI calculations without symmetry to ensure I land on the ground state. However, the SCF is sometimes very hard to do without symmetry, so I'd like to run SCF with symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eige",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/586
https://github.com/psi4/psi4/issues/586:1361,Energy Efficiency,Energy,Energy,1361,"symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 2.8114045453E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```; followed by the crash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/586
https://github.com/psi4/psi4/issues/586:1683,Performance,Cache,Cache,1683,"symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 2.8114045453E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```; followed by the crash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/586
https://github.com/psi4/psi4/pull/587:287,Integrability,rout,routine,287,"## Description; Fixes some of the issues with ERD in Psi4. Moves a piece of the normalization from ERD to Psi4. This prevents multiplication by zero inside ERD, which results in incorrect integral values. Note that the multiplication by zero doesn't happen in Psi4, as the normalization routine doesn't get called for a ""zero"" basis set (ie, in density fitting). **Warning** I don't know how well-tested ERD in Psi4 is. I still get some failing tests, although there is certainly an improvement from before. Ideas for why this might be are welcome. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587
https://github.com/psi4/psi4/pull/587:397,Testability,test,tested,397,"## Description; Fixes some of the issues with ERD in Psi4. Moves a piece of the normalization from ERD to Psi4. This prevents multiplication by zero inside ERD, which results in incorrect integral values. Note that the multiplication by zero doesn't happen in Psi4, as the normalization routine doesn't get called for a ""zero"" basis set (ie, in density fitting). **Warning** I don't know how well-tested ERD in Psi4 is. I still get some failing tests, although there is certainly an improvement from before. Ideas for why this might be are welcome. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587
https://github.com/psi4/psi4/pull/587:445,Testability,test,tests,445,"## Description; Fixes some of the issues with ERD in Psi4. Moves a piece of the normalization from ERD to Psi4. This prevents multiplication by zero inside ERD, which results in incorrect integral values. Note that the multiplication by zero doesn't happen in Psi4, as the normalization routine doesn't get called for a ""zero"" basis set (ie, in density fitting). **Warning** I don't know how well-tested ERD in Psi4 is. I still get some failing tests, although there is certainly an improvement from before. Ideas for why this might be are welcome. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587
https://github.com/psi4/psi4/pull/588:76,Deployability,patch,patch,76,"This grew a bit to encompass a few more issues, its still a general bug fix patch. ## Description; Fixes and adds test for two issues that were identified:; - Fixes #586 where the SAD basis was not being set when READ failed.; - Fixes #556 as the NO option was not tracked to the new MCSCF driver.; - CI OPDM/TPDM now correctly closes files when complete.; - MCSCF Rotate matrices are now built continuously to avoid difficult cases to exponentiate.; - Patched up Dvec reading between successive CI calls (especially for MCSCF).; - PK Non-symmetric density matrices should now always be detected correction.; - Makes CI printing to be more canonical.; - Prints occupation number for CI, fixes #590. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588
https://github.com/psi4/psi4/pull/588:395,Deployability,continuous,continuously,395,"This grew a bit to encompass a few more issues, its still a general bug fix patch. ## Description; Fixes and adds test for two issues that were identified:; - Fixes #586 where the SAD basis was not being set when READ failed.; - Fixes #556 as the NO option was not tracked to the new MCSCF driver.; - CI OPDM/TPDM now correctly closes files when complete.; - MCSCF Rotate matrices are now built continuously to avoid difficult cases to exponentiate.; - Patched up Dvec reading between successive CI calls (especially for MCSCF).; - PK Non-symmetric density matrices should now always be detected correction.; - Makes CI printing to be more canonical.; - Prints occupation number for CI, fixes #590. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588
https://github.com/psi4/psi4/pull/588:453,Deployability,Patch,Patched,453,"This grew a bit to encompass a few more issues, its still a general bug fix patch. ## Description; Fixes and adds test for two issues that were identified:; - Fixes #586 where the SAD basis was not being set when READ failed.; - Fixes #556 as the NO option was not tracked to the new MCSCF driver.; - CI OPDM/TPDM now correctly closes files when complete.; - MCSCF Rotate matrices are now built continuously to avoid difficult cases to exponentiate.; - Patched up Dvec reading between successive CI calls (especially for MCSCF).; - PK Non-symmetric density matrices should now always be detected correction.; - Makes CI printing to be more canonical.; - Prints occupation number for CI, fixes #590. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588
https://github.com/psi4/psi4/pull/588:411,Safety,avoid,avoid,411,"This grew a bit to encompass a few more issues, its still a general bug fix patch. ## Description; Fixes and adds test for two issues that were identified:; - Fixes #586 where the SAD basis was not being set when READ failed.; - Fixes #556 as the NO option was not tracked to the new MCSCF driver.; - CI OPDM/TPDM now correctly closes files when complete.; - MCSCF Rotate matrices are now built continuously to avoid difficult cases to exponentiate.; - Patched up Dvec reading between successive CI calls (especially for MCSCF).; - PK Non-symmetric density matrices should now always be detected correction.; - Makes CI printing to be more canonical.; - Prints occupation number for CI, fixes #590. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588
https://github.com/psi4/psi4/pull/588:587,Safety,detect,detected,587,"This grew a bit to encompass a few more issues, its still a general bug fix patch. ## Description; Fixes and adds test for two issues that were identified:; - Fixes #586 where the SAD basis was not being set when READ failed.; - Fixes #556 as the NO option was not tracked to the new MCSCF driver.; - CI OPDM/TPDM now correctly closes files when complete.; - MCSCF Rotate matrices are now built continuously to avoid difficult cases to exponentiate.; - Patched up Dvec reading between successive CI calls (especially for MCSCF).; - PK Non-symmetric density matrices should now always be detected correction.; - Makes CI printing to be more canonical.; - Prints occupation number for CI, fixes #590. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588
https://github.com/psi4/psi4/pull/588:114,Testability,test,test,114,"This grew a bit to encompass a few more issues, its still a general bug fix patch. ## Description; Fixes and adds test for two issues that were identified:; - Fixes #586 where the SAD basis was not being set when READ failed.; - Fixes #556 as the NO option was not tracked to the new MCSCF driver.; - CI OPDM/TPDM now correctly closes files when complete.; - MCSCF Rotate matrices are now built continuously to avoid difficult cases to exponentiate.; - Patched up Dvec reading between successive CI calls (especially for MCSCF).; - PK Non-symmetric density matrices should now always be detected correction.; - Makes CI printing to be more canonical.; - Prints occupation number for CI, fixes #590. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588
https://github.com/psi4/psi4/pull/589:64,Performance,optimiz,optimization,64,"## Description; Substitute ""geometry projection"" with ""geometry optimization"" in `opt.rst`. ## Todos; - [x] Fix a misprint in `opt.rst`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/589
https://github.com/psi4/psi4/issues/590:631,Energy Efficiency,energy,energy,631,"Somewhat related to issue 556 and pull 588, if you set nat_orbs to true and run a CI calculation, you don't get the natural orbital occupations in the output, whereas if you're running CASSCF you get a nice printout. . I'm guessing the NOONs should get printed out, since the output file does say; ```; Computing CI Natural Orbitals; !Warning: New orbitals will be sorted by occuption number,; orbital spaces (occ/act/vir) may change.; ```. Example input; ```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set nat_orbs true; set wfn detci; set restricted_docc [2]. # Run CISDT; cas_e, cas_wfn = energy('cisdt', return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/590
https://github.com/psi4/psi4/pull/591:293,Deployability,install,installing,293,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591
https://github.com/psi4/psi4/pull/591:846,Deployability,Release,Release,846,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591
https://github.com/psi4/psi4/pull/591:929,Deployability,patch,patch,929,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591
https://github.com/psi4/psi4/pull/591:1083,Energy Efficiency,Adapt,Adapted,1083,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591
https://github.com/psi4/psi4/pull/591:1083,Modifiability,Adapt,Adapted,1083,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591
https://github.com/psi4/psi4/pull/591:467,Performance,optimiz,optimization,467,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591
https://github.com/psi4/psi4/pull/591:706,Safety,detect,detection,706,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591
https://github.com/psi4/psi4/pull/591:900,Safety,detect,detection,900,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591
https://github.com/psi4/psi4/pull/591:1003,Safety,detect,detection,1003,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591
https://github.com/psi4/psi4/pull/592:187,Energy Efficiency,efficient,efficient,187,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.001897 0.020388; 3 238 17 0.003629 0.001342 0.049260 0.005645 0.003470 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592
https://github.com/psi4/psi4/pull/592:345,Performance,tune,tuned,345,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.001897 0.020388; 3 238 17 0.003629 0.001342 0.049260 0.005645 0.003470 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592
https://github.com/psi4/psi4/pull/592:291,Testability,Benchmark,Benchmark,291,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.001897 0.020388; 3 238 17 0.003629 0.001342 0.049260 0.005645 0.003470 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592
https://github.com/psi4/psi4/pull/593:656,Availability,error,error,656,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:824,Availability,down,down,824,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:692,Deployability,patch,patch,692,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:1069,Deployability,Release,Release,1069," PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:1209,Deployability,patch,patch,1209,"python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""./../skeletonambit/pymodule.py"", line 65, in run_skeletonambit; skeletonambit_wfn = psi4.core.plugin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:1742,Deployability,install,install-,1742," into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""./../skeletonambit/pymodule.py"", line 65, in run_skeletonambit; skeletonambit_wfn = psi4.core.plugin('skeletonambit.so', ref_wfn). RuntimeError: ambit::Tensor::build: Ambit has not been initialized.; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:1957,Deployability,install,install-,1957," into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""./../skeletonambit/pymodule.py"", line 65, in run_skeletonambit; skeletonambit_wfn = psi4.core.plugin('skeletonambit.so', ref_wfn). RuntimeError: ambit::Tensor::build: Ambit has not been initialized.; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:2012,Energy Efficiency,energy,energy,2012," into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""./../skeletonambit/pymodule.py"", line 65, in run_skeletonambit; skeletonambit_wfn = psi4.core.plugin('skeletonambit.so', ref_wfn). RuntimeError: ambit::Tensor::build: Ambit has not been initialized.; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:2038,Energy Efficiency,energy,energy,2038," into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""./../skeletonambit/pymodule.py"", line 65, in run_skeletonambit; skeletonambit_wfn = psi4.core.plugin('skeletonambit.so', ref_wfn). RuntimeError: ambit::Tensor::build: Ambit has not been initialized.; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:447,Modifiability,plugin,plugin,447,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:513,Modifiability,plugin,plugin,513,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:543,Modifiability,plugin,plugins,543,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:2199,Modifiability,plugin,plugin,2199," into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""./../skeletonambit/pymodule.py"", line 65, in run_skeletonambit; skeletonambit_wfn = psi4.core.plugin('skeletonambit.so', ref_wfn). RuntimeError: ambit::Tensor::build: Ambit has not been initialized.; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/593:583,Safety,detect,detects,583,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593
https://github.com/psi4/psi4/pull/594:947,Availability,error,error,947,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This is atop lapack and ambit PR's, so you'll want to look only at 410be6f; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` --> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [ ] This runs into trouble in libpsipcm, where the signatures don't match up. What's missing is the dreaded HostWriter at the end. I daresay that's a change upstream that @robertodr understands. ```; /theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/psi4/src/psi4/libpsipcm/psipcm.cc(133): error: argument of type ""void (*)(const char *, int)"" is incompatible with parameter of type ""HostWriter""; symmetry_info, &host_input, &host_writer);; ^. /theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/psi4/src/psi4/libpsipcm/psipcm.cc(136): error #165: too few arguments in function call; symmetry_info, &host_input);; ^; ```. * **User-Facing for Release Notes**. ## Questions; - [ ] @robertodr, you'll take a look at this? I can certainly answer any ""why"" questions. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594
https://github.com/psi4/psi4/pull/594:1186,Availability,error,error,1186,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This is atop lapack and ambit PR's, so you'll want to look only at 410be6f; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` --> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [ ] This runs into trouble in libpsipcm, where the signatures don't match up. What's missing is the dreaded HostWriter at the end. I daresay that's a change upstream that @robertodr understands. ```; /theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/psi4/src/psi4/libpsipcm/psipcm.cc(133): error: argument of type ""void (*)(const char *, int)"" is incompatible with parameter of type ""HostWriter""; symmetry_info, &host_input, &host_writer);; ^. /theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/psi4/src/psi4/libpsipcm/psipcm.cc(136): error #165: too few arguments in function call; symmetry_info, &host_input);; ^; ```. * **User-Facing for Release Notes**. ## Questions; - [ ] @robertodr, you'll take a look at this? I can certainly answer any ""why"" questions. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594
https://github.com/psi4/psi4/pull/594:1292,Deployability,Release,Release,1292,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This is atop lapack and ambit PR's, so you'll want to look only at 410be6f; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` --> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [ ] This runs into trouble in libpsipcm, where the signatures don't match up. What's missing is the dreaded HostWriter at the end. I daresay that's a change upstream that @robertodr understands. ```; /theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/psi4/src/psi4/libpsipcm/psipcm.cc(133): error: argument of type ""void (*)(const char *, int)"" is incompatible with parameter of type ""HostWriter""; symmetry_info, &host_input, &host_writer);; ^. /theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/psi4/src/psi4/libpsipcm/psipcm.cc(136): error #165: too few arguments in function call; symmetry_info, &host_input);; ^; ```. * **User-Facing for Release Notes**. ## Questions; - [ ] @robertodr, you'll take a look at this? I can certainly answer any ""why"" questions. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594
https://github.com/psi4/psi4/pull/595:301,Safety,Safe,Safelisting-or-blocklisting-branches,301,"Most of the developers have Travis turned on in our psi4 forks (esp. as we each hosted _the_ Psi4 for a different phase over the summer). So every time we push a branch and make a PR back to psi4/psi4, Travis is running twice. According to [this](https://docs.travis-ci.com/user/customizing-the-build#Safelisting-or-blocklisting-branches), we can turn on/off travis for certain branches. So this PR hopefully keeps Travis running on all the psi4/psi4 PRs and any long-term non-PR branches you add, while turning it off for the branches that are covered under psi4/psi4 master testing. At least I think that's how this works.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/595
https://github.com/psi4/psi4/pull/595:576,Testability,test,testing,576,"Most of the developers have Travis turned on in our psi4 forks (esp. as we each hosted _the_ Psi4 for a different phase over the summer). So every time we push a branch and make a PR back to psi4/psi4, Travis is running twice. According to [this](https://docs.travis-ci.com/user/customizing-the-build#Safelisting-or-blocklisting-branches), we can turn on/off travis for certain branches. So this PR hopefully keeps Travis running on all the psi4/psi4 PRs and any long-term non-PR branches you add, while turning it off for the branches that are covered under psi4/psi4 master testing. At least I think that's how this works.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/595
https://github.com/psi4/psi4/issues/596:71,Availability,error,error,71,"Running larger calculations with scf_type pk gives me lots and lots of error messages; ```; $ psi4; thread already exists.; thread already exists.; thread already exists.; ```; and so on. These seem to arise from src/psi4/libpsio/aio_handler.cc. I'm wondering if these really are errors, if they should be printed, and whether stdout instead of the log file is the right place to do it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596
https://github.com/psi4/psi4/issues/596:280,Availability,error,errors,280,"Running larger calculations with scf_type pk gives me lots and lots of error messages; ```; $ psi4; thread already exists.; thread already exists.; thread already exists.; ```; and so on. These seem to arise from src/psi4/libpsio/aio_handler.cc. I'm wondering if these really are errors, if they should be printed, and whether stdout instead of the log file is the right place to do it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596
https://github.com/psi4/psi4/issues/596:77,Integrability,message,messages,77,"Running larger calculations with scf_type pk gives me lots and lots of error messages; ```; $ psi4; thread already exists.; thread already exists.; thread already exists.; ```; and so on. These seem to arise from src/psi4/libpsio/aio_handler.cc. I'm wondering if these really are errors, if they should be printed, and whether stdout instead of the log file is the right place to do it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596
https://github.com/psi4/psi4/issues/596:349,Testability,log,log,349,"Running larger calculations with scf_type pk gives me lots and lots of error messages; ```; $ psi4; thread already exists.; thread already exists.; thread already exists.; ```; and so on. These seem to arise from src/psi4/libpsio/aio_handler.cc. I'm wondering if these really are errors, if they should be printed, and whether stdout instead of the log file is the right place to do it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596
https://github.com/psi4/psi4/issues/597:176,Energy Efficiency,energy,energy,176,"The calculation; ```; molecule {; 0 2; Li; }. set basis cc-pVDZ; set reference rohf; set scf_type pk; set DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set SOCC [ 0, 0, 0, 0, 1, 0, 0, 0 ]; energy('scf'); ```; produces a segfault when run. All the other ways of distributing the single electron work.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/597
https://github.com/psi4/psi4/issues/598:457,Availability,Error,Error,457,"I'm trying to run a CI calculation within an active space to get a natural orbital guess for a smaller subspace CASSCF. However, when nat_orbs = true, the FNO code is triggered. In some cases I might want this to happen, but; a) I might want to get NOs with a canonical frozen core; b) the FNO code that insists on running currently crashes with; ```; ==> Build MP2 amplitudes, OPDM, and NOs <==. LIBDPD: Out-of-core algorithm not yet coded for rpqs sort.; Error in: buf4_sort; ```; on my system with roughly 300 basis functions. Frozen natural orbitals should only be triggered if the method explicitly specifies fno- or if a special keyword (I propose frz_nat_orbs) is specified. Normally I'd supply a pull request, but I still haven't figured out where the fno code is toggled in this case...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/598
https://github.com/psi4/psi4/issues/598:772,Deployability,toggle,toggled,772,"I'm trying to run a CI calculation within an active space to get a natural orbital guess for a smaller subspace CASSCF. However, when nat_orbs = true, the FNO code is triggered. In some cases I might want this to happen, but; a) I might want to get NOs with a canonical frozen core; b) the FNO code that insists on running currently crashes with; ```; ==> Build MP2 amplitudes, OPDM, and NOs <==. LIBDPD: Out-of-core algorithm not yet coded for rpqs sort.; Error in: buf4_sort; ```; on my system with roughly 300 basis functions. Frozen natural orbitals should only be triggered if the method explicitly specifies fno- or if a special keyword (I propose frz_nat_orbs) is specified. Normally I'd supply a pull request, but I still haven't figured out where the fno code is toggled in this case...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/598
https://github.com/psi4/psi4/pull/599:1122,Deployability,Release,Release,1122,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; <!--; - [x] This is atop lapack and PR, so you'll want to look only at later commits; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` -> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [x] This runs with py27 and all tests pass; - [x] this PR is continues from #594 ; - [x] still need to resolve Fortran/-recursive/libifcoremt/OpenMP issue; -->; - [x] Fix some HDF5 detection problems; - [x] Adds some colored ""MKL"" and ""AM"" to CMake output for lapack and libint, respectively, for ready diagnosis.; - [x] Fixes rpath on Mac by setting it to `@loader_path/${_rel}""`; - [x] Some host_writer changes to modernize PCMSolver; * **User-Facing for Release Notes**; - [x] Re-enables PCMSolver via `-DENABLE_PCMSolver`. No longer hint with `PCMSOLVER_ROOT` but with `PCMSolver_DIR`. Pins to `v1.1.9`.; - [x] Bumps CMake requirement to 3.2; - [x] upstream PCMSolver needs py3 compatibility, PCMSolver/pcmsolver#39; - [x] anyone building with Intel and native gcc < 4.9 needs to have the gcc-name and gxx-name in `CMAKE_Fortran_FLAGS`, too, just like `CMAKE_CXX_FLAGS`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599
https://github.com/psi4/psi4/pull/599:846,Safety,detect,detection,846,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; <!--; - [x] This is atop lapack and PR, so you'll want to look only at later commits; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` -> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [x] This runs with py27 and all tests pass; - [x] this PR is continues from #594 ; - [x] still need to resolve Fortran/-recursive/libifcoremt/OpenMP issue; -->; - [x] Fix some HDF5 detection problems; - [x] Adds some colored ""MKL"" and ""AM"" to CMake output for lapack and libint, respectively, for ready diagnosis.; - [x] Fixes rpath on Mac by setting it to `@loader_path/${_rel}""`; - [x] Some host_writer changes to modernize PCMSolver; * **User-Facing for Release Notes**; - [x] Re-enables PCMSolver via `-DENABLE_PCMSolver`. No longer hint with `PCMSOLVER_ROOT` but with `PCMSolver_DIR`. Pins to `v1.1.9`.; - [x] Bumps CMake requirement to 3.2; - [x] upstream PCMSolver needs py3 compatibility, PCMSolver/pcmsolver#39; - [x] anyone building with Intel and native gcc < 4.9 needs to have the gcc-name and gxx-name in `CMAKE_Fortran_FLAGS`, too, just like `CMAKE_CXX_FLAGS`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599
https://github.com/psi4/psi4/pull/599:697,Testability,test,tests,697,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; <!--; - [x] This is atop lapack and PR, so you'll want to look only at later commits; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` -> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [x] This runs with py27 and all tests pass; - [x] this PR is continues from #594 ; - [x] still need to resolve Fortran/-recursive/libifcoremt/OpenMP issue; -->; - [x] Fix some HDF5 detection problems; - [x] Adds some colored ""MKL"" and ""AM"" to CMake output for lapack and libint, respectively, for ready diagnosis.; - [x] Fixes rpath on Mac by setting it to `@loader_path/${_rel}""`; - [x] Some host_writer changes to modernize PCMSolver; * **User-Facing for Release Notes**; - [x] Re-enables PCMSolver via `-DENABLE_PCMSolver`. No longer hint with `PCMSOLVER_ROOT` but with `PCMSolver_DIR`. Pins to `v1.1.9`.; - [x] Bumps CMake requirement to 3.2; - [x] upstream PCMSolver needs py3 compatibility, PCMSolver/pcmsolver#39; - [x] anyone building with Intel and native gcc < 4.9 needs to have the gcc-name and gxx-name in `CMAKE_Fortran_FLAGS`, too, just like `CMAKE_CXX_FLAGS`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599
https://github.com/psi4/psi4/pull/601:16,Deployability,Update,Updates,16,## Description; Updates the vmd_cube script. ## Todos; Adds new color schemes and the ability to control image size.; * **Developer Interest**; - [x] Updated vmd_cube.py file; - [x] Updated documentation; - [x] Changed license of vmd_cube to MIT. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/601
https://github.com/psi4/psi4/pull/601:150,Deployability,Update,Updated,150,## Description; Updates the vmd_cube script. ## Todos; Adds new color schemes and the ability to control image size.; * **Developer Interest**; - [x] Updated vmd_cube.py file; - [x] Updated documentation; - [x] Changed license of vmd_cube to MIT. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/601
https://github.com/psi4/psi4/pull/601:182,Deployability,Update,Updated,182,## Description; Updates the vmd_cube script. ## Todos; Adds new color schemes and the ability to control image size.; * **Developer Interest**; - [x] Updated vmd_cube.py file; - [x] Updated documentation; - [x] Changed license of vmd_cube to MIT. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/601
https://github.com/psi4/psi4/pull/602:127,Availability,error,error,127,"## Description; The user-supplied occupation arrays weren't sanity checked, which caused segfaults. This PR makes psi4 give an error message instead. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/602
https://github.com/psi4/psi4/pull/602:133,Integrability,message,message,133,"## Description; The user-supplied occupation arrays weren't sanity checked, which caused segfaults. This PR makes psi4 give an error message instead. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/602
https://github.com/psi4/psi4/pull/602:60,Safety,sanity check,sanity checked,60,"## Description; The user-supplied occupation arrays weren't sanity checked, which caused segfaults. This PR makes psi4 give an error message instead. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/602
https://github.com/psi4/psi4/pull/604:825,Deployability,Release,Release,825,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/604
https://github.com/psi4/psi4/pull/604:377,Performance,perform,performance-on-multi-core-systems,377,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/604
https://github.com/psi4/psi4/pull/604:2331,Performance,queue,queue,2331,"lib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 threads */; tp = create_threadpool(NUM_THREADS);. for (i = 0; i < NUM_JOBS; i++); {; /* Create a unique file name i.e. ""./Files/file1.txt"" */; sprintf(&filenames[i][0], ""/home/spd/rwgreen/quad/rwgreen/forums/81088/file%d.txt"", i+1);. /* Create a unique file I/O unit */; io[i] = 10+i;. /* Add file name and I/O unit to threadpool job queue */; printf(""Main: queueing %s\n"", &filenames[i][0]);; dispatch_job(tp, job_thread, (void *) &filenames[i][0], &io[i]);; }. /* Wait a while for all the threads to do their thing */; printf(""Main: sleeping 20 secs...\n"");; sleep(20);; printf(""Main: waking up and destroying threadpool...\n"");. /* Clean up threadpool */; destroy_threadpool(tp);. /* close the Fortran Runtime */; io_status = for_rtl_finish_ () ;. printf(""Main: exiting...\n"");; return 0;; }. /* Thread job function */; void job_thread(void *arg1, void *arg2); {; char *filename = (char *) arg1;; int *io = (int *) arg2;; unsigned int len = strlen(filename);. char string[len+1];; sprintf(string, ""%s"", filename);. fpa(*io, string); . printf(""->Thread %ld: Opened %s (len=%d) on I/O unit %d\n"", pthread_self(), filename, len, *io);; }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/604
https://github.com/psi4/psi4/pull/604:2355,Performance,queue,queueing,2355,"lib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 threads */; tp = create_threadpool(NUM_THREADS);. for (i = 0; i < NUM_JOBS; i++); {; /* Create a unique file name i.e. ""./Files/file1.txt"" */; sprintf(&filenames[i][0], ""/home/spd/rwgreen/quad/rwgreen/forums/81088/file%d.txt"", i+1);. /* Create a unique file I/O unit */; io[i] = 10+i;. /* Add file name and I/O unit to threadpool job queue */; printf(""Main: queueing %s\n"", &filenames[i][0]);; dispatch_job(tp, job_thread, (void *) &filenames[i][0], &io[i]);; }. /* Wait a while for all the threads to do their thing */; printf(""Main: sleeping 20 secs...\n"");; sleep(20);; printf(""Main: waking up and destroying threadpool...\n"");. /* Clean up threadpool */; destroy_threadpool(tp);. /* close the Fortran Runtime */; io_status = for_rtl_finish_ () ;. printf(""Main: exiting...\n"");; return 0;; }. /* Thread job function */; void job_thread(void *arg1, void *arg2); {; char *filename = (char *) arg1;; int *io = (int *) arg2;; unsigned int len = strlen(filename);. char string[len+1];; sprintf(string, ""%s"", filename);. fpa(*io, string); . printf(""->Thread %ld: Opened %s (len=%d) on I/O unit %d\n"", pthread_self(), filename, len, *io);; }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/604
https://github.com/psi4/psi4/pull/604:126,Safety,safe,safety,126,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/604
https://github.com/psi4/psi4/pull/604:705,Testability,test,test,705,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/604
https://github.com/psi4/psi4/pull/604:967,Testability,test,test,967,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/604
https://github.com/psi4/psi4/pull/604:1088,Testability,test,test,1088,"/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 threads */; tp = create_threadpool(NUM_THREADS);. for (i = 0; i < NUM_JOBS",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/604
https://github.com/psi4/psi4/pull/604:234,Usability,guid,guidance,234,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/604
https://github.com/psi4/psi4/pull/605:328,Deployability,update,updates,328,"## Description; This is a continuation of @bennybp's #587 that I'd like to wrap up, but the gdma Travis isssue needs fixing. We can work out merge order later. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] everything #587 does; - [x] changes the ERD warning, updates the docs, adds test case; * **User-Facing for Release Notes**; - [x] ERD integrals now work for far more types of systems. Previously it was only direct, conventional HF. Now works for most all energies (except LRC DFT). Does not work for gradients, but those are disabled. ## Questions; - [x] Waiting for a clean Travis test (gdma culprit), then ready to go. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605
https://github.com/psi4/psi4/pull/605:382,Deployability,Release,Release,382,"## Description; This is a continuation of @bennybp's #587 that I'd like to wrap up, but the gdma Travis isssue needs fixing. We can work out merge order later. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] everything #587 does; - [x] changes the ERD warning, updates the docs, adds test case; * **User-Facing for Release Notes**; - [x] ERD integrals now work for far more types of systems. Previously it was only direct, conventional HF. Now works for most all energies (except LRC DFT). Does not work for gradients, but those are disabled. ## Questions; - [x] Waiting for a clean Travis test (gdma culprit), then ready to go. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605
https://github.com/psi4/psi4/pull/605:75,Integrability,wrap,wrap,75,"## Description; This is a continuation of @bennybp's #587 that I'd like to wrap up, but the gdma Travis isssue needs fixing. We can work out merge order later. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] everything #587 does; - [x] changes the ERD warning, updates the docs, adds test case; * **User-Facing for Release Notes**; - [x] ERD integrals now work for far more types of systems. Previously it was only direct, conventional HF. Now works for most all energies (except LRC DFT). Does not work for gradients, but those are disabled. ## Questions; - [x] Waiting for a clean Travis test (gdma culprit), then ready to go. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605
https://github.com/psi4/psi4/pull/605:351,Testability,test,test,351,"## Description; This is a continuation of @bennybp's #587 that I'd like to wrap up, but the gdma Travis isssue needs fixing. We can work out merge order later. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] everything #587 does; - [x] changes the ERD warning, updates the docs, adds test case; * **User-Facing for Release Notes**; - [x] ERD integrals now work for far more types of systems. Previously it was only direct, conventional HF. Now works for most all energies (except LRC DFT). Does not work for gradients, but those are disabled. ## Questions; - [x] Waiting for a clean Travis test (gdma culprit), then ready to go. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605
https://github.com/psi4/psi4/pull/605:657,Testability,test,test,657,"## Description; This is a continuation of @bennybp's #587 that I'd like to wrap up, but the gdma Travis isssue needs fixing. We can work out merge order later. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] everything #587 does; - [x] changes the ERD warning, updates the docs, adds test case; * **User-Facing for Release Notes**; - [x] ERD integrals now work for far more types of systems. Previously it was only direct, conventional HF. Now works for most all energies (except LRC DFT). Does not work for gradients, but those are disabled. ## Questions; - [x] Waiting for a clean Travis test (gdma culprit), then ready to go. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605
https://github.com/psi4/psi4/issues/606:2730,Deployability,install,install,2730,"7 orbitals, excitable into Nv=204; # virtuals. Let's take only the first 50 virtuals; set restricted_docc [32]; set restricted_uocc [154]; set qc_module detci; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True); ```; segfaults after the 20 most important determinants have been written to output. Backtrace gives; ```; #0 __GI___libc_free (mem=mem@entry=0x550020205841) at malloc.c:2963; #1 0x00007f6080ce0a78 in psi::detci::CIWavefunction::print_vector (this=0x55948f151ec0, vec=std::shared_ptr (count 4, weak 0) 0x559528f71aa0, root=0); at /home/work/psi4/psi4.susi/psi4/src/psi4/detci/ciwave.cc:683; #2 0x00007f6080706283 in pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}::operator()(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int) const (args#1=0,; args#0=std::shared_ptr (count -555219596, weak 1224731640) 0x7ffef53db730, c=0x55948f151ec0, __closure=0x55948e9b84e8) at /home/work/psi4/install/include/pybind11/pybind11.h:62; #3 pybind11::detail::argument_loader<psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int>::call_impl<void, pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}&, 0ul, 1ul, 2ul>(pybind11::cpp_function::cpp_function<v",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/606
https://github.com/psi4/psi4/issues/606:3894,Deployability,install,install,3894,"4/detci/ciwave.cc:683; #2 0x00007f6080706283 in pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}::operator()(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int) const (args#1=0,; args#0=std::shared_ptr (count -555219596, weak 1224731640) 0x7ffef53db730, c=0x55948f151ec0, __closure=0x55948e9b84e8) at /home/work/psi4/install/include/pybind11/pybind11.h:62; #3 pybind11::detail::argument_loader<psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int>::call_impl<void, pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}&, 0ul, 1ul, 2ul>(pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}&, pybind11::detail::index_sequence<0ul, 1ul, 2ul>) (f=..., this=0x7ffef53db750); at /home/work/psi4/install/include/pybind11/cast.h:1277; ```; so it seems to be crashing in the call; ```; free(mi_ibidx);; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/606
https://github.com/psi4/psi4/issues/606:1255,Energy Efficiency,energy,energy,1255,"992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Get CISD active space guess. 69 occupied orbitals, out of which 32; # are core electrons. Leaves No=37 orbitals, excitable into Nv=204; # virtuals. Let's take only the first 50 virtuals; set restricted_docc [32]; set restricted_uocc [154]; set qc_module detci; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True); ```; segfaults after the 20 most important determinants have been written to output. Backtrace gives; ```; #0 __GI___libc_free (mem=mem@entry=0x550020205841) at malloc.c:2963; #1 0x00007f6080ce0a78 in psi::detci::CIWavefunction::print_vector (this=0x55948f151ec0, vec=std::shared_ptr (count 4, weak 0) 0x559528f71aa0, root=0); at /home/work/psi4/psi4.susi/psi4/src/psi4/detci/ciwave.cc:683; #2 0x00007f6080706283 in pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/606
https://github.com/psi4/psi4/issues/606:1584,Energy Efficiency,energy,energy,1584,"604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Get CISD active space guess. 69 occupied orbitals, out of which 32; # are core electrons. Leaves No=37 orbitals, excitable into Nv=204; # virtuals. Let's take only the first 50 virtuals; set restricted_docc [32]; set restricted_uocc [154]; set qc_module detci; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True); ```; segfaults after the 20 most important determinants have been written to output. Backtrace gives; ```; #0 __GI___libc_free (mem=mem@entry=0x550020205841) at malloc.c:2963; #1 0x00007f6080ce0a78 in psi::detci::CIWavefunction::print_vector (this=0x55948f151ec0, vec=std::shared_ptr (count 4, weak 0) 0x559528f71aa0, root=0); at /home/work/psi4/psi4.susi/psi4/src/psi4/detci/ciwave.cc:683; #2 0x00007f6080706283 in pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}::operator()(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int) con",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/606
https://github.com/psi4/psi4/pull/607:121,Integrability,rout,routine,121,"## Description; This PR ; (a) adds checks that alloc's have been succesful in optking; (b) rewrites detci's print_config routine to use dynamic memory allocation instead of static arrays, which I believe caused issue #606. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/607
https://github.com/psi4/psi4/pull/607:91,Modifiability,rewrite,rewrites,91,"## Description; This PR ; (a) adds checks that alloc's have been succesful in optking; (b) rewrites detci's print_config routine to use dynamic memory allocation instead of static arrays, which I believe caused issue #606. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/607
https://github.com/psi4/psi4/issues/608:67,Deployability,release,release,67,"Hi,. Hope you don't mind me asking if there's an ETA for the 1.1.0 release?; I ask only because I'd like to co-ordinate with the release schedule of our own software that has a dependency on Psi4. Thanks,. Matt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/608
https://github.com/psi4/psi4/issues/608:129,Deployability,release,release,129,"Hi,. Hope you don't mind me asking if there's an ETA for the 1.1.0 release?; I ask only because I'd like to co-ordinate with the release schedule of our own software that has a dependency on Psi4. Thanks,. Matt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/608
https://github.com/psi4/psi4/issues/608:137,Energy Efficiency,schedul,schedule,137,"Hi,. Hope you don't mind me asking if there's an ETA for the 1.1.0 release?; I ask only because I'd like to co-ordinate with the release schedule of our own software that has a dependency on Psi4. Thanks,. Matt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/608
https://github.com/psi4/psi4/issues/608:177,Integrability,depend,dependency,177,"Hi,. Hope you don't mind me asking if there's an ETA for the 1.1.0 release?; I ask only because I'd like to co-ordinate with the release schedule of our own software that has a dependency on Psi4. Thanks,. Matt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/608
https://github.com/psi4/psi4/pull/609:417,Availability,error,errors,417,"## Description. This PR fixes thread synchronization in AIOHandler after KTB. The std::thread in C++11 must not be joinable when it is destroyed, or it calls terminate(). Before destroying every thread created in AIOHandler, it is thus joined. In addition, a thread must not be joined twice, thus the synchronization step now checks whether the thread is joinable before joining. Fixes #596 and should definitely fix errors in tests cubeprop, sapt2, sapt3 and sapt6 that appeared in KTB and for which @loriab had a workaround. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed thread management in AIOHandler. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/609
https://github.com/psi4/psi4/pull/609:37,Integrability,synchroniz,synchronization,37,"## Description. This PR fixes thread synchronization in AIOHandler after KTB. The std::thread in C++11 must not be joinable when it is destroyed, or it calls terminate(). Before destroying every thread created in AIOHandler, it is thus joined. In addition, a thread must not be joined twice, thus the synchronization step now checks whether the thread is joinable before joining. Fixes #596 and should definitely fix errors in tests cubeprop, sapt2, sapt3 and sapt6 that appeared in KTB and for which @loriab had a workaround. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed thread management in AIOHandler. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/609
https://github.com/psi4/psi4/pull/609:301,Integrability,synchroniz,synchronization,301,"## Description. This PR fixes thread synchronization in AIOHandler after KTB. The std::thread in C++11 must not be joinable when it is destroyed, or it calls terminate(). Before destroying every thread created in AIOHandler, it is thus joined. In addition, a thread must not be joined twice, thus the synchronization step now checks whether the thread is joinable before joining. Fixes #596 and should definitely fix errors in tests cubeprop, sapt2, sapt3 and sapt6 that appeared in KTB and for which @loriab had a workaround. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed thread management in AIOHandler. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/609
https://github.com/psi4/psi4/pull/609:427,Testability,test,tests,427,"## Description. This PR fixes thread synchronization in AIOHandler after KTB. The std::thread in C++11 must not be joinable when it is destroyed, or it calls terminate(). Before destroying every thread created in AIOHandler, it is thus joined. In addition, a thread must not be joined twice, thus the synchronization step now checks whether the thread is joinable before joining. Fixes #596 and should definitely fix errors in tests cubeprop, sapt2, sapt3 and sapt6 that appeared in KTB and for which @loriab had a workaround. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed thread management in AIOHandler. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/609
https://github.com/psi4/psi4/pull/610:43,Availability,robust,robust,43,## Description; NumPy linked DSYEV was not robust enough under certain conditions. Switches to Psi4 power inversion to fix this issue. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/610
https://github.com/psi4/psi4/pull/610:100,Energy Efficiency,power,power,100,## Description; NumPy linked DSYEV was not robust enough under certain conditions. Switches to Psi4 power inversion to fix this issue. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/610
https://github.com/psi4/psi4/pull/611:386,Deployability,Release,Release,386,"## Description; With #591, math detection on Mac became vulnerable to picking up `mkl_rt.so` from a conda env in preference to native Accelerate libs. That builds, but gives _very_ bad results at runtime. So this PR treats Accelerate as the default on Mac. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] On Mac, selects Accelerate BLAS/LAPACK libs in preference to any other detected. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/611
https://github.com/psi4/psi4/pull/611:32,Safety,detect,detection,32,"## Description; With #591, math detection on Mac became vulnerable to picking up `mkl_rt.so` from a conda env in preference to native Accelerate libs. That builds, but gives _very_ bad results at runtime. So this PR treats Accelerate as the default on Mac. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] On Mac, selects Accelerate BLAS/LAPACK libs in preference to any other detected. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/611
https://github.com/psi4/psi4/pull/611:480,Safety,detect,detected,480,"## Description; With #591, math detection on Mac became vulnerable to picking up `mkl_rt.so` from a conda env in preference to native Accelerate libs. That builds, but gives _very_ bad results at runtime. So this PR treats Accelerate as the default on Mac. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] On Mac, selects Accelerate BLAS/LAPACK libs in preference to any other detected. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/611
https://github.com/psi4/psi4/issues/612:1419,Energy Efficiency,energy,energy,1419,"Okay, onto the next problem. I want to run a DFT calculation on a system where converging even HF takes SOSCF to work. However, reading in the HF orbitals fails. ; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Rerun with BP86 to get better density; set scf guess read; scf_e, scf_wfn = energy('bp86', return_wfn=True); ```. outputs in the BP86 part; ```; Warning! Guess was READ without Ca set, switching to CORE!; This option should have been configured at the driver level. SCF Guess: Core (One-Electron) Hamiltonian.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/612
https://github.com/psi4/psi4/issues/612:1529,Energy Efficiency,energy,energy,1529,"Okay, onto the next problem. I want to run a DFT calculation on a system where converging even HF takes SOSCF to work. However, reading in the HF orbitals fails. ; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Rerun with BP86 to get better density; set scf guess read; scf_e, scf_wfn = energy('bp86', return_wfn=True); ```. outputs in the BP86 part; ```; Warning! Guess was READ without Ca set, switching to CORE!; This option should have been configured at the driver level. SCF Guess: Core (One-Electron) Hamiltonian.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/612
https://github.com/psi4/psi4/issues/612:1687,Modifiability,config,configured,1687,"Okay, onto the next problem. I want to run a DFT calculation on a system where converging even HF takes SOSCF to work. However, reading in the HF orbitals fails. ; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Rerun with BP86 to get better density; set scf guess read; scf_e, scf_wfn = energy('bp86', return_wfn=True); ```. outputs in the BP86 part; ```; Warning! Guess was READ without Ca set, switching to CORE!; This option should have been configured at the driver level. SCF Guess: Core (One-Electron) Hamiltonian.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/612
https://github.com/psi4/psi4/pull/615:1965,Availability,mainten,maintenance,1965,"f this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:3790,Availability,avail,available,3790,"low. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, plus it's so easy to adjust after link. I'm hoping to continue ignoring rpath on Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:2231,Deployability,Release,Release,2231,"ING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:1728,Integrability,rout,routes,1728,"lar because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:46,Modifiability,Config,ConfigMath,46,"## Description; So once upon a time, Psi4 ran ConfigMath to get its lapack/blas, then [tested for mkl](https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:608,Modifiability,Config,ConfigMath,608,"## Description; So once upon a time, Psi4 ran ConfigMath to get its lapack/blas, then [tested for mkl](https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:1186,Modifiability,Config,ConfigMath,1186,"c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table do",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:1790,Modifiability,Config,ConfigMath,1790,"lar because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:2878,Modifiability,Config,ConfigMath,2878,"ers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:3247,Modifiability,Config,ConfigMath,3247,"low. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, plus it's so easy to adjust after link. I'm hoping to continue ignoring rpath on Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:1174,Safety,detect,detected,1174,"c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table do",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:1284,Safety,detect,detected,1284,"#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Cha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:1697,Safety,detect,detection,1697,"lar because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:1743,Safety,detect,detection,1743,"lar because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:2616,Safety,Redund,Redundancy,2616,"t get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From di",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:2865,Safety,detect,detection,2865,"ers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:87,Testability,test,tested,87,"## Description; So once upon a time, Psi4 ran ConfigMath to get its lapack/blas, then [tested for mkl](https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:1938,Testability,test,testing,1938,"f this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:2008,Testability,test,tests,2008,"able points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/615:2925,Testability,test,testing,2925,"ers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615
https://github.com/psi4/psi4/pull/616:16,Deployability,Update,Update,16,"## Description; Update the CI documentation. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Split off MCSCF docs to own page; - [x] Updated CI documentation, closes #600 ; - [x] Fixed typo to address #621 . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/616
https://github.com/psi4/psi4/pull/616:200,Deployability,Update,Updated,200,"## Description; Update the CI documentation. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Split off MCSCF docs to own page; - [x] Updated CI documentation, closes #600 ; - [x] Fixed typo to address #621 . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/616
https://github.com/psi4/psi4/issues/617:135,Availability,Error,Error,135,"Input file:; ```; molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }; set {; basis roos-ano-dz; relativistic x2c; }; energy('scf'); ```; Error Info:; ```; Traceback (most recent call last):; File ""bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1917, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1241, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""lib/psi4/driver/procedures/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""lib/psi4/driver/p4util/python_helpers.py"", line 62, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 753, in construct; filename = cls.make_filename(basgbs); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1292, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```; This happens not only with roos-ano-dz basis, but also when a user-defined basis is used.; This problem is actually caused by line 726~730 in lib/psi4/driver/qcdb/libmintsbasisset.py. After line 730: seek['basis'] = [item for item in tmp if item != (None, None, None)], seek['basis'] have only one entry (None, None, BasisSet.decontract), which will cause basgbs == None at line 753.; Actually, after line 730, seek['basis'] should have an entry ('roos-ano-dz-decon', 'roos-ano-dz', BasisSet.decontract) for the program to run correctly. One possible solution is that add a guard:; ```; if basgbs == None:; continue; ```; before line 753: filename = cls.make_filename(basgbs)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/617
https://github.com/psi4/psi4/issues/617:115,Energy Efficiency,energy,energy,115,"Input file:; ```; molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }; set {; basis roos-ano-dz; relativistic x2c; }; energy('scf'); ```; Error Info:; ```; Traceback (most recent call last):; File ""bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1917, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1241, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""lib/psi4/driver/procedures/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""lib/psi4/driver/p4util/python_helpers.py"", line 62, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 753, in construct; filename = cls.make_filename(basgbs); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1292, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```; This happens not only with roos-ano-dz basis, but also when a user-defined basis is used.; This problem is actually caused by line 726~730 in lib/psi4/driver/qcdb/libmintsbasisset.py. After line 730: seek['basis'] = [item for item in tmp if item != (None, None, None)], seek['basis'] have only one entry (None, None, BasisSet.decontract), which will cause basgbs == None at line 753.; Actually, after line 730, seek['basis'] should have an entry ('roos-ano-dz-decon', 'roos-ano-dz', BasisSet.decontract) for the program to run correctly. One possible solution is that add a guard:; ```; if basgbs == None:; continue; ```; before line 753: filename = cls.make_filename(basgbs)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/617
https://github.com/psi4/psi4/issues/617:330,Energy Efficiency,energy,energy,330,"Input file:; ```; molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }; set {; basis roos-ano-dz; relativistic x2c; }; energy('scf'); ```; Error Info:; ```; Traceback (most recent call last):; File ""bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1917, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1241, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""lib/psi4/driver/procedures/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""lib/psi4/driver/p4util/python_helpers.py"", line 62, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 753, in construct; filename = cls.make_filename(basgbs); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1292, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```; This happens not only with roos-ano-dz basis, but also when a user-defined basis is used.; This problem is actually caused by line 726~730 in lib/psi4/driver/qcdb/libmintsbasisset.py. After line 730: seek['basis'] = [item for item in tmp if item != (None, None, None)], seek['basis'] have only one entry (None, None, BasisSet.decontract), which will cause basgbs == None at line 753.; Actually, after line 730, seek['basis'] should have an entry ('roos-ano-dz-decon', 'roos-ano-dz', BasisSet.decontract) for the program to run correctly. One possible solution is that add a guard:; ```; if basgbs == None:; continue; ```; before line 753: filename = cls.make_filename(basgbs)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/617
https://github.com/psi4/psi4/issues/617:356,Energy Efficiency,energy,energy,356,"Input file:; ```; molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }; set {; basis roos-ano-dz; relativistic x2c; }; energy('scf'); ```; Error Info:; ```; Traceback (most recent call last):; File ""bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1917, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1241, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""lib/psi4/driver/procedures/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""lib/psi4/driver/p4util/python_helpers.py"", line 62, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 753, in construct; filename = cls.make_filename(basgbs); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1292, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```; This happens not only with roos-ano-dz basis, but also when a user-defined basis is used.; This problem is actually caused by line 726~730 in lib/psi4/driver/qcdb/libmintsbasisset.py. After line 730: seek['basis'] = [item for item in tmp if item != (None, None, None)], seek['basis'] have only one entry (None, None, BasisSet.decontract), which will cause basgbs == None at line 753.; Actually, after line 730, seek['basis'] should have an entry ('roos-ano-dz-decon', 'roos-ano-dz', BasisSet.decontract) for the program to run correctly. One possible solution is that add a guard:; ```; if basgbs == None:; continue; ```; before line 753: filename = cls.make_filename(basgbs)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/617
https://github.com/psi4/psi4/issues/618:62,Energy Efficiency,charge,charge,62,"The analytic and numerical MP2 gradients disagree when a QMMM charge field is used, while the same calculation runs correctly at the HF level. [psi4 version 1.0.0]. I found a similar issue which has already been resolved with the RKS gradient: https://github.com/psi4/psi4/issues/184 . My test case is one QM water molecule in the presence of two TIP3P-charge waters. ```; memory 400 mb. molecule water {; 0 1; O -0.167787 1.645761 0.108747; H 0.613411 1.10262 0.113724; H -0.093821 2.20972 -0.643619; symmetry c1; no_reorient; no_com; }. chgfield = QMMM(). chgfield.extern.addCharge(-0.834, -1.350388, -0.964879, -0.092208); chgfield.extern.addCharge(0.417, -1.908991, -1.211298, 0.626207); chgfield.extern.addCharge(0.417, -1.263787, -0.018107, -0.055536); chgfield.extern.addCharge(-0.834, 1.517569, -0.667424, -0.080674); chgfield.extern.addCharge(0.417, 1.989645, -1.098799, 0.612047); chgfield.extern.addCharge(0.417, 0.668397, -1.091798, -0.139744); psi4.set_global_option_python('EXTERN', chgfield.extern). set basis aug-cc-pvtz; set scf_type df; set freeze_core True. grad_fd = gradient('mp2', molecule=water, dertype=0); grad_an = gradient('mp2', molecule=water); compare_matrices(grad_an, grad_fd, 5, ""TESTING finite-diff vs. analytic gradient""); ```; The identical input file replacing ""mp2"" with ""hf"" runs successfully. It seems strange to me, since as far as I understand the external charges should only modify the core contribution to the Fock matrix. Is there a possibility that gradient('mp2') somehow fails to include the external potential gradients that are correctly computed in gradient('hf')?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/618
https://github.com/psi4/psi4/issues/618:353,Energy Efficiency,charge,charge,353,"The analytic and numerical MP2 gradients disagree when a QMMM charge field is used, while the same calculation runs correctly at the HF level. [psi4 version 1.0.0]. I found a similar issue which has already been resolved with the RKS gradient: https://github.com/psi4/psi4/issues/184 . My test case is one QM water molecule in the presence of two TIP3P-charge waters. ```; memory 400 mb. molecule water {; 0 1; O -0.167787 1.645761 0.108747; H 0.613411 1.10262 0.113724; H -0.093821 2.20972 -0.643619; symmetry c1; no_reorient; no_com; }. chgfield = QMMM(). chgfield.extern.addCharge(-0.834, -1.350388, -0.964879, -0.092208); chgfield.extern.addCharge(0.417, -1.908991, -1.211298, 0.626207); chgfield.extern.addCharge(0.417, -1.263787, -0.018107, -0.055536); chgfield.extern.addCharge(-0.834, 1.517569, -0.667424, -0.080674); chgfield.extern.addCharge(0.417, 1.989645, -1.098799, 0.612047); chgfield.extern.addCharge(0.417, 0.668397, -1.091798, -0.139744); psi4.set_global_option_python('EXTERN', chgfield.extern). set basis aug-cc-pvtz; set scf_type df; set freeze_core True. grad_fd = gradient('mp2', molecule=water, dertype=0); grad_an = gradient('mp2', molecule=water); compare_matrices(grad_an, grad_fd, 5, ""TESTING finite-diff vs. analytic gradient""); ```; The identical input file replacing ""mp2"" with ""hf"" runs successfully. It seems strange to me, since as far as I understand the external charges should only modify the core contribution to the Fock matrix. Is there a possibility that gradient('mp2') somehow fails to include the external potential gradients that are correctly computed in gradient('hf')?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/618
https://github.com/psi4/psi4/issues/618:1399,Energy Efficiency,charge,charges,1399,"The analytic and numerical MP2 gradients disagree when a QMMM charge field is used, while the same calculation runs correctly at the HF level. [psi4 version 1.0.0]. I found a similar issue which has already been resolved with the RKS gradient: https://github.com/psi4/psi4/issues/184 . My test case is one QM water molecule in the presence of two TIP3P-charge waters. ```; memory 400 mb. molecule water {; 0 1; O -0.167787 1.645761 0.108747; H 0.613411 1.10262 0.113724; H -0.093821 2.20972 -0.643619; symmetry c1; no_reorient; no_com; }. chgfield = QMMM(). chgfield.extern.addCharge(-0.834, -1.350388, -0.964879, -0.092208); chgfield.extern.addCharge(0.417, -1.908991, -1.211298, 0.626207); chgfield.extern.addCharge(0.417, -1.263787, -0.018107, -0.055536); chgfield.extern.addCharge(-0.834, 1.517569, -0.667424, -0.080674); chgfield.extern.addCharge(0.417, 1.989645, -1.098799, 0.612047); chgfield.extern.addCharge(0.417, 0.668397, -1.091798, -0.139744); psi4.set_global_option_python('EXTERN', chgfield.extern). set basis aug-cc-pvtz; set scf_type df; set freeze_core True. grad_fd = gradient('mp2', molecule=water, dertype=0); grad_an = gradient('mp2', molecule=water); compare_matrices(grad_an, grad_fd, 5, ""TESTING finite-diff vs. analytic gradient""); ```; The identical input file replacing ""mp2"" with ""hf"" runs successfully. It seems strange to me, since as far as I understand the external charges should only modify the core contribution to the Fock matrix. Is there a possibility that gradient('mp2') somehow fails to include the external potential gradients that are correctly computed in gradient('hf')?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/618
https://github.com/psi4/psi4/issues/618:289,Testability,test,test,289,"The analytic and numerical MP2 gradients disagree when a QMMM charge field is used, while the same calculation runs correctly at the HF level. [psi4 version 1.0.0]. I found a similar issue which has already been resolved with the RKS gradient: https://github.com/psi4/psi4/issues/184 . My test case is one QM water molecule in the presence of two TIP3P-charge waters. ```; memory 400 mb. molecule water {; 0 1; O -0.167787 1.645761 0.108747; H 0.613411 1.10262 0.113724; H -0.093821 2.20972 -0.643619; symmetry c1; no_reorient; no_com; }. chgfield = QMMM(). chgfield.extern.addCharge(-0.834, -1.350388, -0.964879, -0.092208); chgfield.extern.addCharge(0.417, -1.908991, -1.211298, 0.626207); chgfield.extern.addCharge(0.417, -1.263787, -0.018107, -0.055536); chgfield.extern.addCharge(-0.834, 1.517569, -0.667424, -0.080674); chgfield.extern.addCharge(0.417, 1.989645, -1.098799, 0.612047); chgfield.extern.addCharge(0.417, 0.668397, -1.091798, -0.139744); psi4.set_global_option_python('EXTERN', chgfield.extern). set basis aug-cc-pvtz; set scf_type df; set freeze_core True. grad_fd = gradient('mp2', molecule=water, dertype=0); grad_an = gradient('mp2', molecule=water); compare_matrices(grad_an, grad_fd, 5, ""TESTING finite-diff vs. analytic gradient""); ```; The identical input file replacing ""mp2"" with ""hf"" runs successfully. It seems strange to me, since as far as I understand the external charges should only modify the core contribution to the Fock matrix. Is there a possibility that gradient('mp2') somehow fails to include the external potential gradients that are correctly computed in gradient('hf')?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/618
https://github.com/psi4/psi4/issues/618:1213,Testability,TEST,TESTING,1213,"The analytic and numerical MP2 gradients disagree when a QMMM charge field is used, while the same calculation runs correctly at the HF level. [psi4 version 1.0.0]. I found a similar issue which has already been resolved with the RKS gradient: https://github.com/psi4/psi4/issues/184 . My test case is one QM water molecule in the presence of two TIP3P-charge waters. ```; memory 400 mb. molecule water {; 0 1; O -0.167787 1.645761 0.108747; H 0.613411 1.10262 0.113724; H -0.093821 2.20972 -0.643619; symmetry c1; no_reorient; no_com; }. chgfield = QMMM(). chgfield.extern.addCharge(-0.834, -1.350388, -0.964879, -0.092208); chgfield.extern.addCharge(0.417, -1.908991, -1.211298, 0.626207); chgfield.extern.addCharge(0.417, -1.263787, -0.018107, -0.055536); chgfield.extern.addCharge(-0.834, 1.517569, -0.667424, -0.080674); chgfield.extern.addCharge(0.417, 1.989645, -1.098799, 0.612047); chgfield.extern.addCharge(0.417, 0.668397, -1.091798, -0.139744); psi4.set_global_option_python('EXTERN', chgfield.extern). set basis aug-cc-pvtz; set scf_type df; set freeze_core True. grad_fd = gradient('mp2', molecule=water, dertype=0); grad_an = gradient('mp2', molecule=water); compare_matrices(grad_an, grad_fd, 5, ""TESTING finite-diff vs. analytic gradient""); ```; The identical input file replacing ""mp2"" with ""hf"" runs successfully. It seems strange to me, since as far as I understand the external charges should only modify the core contribution to the Fock matrix. Is there a possibility that gradient('mp2') somehow fails to include the external potential gradients that are correctly computed in gradient('hf')?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/618
https://github.com/psi4/psi4/pull/619:722,Deployability,patch,patch,722,"## Description; Substitute some int by size_t, and introduces (size_t) casts wherever multiplication of integers seemed problematic. ## Todos; * **Developer Interest**; - [x] Integer declarations in all .h files in libsapt_solver have been examined and the ones that could potentially generate overflows were converted to size_t. Probably some overkill there.; - [x] Searched the whole source in libsapt_solver for a regex representing 4 variables being multiplied, to find all the occ*vir*occ*vir that are bound to overflow. Added (size_t) cast for those that were missing it. ## Questions; - [ ] This originated in a problem reported by a user on the forum. I can't run Psi4 on good enough hardware to actually test the patch on a large system. Anyone want to give it a try ? Or do we let the user test it ?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/619
https://github.com/psi4/psi4/pull/619:438,Modifiability,variab,variables,438,"## Description; Substitute some int by size_t, and introduces (size_t) casts wherever multiplication of integers seemed problematic. ## Todos; * **Developer Interest**; - [x] Integer declarations in all .h files in libsapt_solver have been examined and the ones that could potentially generate overflows were converted to size_t. Probably some overkill there.; - [x] Searched the whole source in libsapt_solver for a regex representing 4 variables being multiplied, to find all the occ*vir*occ*vir that are bound to overflow. Added (size_t) cast for those that were missing it. ## Questions; - [ ] This originated in a problem reported by a user on the forum. I can't run Psi4 on good enough hardware to actually test the patch on a large system. Anyone want to give it a try ? Or do we let the user test it ?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/619
https://github.com/psi4/psi4/pull/619:713,Testability,test,test,713,"## Description; Substitute some int by size_t, and introduces (size_t) casts wherever multiplication of integers seemed problematic. ## Todos; * **Developer Interest**; - [x] Integer declarations in all .h files in libsapt_solver have been examined and the ones that could potentially generate overflows were converted to size_t. Probably some overkill there.; - [x] Searched the whole source in libsapt_solver for a regex representing 4 variables being multiplied, to find all the occ*vir*occ*vir that are bound to overflow. Added (size_t) cast for those that were missing it. ## Questions; - [ ] This originated in a problem reported by a user on the forum. I can't run Psi4 on good enough hardware to actually test the patch on a large system. Anyone want to give it a try ? Or do we let the user test it ?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/619
https://github.com/psi4/psi4/pull/619:800,Testability,test,test,800,"## Description; Substitute some int by size_t, and introduces (size_t) casts wherever multiplication of integers seemed problematic. ## Todos; * **Developer Interest**; - [x] Integer declarations in all .h files in libsapt_solver have been examined and the ones that could potentially generate overflows were converted to size_t. Probably some overkill there.; - [x] Searched the whole source in libsapt_solver for a regex representing 4 variables being multiplied, to find all the occ*vir*occ*vir that are bound to overflow. Added (size_t) cast for those that were missing it. ## Questions; - [ ] This originated in a problem reported by a user on the forum. I can't run Psi4 on good enough hardware to actually test the patch on a large system. Anyone want to give it a try ? Or do we let the user test it ?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/619
https://github.com/psi4/psi4/pull/620:71,Availability,Error,Error,71,## Description; I forgot the `threading/CMakeLists.txt`. Now included. Error found by @schiebermc. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/620
https://github.com/psi4/psi4/pull/622:334,Deployability,Release,Release,334,"## Description; Adds missing CPHF terms, so that DF-MP2 gradients are correct when an external potential is present. Fixes #618. ## Todos. * **Developer Interest**; - [x] Fixed DF-MP2 gradient code.; - [x] Added test case for DF-MP2 QM/MM gradients (extern2, not currently in quicktests, but runs in 12 seconds).; * **User-Facing for Release Notes**; - [x] Fixed bug so that QM/MM gradients are correct for DF-MP2. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/622
https://github.com/psi4/psi4/pull/622:212,Testability,test,test,212,"## Description; Adds missing CPHF terms, so that DF-MP2 gradients are correct when an external potential is present. Fixes #618. ## Todos. * **Developer Interest**; - [x] Fixed DF-MP2 gradient code.; - [x] Added test case for DF-MP2 QM/MM gradients (extern2, not currently in quicktests, but runs in 12 seconds).; * **User-Facing for Release Notes**; - [x] Fixed bug so that QM/MM gradients are correct for DF-MP2. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/622
https://github.com/psi4/psi4/pull/623:984,Availability,error,error,984,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/623:1036,Availability,avail,available,1036,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/623:1126,Deployability,install,install,1126,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/623:1423,Deployability,Release,Release,1423,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/623:200,Integrability,depend,dependencies,200,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/623:544,Integrability,interface,interface,544,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/623:1095,Modifiability,plugin,plugin,1095,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/623:1250,Modifiability,variab,variable,1250,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/623:1102,Performance,cache,cache,1102,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/623:1015,Safety,detect,detected,1015,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/623:1239,Testability,test,test,1239,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/623
https://github.com/psi4/psi4/pull/624:430,Deployability,Release,Release,430,"## Description; Since #582, presumably, all the skeleton plugins that we check out and build from template have actually been using the same, `basic`, template. The adding to ctest bit wasn't working either. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Now we have the compacted code of #582 _and_ the testing functionality of pre- #582 .; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/624
https://github.com/psi4/psi4/pull/624:57,Modifiability,plugin,plugins,57,"## Description; Since #582, presumably, all the skeleton plugins that we check out and build from template have actually been using the same, `basic`, template. The adding to ctest bit wasn't working either. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Now we have the compacted code of #582 _and_ the testing functionality of pre- #582 .; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/624
https://github.com/psi4/psi4/pull/624:372,Testability,test,testing,372,"## Description; Since #582, presumably, all the skeleton plugins that we check out and build from template have actually been using the same, `basic`, template. The adding to ctest bit wasn't working either. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Now we have the compacted code of #582 _and_ the testing functionality of pre- #582 .; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/624
https://github.com/psi4/psi4/pull/625:344,Availability,down,down,344,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:825,Availability,avail,available,825,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:324,Deployability,integrat,integration,324,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:781,Deployability,Release,Release,781,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:1408,Deployability,install,installing,1408,"added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (Failed); 	319 - cubeprop-esp (Failed); ```. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:324,Integrability,integrat,integration,324,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:1851,Integrability,wrap,wrapper,1851,"added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (Failed); 	319 - cubeprop-esp (Failed); ```. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:581,Modifiability,variab,variable,581,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:1423,Modifiability,config,configuring,1423,"added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (Failed); 	319 - cubeprop-esp (Failed); ```. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:531,Safety,detect,detection,531,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:406,Testability,test,test,406,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:597,Testability,test,tests,597,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:708,Testability,test,tested,708,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:1066,Testability,test,test,1066,"; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (Failed); 	319 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:1685,Testability,test,test,1685,"added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (Failed); 	319 - cubeprop-esp (Failed); ```. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/pull/625:1820,Testability,test,tests,1820,"added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (Failed); 	319 - cubeprop-esp (Failed); ```. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625
https://github.com/psi4/psi4/issues/626:1135,Availability,error,error,1135,"ined mid-bond sets. To do this I have placed a set of mid-bond definitions in mb-set.gbs and used the heavier rare-gas atoms (Kr, Xe, Rn) to label the mid-bond sets. Using the commands. basis {; assign aug-cc-pVDZ; assign Rn mb-set # gets the basis set for the ghost Rn atoms from mb-set.gbs; }. Psi4 is able to perform standard (non-DF) MP2 and CC calculations using mid-bond functions. However I have encountered problems getting this to work using the DF variants of these methods. As I understand it, to get the DF-MP2, DF-CC etc to work I need to do the following:. 1. Create a set of auxiliary functions for these mid-bond sets. This I have done (mb-set-ri.gbs); 2. Specify the auxiliary basis set using; assign <aux basis> df_basis_scf/mp2. The only source of information I was able to find on the latter was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis set specification: assign lines present but shells have no [basname] label. It seems like the line ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626
https://github.com/psi4/psi4/issues/626:1477,Availability,error,error,1477,"d-bond functions. However I have encountered problems getting this to work using the DF variants of these methods. As I understand it, to get the DF-MP2, DF-CC etc to work I need to do the following:. 1. Create a set of auxiliary functions for these mid-bond sets. This I have done (mb-set-ri.gbs); 2. Specify the auxiliary basis set using; assign <aux basis> df_basis_scf/mp2. The only source of information I was able to find on the latter was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis set specification: assign lines present but shells have no [basname] label. It seems like the line ""assign Rn df_basis_scf mb-set-ri"" cannot be correctly parsed by inputparser.py. It seems to think this line is part of the basis set specification. . The complete Psi4 command file for this calculation is:; [Ar2_input.txt](https://github.com/psi4/psi4/files/787318/Ar2_input.txt). And the two basis set files are here:; [mb-set.txt](https://github.com/psi4/psi4/files/7",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626
https://github.com/psi4/psi4/issues/626:1934,Integrability,message,message,1934," was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis set specification: assign lines present but shells have no [basname] label. It seems like the line ""assign Rn df_basis_scf mb-set-ri"" cannot be correctly parsed by inputparser.py. It seems to think this line is part of the basis set specification. . The complete Psi4 command file for this calculation is:; [Ar2_input.txt](https://github.com/psi4/psi4/files/787318/Ar2_input.txt). And the two basis set files are here:; [mb-set.txt](https://github.com/psi4/psi4/files/787319/mb-set.txt); [mb-set-ri.txt](https://github.com/psi4/psi4/files/787320/mb-set-ri.txt). I can get this to work by including the aux basis for ""Rn"" in one of the fitting basis files that Psi4 would normally read. But this is not ideal and it would be great to be able to specify the fitting basis in the input file using the ''assign'' command. How can this be fixed?. Additionally, the information on the wiki dealing with user-defined",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626
https://github.com/psi4/psi4/issues/626:411,Performance,perform,perform,411,"Hi chaps,; I've been trying to get Psi4 (1.0.54 Git: Rev {master} 8d4cec3 dirty) to accept user-defined mid-bond sets. To do this I have placed a set of mid-bond definitions in mb-set.gbs and used the heavier rare-gas atoms (Kr, Xe, Rn) to label the mid-bond sets. Using the commands. basis {; assign aug-cc-pVDZ; assign Rn mb-set # gets the basis set for the ghost Rn atoms from mb-set.gbs; }. Psi4 is able to perform standard (non-DF) MP2 and CC calculations using mid-bond functions. However I have encountered problems getting this to work using the DF variants of these methods. As I understand it, to get the DF-MP2, DF-CC etc to work I need to do the following:. 1. Create a set of auxiliary functions for these mid-bond sets. This I have done (mb-set-ri.gbs); 2. Specify the auxiliary basis set using; assign <aux basis> df_basis_scf/mp2. The only source of information I was able to find on the latter was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626
https://github.com/psi4/psi4/issues/626:1914,Testability,Test,TestComparisonError,1914," was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis set specification: assign lines present but shells have no [basname] label. It seems like the line ""assign Rn df_basis_scf mb-set-ri"" cannot be correctly parsed by inputparser.py. It seems to think this line is part of the basis set specification. . The complete Psi4 command file for this calculation is:; [Ar2_input.txt](https://github.com/psi4/psi4/files/787318/Ar2_input.txt). And the two basis set files are here:; [mb-set.txt](https://github.com/psi4/psi4/files/787319/mb-set.txt); [mb-set-ri.txt](https://github.com/psi4/psi4/files/787320/mb-set-ri.txt). I can get this to work by including the aux basis for ""Rn"" in one of the fitting basis files that Psi4 would normally read. But this is not ideal and it would be great to be able to specify the fitting basis in the input file using the ''assign'' command. How can this be fixed?. Additionally, the information on the wiki dealing with user-defined",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626
https://github.com/psi4/psi4/issues/626:1962,Testability,Test,TestComparisonError,1962,"erdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis set specification: assign lines present but shells have no [basname] label. It seems like the line ""assign Rn df_basis_scf mb-set-ri"" cannot be correctly parsed by inputparser.py. It seems to think this line is part of the basis set specification. . The complete Psi4 command file for this calculation is:; [Ar2_input.txt](https://github.com/psi4/psi4/files/787318/Ar2_input.txt). And the two basis set files are here:; [mb-set.txt](https://github.com/psi4/psi4/files/787319/mb-set.txt); [mb-set-ri.txt](https://github.com/psi4/psi4/files/787320/mb-set-ri.txt). I can get this to work by including the aux basis for ""Rn"" in one of the fitting basis files that Psi4 would normally read. But this is not ideal and it would be great to be able to specify the fitting basis in the input file using the ''assign'' command. How can this be fixed?. Additionally, the information on the wiki dealing with user-defined basis sets may need to be corrected and augmented. . Thanks a lot!; Alston",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626
https://github.com/psi4/psi4/pull/627:1213,Deployability,install,installed,1213,"means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and python",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1333,Deployability,install,installed,1333,"and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1351,Deployability,install,install,1351,"and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1866,Deployability,Release,Release,1866,"ver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:2832,Deployability,install,installed,2832,". * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1053,Energy Efficiency,adapt,adapted,1053,"e. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:875,Integrability,wrap,wrappers,875,"## Description; Several general fixes, esp. for PsiAPI mode. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1538,Integrability,interface,interface,1538,"pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` obj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1053,Modifiability,adapt,adapted,1053,"e. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:2062,Modifiability,variab,variables,2062," friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version dete",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:280,Safety,detect,detect,280,"## Description; Several general fixes, esp. for PsiAPI mode. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:408,Safety,detect,detects,408,"## Description; Several general fixes, esp. for PsiAPI mode. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1706,Safety,detect,detect,1706,"ads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1790,Safety,detect,detection,1790,"Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1804,Safety,detect,detect,1804,"Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:2744,Safety,detect,detectable,2744,"ver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest control",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:3041,Safety,detect,detection,3041,"Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | _111 | 1111; 1 | _ | _ | _ | _111 | 1111; 3 | _ | _ | _ | _111 | 1111; _ | 1 | _ | _ | _111 | 1111; _ | 3 | _ | _ | _111 | 1111; _ | ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:3389,Safety,safe,safe,3389,", as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | _111 | 1111; 1 | _ | _ | _ | _111 | 1111; 3 | _ | _ | _ | _111 | 1111; _ | 1 | _ | _ | _111 | 1111; _ | 3 | _ | _ | _111 | 1111; _ | _ | 1 | _ | N/A | 1111; _ | _ | 3 | _ | N/A | 3333; _ | _ | _ | 1 | _111 | 1111; _ | _ | _ | 3 | _333 | 1333; _ | _ | 4 | 2 | _222 | 4222. Where the four numbers are extracted from the output file: threads in psi4 header, threads in MintsHelper, threads in SCF header, threads used by JK. The first of these in inapplicable in PsiAPI mode.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1150,Testability,test,test,1150,"oper Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash com",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1167,Testability,assert,assert,1167,"oper Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash com",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1208,Testability,test,test,1208,"means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and python",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1306,Testability,test,tests,1306,"and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1563,Testability,test,test,1563,"cratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:2575,Testability,test,tests,2575,"so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still mes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:2664,Testability,test,tests,2664,"ver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest control",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:2709,Testability,test,tests,2709,"ver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest control",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:2774,Testability,test,tests,2774,"DF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:2873,Testability,test,test,2873,"x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:2893,Testability,test,test,2893,"x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:3486,Testability,test,test,3486,", as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | _111 | 1111; 1 | _ | _ | _ | _111 | 1111; 3 | _ | _ | _ | _111 | 1111; _ | 1 | _ | _ | _111 | 1111; _ | 3 | _ | _ | _111 | 1111; _ | _ | 1 | _ | N/A | 1111; _ | _ | 3 | _ | N/A | 3333; _ | _ | _ | 1 | _111 | 1111; _ | _ | _ | 3 | _333 | 1333; _ | _ | 4 | 2 | _222 | 4222. Where the four numbers are extracted from the output file: threads in psi4 header, threads in MintsHelper, threads in SCF header, threads used by JK. The first of these in inapplicable in PsiAPI mode.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1742,Usability,clear,clearing,1742,"ads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:1971,Usability,guid,guide,1971,"r"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can wor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/pull/627:3311,Usability,clear,cleared,3311," longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | _111 | 1111; 1 | _ | _ | _ | _111 | 1111; 3 | _ | _ | _ | _111 | 1111; _ | 1 | _ | _ | _111 | 1111; _ | 3 | _ | _ | _111 | 1111; _ | _ | 1 | _ | N/A | 1111; _ | _ | 3 | _ | N/A | 3333; _ | _ | _ | 1 | _111 | 1111; _ | _ | _ | 3 | _333 | 1333; _ | _ | 4 | 2 | _222 | 4222. Where the four numbers are extracted from the output file: threads in psi4 header, threads in MintsHelper, threads in SCF header, threads used by JK. The first of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627
https://github.com/psi4/psi4/issues/629:170,Availability,error,error,170,"I am trying to build psi4 using Intel 2017 compilers, gcc=5.4 on an Ubuntu system. - Tried with python version 2.7.2 as well as 3.5. (Following is with Python 3.5) **The error with Python 2.7 is same as following.** . - Also, tried gcc/g++ 4.9.3 version. Same problem persists. I have run this before starting to build;; ```; source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=$MKLROOT; export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/lib/intel64/libiomp5.so. ```; The Error logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Proble",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:505,Availability,Error,Error,505,"I am trying to build psi4 using Intel 2017 compilers, gcc=5.4 on an Ubuntu system. - Tried with python version 2.7.2 as well as 3.5. (Following is with Python 3.5) **The error with Python 2.7 is same as following.** . - Also, tried gcc/g++ 4.9.3 version. Same problem persists. I have run this before starting to build;; ```; source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=$MKLROOT; export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/lib/intel64/libiomp5.so. ```; The Error logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Proble",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:1579,Availability,Error,Error,1579,"ror logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:1695,Availability,Error,Error,1695,"ring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:1802,Availability,Error,Error,1802,"FF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; fil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:1920,Availability,Error,Error,1920,"FF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:2021,Availability,Error,Error,2021,"_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:2236,Availability,Error,Error,2236,"/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:2449,Availability,Error,Error,2449,"n and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLis",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:2690,Availability,avail,available,2690,"configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:2777,Availability,Error,Error,2777,"configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:2948,Availability,Error,Error,2948,"configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3119,Availability,Error,Error,3119,"/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cub",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3290,Availability,Error,Error,3290,"git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3461,Availability,Error,Error,3461,"ferent) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3632,Availability,Error,Error,3632,"phinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFOR",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3793,Availability,Error,Error,3793,"ists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3954,Availability,Error,Error,3954,"rop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:4115,Availability,Error,Error,4115,"ests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:9111,Availability,error,errors,9111,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:1313,Deployability,release,release,1313,"I am trying to build psi4 using Intel 2017 compilers, gcc=5.4 on an Ubuntu system. - Tried with python version 2.7.2 as well as 3.5. (Following is with Python 3.5) **The error with Python 2.7 is same as following.** . - Also, tried gcc/g++ 4.9.3 version. Same problem persists. I have run this before starting to build;; ```; source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=$MKLROOT; export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/lib/intel64/libiomp5.so. ```; The Error logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Proble",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:6563,Integrability,Interface,Interface,6563,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:6597,Integrability,Interface,Interface,6597,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:701,Modifiability,Config,Configuring,701,"I am trying to build psi4 using Intel 2017 compilers, gcc=5.4 on an Ubuntu system. - Tried with python version 2.7.2 as well as 3.5. (Following is with Python 3.5) **The error with Python 2.7 is same as following.** . - Also, tried gcc/g++ 4.9.3 version. Same problem persists. I have run this before starting to build;; ```; source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=$MKLROOT; export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/lib/intel64/libiomp5.so. ```; The Error logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Proble",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:1778,Modifiability,config,configuring,1778,"ort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:2003,Modifiability,config,configuring,2003,"BLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:9087,Modifiability,Config,Configuring,9087,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:6754,Performance,Perform,Performing,6754,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:6790,Performance,Perform,Performing,6790,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7177,Performance,Perform,Performing,7177,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7207,Performance,Perform,Performing,7207,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7282,Performance,Perform,Performing,7282,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7323,Performance,Perform,Performing,7323,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7411,Performance,Perform,Performing,7411,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7452,Performance,Perform,Performing,7452,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7544,Performance,Perform,Performing,7544,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7585,Performance,Perform,Performing,7585,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:1485,Safety,detect,detection,1485,"ror logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:5546,Safety,Detect,Detecting,5546,ler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is Intel 17.0.0.20160721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Inte,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:5582,Safety,Detect,Detecting,5582,ler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is Intel 17.0.0.20160721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Inte,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:5838,Safety,Detect,Detecting,5838,_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is Intel 17.0.0.20160721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:5872,Safety,Detect,Detecting,5872,_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is Intel 17.0.0.20160721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:6207,Safety,Detect,Detecting,6207,60721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:6247,Safety,Detect,Detecting,6247,60721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:6543,Safety,Detect,Detecting,6543,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:6577,Safety,Detect,Detecting,6577,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:511,Testability,log,logs,511,"I am trying to build psi4 using Intel 2017 compilers, gcc=5.4 on an Ubuntu system. - Tried with python version 2.7.2 as well as 3.5. (Following is with Python 3.5) **The error with Python 2.7 is same as following.** . - Also, tried gcc/g++ 4.9.3 version. Same problem persists. I have run this before starting to build;; ```; source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=$MKLROOT; export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/lib/intel64/libiomp5.so. ```; The Error logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Proble",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:2786,Testability,test,tests,2786,"configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:2903,Testability,test,tests,2903,"ake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:2957,Testability,test,tests,2957,"configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3074,Testability,test,tests,3074,"4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3128,Testability,test,tests,3128,"/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cub",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3245,Testability,test,tests,3245," different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/D",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3299,Testability,test,tests,3299,"git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3416,Testability,test,tests,3416,"sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3470,Testability,test,tests,3470,"ferent) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3587,Testability,test,tests,3587,"ckage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3641,Testability,test,tests,3641,"phinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFOR",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3758,Testability,test,tests,3758,"DF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3802,Testability,test,tests,3802,"ists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3919,Testability,test,tests,3919,"-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:3963,Testability,test,tests,3963,"rop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:4080,Testability,test,tests,4080,"/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARI",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:4124,Testability,test,tests,4124,"ests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:4242,Testability,test,tests,4242,"/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is Intel 17",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:6765,Testability,Test,Test,6765,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:6801,Testability,Test,Test,6801,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7188,Testability,Test,Test,7188,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7218,Testability,Test,Test,7218,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7293,Testability,Test,Test,7293,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7334,Testability,Test,Test,7334,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7422,Testability,Test,Test,7422,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7463,Testability,Test,Test,7463,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7555,Testability,Test,Test,7555,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:7596,Testability,Test,Test,7596,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:9220,Testability,log,log,9220,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:9317,Testability,log,log,9317,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:9344,Testability,log,log,9344,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:9363,Testability,log,log,9363,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:9395,Testability,log,log,9395,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:9457,Testability,log,log,9457,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:9480,Testability,log,log,9480,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/issues/629:9543,Testability,log,log,9543,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629
https://github.com/psi4/psi4/pull/630:338,Deployability,toggle,toggle,338,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/pull/630:575,Deployability,Release,Release,575,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/pull/630:746,Energy Efficiency,energy,energy,746,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/pull/630:767,Energy Efficiency,energy,energy,767,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/pull/630:926,Energy Efficiency,adapt,adaption,926,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/pull/630:446,Integrability,interface,interface,446,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/pull/630:926,Modifiability,adapt,adaption,926,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/pull/630:709,Safety,detect,detectable,709,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/pull/630:664,Security,access,accessed,664,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/pull/630:730,Security,Access,Access,730,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/pull/630:208,Testability,test,tests,208,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630
https://github.com/psi4/psi4/issues/631:211,Availability,error,error,211,"My pybind11 package was accepted in Fedora, so I started updating the psi4 package (which was at rc1!). It built fine on the released versions, but failed in the development version that has the newest GCC. The error(s) I get is. ```; cd /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/objdir-x86_64-redhat-linux-gnu/psi4-core-prefix/src/psi4-core-build/src/psi4/libpsio && /usr/bin/g++ -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/include -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631
https://github.com/psi4/psi4/issues/631:1403,Availability,error,error,1403,"D/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c11 -DNDEBUG' '-DCUSTOM_CXX_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c++11 -DNDEBUG'; ```; which already includes the C++11 standard, but the build system seems to append this with -std=gnu++11 which is probably the reason why the build is broken. It's funny though, that the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631
https://github.com/psi4/psi4/issues/631:125,Deployability,release,released,125,"My pybind11 package was accepted in Fedora, so I started updating the psi4 package (which was at rc1!). It built fine on the released versions, but failed in the development version that has the newest GCC. The error(s) I get is. ```; cd /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/objdir-x86_64-redhat-linux-gnu/psi4-core-prefix/src/psi4-core-build/src/psi4/libpsio && /usr/bin/g++ -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/include -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631
https://github.com/psi4/psi4/issues/631:636,Security,secur,security,636,"My pybind11 package was accepted in Fedora, so I started updating the psi4 package (which was at rc1!). It built fine on the released versions, but failed in the development version that has the newest GCC. The error(s) I get is. ```; cd /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/objdir-x86_64-redhat-linux-gnu/psi4-core-prefix/src/psi4-core-build/src/psi4/libpsio && /usr/bin/g++ -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/include -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631
https://github.com/psi4/psi4/issues/631:1857,Security,secur,security,1857,"680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c11 -DNDEBUG' '-DCUSTOM_CXX_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c++11 -DNDEBUG'; ```; which already includes the C++11 standard, but the build system seems to append this with -std=gnu++11 which is probably the reason why the build is broken. It's funny though, that the same flags work in earlier gcc!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631
https://github.com/psi4/psi4/issues/631:2116,Security,secur,security,2116,"680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c11 -DNDEBUG' '-DCUSTOM_CXX_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c++11 -DNDEBUG'; ```; which already includes the C++11 standard, but the build system seems to append this with -std=gnu++11 which is probably the reason why the build is broken. It's funny though, that the same flags work in earlier gcc!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631
https://github.com/psi4/psi4/pull/632:28,Availability,mainten,maintenance,28,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/632
https://github.com/psi4/psi4/pull/632:488,Deployability,Release,Release,488,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/632
https://github.com/psi4/psi4/pull/632:170,Energy Efficiency,energy,energy,170,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/632
https://github.com/psi4/psi4/pull/632:255,Modifiability,plugin,plugins,255,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/632
https://github.com/psi4/psi4/pull/632:219,Safety,avoid,avoid,219,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/632
https://github.com/psi4/psi4/pull/632:418,Testability,test,test,418,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/632
https://github.com/psi4/psi4/pull/634:141,Deployability,update,updates,141,## Description; Recent versions of MRCC are able to compute perturbative energies [e.g. CCSDT(Q)] with an ROHF reference wave function. This updates Psi4's interface to allow these methods to be performed. Credit goes to @bzloink for updating the interface. * **User-Facing for Release Notes**; - [x] Perturbative methods using MRCC with an ROHF reference are now supported. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634
https://github.com/psi4/psi4/pull/634:278,Deployability,Release,Release,278,## Description; Recent versions of MRCC are able to compute perturbative energies [e.g. CCSDT(Q)] with an ROHF reference wave function. This updates Psi4's interface to allow these methods to be performed. Credit goes to @bzloink for updating the interface. * **User-Facing for Release Notes**; - [x] Perturbative methods using MRCC with an ROHF reference are now supported. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634
https://github.com/psi4/psi4/pull/634:156,Integrability,interface,interface,156,## Description; Recent versions of MRCC are able to compute perturbative energies [e.g. CCSDT(Q)] with an ROHF reference wave function. This updates Psi4's interface to allow these methods to be performed. Credit goes to @bzloink for updating the interface. * **User-Facing for Release Notes**; - [x] Perturbative methods using MRCC with an ROHF reference are now supported. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634
https://github.com/psi4/psi4/pull/634:247,Integrability,interface,interface,247,## Description; Recent versions of MRCC are able to compute perturbative energies [e.g. CCSDT(Q)] with an ROHF reference wave function. This updates Psi4's interface to allow these methods to be performed. Credit goes to @bzloink for updating the interface. * **User-Facing for Release Notes**; - [x] Perturbative methods using MRCC with an ROHF reference are now supported. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634
https://github.com/psi4/psi4/pull/634:195,Performance,perform,performed,195,## Description; Recent versions of MRCC are able to compute perturbative energies [e.g. CCSDT(Q)] with an ROHF reference wave function. This updates Psi4's interface to allow these methods to be performed. Credit goes to @bzloink for updating the interface. * **User-Facing for Release Notes**; - [x] Perturbative methods using MRCC with an ROHF reference are now supported. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634
https://github.com/psi4/psi4/pull/635:187,Energy Efficiency,efficient,efficient,187,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. I am separating this out from #592 which will wait for further tests. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/635
https://github.com/psi4/psi4/pull/635:345,Performance,tune,tuned,345,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. I am separating this out from #592 which will wait for further tests. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/635
https://github.com/psi4/psi4/pull/635:291,Testability,Benchmark,Benchmark,291,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. I am separating this out from #592 which will wait for further tests. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/635
https://github.com/psi4/psi4/pull/635:466,Testability,test,tests,466,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. I am separating this out from #592 which will wait for further tests. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/635
https://github.com/psi4/psi4/pull/636:16,Deployability,Update,Updates,16,## Description; Updates the CodeCov to provide a very low coverage barrier. This should be fixed later once the coverage has been increased to reasonable level.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/636
https://github.com/psi4/psi4/pull/637:455,Deployability,update,update,455,"## Description; PsiAPI docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Won my battle with nbsphinx on at least one computer (sadly, not the one we build docs on). So now we have @dsirianni's Jupyter PsiAPI tutorial alongside the longstanding Psithon tutorial. Also added a few PsiAPI variations to the input format page.; - [x] Review this without looking at the third commit. The ""update samples"" will just interfere.; * **User-Facing for Release Notes**; - [x] Add docs for PsiAPI. ## Questions; - @dsirianni, the small caps and the ``[`psi4.geometry()`](http://psicode.org/...)`` didn't work once sphinx had had its way. So switched to what you see now. Feel free to tidy up further. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/637
https://github.com/psi4/psi4/pull/637:513,Deployability,Release,Release,513,"## Description; PsiAPI docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Won my battle with nbsphinx on at least one computer (sadly, not the one we build docs on). So now we have @dsirianni's Jupyter PsiAPI tutorial alongside the longstanding Psithon tutorial. Also added a few PsiAPI variations to the input format page.; - [x] Review this without looking at the third commit. The ""update samples"" will just interfere.; * **User-Facing for Release Notes**; - [x] Add docs for PsiAPI. ## Questions; - @dsirianni, the small caps and the ``[`psi4.geometry()`](http://psicode.org/...)`` didn't work once sphinx had had its way. So switched to what you see now. Feel free to tidy up further. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/637
https://github.com/psi4/psi4/pull/638:332,Availability,failure,failure,332,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/638
https://github.com/psi4/psi4/pull/638:485,Deployability,Release,Release,485,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/638
https://github.com/psi4/psi4/pull/638:517,Performance,optimiz,optimizations,517,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/638
https://github.com/psi4/psi4/pull/638:35,Safety,safe,safe,35,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/638
https://github.com/psi4/psi4/pull/638:57,Safety,safe,safe,57,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/638
https://github.com/psi4/psi4/pull/638:430,Safety,detect,detection,430,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/638
https://github.com/psi4/psi4/pull/638:27,Testability,test,test,27,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/638
https://github.com/psi4/psi4/pull/638:214,Testability,test,test,214,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/638
https://github.com/psi4/psi4/issues/639:21,Availability,down,down,21,"When trying to track down some nondeterminstic behavior, I encountered the following oddity. ```; import numpy as np. molecule {; 0 1; C1 0.00000000 0.00000000 0.00000000; H2 0.49111719 0.98252240 -0.05876775; H3 -0.72033644 -0.10038934 -0.82524990; H4 -0.52826663 -0.08928047 0.96070982; H5 0.75766207 -0.79379696 -0.07638440; }. set {; basis cc-pvdz; }. e_scf, wfn = energy('hf', return_wfn=True). print(wfn.occupation_a().np); print(np.asarray(wfn.occupation_a())); ```. Somewhat surprisingly, this is the output I see:. ```; [ 0.00000000e+000 0.00000000e+000 0.00000000e+000 -7.63277803e+283; 6.91698601e-310 6.91698623e-310 0.00000000e+000 0.00000000e+000; 0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000; 1.65169957e-220 6.91698602e-310 6.91697627e-310 -3.39981117e-158; 6.91697639e-310 6.91696828e-310 5.41141341e-041 6.91697626e-310; 6.91697724e-310 0.00000000e+000 0.00000000e+000 0.00000000e+000; -3.67112871e-197 6.91698601e-310 6.91696828e-310 2.99382801e+052; 6.91697697e-310 6.91697723e-310 0.00000000e+000 0.00000000e+000; 0.00000000e+000 4.42201243e+096]; [ 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. i.e., something funky is going on with `.np`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/639
https://github.com/psi4/psi4/issues/639:369,Energy Efficiency,energy,energy,369,"When trying to track down some nondeterminstic behavior, I encountered the following oddity. ```; import numpy as np. molecule {; 0 1; C1 0.00000000 0.00000000 0.00000000; H2 0.49111719 0.98252240 -0.05876775; H3 -0.72033644 -0.10038934 -0.82524990; H4 -0.52826663 -0.08928047 0.96070982; H5 0.75766207 -0.79379696 -0.07638440; }. set {; basis cc-pvdz; }. e_scf, wfn = energy('hf', return_wfn=True). print(wfn.occupation_a().np); print(np.asarray(wfn.occupation_a())); ```. Somewhat surprisingly, this is the output I see:. ```; [ 0.00000000e+000 0.00000000e+000 0.00000000e+000 -7.63277803e+283; 6.91698601e-310 6.91698623e-310 0.00000000e+000 0.00000000e+000; 0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000; 1.65169957e-220 6.91698602e-310 6.91697627e-310 -3.39981117e-158; 6.91697639e-310 6.91696828e-310 5.41141341e-041 6.91697626e-310; 6.91697724e-310 0.00000000e+000 0.00000000e+000 0.00000000e+000; -3.67112871e-197 6.91698601e-310 6.91696828e-310 2.99382801e+052; 6.91697697e-310 6.91697723e-310 0.00000000e+000 0.00000000e+000; 0.00000000e+000 4.42201243e+096]; [ 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. i.e., something funky is going on with `.np`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/639
https://github.com/psi4/psi4/pull/640:438,Deployability,Release,Release,438,"## Description; As discussed, full circle — plugins are back in `tests/`. Also, removed old plugins that hadn't been maintained compilable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] There was some dpd code deleted that possibly shouldn't fade out of memory, in case we ever want a dpd plugin again.; - [x] `ctest -L plug` works same as before.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/640
https://github.com/psi4/psi4/pull/640:44,Modifiability,plugin,plugins,44,"## Description; As discussed, full circle — plugins are back in `tests/`. Also, removed old plugins that hadn't been maintained compilable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] There was some dpd code deleted that possibly shouldn't fade out of memory, in case we ever want a dpd plugin again.; - [x] `ctest -L plug` works same as before.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/640
https://github.com/psi4/psi4/pull/640:92,Modifiability,plugin,plugins,92,"## Description; As discussed, full circle — plugins are back in `tests/`. Also, removed old plugins that hadn't been maintained compilable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] There was some dpd code deleted that possibly shouldn't fade out of memory, in case we ever want a dpd plugin again.; - [x] `ctest -L plug` works same as before.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/640
https://github.com/psi4/psi4/pull/640:358,Modifiability,plugin,plugin,358,"## Description; As discussed, full circle — plugins are back in `tests/`. Also, removed old plugins that hadn't been maintained compilable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] There was some dpd code deleted that possibly shouldn't fade out of memory, in case we ever want a dpd plugin again.; - [x] `ctest -L plug` works same as before.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/640
https://github.com/psi4/psi4/pull/640:65,Testability,test,tests,65,"## Description; As discussed, full circle — plugins are back in `tests/`. Also, removed old plugins that hadn't been maintained compilable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] There was some dpd code deleted that possibly shouldn't fade out of memory, in case we ever want a dpd plugin again.; - [x] `ctest -L plug` works same as before.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/640
https://github.com/psi4/psi4/pull/641:632,Availability,avail,avail,632,"## Description; Adds ability for psi4.set_memory() to take unit-containing string as an argument, so that; `psi4.set_memory('30 GB')` behaves as would be expected. ## Todos; * **User API Changes**; - `int`, `float`, and `str` argument types supported; - `int` and `float` type arguments taken literally as number of bytes of memory to be set; - `str` type arguments must have units attached, e.g., `'20 mb'`, and are case-insensitive; - Added return of the amount of memory set; - renamed underlying fn to `psi4.core.set_memory_bytes(); - Arranged for inputparser to use the same psi4.set_memory() as psiapi, so now kib/mib/gib/tib avail. in input; - Correct the Psi4 and SCF headers which were computing MB and labeling MiB; - Add and test some bad examples of mem setting; - Add a minimum memory (250 MiB), adjust the default mem to 500 MiB. ## Questions; - [x] Currently, arguments of type `str` **MUST** have units. Should we allow users to input unitless numbers as `str`, to be taken literally? Or, if they wish to do that, should they just input as `int` or `float`? Consensus is, No, string args must have unit. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/641
https://github.com/psi4/psi4/pull/641:736,Testability,test,test,736,"## Description; Adds ability for psi4.set_memory() to take unit-containing string as an argument, so that; `psi4.set_memory('30 GB')` behaves as would be expected. ## Todos; * **User API Changes**; - `int`, `float`, and `str` argument types supported; - `int` and `float` type arguments taken literally as number of bytes of memory to be set; - `str` type arguments must have units attached, e.g., `'20 mb'`, and are case-insensitive; - Added return of the amount of memory set; - renamed underlying fn to `psi4.core.set_memory_bytes(); - Arranged for inputparser to use the same psi4.set_memory() as psiapi, so now kib/mib/gib/tib avail. in input; - Correct the Psi4 and SCF headers which were computing MB and labeling MiB; - Add and test some bad examples of mem setting; - Add a minimum memory (250 MiB), adjust the default mem to 500 MiB. ## Questions; - [x] Currently, arguments of type `str` **MUST** have units. Should we allow users to input unitless numbers as `str`, to be taken literally? Or, if they wish to do that, should they just input as `int` or `float`? Consensus is, No, string args must have unit. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/641
https://github.com/psi4/psi4/issues/642:71,Security,access,access,71,"With the df-mp2 wavefunction object in Python, is there any way to get access to the content of the `energies_` map other than through the global process state (`core.get_variable()`)?. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L792-L800",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/642
https://github.com/psi4/psi4/pull/643:43,Energy Efficiency,energy,energy,43,## Description; Move components of the mp2 energy into the `variables_` map so that they're accessible from Python (cc #642). ## Questions; Are the any backwards compatibility or other reasons to leave the `energies_` member variable around?. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/643
https://github.com/psi4/psi4/pull/643:225,Modifiability,variab,variable,225,## Description; Move components of the mp2 energy into the `variables_` map so that they're accessible from Python (cc #642). ## Questions; Are the any backwards compatibility or other reasons to leave the `energies_` member variable around?. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/643
https://github.com/psi4/psi4/pull/643:92,Security,access,accessible,92,## Description; Move components of the mp2 energy into the `variables_` map so that they're accessible from Python (cc #642). ## Questions; Are the any backwards compatibility or other reasons to leave the `energies_` member variable around?. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/643
https://github.com/psi4/psi4/pull/644:673,Deployability,Release,Release,673,## Description; This PR adds code to the findif codes that allows to save the current geometry and normal modes to a Molden file. Normal mode info is only written if explicitly requested by the user (via the boolean keyword NORMAL_MODES_WRITE). The normal modes are saved in [Molden format](http://www.cmbi.ru.nl/molden/molden_format.html). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposes (read only-mode) some variables in the VIBRATIONS class.; - [x] Adds a function to save normal modes info in Molden format.; - [x] Adds an option to write normal modes (false by default).; * **User-Facing for Release Notes**; - [x] Documentation. ## Questions; - [x] Where should the documentation go?; - [x] Suggestions to improve output format?. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644
https://github.com/psi4/psi4/pull/644:486,Modifiability,variab,variables,486,## Description; This PR adds code to the findif codes that allows to save the current geometry and normal modes to a Molden file. Normal mode info is only written if explicitly requested by the user (via the boolean keyword NORMAL_MODES_WRITE). The normal modes are saved in [Molden format](http://www.cmbi.ru.nl/molden/molden_format.html). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposes (read only-mode) some variables in the VIBRATIONS class.; - [x] Adds a function to save normal modes info in Molden format.; - [x] Adds an option to write normal modes (false by default).; * **User-Facing for Release Notes**; - [x] Documentation. ## Questions; - [x] Where should the documentation go?; - [x] Suggestions to improve output format?. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644
https://github.com/psi4/psi4/pull/644:456,Security,Expose,Exposes,456,## Description; This PR adds code to the findif codes that allows to save the current geometry and normal modes to a Molden file. Normal mode info is only written if explicitly requested by the user (via the boolean keyword NORMAL_MODES_WRITE). The normal modes are saved in [Molden format](http://www.cmbi.ru.nl/molden/molden_format.html). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposes (read only-mode) some variables in the VIBRATIONS class.; - [x] Adds a function to save normal modes info in Molden format.; - [x] Adds an option to write normal modes (false by default).; * **User-Facing for Release Notes**; - [x] Documentation. ## Questions; - [x] Where should the documentation go?; - [x] Suggestions to improve output format?. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644
https://github.com/psi4/psi4/issues/647:2545,Availability,error,error,2545,"0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following error:. ```; Format of dihedral entry is ""D atom_1 atom_2 atom_3 atom_4 (eq_val)""; Dynamic level is 0.; exc.g_really_quit() is 0.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/647:1952,Energy Efficiency,charge,charge,1952,"0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following error:. ```; Format of dihedral entry is ""D atom_1 atom_2 atom_3 atom_4 (eq_val)""; Dynamic level is 0.; exc.g_really_quit() is 0.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/647:1976,Energy Efficiency,charge,charge,1976,"0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following error:. ```; Format of dihedral entry is ""D atom_1 atom_2 atom_3 atom_4 (eq_val)""; Dynamic level is 0.; exc.g_really_quit() is 0.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/647:2107,Energy Efficiency,energy,energy,2107,"0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following error:. ```; Format of dihedral entry is ""D atom_1 atom_2 atom_3 atom_4 (eq_val)""; Dynamic level is 0.; exc.g_really_quit() is 0.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/647:2139,Energy Efficiency,energy,energy,2139,"0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following error:. ```; Format of dihedral entry is ""D atom_1 atom_2 atom_3 atom_4 (eq_val)""; Dynamic level is 0.; exc.g_really_quit() is 0.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/647:2178,Energy Efficiency,ENERGY,ENERGY,2178,"0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following error:. ```; Format of dihedral entry is ""D atom_1 atom_2 atom_3 atom_4 (eq_val)""; Dynamic level is 0.; exc.g_really_quit() is 0.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/647:1132,Performance,optimiz,optimization,1132,"nverge didn't look quite right. Here is a script I used:. ```python; #! Torsion scan of butane. molecule c4h10 {; 0 1; H -1.781487710695 -1.339015245276 -0.924843604480; H -2.809655081231 -0.316498366521 0.106834552942; H -1.696171739547 -1.492504703619 0.844458676121; C -1.808280241011 -0.768304160325 0.019321692974; H -0.781385143240 0.870036270346 0.998325840230; H -0.865561341910 1.021940295457 -0.757790563119; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF sin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/647:1366,Performance,optimiz,optimize,1366,"; C -1.808280241011 -0.768304160325 0.019321692974; H -0.781385143240 0.870036270346 0.998325840230; H -0.865561341910 1.021940295457 -0.757790563119; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Rela",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/647:1392,Performance,optimiz,optimization,1392,"; C -1.808280241011 -0.768304160325 0.019321692974; H -0.781385143240 0.870036270346 0.998325840230; H -0.865561341910 1.021940295457 -0.757790563119; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Rela",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/647:1468,Performance,optimiz,optimized,1468," 0.870036270346 0.998325840230; H -0.865561341910 1.021940295457 -0.757790563119; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/647:1570,Performance,Optimiz,Optimized,1570,"; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647
https://github.com/psi4/psi4/issues/648:59,Availability,error,error,59,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648
https://github.com/psi4/psi4/issues/648:86,Availability,Error,Error,86,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648
https://github.com/psi4/psi4/issues/648:180,Availability,Error,Error,180,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648
https://github.com/psi4/psi4/issues/648:370,Availability,error,errors,370,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648
https://github.com/psi4/psi4/issues/648:300,Deployability,install,install,300,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648
https://github.com/psi4/psi4/issues/648:455,Deployability,install,installation,455,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648
https://github.com/psi4/psi4/issues/648:714,Deployability,install,install,714,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648
https://github.com/psi4/psi4/issues/648:346,Modifiability,Config,Configuring,346,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648
https://github.com/psi4/psi4/pull/649:1647,Availability,avail,avail,1647," at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle on a name? Others are ""geometry"" and ""set_options"". ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/649
https://github.com/psi4/psi4/pull/649:901,Deployability,Release,Release,901,"## Description; All the basis set stuff that simply had to be done for 1.1 to be at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/649
https://github.com/psi4/psi4/pull/649:1214,Energy Efficiency,energy,energy,1214," at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle on a name? Others are ""geometry"" and ""set_options"". ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/649
https://github.com/psi4/psi4/pull/649:924,Modifiability,Extend,Extends,924,"## Description; All the basis set stuff that simply had to be done for 1.1 to be at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/649
https://github.com/psi4/psi4/pull/649:1333,Performance,load,load,1333," at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle on a name? Others are ""geometry"" and ""set_options"". ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/649
https://github.com/psi4/psi4/pull/649:783,Safety,detect,detection,783,"## Description; All the basis set stuff that simply had to be done for 1.1 to be at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/649
https://github.com/psi4/psi4/pull/649:45,Usability,simpl,simply,45,"## Description; All the basis set stuff that simply had to be done for 1.1 to be at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/649
https://github.com/psi4/psi4/issues/650:207,Availability,down,downstream,207,"I noticed that https://github.com/psi4/psi4/blob/0c08c20596b0c9a278324a1ce77dd39e00434d6d/psi4/driver/inputparser.py#L705-L706 doesn't allow for hyphens or tildes (`[-~]`) in the molecule name? Is there any downstream purpose served by this restriction, or objection to adding those in as allowable characters in a name?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650
https://github.com/psi4/psi4/pull/652:64,Availability,down,down,64,## Description; Drop string expansion of variables which breaks down when they are empty strings.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/652
https://github.com/psi4/psi4/pull/652:41,Modifiability,variab,variables,41,## Description; Drop string expansion of variables which breaks down when they are empty strings.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/652
https://github.com/psi4/psi4/issues/653:37,Deployability,install,install,37,"Hi all, ; I followed the tutorial to install the latest PSI4. However, when I used the cp command, it would show ""name 'cp' is not defined"". (if I use other function, such as energy, then there is no this kind of issue). could you help me solve this problem? Thank you.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/653
https://github.com/psi4/psi4/issues/653:175,Energy Efficiency,energy,energy,175,"Hi all, ; I followed the tutorial to install the latest PSI4. However, when I used the cp command, it would show ""name 'cp' is not defined"". (if I use other function, such as energy, then there is no this kind of issue). could you help me solve this problem? Thank you.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/653
https://github.com/psi4/psi4/pull/654:898,Deployability,patch,patch,898,"## Description; Gets back to full testsuite passing, fix cmake fix, better random directory labeling. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Changed all the subdirs uniqued by `random` for cfour, dftd3, gcp, basis blocks into `uuid`.; - [x] `MintsHelper::so_potential` was returning C1 matrices w/o applying perturbations, probably an oversight in psi4/psi4#635. Fixed test pcmsolver/dipole, which this had broken.; - [x] Too small memory for dftd3/version so fixed.; - [x] MRCC distributes a GENBAS with insufficient basissets that was getting picked up before psi4's GENBAS. So select psi4's GENBAS specifically.; - [x] The problem addressed by psi4/psi4#652 broke some of the underlying code, letting, for example, `/usr/lib64` into rpath, which is not the purpose of rpath. @susilehtola, please check that the current patch fixes your original psi4/psi4#648; - [x] The 180.npz wan't working for relative execution _e.g._, `(objdir >>>) stage/.../bin/psi4 ../tests/tu1.../input.dat` so fixed. Also moved orb rotation test case to cookbook dir.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/654
https://github.com/psi4/psi4/pull/654:1144,Deployability,Release,Release,1144,"## Description; Gets back to full testsuite passing, fix cmake fix, better random directory labeling. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Changed all the subdirs uniqued by `random` for cfour, dftd3, gcp, basis blocks into `uuid`.; - [x] `MintsHelper::so_potential` was returning C1 matrices w/o applying perturbations, probably an oversight in psi4/psi4#635. Fixed test pcmsolver/dipole, which this had broken.; - [x] Too small memory for dftd3/version so fixed.; - [x] MRCC distributes a GENBAS with insufficient basissets that was getting picked up before psi4's GENBAS. So select psi4's GENBAS specifically.; - [x] The problem addressed by psi4/psi4#652 broke some of the underlying code, letting, for example, `/usr/lib64` into rpath, which is not the purpose of rpath. @susilehtola, please check that the current patch fixes your original psi4/psi4#648; - [x] The 180.npz wan't working for relative execution _e.g._, `(objdir >>>) stage/.../bin/psi4 ../tests/tu1.../input.dat` so fixed. Also moved orb rotation test case to cookbook dir.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/654
https://github.com/psi4/psi4/pull/654:34,Testability,test,testsuite,34,"## Description; Gets back to full testsuite passing, fix cmake fix, better random directory labeling. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Changed all the subdirs uniqued by `random` for cfour, dftd3, gcp, basis blocks into `uuid`.; - [x] `MintsHelper::so_potential` was returning C1 matrices w/o applying perturbations, probably an oversight in psi4/psi4#635. Fixed test pcmsolver/dipole, which this had broken.; - [x] Too small memory for dftd3/version so fixed.; - [x] MRCC distributes a GENBAS with insufficient basissets that was getting picked up before psi4's GENBAS. So select psi4's GENBAS specifically.; - [x] The problem addressed by psi4/psi4#652 broke some of the underlying code, letting, for example, `/usr/lib64` into rpath, which is not the purpose of rpath. @susilehtola, please check that the current patch fixes your original psi4/psi4#648; - [x] The 180.npz wan't working for relative execution _e.g._, `(objdir >>>) stage/.../bin/psi4 ../tests/tu1.../input.dat` so fixed. Also moved orb rotation test case to cookbook dir.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/654
https://github.com/psi4/psi4/pull/654:445,Testability,test,test,445,"## Description; Gets back to full testsuite passing, fix cmake fix, better random directory labeling. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Changed all the subdirs uniqued by `random` for cfour, dftd3, gcp, basis blocks into `uuid`.; - [x] `MintsHelper::so_potential` was returning C1 matrices w/o applying perturbations, probably an oversight in psi4/psi4#635. Fixed test pcmsolver/dipole, which this had broken.; - [x] Too small memory for dftd3/version so fixed.; - [x] MRCC distributes a GENBAS with insufficient basissets that was getting picked up before psi4's GENBAS. So select psi4's GENBAS specifically.; - [x] The problem addressed by psi4/psi4#652 broke some of the underlying code, letting, for example, `/usr/lib64` into rpath, which is not the purpose of rpath. @susilehtola, please check that the current patch fixes your original psi4/psi4#648; - [x] The 180.npz wan't working for relative execution _e.g._, `(objdir >>>) stage/.../bin/psi4 ../tests/tu1.../input.dat` so fixed. Also moved orb rotation test case to cookbook dir.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/654
https://github.com/psi4/psi4/pull/654:1038,Testability,test,tests,1038,"## Description; Gets back to full testsuite passing, fix cmake fix, better random directory labeling. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Changed all the subdirs uniqued by `random` for cfour, dftd3, gcp, basis blocks into `uuid`.; - [x] `MintsHelper::so_potential` was returning C1 matrices w/o applying perturbations, probably an oversight in psi4/psi4#635. Fixed test pcmsolver/dipole, which this had broken.; - [x] Too small memory for dftd3/version so fixed.; - [x] MRCC distributes a GENBAS with insufficient basissets that was getting picked up before psi4's GENBAS. So select psi4's GENBAS specifically.; - [x] The problem addressed by psi4/psi4#652 broke some of the underlying code, letting, for example, `/usr/lib64` into rpath, which is not the purpose of rpath. @susilehtola, please check that the current patch fixes your original psi4/psi4#648; - [x] The 180.npz wan't working for relative execution _e.g._, `(objdir >>>) stage/.../bin/psi4 ../tests/tu1.../input.dat` so fixed. Also moved orb rotation test case to cookbook dir.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/654
https://github.com/psi4/psi4/pull/654:1096,Testability,test,test,1096,"## Description; Gets back to full testsuite passing, fix cmake fix, better random directory labeling. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Changed all the subdirs uniqued by `random` for cfour, dftd3, gcp, basis blocks into `uuid`.; - [x] `MintsHelper::so_potential` was returning C1 matrices w/o applying perturbations, probably an oversight in psi4/psi4#635. Fixed test pcmsolver/dipole, which this had broken.; - [x] Too small memory for dftd3/version so fixed.; - [x] MRCC distributes a GENBAS with insufficient basissets that was getting picked up before psi4's GENBAS. So select psi4's GENBAS specifically.; - [x] The problem addressed by psi4/psi4#652 broke some of the underlying code, letting, for example, `/usr/lib64` into rpath, which is not the purpose of rpath. @susilehtola, please check that the current patch fixes your original psi4/psi4#648; - [x] The 180.npz wan't working for relative execution _e.g._, `(objdir >>>) stage/.../bin/psi4 ../tests/tu1.../input.dat` so fixed. Also moved orb rotation test case to cookbook dir.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/654
https://github.com/psi4/psi4/issues/655:1276,Availability,error,error,1276,"Example:; ```; frame_metadata = {; 'system_name': '{C#N}_O'; }. molecule {; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; }. energy(""hf""); ```. The psithon interpreter turns this into ; ```; import psi4; from psi4 import *; from psi4.core import *; from psi4.driver.diatomic import anharmonicity; from psi4.driver.gaussian_n import *; from psi4.driver.aliases import *; from psi4.driver.driver_cbs import xtpl_highest_1, scf_xtpl_helgaker_2, scf_xtpl_helgaker_3, corl_xtpl_helgaker_2; from psi4.driver.wrapper_database import database, db, DB_RGT, DB_RXN; from psi4.driver.wrapper_autofrag import auto_fragments; from psi4.driver.constants.physconst import *; psi4_io = core.IOManager.shared_object(); psi4_io.set_default_path(""/state/partition1/tmp/""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""); frame_metadata = {; 'system_name': '{; }; core.efp_init(); geometry(""""""; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; """"""); core.IO.set_default_namespace(""""); energy(""hf""); ```. Which unsurprisingly gives a syntax error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/655
https://github.com/psi4/psi4/issues/655:247,Energy Efficiency,energy,energy,247,"Example:; ```; frame_metadata = {; 'system_name': '{C#N}_O'; }. molecule {; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; }. energy(""hf""); ```. The psithon interpreter turns this into ; ```; import psi4; from psi4 import *; from psi4.core import *; from psi4.driver.diatomic import anharmonicity; from psi4.driver.gaussian_n import *; from psi4.driver.aliases import *; from psi4.driver.driver_cbs import xtpl_highest_1, scf_xtpl_helgaker_2, scf_xtpl_helgaker_3, corl_xtpl_helgaker_2; from psi4.driver.wrapper_database import database, db, DB_RGT, DB_RXN; from psi4.driver.wrapper_autofrag import auto_fragments; from psi4.driver.constants.physconst import *; psi4_io = core.IOManager.shared_object(); psi4_io.set_default_path(""/state/partition1/tmp/""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""); frame_metadata = {; 'system_name': '{; }; core.efp_init(); geometry(""""""; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; """"""); core.IO.set_default_namespace(""""); energy(""hf""); ```. Which unsurprisingly gives a syntax error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/655
https://github.com/psi4/psi4/issues/655:1221,Energy Efficiency,energy,energy,1221,"Example:; ```; frame_metadata = {; 'system_name': '{C#N}_O'; }. molecule {; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; }. energy(""hf""); ```. The psithon interpreter turns this into ; ```; import psi4; from psi4 import *; from psi4.core import *; from psi4.driver.diatomic import anharmonicity; from psi4.driver.gaussian_n import *; from psi4.driver.aliases import *; from psi4.driver.driver_cbs import xtpl_highest_1, scf_xtpl_helgaker_2, scf_xtpl_helgaker_3, corl_xtpl_helgaker_2; from psi4.driver.wrapper_database import database, db, DB_RGT, DB_RXN; from psi4.driver.wrapper_autofrag import auto_fragments; from psi4.driver.constants.physconst import *; psi4_io = core.IOManager.shared_object(); psi4_io.set_default_path(""/state/partition1/tmp/""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""); frame_metadata = {; 'system_name': '{; }; core.efp_init(); geometry(""""""; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; """"""); core.IO.set_default_namespace(""""); energy(""hf""); ```. Which unsurprisingly gives a syntax error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/655
https://github.com/psi4/psi4/issues/656:241,Availability,error,error,241,"Hi,. Anyone noticed that programs like _gcp_ and _xcfour_ are getting loaded when psi4 is starting? Or is it just me? I only noticed because psi4 will stop/crash if e.g. xfcour does not find all libraries (mpi, mkl, etc.). gcp will print an error about its missing input file and be ""defunc"" in my bash. Note that it happens even when none of the programs will actually be used according to the input. I am at a loss what to look at in my psi4 installation. version: 1.1a2.dev309, gnu+mkl build",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/656
https://github.com/psi4/psi4/issues/656:444,Deployability,install,installation,444,"Hi,. Anyone noticed that programs like _gcp_ and _xcfour_ are getting loaded when psi4 is starting? Or is it just me? I only noticed because psi4 will stop/crash if e.g. xfcour does not find all libraries (mpi, mkl, etc.). gcp will print an error about its missing input file and be ""defunc"" in my bash. Note that it happens even when none of the programs will actually be used according to the input. I am at a loss what to look at in my psi4 installation. version: 1.1a2.dev309, gnu+mkl build",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/656
https://github.com/psi4/psi4/issues/656:70,Performance,load,loaded,70,"Hi,. Anyone noticed that programs like _gcp_ and _xcfour_ are getting loaded when psi4 is starting? Or is it just me? I only noticed because psi4 will stop/crash if e.g. xfcour does not find all libraries (mpi, mkl, etc.). gcp will print an error about its missing input file and be ""defunc"" in my bash. Note that it happens even when none of the programs will actually be used according to the input. I am at a loss what to look at in my psi4 installation. version: 1.1a2.dev309, gnu+mkl build",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/656
https://github.com/psi4/psi4/issues/657:230,Deployability,install,installation,230,"Hi,. I am wondering why these are linked explicitly by cmake alongside the intel mkl*?:; /usr/lib/x86_64-linux-gnu/libpthread.so; /usr/lib/x86_64-linux-gnu/libm.so; /usr/lib/x86_64-linux-gnu/libdl.so. If I want to use a local gcc installation, I have to delete them from the CMakeCache.txt or else I will; have problems with missing symbols in core.so later on. E.g. If the above libs are linked, then I end up with libstdc++.so and libgomp from /usr/lib/x86_64-linux-gnu/ instead of my local install (/home/kruse/gcc-4.9.4/lib64/). . cheers. [*] MKL2017",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/657
https://github.com/psi4/psi4/issues/657:493,Deployability,install,install,493,"Hi,. I am wondering why these are linked explicitly by cmake alongside the intel mkl*?:; /usr/lib/x86_64-linux-gnu/libpthread.so; /usr/lib/x86_64-linux-gnu/libm.so; /usr/lib/x86_64-linux-gnu/libdl.so. If I want to use a local gcc installation, I have to delete them from the CMakeCache.txt or else I will; have problems with missing symbols in core.so later on. E.g. If the above libs are linked, then I end up with libstdc++.so and libgomp from /usr/lib/x86_64-linux-gnu/ instead of my local install (/home/kruse/gcc-4.9.4/lib64/). . cheers. [*] MKL2017",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/657
https://github.com/psi4/psi4/pull/658:498,Deployability,Release,Release,498,## Description; Fixes #655 and some other possibly nasty issues that come from; - Psithon->Python replacements being executed on literal strings; - Truncation of lines with literal python strings that contain a hash character (`#`). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Improved handling of literal strings inside `inputparser.py` to avoid regex replacements being attempted inside Python literals.; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/658
https://github.com/psi4/psi4/pull/658:412,Safety,avoid,avoid,412,## Description; Fixes #655 and some other possibly nasty issues that come from; - Psithon->Python replacements being executed on literal strings; - Truncation of lines with literal python strings that contain a hash character (`#`). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Improved handling of literal strings inside `inputparser.py` to avoid regex replacements being attempted inside Python literals.; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/658
https://github.com/psi4/psi4/pull/658:211,Security,hash,hash,211,## Description; Fixes #655 and some other possibly nasty issues that come from; - Psithon->Python replacements being executed on literal strings; - Truncation of lines with literal python strings that contain a hash character (`#`). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Improved handling of literal strings inside `inputparser.py` to avoid regex replacements being attempted inside Python literals.; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/658
https://github.com/psi4/psi4/pull/659:338,Deployability,install,installed,338,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/659
https://github.com/psi4/psi4/pull/659:569,Deployability,Release,Release,569,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/659
https://github.com/psi4/psi4/pull/659:605,Modifiability,plugin,plugins,605,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/659
https://github.com/psi4/psi4/pull/659:641,Modifiability,Plugin,PluginCache,641,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/659
https://github.com/psi4/psi4/pull/659:494,Performance,load,loading,494,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/659
https://github.com/psi4/psi4/pull/659:250,Safety,safe,safe,250,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/659
https://github.com/psi4/psi4/issues/660:636,Deployability,install,install,636,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660
https://github.com/psi4/psi4/issues/660:256,Integrability,message,message,256,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660
https://github.com/psi4/psi4/issues/660:501,Integrability,wrap,wrappers,501,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660
https://github.com/psi4/psi4/issues/660:220,Modifiability,variab,variables,220,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660
https://github.com/psi4/psi4/issues/660:311,Modifiability,plugin,plugin,311,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660
https://github.com/psi4/psi4/issues/660:435,Modifiability,plugin,plugin,435,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660
https://github.com/psi4/psi4/issues/660:567,Modifiability,plugin,plugin,567,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660
https://github.com/psi4/psi4/issues/661:525,Deployability,install,installation,525,"(I feel a bit bad for opening so many issues..but here we go..); Hi,. In order to make parallel xcfour work with psi4, I needed to remove the `env` parameter the subprocess: ; `retcode = subprocess.Popen([cfour_executable], bufsize=0,stdout=subprocess.PIPE)`; (compare with [original](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/interface_cfour.py#L213)). Otherwise xinitenv (from cfour) would exist with exit code 265 and then psi4 is upset by the non-existing output. Maybe is has to do with our cfour installation using ""bash"" and not ""sh"" in the various cfour init scripts? But env does not change the shell type, so I am confused.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661
https://github.com/psi4/psi4/issues/662:308,Availability,error,error,308,"When I try to run the input file from the X2C section, it fails.; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; relativistic x2c; }. energy('hf'); ```. It runs fine if I either remove the `-decon`, remove the `relativistic x2c` option, or add the `basis_relativistic` option. The error I get is:; ```; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 2797, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/usr/local/lib/psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 770, in construct; filename = cls.make_filename(basgbs); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1309, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```. I'm guessing that this is related to issue #617.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662
https://github.com/psi4/psi4/issues/662:161,Energy Efficiency,energy,energy,161,"When I try to run the input file from the X2C section, it fails.; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; relativistic x2c; }. energy('hf'); ```. It runs fine if I either remove the `-decon`, remove the `relativistic x2c` option, or add the `basis_relativistic` option. The error I get is:; ```; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 2797, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/usr/local/lib/psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 770, in construct; filename = cls.make_filename(basgbs); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1309, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```. I'm guessing that this is related to issue #617.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662
https://github.com/psi4/psi4/issues/662:529,Energy Efficiency,energy,energy,529,"When I try to run the input file from the X2C section, it fails.; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; relativistic x2c; }. energy('hf'); ```. It runs fine if I either remove the `-decon`, remove the `relativistic x2c` option, or add the `basis_relativistic` option. The error I get is:; ```; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 2797, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/usr/local/lib/psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 770, in construct; filename = cls.make_filename(basgbs); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1309, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```. I'm guessing that this is related to issue #617.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662
https://github.com/psi4/psi4/issues/662:555,Energy Efficiency,energy,energy,555,"When I try to run the input file from the X2C section, it fails.; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; relativistic x2c; }. energy('hf'); ```. It runs fine if I either remove the `-decon`, remove the `relativistic x2c` option, or add the `basis_relativistic` option. The error I get is:; ```; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 2797, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/usr/local/lib/psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 770, in construct; filename = cls.make_filename(basgbs); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1309, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```. I'm guessing that this is related to issue #617.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662
https://github.com/psi4/psi4/pull/663:503,Deployability,Release,Release,503,"## Description; The stuff needed to get nightly builds working again, this time driven by Py36. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Something about my new nightly build script makes it hypersensitive to unicode. So conducted a purge of docs, source (except for comments and @jgonthier), and basis sets.; - [x] Make sure to return a `str` version from our fake setup.py, no matter if called by py2 or 3.; * **User-Facing for Release Notes**; - [x] After two reports of Intel 2016.0.1 not building, officially disallowing it. ## Questions; - [x] @amjames and/or @jgonthier, could you copy the relevant two lines into your `cmake/custom_cxxstandard.cmake` and see if that properly scuppers your 2016.0.1 build attempts?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/663
https://github.com/psi4/psi4/pull/665:467,Deployability,Release,Release,467,"## Description; Fixes a [build](http://forum.psicode.org/t/crc32-undefined-symbol-at-runtime-when-built-with-pcmsolver-gcc-4-9-4/449/10) and an [execution](http://forum.psicode.org/t/pcmsolver-inp-file-not-found-bug/438/7) issue with PCMSolver. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix build issue with Zlib. Thanks @loriab for the pull request on the PCMSolver repo.; * **User-Facing for Release Notes**; - [x] The scratch directory is now unique-ified using UUID. The PCM input parsing step happens in scratch, preventing overwriting of `pcmsolver.inp` and/or `@pcmsolver.inp` files. ## Questions; - [x] The `cavity.off`, `cavity.npz` and `PEDRA.OUT` files are **not** copied back to the execution directory. Is there functinality already in place to salvage them after successful execution?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665
https://github.com/psi4/psi4/issues/666:193,Testability,test,test,193,"In Python 3.6, the extern object (keyword set to a Python object) is being double freed at end of execution, leading to a crash. Builds fine, runs fine, unless extern set, so only shows up for test cases extern1 and extern2. These have been conditionally and temporarily removed from test suite until this fixed. Can force a fix by clearing options before end of file, `psi4.core.clean_options()`. This is a reference counting issue and will _not_ be fixed for 1.1.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/666
https://github.com/psi4/psi4/issues/666:284,Testability,test,test,284,"In Python 3.6, the extern object (keyword set to a Python object) is being double freed at end of execution, leading to a crash. Builds fine, runs fine, unless extern set, so only shows up for test cases extern1 and extern2. These have been conditionally and temporarily removed from test suite until this fixed. Can force a fix by clearing options before end of file, `psi4.core.clean_options()`. This is a reference counting issue and will _not_ be fixed for 1.1.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/666
https://github.com/psi4/psi4/issues/666:332,Usability,clear,clearing,332,"In Python 3.6, the extern object (keyword set to a Python object) is being double freed at end of execution, leading to a crash. Builds fine, runs fine, unless extern set, so only shows up for test cases extern1 and extern2. These have been conditionally and temporarily removed from test suite until this fixed. Can force a fix by clearing options before end of file, `psi4.core.clean_options()`. This is a reference counting issue and will _not_ be fixed for 1.1.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/666
https://github.com/psi4/psi4/issues/667:279,Availability,error,error,279,"If the name of the installation directory is over a certain threshold and you try to run gdma, it will crash. Probably just needs a longer string somewhere that my shallow explorations have not found. This will _not_ be fixed for 1.1, so just documenting the issue. Will add the error message when I hit it again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/667
https://github.com/psi4/psi4/issues/667:19,Deployability,install,installation,19,"If the name of the installation directory is over a certain threshold and you try to run gdma, it will crash. Probably just needs a longer string somewhere that my shallow explorations have not found. This will _not_ be fixed for 1.1, so just documenting the issue. Will add the error message when I hit it again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/667
https://github.com/psi4/psi4/issues/667:285,Integrability,message,message,285,"If the name of the installation directory is over a certain threshold and you try to run gdma, it will crash. Probably just needs a longer string somewhere that my shallow explorations have not found. This will _not_ be fixed for 1.1, so just documenting the issue. Will add the error message when I hit it again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/667
https://github.com/psi4/psi4/pull/668:707,Deployability,Release,Release,707,"## Description; There are a few bugs and usability issues with calculations in the presence of a dipole field; this PR will address them. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix and test dipole derivative integrals.; - [x] Add dipole derivative terms to SCF gradients.; - [x] Add dipole derivative terms to MP2 gradients.; - [x] Ensure findif calculations in the presence of a field don't project rotations/translations.; - [x] Add tests for SCF and MP2 gradients.; - [x] Fix nuclear repulsion energies and gradients when a dipole field is present.; - [x] Document method for specifying dipole perturbation. * **User-Facing for Release Notes**; - [x] Improve handling of calculations in the presence of a field. ## Questions; - [x] I don't like the fact that we have to set `perturb_h`, `perturb_with` and `perturb_magnitude`. The biggest problem is that we can only specify x, y, or z perturbations as-is. I propose something like keeping `perturb_h` for easy toggling of the field, but then we should deprecate `dipole_{x,y,z}` in favor of `dipole`. Then an option like `perturb_dipole` or similar that would take a 3-vector to specify the magnitudes would be better. Please weigh in on this. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/668
https://github.com/psi4/psi4/pull/668:261,Testability,test,test,261,"## Description; There are a few bugs and usability issues with calculations in the presence of a dipole field; this PR will address them. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix and test dipole derivative integrals.; - [x] Add dipole derivative terms to SCF gradients.; - [x] Add dipole derivative terms to MP2 gradients.; - [x] Ensure findif calculations in the presence of a field don't project rotations/translations.; - [x] Add tests for SCF and MP2 gradients.; - [x] Fix nuclear repulsion energies and gradients when a dipole field is present.; - [x] Document method for specifying dipole perturbation. * **User-Facing for Release Notes**; - [x] Improve handling of calculations in the presence of a field. ## Questions; - [x] I don't like the fact that we have to set `perturb_h`, `perturb_with` and `perturb_magnitude`. The biggest problem is that we can only specify x, y, or z perturbations as-is. I propose something like keeping `perturb_h` for easy toggling of the field, but then we should deprecate `dipole_{x,y,z}` in favor of `dipole`. Then an option like `perturb_dipole` or similar that would take a 3-vector to specify the magnitudes would be better. Please weigh in on this. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/668
https://github.com/psi4/psi4/pull/668:511,Testability,test,tests,511,"## Description; There are a few bugs and usability issues with calculations in the presence of a dipole field; this PR will address them. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix and test dipole derivative integrals.; - [x] Add dipole derivative terms to SCF gradients.; - [x] Add dipole derivative terms to MP2 gradients.; - [x] Ensure findif calculations in the presence of a field don't project rotations/translations.; - [x] Add tests for SCF and MP2 gradients.; - [x] Fix nuclear repulsion energies and gradients when a dipole field is present.; - [x] Document method for specifying dipole perturbation. * **User-Facing for Release Notes**; - [x] Improve handling of calculations in the presence of a field. ## Questions; - [x] I don't like the fact that we have to set `perturb_h`, `perturb_with` and `perturb_magnitude`. The biggest problem is that we can only specify x, y, or z perturbations as-is. I propose something like keeping `perturb_h` for easy toggling of the field, but then we should deprecate `dipole_{x,y,z}` in favor of `dipole`. Then an option like `perturb_dipole` or similar that would take a 3-vector to specify the magnitudes would be better. Please weigh in on this. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/668
https://github.com/psi4/psi4/pull/668:41,Usability,usab,usability,41,"## Description; There are a few bugs and usability issues with calculations in the presence of a dipole field; this PR will address them. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix and test dipole derivative integrals.; - [x] Add dipole derivative terms to SCF gradients.; - [x] Add dipole derivative terms to MP2 gradients.; - [x] Ensure findif calculations in the presence of a field don't project rotations/translations.; - [x] Add tests for SCF and MP2 gradients.; - [x] Fix nuclear repulsion energies and gradients when a dipole field is present.; - [x] Document method for specifying dipole perturbation. * **User-Facing for Release Notes**; - [x] Improve handling of calculations in the presence of a field. ## Questions; - [x] I don't like the fact that we have to set `perturb_h`, `perturb_with` and `perturb_magnitude`. The biggest problem is that we can only specify x, y, or z perturbations as-is. I propose something like keeping `perturb_h` for easy toggling of the field, but then we should deprecate `dipole_{x,y,z}` in favor of `dipole`. Then an option like `perturb_dipole` or similar that would take a 3-vector to specify the magnitudes would be better. Please weigh in on this. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/668
https://github.com/psi4/psi4/issues/669:229,Performance,optimiz,optimizations,229,"I suspect there is something problematic in python with the use of the bash dot to specify a directory, or the use of a non-global path location. I know it is problematic with psi4+cfour. These will **not** work for me for cfour optimizations:; `psi4 -s . opt.in` [here the gradient is not parsed]; `psi4 -s ./localdir opt.in` [does not find the (correctly created) directory]. This works:; `psi4 -s /scratch/ opt.in`. If you want to force users to always use a global path, I would be fine with it. [ Psi4 1.1a2.dev375 (af8133b)]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/669
https://github.com/psi4/psi4/issues/671:296,Availability,error,error,296,"This is not a psi4 issue, but users are affected by it. Something is off with the new single dynamic library from intel and gcc + mkl2017 building. Essentially, sometimes you can get over subscription (nested OpenMP+MKL threading), and sometimes threading does not work at all. Through trial and error I found the following env variables set the expected behavior:. ```; export MKL_THREADING_LAYER=GNU; export MKL_INTERFACE_LAYER=GNU; export OMP_NESTED=""FALSE"" <-- supposed to be libgomp default, but is not?; ```. Maybe not all 3 are needed, or there is some other flag. I was just happy to get the proper behavior. I tested gcc 4.9.4/6.3 and MKL2017 and MKL2017.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/671
https://github.com/psi4/psi4/issues/671:328,Modifiability,variab,variables,328,"This is not a psi4 issue, but users are affected by it. Something is off with the new single dynamic library from intel and gcc + mkl2017 building. Essentially, sometimes you can get over subscription (nested OpenMP+MKL threading), and sometimes threading does not work at all. Through trial and error I found the following env variables set the expected behavior:. ```; export MKL_THREADING_LAYER=GNU; export MKL_INTERFACE_LAYER=GNU; export OMP_NESTED=""FALSE"" <-- supposed to be libgomp default, but is not?; ```. Maybe not all 3 are needed, or there is some other flag. I was just happy to get the proper behavior. I tested gcc 4.9.4/6.3 and MKL2017 and MKL2017.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/671
https://github.com/psi4/psi4/issues/671:619,Testability,test,tested,619,"This is not a psi4 issue, but users are affected by it. Something is off with the new single dynamic library from intel and gcc + mkl2017 building. Essentially, sometimes you can get over subscription (nested OpenMP+MKL threading), and sometimes threading does not work at all. Through trial and error I found the following env variables set the expected behavior:. ```; export MKL_THREADING_LAYER=GNU; export MKL_INTERFACE_LAYER=GNU; export OMP_NESTED=""FALSE"" <-- supposed to be libgomp default, but is not?; ```. Maybe not all 3 are needed, or there is some other flag. I was just happy to get the proper behavior. I tested gcc 4.9.4/6.3 and MKL2017 and MKL2017.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/671
https://github.com/psi4/psi4/pull/672:345,Availability,echo,echo-target,345,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/672
https://github.com/psi4/psi4/pull/672:939,Availability,error,error,939,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/672
https://github.com/psi4/psi4/pull/672:31,Deployability,Update,Update,31,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/672
https://github.com/psi4/psi4/pull/672:597,Deployability,Release,Release,597,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/672
https://github.com/psi4/psi4/pull/672:108,Modifiability,variab,variable,108,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/672
https://github.com/psi4/psi4/pull/672:900,Testability,test,test,900,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/672
https://github.com/psi4/psi4/issues/673:425,Availability,avail,available,425,"Whilst digging around for why I was seeing inconsistent numbers of grid points on different machines, I've spotted what has to be a bug. Currently, DFT_SPHERICAL_POINTS can be set to any value, rather than just [a Lebedev Points number](http://psicode.org/psi4manual/master/dft.html#table-lebedevorder). If a non Lebdev number is used, then the grid is, essentially, undefined. The correct behaviour is to print the table of available values and throw an exception. In psi4/psi4/src/psi4/libfock/cubature.cc, DFTGrid::buildGridFromOptions() calls LebedevGridMgr::findOrderByNPoints(opt.nangpts) (line 3968) which returns either the grid order or -1 if opt.nangpts doesn't match one of the defined grid sizes. ` if (LebedevGridMgr::findOrderByNPoints(opt.nangpts) < -1) {; LebedevGridMgr::PrintHelp(); // Tell what the admissible values are.; throw PSIEXCEPTION(""Invalid number of spherical points (not a Lebedev number)"");; }; `. The current check at line 3968 for a suitable value for DFT_SPHERICAL_POINTS is ""retval < -1"". Surely this should be either ""retval == -1"" or ""retval < 0"". Currently, the test is false even when a non-Lebdev number has been chosen:; ""set dft_spherical_points = 110"" works as expected; ""set dft_spherical_points = 109"" (or any non-Lebdev number) gives a stupidly small grid.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/673
https://github.com/psi4/psi4/issues/673:1101,Testability,test,test,1101,"Whilst digging around for why I was seeing inconsistent numbers of grid points on different machines, I've spotted what has to be a bug. Currently, DFT_SPHERICAL_POINTS can be set to any value, rather than just [a Lebedev Points number](http://psicode.org/psi4manual/master/dft.html#table-lebedevorder). If a non Lebdev number is used, then the grid is, essentially, undefined. The correct behaviour is to print the table of available values and throw an exception. In psi4/psi4/src/psi4/libfock/cubature.cc, DFTGrid::buildGridFromOptions() calls LebedevGridMgr::findOrderByNPoints(opt.nangpts) (line 3968) which returns either the grid order or -1 if opt.nangpts doesn't match one of the defined grid sizes. ` if (LebedevGridMgr::findOrderByNPoints(opt.nangpts) < -1) {; LebedevGridMgr::PrintHelp(); // Tell what the admissible values are.; throw PSIEXCEPTION(""Invalid number of spherical points (not a Lebedev number)"");; }; `. The current check at line 3968 for a suitable value for DFT_SPHERICAL_POINTS is ""retval < -1"". Surely this should be either ""retval == -1"" or ""retval < 0"". Currently, the test is false even when a non-Lebdev number has been chosen:; ""set dft_spherical_points = 110"" works as expected; ""set dft_spherical_points = 109"" (or any non-Lebdev number) gives a stupidly small grid.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/673
https://github.com/psi4/psi4/pull/674:107,Testability,test,test,107,"## Description; The value of dft_spherical_points should only be able to take certain Lebedev numbers. The test for appropriate values is broken and gives undefined behaviour for non-Lebedev numbers. This fix should give the expected behaviour for unsupported values, bailing out with a table of allowed values. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/674
https://github.com/psi4/psi4/issues/675:182,Availability,error,error,182,"Hello,. I am working on a university project and want to confirm that Psi4 is running correctly. When I run the test that the binary installation guide specifies I get the following error:. ![image](https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675
https://github.com/psi4/psi4/issues/675:133,Deployability,install,installation,133,"Hello,. I am working on a university project and want to confirm that Psi4 is running correctly. When I run the test that the binary installation guide specifies I get the following error:. ![image](https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675
https://github.com/psi4/psi4/issues/675:112,Testability,test,test,112,"Hello,. I am working on a university project and want to confirm that Psi4 is running correctly. When I run the test that the binary installation guide specifies I get the following error:. ![image](https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675
https://github.com/psi4/psi4/issues/675:146,Usability,guid,guide,146,"Hello,. I am working on a university project and want to confirm that Psi4 is running correctly. When I run the test that the binary installation guide specifies I get the following error:. ![image](https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675
https://github.com/psi4/psi4/pull/676:201,Deployability,Release,Release,201,## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes pcmsolver/scf for py3; - [x] Moves libefp origin upstream ; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/676
https://github.com/psi4/psi4/issues/677:50,Energy Efficiency,energy,energy,50,"GaTech has known that dftd3-version returns wrong energy from one of the C++ functional calls, leading to a failed test, when build _for_ (not necessarily _on_) 5930 processor family. Fundamental cause is a different number of DFT grid points. @lazaroid at [the forum](http://forum.psicode.org/t/different-dft-grid-behaviour-on-different-machines-very-different-dft-enrgies/460/5) has given a good analysis of the problem. This issue admits that there is a problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/677
https://github.com/psi4/psi4/issues/677:115,Testability,test,test,115,"GaTech has known that dftd3-version returns wrong energy from one of the C++ functional calls, leading to a failed test, when build _for_ (not necessarily _on_) 5930 processor family. Fundamental cause is a different number of DFT grid points. @lazaroid at [the forum](http://forum.psicode.org/t/different-dft-grid-behaviour-on-different-machines-very-different-dft-enrgies/460/5) has given a good analysis of the problem. This issue admits that there is a problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/677
https://github.com/psi4/psi4/pull/678:869,Deployability,Release,Release,869,"## Description; This cleans up a matrix before diagonalisation by removing extremely small values arising from numerical accuracy during matrix generation. Diagonalisation of matrices that have off-diagonal elements of ca <10-14 with DSYEV appears to lead to unexpected eigenvalues, which ultimately lead to different DFT grid generation on different processor types that show subtly different behaviour with numerical accuracy. Ultimately, this enables the dftd3-version test to pass on core i7-5930X processors (all Haswell?) where before it failed due to generation of an odd DFT grid compared with other processors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - I don't think this should affect anything other than within OrientationMgr but the main developers will know better!; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678
https://github.com/psi4/psi4/pull/678:472,Testability,test,test,472,"## Description; This cleans up a matrix before diagonalisation by removing extremely small values arising from numerical accuracy during matrix generation. Diagonalisation of matrices that have off-diagonal elements of ca <10-14 with DSYEV appears to lead to unexpected eigenvalues, which ultimately lead to different DFT grid generation on different processor types that show subtly different behaviour with numerical accuracy. Ultimately, this enables the dftd3-version test to pass on core i7-5930X processors (all Haswell?) where before it failed due to generation of an odd DFT grid compared with other processors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - I don't think this should affect anything other than within OrientationMgr but the main developers will know better!; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678
https://github.com/psi4/psi4/pull/679:46,Integrability,message,message,46,"This PR 1) adds a slightly more user-friendly message to a possible exception raised in the F-SAPT post-analysis script and 2) makes the FISAPT_FSAPT_FILEPATH, FISAPT_FSSAPT_FILEPATH, and FISAPT_PLOT_FILEPATH options work without adding a '/' to the end of the option. . On 2), this option only worked properly if the '/' is appended to the end of the directory name (example: ""FISAPT_FSAPT_FILEPATH myfsapt/""), and this only works if done in a set block. Now, this way of setting the option will work, as well as ""FISAPT_FSAPT_FILEPATH myfsapt"" inside and outside of a set block. - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/679
https://github.com/psi4/psi4/pull/679:32,Usability,user-friendly,user-friendly,32,"This PR 1) adds a slightly more user-friendly message to a possible exception raised in the F-SAPT post-analysis script and 2) makes the FISAPT_FSAPT_FILEPATH, FISAPT_FSSAPT_FILEPATH, and FISAPT_PLOT_FILEPATH options work without adding a '/' to the end of the option. . On 2), this option only worked properly if the '/' is appended to the end of the directory name (example: ""FISAPT_FSAPT_FILEPATH myfsapt/""), and this only works if done in a set block. Now, this way of setting the option will work, as well as ""FISAPT_FSAPT_FILEPATH myfsapt"" inside and outside of a set block. - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/679
https://github.com/psi4/psi4/issues/680:399,Availability,fault,fault,399,"I've been fiddling about with fragment optimisations and (after a bit of tweaking intrafrag_step_limit and interfrag_step_limit), I can get something like a benzene dimer to run and optimise (blyp/cc-pVDZ with D3BJ empirical dispersion; I'm not worried what the actual structure is at the moment!). If I do the same with, e.g., a dimer of PhCN, i.e. something with linear bends present, I get a seg fault pretty much straight away in the optimisation during printing of the internal coordinates. The top of the debug stack is:; ```; (gdb) bt; #0 0x00002aaaadd9a2bd in opt::v3d::v3d_axpy (a=-1, X=0x3fee2b48e49e68d8, Y=0x55555d9b5c90, Z=0x7fffffffbc20); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/v3d.h:72; #1 0x00002aaaaddacf78 in opt::BEND::compute_axes (this=0x55555e408d20, geom=0x55555d874e30); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/bend.cc:82; #2 0x00002aaaaddad565 in opt::BEND::value (this=0x55555e408d20, geom=0x55555d874e30); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/bend.cc:141; #3 0x00002aaaaddae374 in opt::BEND::print (this=0x55555e408d20, psi_fp=..., qc_fp=0x0, geom=0x55555d874e30, ; off=0) at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/bend.cc:269; #4 0x00002aaaadd6cff2 in opt::FRAG::print_simples (this=0x55556b8407e0, psi_fp=..., qc_fp=0x0, atom_offset=0); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/frag_print.cc:123; #5 0x00002aaaadd8db62 in opt::MOLECULE::print_coords (this=0x55555e405dd0, psi_fp=..., qc_fp=0x0); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/molecule_print.cc:209; #6 0x00002aaaadd5abd5 in opt::optking (options=...); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/optking.cc:261; #7 0x00002aaaad0dd557 in py_psi_optking () at /home/laz/build/psi4/psi4/psi4/src/core.cc:239; #8 0x00002aaaad118e95 in pybind11::detail::argument_loader<>::call_impl<int, int (*&)()>(int (*&)(), pybind11::detail::index_sequence<>) (this=0x7fffffffc667, f=@0x5555560adc28: 0x2aaaad0dd4f4 <py_psi_optking()>); ... [Pythony bits ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680
https://github.com/psi4/psi4/issues/680:2141,Availability,fault,fault,2141,"s=0x55555e408d20, psi_fp=..., qc_fp=0x0, geom=0x55555d874e30, ; off=0) at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/bend.cc:269; #4 0x00002aaaadd6cff2 in opt::FRAG::print_simples (this=0x55556b8407e0, psi_fp=..., qc_fp=0x0, atom_offset=0); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/frag_print.cc:123; #5 0x00002aaaadd8db62 in opt::MOLECULE::print_coords (this=0x55555e405dd0, psi_fp=..., qc_fp=0x0); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/molecule_print.cc:209; #6 0x00002aaaadd5abd5 in opt::optking (options=...); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/optking.cc:261; #7 0x00002aaaad0dd557 in py_psi_optking () at /home/laz/build/psi4/psi4/psi4/src/core.cc:239; #8 0x00002aaaad118e95 in pybind11::detail::argument_loader<>::call_impl<int, int (*&)()>(int (*&)(), pybind11::detail::index_sequence<>) (this=0x7fffffffc667, f=@0x5555560adc28: 0x2aaaad0dd4f4 <py_psi_optking()>); ... [Pythony bits snipped]; ```; In v3d_axpy(const double a, const double *X, const double *Y, double *Z), X and Y are undefined in my case and cause the seg fault. I've not dug into this in any depth yet but it looked like the linear bends of Frag 2 were added to Frag 1, so that it dies when the internal coordinates of Frag 1 are printed to the output because the internal coords refer to atoms not in that fragment. Or something along those lines. This job gives a seg fault with current git:; ```; molecule dimer {; C 0.824239 0.890517 1.696513; C 1.957325 0.070553 1.693001; C 1.813738 -1.320699 1.693796; C 0.537119 -1.892037 1.698103; C -0.595966 -1.072073 1.701616; C -0.452379 0.319180 1.700821; H 2.954752 0.516900 1.689636; H 0.424971 -2.979016 1.698724; H -1.593394 -1.518419 1.704981; H -1.337645 0.959804 1.703565; H 0.936388 1.977496 1.695892; C 2.947914 -2.141449 1.690280; N 3.874050 -2.836596 1.687416; --; C 0.717503 0.537187 -1.697308; C 0.049935 -0.691858 -1.697308; C -1.348233 -0.728319 -1.697309; C -2.078861 0.464332 -1.697309; C -1.411293 1.693378 -1.697308",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680
https://github.com/psi4/psi4/issues/680:2456,Availability,fault,fault,2456,"_fp=0x0); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/molecule_print.cc:209; #6 0x00002aaaadd5abd5 in opt::optking (options=...); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/optking.cc:261; #7 0x00002aaaad0dd557 in py_psi_optking () at /home/laz/build/psi4/psi4/psi4/src/core.cc:239; #8 0x00002aaaad118e95 in pybind11::detail::argument_loader<>::call_impl<int, int (*&)()>(int (*&)(), pybind11::detail::index_sequence<>) (this=0x7fffffffc667, f=@0x5555560adc28: 0x2aaaad0dd4f4 <py_psi_optking()>); ... [Pythony bits snipped]; ```; In v3d_axpy(const double a, const double *X, const double *Y, double *Z), X and Y are undefined in my case and cause the seg fault. I've not dug into this in any depth yet but it looked like the linear bends of Frag 2 were added to Frag 1, so that it dies when the internal coordinates of Frag 1 are printed to the output because the internal coords refer to atoms not in that fragment. Or something along those lines. This job gives a seg fault with current git:; ```; molecule dimer {; C 0.824239 0.890517 1.696513; C 1.957325 0.070553 1.693001; C 1.813738 -1.320699 1.693796; C 0.537119 -1.892037 1.698103; C -0.595966 -1.072073 1.701616; C -0.452379 0.319180 1.700821; H 2.954752 0.516900 1.689636; H 0.424971 -2.979016 1.698724; H -1.593394 -1.518419 1.704981; H -1.337645 0.959804 1.703565; H 0.936388 1.977496 1.695892; C 2.947914 -2.141449 1.690280; N 3.874050 -2.836596 1.687416; --; C 0.717503 0.537187 -1.697308; C 0.049935 -0.691858 -1.697308; C -1.348233 -0.728319 -1.697309; C -2.078861 0.464332 -1.697309; C -1.411293 1.693378 -1.697308; C -0.013127 1.729838 -1.697308; H 1.809881 0.565636 -1.697308; H 0.620767 -1.623659 -1.697309; H -1.869768 -1.688580 -1.697309; H -3.171240 0.435884 -1.697309; H 0.508409 2.690100 -1.697308; C -2.142628 2.887174 -1.697308; N -2.730222 3.885021 -1.697308; symmetry c1; }. set optking {; frag_mode multi; }; set basis cc-pVDZ; optimize('blyp-d3bj'); ```; Running the same job with ""frag_mode single"", or ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680
https://github.com/psi4/psi4/issues/680:3596,Availability,fault,fault,3596,"02aaaad0dd557 in py_psi_optking () at /home/laz/build/psi4/psi4/psi4/src/core.cc:239; #8 0x00002aaaad118e95 in pybind11::detail::argument_loader<>::call_impl<int, int (*&)()>(int (*&)(), pybind11::detail::index_sequence<>) (this=0x7fffffffc667, f=@0x5555560adc28: 0x2aaaad0dd4f4 <py_psi_optking()>); ... [Pythony bits snipped]; ```; In v3d_axpy(const double a, const double *X, const double *Y, double *Z), X and Y are undefined in my case and cause the seg fault. I've not dug into this in any depth yet but it looked like the linear bends of Frag 2 were added to Frag 1, so that it dies when the internal coordinates of Frag 1 are printed to the output because the internal coords refer to atoms not in that fragment. Or something along those lines. This job gives a seg fault with current git:; ```; molecule dimer {; C 0.824239 0.890517 1.696513; C 1.957325 0.070553 1.693001; C 1.813738 -1.320699 1.693796; C 0.537119 -1.892037 1.698103; C -0.595966 -1.072073 1.701616; C -0.452379 0.319180 1.700821; H 2.954752 0.516900 1.689636; H 0.424971 -2.979016 1.698724; H -1.593394 -1.518419 1.704981; H -1.337645 0.959804 1.703565; H 0.936388 1.977496 1.695892; C 2.947914 -2.141449 1.690280; N 3.874050 -2.836596 1.687416; --; C 0.717503 0.537187 -1.697308; C 0.049935 -0.691858 -1.697308; C -1.348233 -0.728319 -1.697309; C -2.078861 0.464332 -1.697309; C -1.411293 1.693378 -1.697308; C -0.013127 1.729838 -1.697308; H 1.809881 0.565636 -1.697308; H 0.620767 -1.623659 -1.697309; H -1.869768 -1.688580 -1.697309; H -3.171240 0.435884 -1.697309; H 0.508409 2.690100 -1.697308; C -2.142628 2.887174 -1.697308; N -2.730222 3.885021 -1.697308; symmetry c1; }. set optking {; frag_mode multi; }; set basis cc-pVDZ; optimize('blyp-d3bj'); ```; Running the same job with ""frag_mode single"", or with ""frag_mode multi"" with ""opt_coordinates cartesian"", ran for multiple opt steps (until I killed it) without giving a seg fault. I'll dig further but suspect others might have more of an idea of where to look.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680
https://github.com/psi4/psi4/issues/680:3394,Performance,optimiz,optimize,3394,"02aaaad0dd557 in py_psi_optking () at /home/laz/build/psi4/psi4/psi4/src/core.cc:239; #8 0x00002aaaad118e95 in pybind11::detail::argument_loader<>::call_impl<int, int (*&)()>(int (*&)(), pybind11::detail::index_sequence<>) (this=0x7fffffffc667, f=@0x5555560adc28: 0x2aaaad0dd4f4 <py_psi_optking()>); ... [Pythony bits snipped]; ```; In v3d_axpy(const double a, const double *X, const double *Y, double *Z), X and Y are undefined in my case and cause the seg fault. I've not dug into this in any depth yet but it looked like the linear bends of Frag 2 were added to Frag 1, so that it dies when the internal coordinates of Frag 1 are printed to the output because the internal coords refer to atoms not in that fragment. Or something along those lines. This job gives a seg fault with current git:; ```; molecule dimer {; C 0.824239 0.890517 1.696513; C 1.957325 0.070553 1.693001; C 1.813738 -1.320699 1.693796; C 0.537119 -1.892037 1.698103; C -0.595966 -1.072073 1.701616; C -0.452379 0.319180 1.700821; H 2.954752 0.516900 1.689636; H 0.424971 -2.979016 1.698724; H -1.593394 -1.518419 1.704981; H -1.337645 0.959804 1.703565; H 0.936388 1.977496 1.695892; C 2.947914 -2.141449 1.690280; N 3.874050 -2.836596 1.687416; --; C 0.717503 0.537187 -1.697308; C 0.049935 -0.691858 -1.697308; C -1.348233 -0.728319 -1.697309; C -2.078861 0.464332 -1.697309; C -1.411293 1.693378 -1.697308; C -0.013127 1.729838 -1.697308; H 1.809881 0.565636 -1.697308; H 0.620767 -1.623659 -1.697309; H -1.869768 -1.688580 -1.697309; H -3.171240 0.435884 -1.697309; H 0.508409 2.690100 -1.697308; C -2.142628 2.887174 -1.697308; N -2.730222 3.885021 -1.697308; symmetry c1; }. set optking {; frag_mode multi; }; set basis cc-pVDZ; optimize('blyp-d3bj'); ```; Running the same job with ""frag_mode single"", or with ""frag_mode multi"" with ""opt_coordinates cartesian"", ran for multiple opt steps (until I killed it) without giving a seg fault. I'll dig further but suspect others might have more of an idea of where to look.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680
https://github.com/psi4/psi4/pull/681:564,Availability,avail,available,564,"## Description; Adds ECP capabilities by interfacing the integrals written @robashaw. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - Def2 family of basis sets available for all atoms supported by those basis sets. Followup projects include:; - Add fully analytic when derivative integrals are available.; - Add CPHF terms and consolidate the OE derivatives from scfgrad and mp2grad.; - Try to clean up Python/C++ parsing and processing of basis sets. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681
https://github.com/psi4/psi4/pull/681:665,Availability,avail,available,665,"## Description; Adds ECP capabilities by interfacing the integrals written @robashaw. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - Def2 family of basis sets available for all atoms supported by those basis sets. Followup projects include:; - Add fully analytic when derivative integrals are available.; - Add CPHF terms and consolidate the OE derivatives from scfgrad and mp2grad.; - Try to clean up Python/C++ parsing and processing of basis sets. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681
https://github.com/psi4/psi4/pull/681:799,Availability,avail,available,799,"## Description; Adds ECP capabilities by interfacing the integrals written @robashaw. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - Def2 family of basis sets available for all atoms supported by those basis sets. Followup projects include:; - Add fully analytic when derivative integrals are available.; - Add CPHF terms and consolidate the OE derivatives from scfgrad and mp2grad.; - Try to clean up Python/C++ parsing and processing of basis sets. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681
https://github.com/psi4/psi4/pull/681:519,Deployability,Release,Release,519,"## Description; Adds ECP capabilities by interfacing the integrals written @robashaw. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - Def2 family of basis sets available for all atoms supported by those basis sets. Followup projects include:; - Add fully analytic when derivative integrals are available.; - Add CPHF terms and consolidate the OE derivatives from scfgrad and mp2grad.; - Try to clean up Python/C++ parsing and processing of basis sets. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681
https://github.com/psi4/psi4/pull/681:280,Testability,Test,Test,280,"## Description; Adds ECP capabilities by interfacing the integrals written @robashaw. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - Def2 family of basis sets available for all atoms supported by those basis sets. Followup projects include:; - Add fully analytic when derivative integrals are available.; - Add CPHF terms and consolidate the OE derivatives from scfgrad and mp2grad.; - Try to clean up Python/C++ parsing and processing of basis sets. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681
https://github.com/psi4/psi4/pull/683:333,Availability,down,down,333,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683
https://github.com/psi4/psi4/pull/683:527,Deployability,Release,Release,527,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683
https://github.com/psi4/psi4/pull/683:92,Energy Efficiency,Energy,Energy,92,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683
https://github.com/psi4/psi4/pull/683:369,Energy Efficiency,energy,energy,369,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683
https://github.com/psi4/psi4/pull/683:393,Energy Efficiency,energy,energy,393,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683
https://github.com/psi4/psi4/pull/683:645,Energy Efficiency,energy,energy,645,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683
https://github.com/psi4/psi4/pull/683:722,Energy Efficiency,ENERGY,ENERGY,722,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683
https://github.com/psi4/psi4/pull/683:614,Security,Access,Accessing,614,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683
https://github.com/psi4/psi4/pull/685:26,Availability,down,down,26,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685
https://github.com/psi4/psi4/pull/685:37,Availability,fault,fault,37,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685
https://github.com/psi4/psi4/pull/685:734,Availability,fault,fault,734,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685
https://github.com/psi4/psi4/pull/685:944,Availability,down,down,944,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685
https://github.com/psi4/psi4/pull/685:1058,Availability,fault,fault-during-,1058,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685
https://github.com/psi4/psi4/pull/685:181,Energy Efficiency,allocate,allocated,181,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685
https://github.com/psi4/psi4/pull/685:891,Performance,perform,performed,891,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685
https://github.com/psi4/psi4/pull/685:1109,Safety,safe,safer,1109,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685
https://github.com/psi4/psi4/pull/685:1131,Testability,test,test,1131,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685
https://github.com/psi4/psi4/pull/685:442,Usability,simpl,simple,442,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685
https://github.com/psi4/psi4/pull/686:926,Deployability,Release,Release,926,"## Description; Mostly xtpl refinements, plus some misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed the typo @fevangelista noticed on the GitHub workflow slide (it was definitely mine, not Andy's, in my zeal to use https). Added the link to this on the front page that CDS wanted. Added a do/don't git pull/push slide; - [x] Added ability to forward the extrapolation scheme from a method/basis spec; - [x] Tested and added docs and test for user-specified extrapolation functions. Added refs for xtpl fns.; - [x] Changed import of xtpl fns to `from driver_cbs import *` in inputparser after they had previously been named explicitly. This should be fine b/c the targeted ones are the only fns in file not beginning with underscore. This way anyone can add an extrapolation fn to driver w/o having to know to edit inputparser.; * **User-Facing for Release Notes**; - [x] Bump libefp source to upstream tag 1.4.2; - [x] Fix more int/float in basis set files that wouldn't get read correctly by parser. In particular, def2 RI fitting for Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/686
https://github.com/psi4/psi4/pull/686:485,Testability,Test,Tested,485,"## Description; Mostly xtpl refinements, plus some misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed the typo @fevangelista noticed on the GitHub workflow slide (it was definitely mine, not Andy's, in my zeal to use https). Added the link to this on the front page that CDS wanted. Added a do/don't git pull/push slide; - [x] Added ability to forward the extrapolation scheme from a method/basis spec; - [x] Tested and added docs and test for user-specified extrapolation functions. Added refs for xtpl fns.; - [x] Changed import of xtpl fns to `from driver_cbs import *` in inputparser after they had previously been named explicitly. This should be fine b/c the targeted ones are the only fns in file not beginning with underscore. This way anyone can add an extrapolation fn to driver w/o having to know to edit inputparser.; * **User-Facing for Release Notes**; - [x] Bump libefp source to upstream tag 1.4.2; - [x] Fix more int/float in basis set files that wouldn't get read correctly by parser. In particular, def2 RI fitting for Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/686
https://github.com/psi4/psi4/pull/686:511,Testability,test,test,511,"## Description; Mostly xtpl refinements, plus some misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed the typo @fevangelista noticed on the GitHub workflow slide (it was definitely mine, not Andy's, in my zeal to use https). Added the link to this on the front page that CDS wanted. Added a do/don't git pull/push slide; - [x] Added ability to forward the extrapolation scheme from a method/basis spec; - [x] Tested and added docs and test for user-specified extrapolation functions. Added refs for xtpl fns.; - [x] Changed import of xtpl fns to `from driver_cbs import *` in inputparser after they had previously been named explicitly. This should be fine b/c the targeted ones are the only fns in file not beginning with underscore. This way anyone can add an extrapolation fn to driver w/o having to know to edit inputparser.; * **User-Facing for Release Notes**; - [x] Bump libefp source to upstream tag 1.4.2; - [x] Fix more int/float in basis set files that wouldn't get read correctly by parser. In particular, def2 RI fitting for Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/686
https://github.com/psi4/psi4/issues/688:530,Deployability,release,release,530,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688
https://github.com/psi4/psi4/issues/688:984,Integrability,Depend,Dependencies,984,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688
https://github.com/psi4/psi4/issues/688:1037,Integrability,depend,dependencies,1037,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688
https://github.com/psi4/psi4/issues/688:1145,Integrability,depend,dependencies,1145,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688
https://github.com/psi4/psi4/issues/688:1230,Integrability,depend,dependencies,1230,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688
https://github.com/psi4/psi4/issues/688:1269,Modifiability,plugin,plugins,1269,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688
https://github.com/psi4/psi4/issues/688:1390,Modifiability,plugin,plugins,1390,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688
https://github.com/psi4/psi4/issues/688:147,Performance,load,loading,147,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688
https://github.com/psi4/psi4/issues/688:778,Usability,feedback,feedback,778,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688
https://github.com/psi4/psi4/pull/689:383,Availability,error,error,383,"## Description; Conda and management docs, various fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Much addition and modernizing of conda, management, versioning docs; - [x] Allows, I expect, building plugins from conda on Mac; * **User-Facing for Release Notes**; - [x] Fixes `set properties_origin [""COM""]` error noticed by @lazaroid [here](http://forum.psicode.org/t/set-properties-origin-currently-broken-for-com-or-variables-as-values/503). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/689
https://github.com/psi4/psi4/pull/689:322,Deployability,Release,Release,322,"## Description; Conda and management docs, various fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Much addition and modernizing of conda, management, versioning docs; - [x] Allows, I expect, building plugins from conda on Mac; * **User-Facing for Release Notes**; - [x] Fixes `set properties_origin [""COM""]` error noticed by @lazaroid [here](http://forum.psicode.org/t/set-properties-origin-currently-broken-for-com-or-variables-as-values/503). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/689
https://github.com/psi4/psi4/pull/689:275,Modifiability,plugin,plugins,275,"## Description; Conda and management docs, various fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Much addition and modernizing of conda, management, versioning docs; - [x] Allows, I expect, building plugins from conda on Mac; * **User-Facing for Release Notes**; - [x] Fixes `set properties_origin [""COM""]` error noticed by @lazaroid [here](http://forum.psicode.org/t/set-properties-origin-currently-broken-for-com-or-variables-as-values/503). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/689
https://github.com/psi4/psi4/pull/689:494,Modifiability,variab,variables-as-values,494,"## Description; Conda and management docs, various fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Much addition and modernizing of conda, management, versioning docs; - [x] Allows, I expect, building plugins from conda on Mac; * **User-Facing for Release Notes**; - [x] Fixes `set properties_origin [""COM""]` error noticed by @lazaroid [here](http://forum.psicode.org/t/set-properties-origin-currently-broken-for-com-or-variables-as-values/503). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/689
https://github.com/psi4/psi4/pull/690:639,Deployability,Release,Release,639,"## Description; Relicense from GPL-2.0+ to LGPL-3.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; ```; find psi4/ -type f -exec sed -i '' 's/GNU General/GNU Lesser General/g' {} \;; find psi4/ -type f -exec sed -i '' 's/[Tt]his program/Psi4/g' {} \;; find psi4/ -type f -exec sed -i '' '/(at your option)/d' {} \;; find psi4/ -type f -exec sed -i '' 's/; either version 2 of the License, or/, version 3./g' {} \;; find psi4/ -type f -exec sed -i '' $'s/ * Psi4 is free software/ This file is part of Psi4.\\\n *\\\n * Psi4 is free software/g' {} \;; ```; * **User-Facing for Release Notes**; - [x] Relicense from GPL-2.0+ to LGPL-3.0. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/690
https://github.com/psi4/psi4/issues/691:0,Testability,test,test,0,test case preferably matching Molpro,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/691
https://github.com/psi4/psi4/issues/692:84,Modifiability,plugin,plugin,84,* CMake; * license (convenient `sed` commands at psi4/psi4#690); * test case and/or plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/692
https://github.com/psi4/psi4/issues/692:67,Testability,test,test,67,* CMake; * license (convenient `sed` commands at psi4/psi4#690); * test case and/or plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/692
https://github.com/psi4/psi4/issues/693:95,Integrability,wrap,wrapper,95,"Either apply changes from evaleev/libint v1 to psi4/libint _or_ make psi4/libint a buildsystem wrapper around evaleev/libint v1 like https://github.com/python-cmake-buildsystem/python-cmake-buildsystem . Net effect is the Libint we call must be LGPL-3.0, not GPL-2.0+ as at present.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/693
https://github.com/psi4/psi4/pull/695:16,Deployability,Update,Updates,16,"## Description; Updates Libint 1.2.0 @ evaleev/libint <-- libint 1.1.6 @ psi4/libint, evaleev/libint#77. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] All your Psi4 build will start building Libint again b/c wrong version detected until your pre-compiled libints get updated.; * **User-Facing for Release Notes**; - [x] Now using github.com/evaleev/libint (branch v1) rather than our own github.com/psi4/libint after pushing some CMake build details upstream. The evaleev repo didn't have CMake before v1.2.0, so that version is now required. Also, the project name changed from `libint` to `Libint` and CMake cares about this, so Psi4 repo and libint repo will have to be carefully matched for a bit. ## Status; - [x] Ready to go – Go ahead and review, but I want to look at travis/distelli before quite ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695
https://github.com/psi4/psi4/pull/695:336,Deployability,update,updated,336,"## Description; Updates Libint 1.2.0 @ evaleev/libint <-- libint 1.1.6 @ psi4/libint, evaleev/libint#77. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] All your Psi4 build will start building Libint again b/c wrong version detected until your pre-compiled libints get updated.; * **User-Facing for Release Notes**; - [x] Now using github.com/evaleev/libint (branch v1) rather than our own github.com/psi4/libint after pushing some CMake build details upstream. The evaleev repo didn't have CMake before v1.2.0, so that version is now required. Also, the project name changed from `libint` to `Libint` and CMake cares about this, so Psi4 repo and libint repo will have to be carefully matched for a bit. ## Status; - [x] Ready to go – Go ahead and review, but I want to look at travis/distelli before quite ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695
https://github.com/psi4/psi4/pull/695:366,Deployability,Release,Release,366,"## Description; Updates Libint 1.2.0 @ evaleev/libint <-- libint 1.1.6 @ psi4/libint, evaleev/libint#77. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] All your Psi4 build will start building Libint again b/c wrong version detected until your pre-compiled libints get updated.; * **User-Facing for Release Notes**; - [x] Now using github.com/evaleev/libint (branch v1) rather than our own github.com/psi4/libint after pushing some CMake build details upstream. The evaleev repo didn't have CMake before v1.2.0, so that version is now required. Also, the project name changed from `libint` to `Libint` and CMake cares about this, so Psi4 repo and libint repo will have to be carefully matched for a bit. ## Status; - [x] Ready to go – Go ahead and review, but I want to look at travis/distelli before quite ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695
https://github.com/psi4/psi4/pull/695:291,Safety,detect,detected,291,"## Description; Updates Libint 1.2.0 @ evaleev/libint <-- libint 1.1.6 @ psi4/libint, evaleev/libint#77. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] All your Psi4 build will start building Libint again b/c wrong version detected until your pre-compiled libints get updated.; * **User-Facing for Release Notes**; - [x] Now using github.com/evaleev/libint (branch v1) rather than our own github.com/psi4/libint after pushing some CMake build details upstream. The evaleev repo didn't have CMake before v1.2.0, so that version is now required. Also, the project name changed from `libint` to `Libint` and CMake cares about this, so Psi4 repo and libint repo will have to be carefully matched for a bit. ## Status; - [x] Ready to go – Go ahead and review, but I want to look at travis/distelli before quite ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695
https://github.com/psi4/psi4/issues/696:551,Energy Efficiency,energy,energy,551,"Hi psi4 developers. I want to get amplitudes of CI after finishing CISD calculation.; My input:. memory 2 Gb. molecule acetaldehyde {; 0 1; C 0.000000000000 0.000000000000 0.000000000000; O 0.000000000000 0.000000000000 1.208802240800; H 0.956843585468 0.000000000000 -0.556162423200; C -1.240787823813 0.000000000000 -0.847327118586; H -2.129446365838 0.000000000000 -0.220697345202; H -1.237161750186 0.878440322927 -1.496548823107; H -1.237161750186 -0.878440322927 -1.496548823107; }. set {; basis cc-pVDZ; freeze_core true; ciblks_print true; }; energy('cisd'). I set an option **ciblks_print true** but nothing has changed.; How do I get CI amplitudes (or 20 first one) properly?. Best, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/696
https://github.com/psi4/psi4/issues/697:48,Energy Efficiency,ENERGY,ENERGY,48,"@robertodr, when you added the PCM POLARIZATION ENERGY psivar to Wfn, I think you removed it from `P::e.globals` (which `psi4 --test` noticed and complained about). For a transition period, I think we want storage duplicated so that P::e.globals is a full list. Could you add the variable back wherever it gets set to the Wfn value and test that `psi4 --test` works again? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697
https://github.com/psi4/psi4/issues/697:280,Modifiability,variab,variable,280,"@robertodr, when you added the PCM POLARIZATION ENERGY psivar to Wfn, I think you removed it from `P::e.globals` (which `psi4 --test` noticed and complained about). For a transition period, I think we want storage duplicated so that P::e.globals is a full list. Could you add the variable back wherever it gets set to the Wfn value and test that `psi4 --test` works again? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697
https://github.com/psi4/psi4/issues/697:128,Testability,test,test,128,"@robertodr, when you added the PCM POLARIZATION ENERGY psivar to Wfn, I think you removed it from `P::e.globals` (which `psi4 --test` noticed and complained about). For a transition period, I think we want storage duplicated so that P::e.globals is a full list. Could you add the variable back wherever it gets set to the Wfn value and test that `psi4 --test` works again? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697
https://github.com/psi4/psi4/issues/697:336,Testability,test,test,336,"@robertodr, when you added the PCM POLARIZATION ENERGY psivar to Wfn, I think you removed it from `P::e.globals` (which `psi4 --test` noticed and complained about). For a transition period, I think we want storage duplicated so that P::e.globals is a full list. Could you add the variable back wherever it gets set to the Wfn value and test that `psi4 --test` works again? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697
https://github.com/psi4/psi4/issues/697:354,Testability,test,test,354,"@robertodr, when you added the PCM POLARIZATION ENERGY psivar to Wfn, I think you removed it from `P::e.globals` (which `psi4 --test` noticed and complained about). For a transition period, I think we want storage duplicated so that P::e.globals is a full list. Could you add the variable back wherever it gets set to the Wfn value and test that `psi4 --test` works again? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697
https://github.com/psi4/psi4/pull/698:1641,Availability,avail,available,1641,"l object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:2493,Availability,avail,available,2493,"fo to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current master to resolve conflicts; - [x] Closes #39 ; - [x] Closes #40 ; - [ ] New Hessian/Frequency analysis code.; - [ ] Fill out remaining DFT documentations; - [ ] Polish new DF JK/Transformer technology; - [ ] Triple check UKS GGA Hessian-vector code; - [ ] Finished DFT Hessian functionality (skeleton terms); - [ ] Rebase in License/1.1 changes; - [ ] Rebase in ECP changes (#681); - [ ] Re-examine VV10 default grid size; - [ ] Implement VV10 gradients. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:2598,Availability,avail,available,2598,"fo to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current master to resolve conflicts; - [x] Closes #39 ; - [x] Closes #40 ; - [ ] New Hessian/Frequency analysis code.; - [ ] Fill out remaining DFT documentations; - [ ] Polish new DF JK/Transformer technology; - [ ] Triple check UKS GGA Hessian-vector code; - [ ] Finished DFT Hessian functionality (skeleton terms); - [ ] Rebase in License/1.1 changes; - [ ] Rebase in ECP changes (#681); - [ ] Re-examine VV10 default grid size; - [ ] Implement VV10 gradients. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:265,Deployability,patch,patches,265,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:290,Deployability,release,release,290,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:1555,Deployability,Release,Release,1555,"l object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:1114,Energy Efficiency,efficient,efficient,1114,"ral major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a densi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:681,Integrability,interface,interface,681,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:1169,Integrability,depend,depending,1169,"ral major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a densi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:2449,Integrability,interface,interface,2449," [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current master to resolve conflicts; - [x] Closes #39 ; - [x] Closes #40 ; - [ ] New Hessian/Frequency analysis code.; - [ ] Fill out remaining DFT documentations; - [ ] Polish new DF JK/Transformer technology; - [ ] Triple check UKS GGA Hessian-vector code; - [ ] Finished DFT Hessian functionality (skeleton terms); - [ ] Rebase in License/1.1 changes; - [ ] Rebase in ECP changes (#681); - [ ] Re-examine VV10 default grid size; - [ ] Imp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:190,Modifiability,enhance,enhancements,190,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:1980,Modifiability,Extend,Extended,1980,"py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current maste",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:178,Performance,perform,performance,178,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:2342,Safety,avoid,avoid,2342,"n core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current master to resolve conflicts; - [x] Closes #39 ; - [x] Closes #40 ; - [ ] New Hessian/Frequency analysis code.; - [ ] Fill out remaining DFT documentations; - [ ] Polish new DF JK/Transformer technology; - [ ] Triple check UKS GGA Hessian-vector code; - [ ] Finished DFT Hessian functionality (skeleton terms); - [ ] Rebase in License/1.1 changes; - [ ] Rebase in ECP ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/698:1316,Testability,Test,Test,1316,"t this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698
https://github.com/psi4/psi4/pull/701:33,Availability,failure,failure,33,## Description; Fixes a PCM test failure when running `psi4 --test`. The bug was pointed out by @loriab in #697 . Closes #697. ## Questions; - [x] Should I also modify `tests/pytest/test_addons.py` to mirror the contents of `pcmsolver/scf/input.dat` so that it doesn't rely on `P::e.globals`? Both methods to get `PCM POLARIZATION ENERGY` are now tested. See discussion in #697 . ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/701
https://github.com/psi4/psi4/pull/701:331,Energy Efficiency,ENERGY,ENERGY,331,## Description; Fixes a PCM test failure when running `psi4 --test`. The bug was pointed out by @loriab in #697 . Closes #697. ## Questions; - [x] Should I also modify `tests/pytest/test_addons.py` to mirror the contents of `pcmsolver/scf/input.dat` so that it doesn't rely on `P::e.globals`? Both methods to get `PCM POLARIZATION ENERGY` are now tested. See discussion in #697 . ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/701
https://github.com/psi4/psi4/pull/701:28,Testability,test,test,28,## Description; Fixes a PCM test failure when running `psi4 --test`. The bug was pointed out by @loriab in #697 . Closes #697. ## Questions; - [x] Should I also modify `tests/pytest/test_addons.py` to mirror the contents of `pcmsolver/scf/input.dat` so that it doesn't rely on `P::e.globals`? Both methods to get `PCM POLARIZATION ENERGY` are now tested. See discussion in #697 . ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/701
https://github.com/psi4/psi4/pull/701:62,Testability,test,test,62,## Description; Fixes a PCM test failure when running `psi4 --test`. The bug was pointed out by @loriab in #697 . Closes #697. ## Questions; - [x] Should I also modify `tests/pytest/test_addons.py` to mirror the contents of `pcmsolver/scf/input.dat` so that it doesn't rely on `P::e.globals`? Both methods to get `PCM POLARIZATION ENERGY` are now tested. See discussion in #697 . ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/701
https://github.com/psi4/psi4/pull/701:169,Testability,test,tests,169,## Description; Fixes a PCM test failure when running `psi4 --test`. The bug was pointed out by @loriab in #697 . Closes #697. ## Questions; - [x] Should I also modify `tests/pytest/test_addons.py` to mirror the contents of `pcmsolver/scf/input.dat` so that it doesn't rely on `P::e.globals`? Both methods to get `PCM POLARIZATION ENERGY` are now tested. See discussion in #697 . ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/701
https://github.com/psi4/psi4/pull/701:347,Testability,test,tested,347,## Description; Fixes a PCM test failure when running `psi4 --test`. The bug was pointed out by @loriab in #697 . Closes #697. ## Questions; - [x] Should I also modify `tests/pytest/test_addons.py` to mirror the contents of `pcmsolver/scf/input.dat` so that it doesn't rely on `P::e.globals`? Both methods to get `PCM POLARIZATION ENERGY` are now tested. See discussion in #697 . ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/701
https://github.com/psi4/psi4/pull/702:152,Deployability,Release,Release,152,## Description; Fixes the DKH interface in Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [X] Test case added comparing to a Molpro calculation. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/702
https://github.com/psi4/psi4/pull/702:30,Integrability,interface,interface,30,## Description; Fixes the DKH interface in Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [X] Test case added comparing to a Molpro calculation. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/702
https://github.com/psi4/psi4/pull/702:175,Testability,Test,Test,175,## Description; Fixes the DKH interface in Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [X] Test case added comparing to a Molpro calculation. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/702
https://github.com/psi4/psi4/pull/703:182,Availability,down,download,182,"## Description; Accumulated docs improvements. Update samples. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add download/install notes for Windows; - [x] Update header and doc citation to JCTC article. Add licensing blurb.; - [x] Fix and document building plugins from conda on Mac; - [x] Make X2C input and output consistent. @fevangelista, is this what you wanted?; - [x] Fix `basisset_ = basisset_;` typo noticed by CDS; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go **Everyone**, stop review when you hit ""samples/""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/703
https://github.com/psi4/psi4/pull/703:47,Deployability,Update,Update,47,"## Description; Accumulated docs improvements. Update samples. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add download/install notes for Windows; - [x] Update header and doc citation to JCTC article. Add licensing blurb.; - [x] Fix and document building plugins from conda on Mac; - [x] Make X2C input and output consistent. @fevangelista, is this what you wanted?; - [x] Fix `basisset_ = basisset_;` typo noticed by CDS; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go **Everyone**, stop review when you hit ""samples/""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/703
https://github.com/psi4/psi4/pull/703:191,Deployability,install,install,191,"## Description; Accumulated docs improvements. Update samples. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add download/install notes for Windows; - [x] Update header and doc citation to JCTC article. Add licensing blurb.; - [x] Fix and document building plugins from conda on Mac; - [x] Make X2C input and output consistent. @fevangelista, is this what you wanted?; - [x] Fix `basisset_ = basisset_;` typo noticed by CDS; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go **Everyone**, stop review when you hit ""samples/""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/703
https://github.com/psi4/psi4/pull/703:224,Deployability,Update,Update,224,"## Description; Accumulated docs improvements. Update samples. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add download/install notes for Windows; - [x] Update header and doc citation to JCTC article. Add licensing blurb.; - [x] Fix and document building plugins from conda on Mac; - [x] Make X2C input and output consistent. @fevangelista, is this what you wanted?; - [x] Fix `basisset_ = basisset_;` typo noticed by CDS; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go **Everyone**, stop review when you hit ""samples/""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/703
https://github.com/psi4/psi4/pull/703:514,Deployability,Release,Release,514,"## Description; Accumulated docs improvements. Update samples. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add download/install notes for Windows; - [x] Update header and doc citation to JCTC article. Add licensing blurb.; - [x] Fix and document building plugins from conda on Mac; - [x] Make X2C input and output consistent. @fevangelista, is this what you wanted?; - [x] Fix `basisset_ = basisset_;` typo noticed by CDS; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go **Everyone**, stop review when you hit ""samples/""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/703
https://github.com/psi4/psi4/pull/703:326,Modifiability,plugin,plugins,326,"## Description; Accumulated docs improvements. Update samples. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add download/install notes for Windows; - [x] Update header and doc citation to JCTC article. Add licensing blurb.; - [x] Fix and document building plugins from conda on Mac; - [x] Make X2C input and output consistent. @fevangelista, is this what you wanted?; - [x] Fix `basisset_ = basisset_;` typo noticed by CDS; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go **Everyone**, stop review when you hit ""samples/""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/703
https://github.com/psi4/psi4/pull/704:33,Deployability,patch,patching,33,## Description; ambit and simint patching. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Sets simint version at 0.7.; - [x] Fixes ambit static builds. (tied to jturney/ambit cmakelab3 branch); - [x] Pulls Libint ~1.2.1 that can do AM>6; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/704
https://github.com/psi4/psi4/pull/704:326,Deployability,Release,Release,326,## Description; ambit and simint patching. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Sets simint version at 0.7.; - [x] Fixes ambit static builds. (tied to jturney/ambit cmakelab3 branch); - [x] Pulls Libint ~1.2.1 that can do AM>6; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/704
https://github.com/psi4/psi4/pull/705:279,Deployability,Release,Release,279,"## Description; I hate to add 7MB to the repo, but we really ought to have complete/new output.ref's, so here 'tis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fresh output.ref for tests; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/705
https://github.com/psi4/psi4/pull/705:252,Testability,test,tests,252,"## Description; I hate to add 7MB to the repo, but we really ought to have complete/new output.ref's, so here 'tis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fresh output.ref for tests; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/705
https://github.com/psi4/psi4/pull/706:228,Deployability,Release,Release,228,## Description; The integral overflow problem in the (T) energy code was solved. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/706
https://github.com/psi4/psi4/pull/706:57,Energy Efficiency,energy,energy,57,## Description; The integral overflow problem in the (T) energy code was solved. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/706
https://github.com/psi4/psi4/pull/707:211,Deployability,Release,Release,211,## Description; Close enough to publication for these. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SSI & BBI databases; * **User-Facing for Release Notes**; ; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/707
https://github.com/psi4/psi4/issues/708:65,Availability,checkpoint,checkpoint,65,"@loriab asked me for 1.1 showstoppers. Here's one: the formatted checkpoint files don't work. . With the input; ```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). fchk(scf_wfn, ""scf.fchk""); ```; I get a formatted checkpoint file, which I load to IQmol or Avogardo. The result is: I see no nuclei!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/708
https://github.com/psi4/psi4/issues/708:327,Availability,checkpoint,checkpoint,327,"@loriab asked me for 1.1 showstoppers. Here's one: the formatted checkpoint files don't work. . With the input; ```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). fchk(scf_wfn, ""scf.fchk""); ```; I get a formatted checkpoint file, which I load to IQmol or Avogardo. The result is: I see no nuclei!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/708
https://github.com/psi4/psi4/issues/708:245,Energy Efficiency,energy,energy,245,"@loriab asked me for 1.1 showstoppers. Here's one: the formatted checkpoint files don't work. . With the input; ```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). fchk(scf_wfn, ""scf.fchk""); ```; I get a formatted checkpoint file, which I load to IQmol or Avogardo. The result is: I see no nuclei!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/708
https://github.com/psi4/psi4/issues/708:352,Performance,load,load,352,"@loriab asked me for 1.1 showstoppers. Here's one: the formatted checkpoint files don't work. . With the input; ```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). fchk(scf_wfn, ""scf.fchk""); ```; I get a formatted checkpoint file, which I load to IQmol or Avogardo. The result is: I see no nuclei!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/708
https://github.com/psi4/psi4/pull/709:21,Deployability,update,updates,21,## Description; docs updates. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Documents conda pkg reorg. ; - [x] Fixes docs build when nbsphinx not around.… …; - [x] Docs feature for getting higher AM Libint conda packages.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/709
https://github.com/psi4/psi4/pull/709:312,Deployability,Release,Release,312,## Description; docs updates. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Documents conda pkg reorg. ; - [x] Fixes docs build when nbsphinx not around.… …; - [x] Docs feature for getting higher AM Libint conda packages.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/709
https://github.com/psi4/psi4/issues/710:311,Availability,error,error,311,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:2424,Availability,FAILURE,FAILURES,2424,"simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positivity': 'dqg',; 'r_convergence': 1e-5,; 'e_convergence': 1e-6,; 'maxiter': 20000,; # #'orbopt_frequency': 1000,; # #'mu_update_frequency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:4858,Availability,checkpoint,checkpoint,4858," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls were:; E; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::v2rdm_casscf::v2RDMSolver::comp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:5519,Availability,Error,Error,5519,"me = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls were:; E; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::v2rdm_casscf::v2RDMSolver::compute_energy(); E py_psi_plugin(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<psi::Wavefunction>). /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/pymodule.py:66: RuntimeError; ---------------------------------------------- Captured stdout call -----------------------------------------------; N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A; =========================== 1 failed, 15 passed, 2 skipped, 1 xfailed in 201.46 seconds ===========================; ```. </details>; Also here is the current status of the conda installation:; <details>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:5553,Availability,Error,Error,5553," ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls were:; E; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::v2rdm_casscf::v2RDMSolver::compute_energy(); E py_psi_plugin(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<psi::Wavefunction>). /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/pymodule.py:66: RuntimeError; ---------------------------------------------- Captured stdout call -----------------------------------------------; N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A; =========================== 1 failed, 15 passed, 2 skipped, 1 xfailed in 201.46 seconds ===========================; ```. </details>; Also here is the current status of the conda installation:; <details>. ```bash; je714@guanine:~$ conda list; # packages in environment at /home/je714/psi4cond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:16,Deployability,install,installation,16,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:109,Deployability,install,install-a-,109,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:150,Deployability,install,installer-command-line,150,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:191,Deployability,install,installing,191,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:6490,Deployability,install,installation,6490,"asscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls were:; E; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::v2rdm_casscf::v2RDMSolver::compute_energy(); E py_psi_plugin(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<psi::Wavefunction>). /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/pymodule.py:66: RuntimeError; ---------------------------------------------- Captured stdout call -----------------------------------------------; N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A; =========================== 1 failed, 15 passed, 2 skipped, 1 xfailed in 201.46 seconds ===========================; ```. </details>; Also here is the current status of the conda installation:; <details>. ```bash; je714@guanine:~$ conda list; # packages in environment at /home/je714/psi4conda:; #; alabaster 0.7.10 py35_0; babel 2.4.0 py35_0; bzip2 1.0.6 3; cffi 1.9.1 py35_0; chemps2 1.8.3 5; cloog 0.18.0 0; cmake 3.6.3 0; conda 4.3.16 py35_0; conda-env 2.6.0 0; cryptography 1.7.1 py35_0; curl 7.52.1 0; dftd3 3.2.0 7; erd 3.0.6 0; expat 2.1.0 0; gcc-5 5.2.0 1; gcc-5-mp 5.2.0 0; gcp 2.0.1 0; gdma 2.2.6 2; gmp 6.1.0 0; hdf5 1.8.17 1; idna 2.2 py35_0; imagesize 0.7.1 py35_0; isl 0.12.2 0; jinja2 2.9.5 py35_0; libefp 1.4.1 3; libffi 3.2.1 1; libint 1.1.6 0; markupsafe 0.23 py35_2; mkl 2017.0.1 0; mpc 1.0.1 0; mpfr 3.1.2 0; ncurses 5.9 10; numpy 1.12.1 py35_0; openssl 1.0.2k 1; pcmsolver 1.1.10 py35_0; psi4 1.1rc1+6db9b1f py35_0 psi4/label/devel; psi4-deps 1.0 py35_1; py 1.4.33 py35_0; pyasn1 0.2.3 py35_0; pycosat 0.6.2 py35_0; pycparser 2.17 py35_0; pygments 2.2.0 py35_0; pyopenssl 16.2.0 py35_0; pytest 3.0.7 py35_0; python 3.5.3 1; pytz 2017.2 py35_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:7949,Deployability,install,installation,7949,"ython3.5/site-packages/v2rdm_casscf/pymodule.py:66: RuntimeError; ---------------------------------------------- Captured stdout call -----------------------------------------------; N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A; =========================== 1 failed, 15 passed, 2 skipped, 1 xfailed in 201.46 seconds ===========================; ```. </details>; Also here is the current status of the conda installation:; <details>. ```bash; je714@guanine:~$ conda list; # packages in environment at /home/je714/psi4conda:; #; alabaster 0.7.10 py35_0; babel 2.4.0 py35_0; bzip2 1.0.6 3; cffi 1.9.1 py35_0; chemps2 1.8.3 5; cloog 0.18.0 0; cmake 3.6.3 0; conda 4.3.16 py35_0; conda-env 2.6.0 0; cryptography 1.7.1 py35_0; curl 7.52.1 0; dftd3 3.2.0 7; erd 3.0.6 0; expat 2.1.0 0; gcc-5 5.2.0 1; gcc-5-mp 5.2.0 0; gcp 2.0.1 0; gdma 2.2.6 2; gmp 6.1.0 0; hdf5 1.8.17 1; idna 2.2 py35_0; imagesize 0.7.1 py35_0; isl 0.12.2 0; jinja2 2.9.5 py35_0; libefp 1.4.1 3; libffi 3.2.1 1; libint 1.1.6 0; markupsafe 0.23 py35_2; mkl 2017.0.1 0; mpc 1.0.1 0; mpfr 3.1.2 0; ncurses 5.9 10; numpy 1.12.1 py35_0; openssl 1.0.2k 1; pcmsolver 1.1.10 py35_0; psi4 1.1rc1+6db9b1f py35_0 psi4/label/devel; psi4-deps 1.0 py35_1; py 1.4.33 py35_0; pyasn1 0.2.3 py35_0; pycosat 0.6.2 py35_0; pycparser 2.17 py35_0; pygments 2.2.0 py35_0; pyopenssl 16.2.0 py35_0; pytest 3.0.7 py35_0; python 3.5.3 1; pytz 2017.2 py35_0; readline 6.2 2; requests 2.13.0 py35_0; ruamel_yaml 0.11.14 py35_1; setuptools 27.2.0 py35_0; simint 0.7 0; six 1.10.0 py35_0; snowballstemmer 1.2.1 py35_0; sqlite 3.13.0 0; tk 8.5.18 0; v2rdm_casscf 0.2.1 py35_0; xz 5.2.2 1; yaml 0.1.6 0; zlib 1.2.8 3; je714@guanine:~$ conda info -e; # conda environments:; #; root * /home/je714/psi4conda; je714@guanine:~$ python --version; Python 3.5.3 :: Continuum Analytics, Inc.; ```. </details>. Also, after following this path of installation, do I have to manually change the PYTHONPATH to make it importable as a module?. Thanks for any comments!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:3480,Energy Efficiency,energy,energy,3480,"______________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positivity': 'dqg',; 'r_convergence': 1e-5,; 'e_convergence': 1e-6,; 'maxiter': 20000,; # #'orbopt_frequency': 1000,; # #'mu_update_frequency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:3796,Energy Efficiency,energy,energy,3796,"""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positivity': 'dqg',; 'r_convergence': 1e-5,; 'e_convergence': 1e-6,; 'maxiter': 20000,; # #'orbopt_frequency': 1000,; # #'mu_update_frequency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # need",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:3822,Energy Efficiency,energy,energy,3822,"""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positivity': 'dqg',; 'r_convergence': 1e-5,; 'e_convergence': 1e-6,; 'maxiter': 20000,; # #'orbopt_frequency': 1000,; # #'mu_update_frequency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # need",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:4443,Energy Efficiency,energy,energy,4443,"2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:4478,Energy Efficiency,energy,energy,4478,"'v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:4372,Modifiability,plugin,plugin,4372,"uency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:4465,Modifiability,plugin,plugins,4465,"205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plug",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:4687,Modifiability,plugin,plugin,4687," _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:5458,Modifiability,plugin,plugin,5458,"gins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls were:; E; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::v2rdm_casscf::v2RDMSolver::compute_energy(); E py_psi_plugin(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<psi::Wavefunction>). /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/pymodule.py:66: RuntimeError; ---------------------------------------------- Captured stdout call -----------------------------------------------; N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A; =========================== 1 failed, 15 passed, 2 skipped, 1 xfailed in 201.46 seconds ===========================; ```. </details>; Also here is the current",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:424,Performance,load,loaded,424,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:657,Performance,cache,cachedir,657,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:668,Performance,cache,cache,668,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:285,Testability,test,test,285,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:481,Testability,test,test,481,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:770,Testability,test,tests,770,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:868,Testability,test,tests,868,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:951,Testability,test,tests,951,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1035,Testability,test,tests,1035,"ructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1121,Testability,test,tests,1121,"psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1205,Testability,test,tests,1205,"his on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1290,Testability,test,tests,1290,"t` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1378,Testability,test,tests,1378,"n3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ======",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1460,Testability,test,tests,1460,"====================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES ==========================",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1545,Testability,test,tests,1545,"=====; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1628,Testability,test,tests,1628,"me/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1713,Testability,test,tests,1713,"ected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1804,Testability,test,tests,1804,"t_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). impo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1892,Testability,test,tests,1892,":test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:1979,Testability,test,tests,1979,"t_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:2064,Testability,test,tests,2064,"_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:2148,Testability,test,tests,2148,"st_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:2235,Testability,test,tests,2235,"libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:2321,Testability,test,tests,2321,"cmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positivity': 'dqg',; 'r_convergence': 1e-5,; 'e_convergence': 1e-6,; 'maxiter': 20000,; # #'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:2668,Testability,test,tests,2668,"PED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positivity': 'dqg',; 'r_convergence': 1e-5,; 'e_convergence': 1e-6,; 'maxiter': 20000,; # #'orbopt_frequency': 1000,; # #'mu_update_frequency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:2718,Testability,Test,Test,2718,"PED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ==================================================== FAILURES =====================================================; ________________________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positivity': 'dqg',; 'r_convergence': 1e-5,; 'e_convergence': 1e-6,; 'maxiter': 20000,; # #'orbopt_frequency': 1000,; # #'mu_update_frequency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/issues/710:3572,Testability,test,tests,3572,"_________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positivity': 'dqg',; 'r_convergence': 1e-5,; 'e_convergence': 1e-6,; 'maxiter': 20000,; # #'orbopt_frequency': 1000,; # #'mu_update_frequency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710
https://github.com/psi4/psi4/pull/711:29,Modifiability,variab,variables,29,## Description; Adds more CC variables and fixes docstring. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/711
https://github.com/psi4/psi4/pull/712:63,Integrability,rout,routed,63,## Description; T1 and D1 diagnostics computed by ccsd/df-ccsd routed through fnocc are added to psi4 global variables. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/712
https://github.com/psi4/psi4/pull/712:109,Modifiability,variab,variables,109,## Description; T1 and D1 diagnostics computed by ccsd/df-ccsd routed through fnocc are added to psi4 global variables. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/712
https://github.com/psi4/psi4/issues/714:640,Availability,avail,available,640,"Carlos is going to look into writing us a few test cases that make sure that all MP2 methods and all CC methods in Psi4 give consistent energies. - [ ] DF-MP2: Rob's code vs dfnocc is already in test case test/fnocc4, at the end. Split this part out to a new test case that compares these two as well as from the occ module. set qc_module occ will run Ugur's code (give it method 'mp2').; - [ ] Conventional MP2: Crawford's code vs fnocc vs occ; - [ ] DF-CCSD and DF-CCSD(T): Eugene's code with no FNO (df-fnocc), Ugur's code; - [ ] CCSD and CCSD(T): fnocc vs Crawford's code (ccenergy); - [ ] CEPA comparison: energy('cepa(0)') vs LCCD if available for non-OO, and vs DCFT [FYI some CEPA definitions have singles, others don't]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714
https://github.com/psi4/psi4/issues/714:611,Energy Efficiency,energy,energy,611,"Carlos is going to look into writing us a few test cases that make sure that all MP2 methods and all CC methods in Psi4 give consistent energies. - [ ] DF-MP2: Rob's code vs dfnocc is already in test case test/fnocc4, at the end. Split this part out to a new test case that compares these two as well as from the occ module. set qc_module occ will run Ugur's code (give it method 'mp2').; - [ ] Conventional MP2: Crawford's code vs fnocc vs occ; - [ ] DF-CCSD and DF-CCSD(T): Eugene's code with no FNO (df-fnocc), Ugur's code; - [ ] CCSD and CCSD(T): fnocc vs Crawford's code (ccenergy); - [ ] CEPA comparison: energy('cepa(0)') vs LCCD if available for non-OO, and vs DCFT [FYI some CEPA definitions have singles, others don't]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714
https://github.com/psi4/psi4/issues/714:46,Testability,test,test,46,"Carlos is going to look into writing us a few test cases that make sure that all MP2 methods and all CC methods in Psi4 give consistent energies. - [ ] DF-MP2: Rob's code vs dfnocc is already in test case test/fnocc4, at the end. Split this part out to a new test case that compares these two as well as from the occ module. set qc_module occ will run Ugur's code (give it method 'mp2').; - [ ] Conventional MP2: Crawford's code vs fnocc vs occ; - [ ] DF-CCSD and DF-CCSD(T): Eugene's code with no FNO (df-fnocc), Ugur's code; - [ ] CCSD and CCSD(T): fnocc vs Crawford's code (ccenergy); - [ ] CEPA comparison: energy('cepa(0)') vs LCCD if available for non-OO, and vs DCFT [FYI some CEPA definitions have singles, others don't]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714
https://github.com/psi4/psi4/issues/714:195,Testability,test,test,195,"Carlos is going to look into writing us a few test cases that make sure that all MP2 methods and all CC methods in Psi4 give consistent energies. - [ ] DF-MP2: Rob's code vs dfnocc is already in test case test/fnocc4, at the end. Split this part out to a new test case that compares these two as well as from the occ module. set qc_module occ will run Ugur's code (give it method 'mp2').; - [ ] Conventional MP2: Crawford's code vs fnocc vs occ; - [ ] DF-CCSD and DF-CCSD(T): Eugene's code with no FNO (df-fnocc), Ugur's code; - [ ] CCSD and CCSD(T): fnocc vs Crawford's code (ccenergy); - [ ] CEPA comparison: energy('cepa(0)') vs LCCD if available for non-OO, and vs DCFT [FYI some CEPA definitions have singles, others don't]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714
https://github.com/psi4/psi4/issues/714:205,Testability,test,test,205,"Carlos is going to look into writing us a few test cases that make sure that all MP2 methods and all CC methods in Psi4 give consistent energies. - [ ] DF-MP2: Rob's code vs dfnocc is already in test case test/fnocc4, at the end. Split this part out to a new test case that compares these two as well as from the occ module. set qc_module occ will run Ugur's code (give it method 'mp2').; - [ ] Conventional MP2: Crawford's code vs fnocc vs occ; - [ ] DF-CCSD and DF-CCSD(T): Eugene's code with no FNO (df-fnocc), Ugur's code; - [ ] CCSD and CCSD(T): fnocc vs Crawford's code (ccenergy); - [ ] CEPA comparison: energy('cepa(0)') vs LCCD if available for non-OO, and vs DCFT [FYI some CEPA definitions have singles, others don't]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714
https://github.com/psi4/psi4/issues/714:259,Testability,test,test,259,"Carlos is going to look into writing us a few test cases that make sure that all MP2 methods and all CC methods in Psi4 give consistent energies. - [ ] DF-MP2: Rob's code vs dfnocc is already in test case test/fnocc4, at the end. Split this part out to a new test case that compares these two as well as from the occ module. set qc_module occ will run Ugur's code (give it method 'mp2').; - [ ] Conventional MP2: Crawford's code vs fnocc vs occ; - [ ] DF-CCSD and DF-CCSD(T): Eugene's code with no FNO (df-fnocc), Ugur's code; - [ ] CCSD and CCSD(T): fnocc vs Crawford's code (ccenergy); - [ ] CEPA comparison: energy('cepa(0)') vs LCCD if available for non-OO, and vs DCFT [FYI some CEPA definitions have singles, others don't]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714
https://github.com/psi4/psi4/pull/715:43,Testability,test,test,43,## Description; In response to #714 adds a test checking LCCD against DCFT/CEPA0. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/715
https://github.com/psi4/psi4/issues/716:476,Availability,error,error,476,"I see a segfault when running an SCF with some of the systems in L7 (in particular [circumcoronene](http://www.begdb.com/index.php?action=oneMolecule&state=show&id=4108)). I've traced the issue, at least in part, to integer sizing bug [in this check](https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L699) when the user requests less than Q^2 memory. This is due to a wraparound during subtraction, which results in the error condition [here](https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L761) erroneously evaluating to `false`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/716
https://github.com/psi4/psi4/issues/716:424,Integrability,wrap,wraparound,424,"I see a segfault when running an SCF with some of the systems in L7 (in particular [circumcoronene](http://www.begdb.com/index.php?action=oneMolecule&state=show&id=4108)). I've traced the issue, at least in part, to integer sizing bug [in this check](https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L699) when the user requests less than Q^2 memory. This is due to a wraparound during subtraction, which results in the error condition [here](https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L761) erroneously evaluating to `false`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/716
https://github.com/psi4/psi4/pull/717:44,Testability,test,test,44,## Description; Finishes fixing up the full test suite. Full tests should now pass. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/717
https://github.com/psi4/psi4/pull/717:61,Testability,test,tests,61,## Description; Finishes fixing up the full test suite. Full tests should now pass. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/717
https://github.com/psi4/psi4/pull/718:235,Integrability,interface,interface,235,## Description; The one electron hamiltonian is read from PSIF_OEI inside libtransform library. This ; leads to a loss of flexibility in adding external potentials to the wavefunction directly ; for post-scf methods through the python interface. This PR fixes this problem and makes sure the hamiltonian is read consistently from the wavefunction in all the modules. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718
https://github.com/psi4/psi4/issues/719:405,Energy Efficiency,energy,energy,405,"I get a segfault when doing an upcast between custom basis sets, while everything works fine when doing an upcast between built-in basis sets. I've been poking around in GDB, but I haven't figured out the issue yet. Here's an example:. ```; molecule {; O ; H 1 0.96; H 1 0.96 2 104.5; }. basis low {; assign sto-3g; }; basis high {; assign cc-pvdz; }. core.IO.set_default_namespace(""low""); set basis low; energy('hf'). core.IO.set_default_namespace('high'); core.IO.change_file_namespace(180, 'low', 'high'); set guess read; set basis high; energy('hf'). ```. Merely replacing `set basis low` with `set basis sto-3g` and `set basis high` with `set basis cc-pvdz` fixes the segfault.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/719
https://github.com/psi4/psi4/issues/719:541,Energy Efficiency,energy,energy,541,"I get a segfault when doing an upcast between custom basis sets, while everything works fine when doing an upcast between built-in basis sets. I've been poking around in GDB, but I haven't figured out the issue yet. Here's an example:. ```; molecule {; O ; H 1 0.96; H 1 0.96 2 104.5; }. basis low {; assign sto-3g; }; basis high {; assign cc-pvdz; }. core.IO.set_default_namespace(""low""); set basis low; energy('hf'). core.IO.set_default_namespace('high'); core.IO.change_file_namespace(180, 'low', 'high'); set guess read; set basis high; energy('hf'). ```. Merely replacing `set basis low` with `set basis sto-3g` and `set basis high` with `set basis cc-pvdz` fixes the segfault.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/719
https://github.com/psi4/psi4/pull/720:71,Modifiability,plugin,plugins,71,## Description; Expose P::e.options in Python and enable pure pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/720
https://github.com/psi4/psi4/pull/720:16,Security,Expose,Expose,16,## Description; Expose P::e.options in Python and enable pure pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/720
https://github.com/psi4/psi4/pull/721:649,Modifiability,rewrite,rewrite,649,"## Description; Fixes #719 by changing the `name` that's passed to the C++ BasisSet constructor. It used to be like `file /path/to/basis/set.gbs`, but that it very tricky to read the basis set name from a dumped wavefunction and reinstantiate the basis set. For built-in basis sets, it's not too bad -- we can just [parse the string](https://github.com/psi4/psi4/blob/9d1564e67837bbf7f348c1600aa2c353457671ec/psi4/driver/procrouting/proc.py#L1295). For custom basis sets that assign different basis sets to different atoms, that string ends up as a `'+'`-delimited list of gbs files, which isn't information preserving. @andysim: if you're going to rewrite this stuff anyways, it might not be worth merging this. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721
https://github.com/psi4/psi4/pull/722:28,Integrability,interface,interfaces,28,"## Description; Adds Python interfaces and code to semicanonicalize MCSCF orbitals. ## Todos; * **Developer**; - [x] Tested to make sure resulting orbitals diagonalize docc, actv, and virt blocks of average Fock matrix. ## Questions; - [x] By default MCSCF orbitals are semicanonicalized, unless user requests natural orbitals. This seems the most sensible choice, OK with other devs?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722
https://github.com/psi4/psi4/pull/722:117,Testability,Test,Tested,117,"## Description; Adds Python interfaces and code to semicanonicalize MCSCF orbitals. ## Todos; * **Developer**; - [x] Tested to make sure resulting orbitals diagonalize docc, actv, and virt blocks of average Fock matrix. ## Questions; - [x] By default MCSCF orbitals are semicanonicalized, unless user requests natural orbitals. This seems the most sensible choice, OK with other devs?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722
https://github.com/psi4/psi4/issues/724:169,Availability,error,errors,169,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/724
https://github.com/psi4/psi4/issues/724:353,Availability,error,error,353,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/724
https://github.com/psi4/psi4/issues/724:496,Availability,Error,Error,496,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/724
https://github.com/psi4/psi4/issues/724:503,Availability,error,error,503,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/724
https://github.com/psi4/psi4/issues/724:538,Availability,Error,Error,538,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/724
https://github.com/psi4/psi4/issues/724:675,Deployability,patch,patch,675,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/724
https://github.com/psi4/psi4/issues/724:418,Integrability,message,message,418,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/724
https://github.com/psi4/psi4/pull/725:71,Modifiability,plugin,plugins,71,## Description; Exposes options class functions necessary for pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/725
https://github.com/psi4/psi4/pull/725:16,Security,Expose,Exposes,16,## Description; Exposes options class functions necessary for pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/725
https://github.com/psi4/psi4/pull/726:160,Deployability,Update,Update,160,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/pull/726:235,Deployability,toggle,toggle,235,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/pull/726:786,Deployability,Release,Release,786,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/pull/726:202,Modifiability,plugin,plugins,202,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/pull/726:447,Modifiability,plugin,plugin,447,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/pull/726:499,Modifiability,plugin,plugin,499,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/pull/726:506,Performance,load,loading,506,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/pull/726:16,Testability,test,testing,16,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/pull/726:458,Testability,test,tested,458,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/pull/726:633,Testability,test,testing,633,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/pull/726:694,Testability,test,test,694,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/726
https://github.com/psi4/psi4/issues/727:318,Availability,avail,available,318,"Would there be any objection to me filing a PR to add some of the cc-pwCVXZ basis sets for alkali and alkali earth metals that are currently missing from Psi4 (i.e. https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/cc-pwcvtz.gbs). As far as I can tell, they're not on the basis set exchange, but thet are available at http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/727
https://github.com/psi4/psi4/pull/728:16,Deployability,Update,Update,16,"## Description; Update cc-pVXZ (D through 5) for Li, Be, Na, and Mg, and add cc-pwCVXZ (D through 5) for Li, Be, Na and Mg with values from Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011), accessed from http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html. Closes gh-727. Add cc-pwCVXZ-RI (D through 5) for Li, Be, Na and Mg with values from J. G. Hill and K. A Peterson, ""Correlation consistent basis sets for explicitly correlated wavefunctions: Valence and core-valence basis sets for Li, Be, Na, and Mg"" Phys. Chem. Chem. Phys. (2010). The values were accessed from http://www.rsc.org/suppdata/cp/c0/c0cp00020e/c0cp00020e.pdf. Update cc-pV5Z-RI for Na from Hill and Peterson (2010). ## Todos. - [x] Add RI; - [x] Check locally against molpro.; - [x] Fix cc-pwCV5Z for Na and Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728
https://github.com/psi4/psi4/pull/728:690,Deployability,Update,Update,690,"## Description; Update cc-pVXZ (D through 5) for Li, Be, Na, and Mg, and add cc-pwCVXZ (D through 5) for Li, Be, Na and Mg with values from Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011), accessed from http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html. Closes gh-727. Add cc-pwCVXZ-RI (D through 5) for Li, Be, Na and Mg with values from J. G. Hill and K. A Peterson, ""Correlation consistent basis sets for explicitly correlated wavefunctions: Valence and core-valence basis sets for Li, Be, Na, and Mg"" Phys. Chem. Chem. Phys. (2010). The values were accessed from http://www.rsc.org/suppdata/cp/c0/c0cp00020e/c0cp00020e.pdf. Update cc-pV5Z-RI for Na from Hill and Peterson (2010). ## Todos. - [x] Add RI; - [x] Check locally against molpro.; - [x] Fix cc-pwCV5Z for Na and Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728
https://github.com/psi4/psi4/pull/728:242,Security,access,accessed,242,"## Description; Update cc-pVXZ (D through 5) for Li, Be, Na, and Mg, and add cc-pwCVXZ (D through 5) for Li, Be, Na and Mg with values from Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011), accessed from http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html. Closes gh-727. Add cc-pwCVXZ-RI (D through 5) for Li, Be, Na and Mg with values from J. G. Hill and K. A Peterson, ""Correlation consistent basis sets for explicitly correlated wavefunctions: Valence and core-valence basis sets for Li, Be, Na, and Mg"" Phys. Chem. Chem. Phys. (2010). The values were accessed from http://www.rsc.org/suppdata/cp/c0/c0cp00020e/c0cp00020e.pdf. Update cc-pV5Z-RI for Na from Hill and Peterson (2010). ## Todos. - [x] Add RI; - [x] Check locally against molpro.; - [x] Fix cc-pwCV5Z for Na and Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728
https://github.com/psi4/psi4/pull/728:615,Security,access,accessed,615,"## Description; Update cc-pVXZ (D through 5) for Li, Be, Na, and Mg, and add cc-pwCVXZ (D through 5) for Li, Be, Na and Mg with values from Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011), accessed from http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html. Closes gh-727. Add cc-pwCVXZ-RI (D through 5) for Li, Be, Na and Mg with values from J. G. Hill and K. A Peterson, ""Correlation consistent basis sets for explicitly correlated wavefunctions: Valence and core-valence basis sets for Li, Be, Na, and Mg"" Phys. Chem. Chem. Phys. (2010). The values were accessed from http://www.rsc.org/suppdata/cp/c0/c0cp00020e/c0cp00020e.pdf. Update cc-pV5Z-RI for Na from Hill and Peterson (2010). ## Todos. - [x] Add RI; - [x] Check locally against molpro.; - [x] Fix cc-pwCV5Z for Na and Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728
https://github.com/psi4/psi4/pull/730:330,Deployability,Release,Release,330,"## Description; Rehabilitates Cfour interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Interface working again for primary modes (~60 tests). Not yet for `vpt2()`; - [x] Test cases kw-7, kw-8, rohf-mp4 still failing for known reasons; * **User-Facing for Release Notes**; - [x] Cfour interface working again. Recc to use in communication with a developer. Cfour 2.00beta. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/730
https://github.com/psi4/psi4/pull/730:36,Integrability,interface,interface,36,"## Description; Rehabilitates Cfour interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Interface working again for primary modes (~60 tests). Not yet for `vpt2()`; - [x] Test cases kw-7, kw-8, rohf-mp4 still failing for known reasons; * **User-Facing for Release Notes**; - [x] Cfour interface working again. Recc to use in communication with a developer. Cfour 2.00beta. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/730
https://github.com/psi4/psi4/pull/730:162,Integrability,Interface,Interface,162,"## Description; Rehabilitates Cfour interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Interface working again for primary modes (~60 tests). Not yet for `vpt2()`; - [x] Test cases kw-7, kw-8, rohf-mp4 still failing for known reasons; * **User-Facing for Release Notes**; - [x] Cfour interface working again. Recc to use in communication with a developer. Cfour 2.00beta. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/730
https://github.com/psi4/psi4/pull/730:359,Integrability,interface,interface,359,"## Description; Rehabilitates Cfour interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Interface working again for primary modes (~60 tests). Not yet for `vpt2()`; - [x] Test cases kw-7, kw-8, rohf-mp4 still failing for known reasons; * **User-Facing for Release Notes**; - [x] Cfour interface working again. Recc to use in communication with a developer. Cfour 2.00beta. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/730
https://github.com/psi4/psi4/pull/730:209,Testability,test,tests,209,"## Description; Rehabilitates Cfour interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Interface working again for primary modes (~60 tests). Not yet for `vpt2()`; - [x] Test cases kw-7, kw-8, rohf-mp4 still failing for known reasons; * **User-Facing for Release Notes**; - [x] Cfour interface working again. Recc to use in communication with a developer. Cfour 2.00beta. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/730
https://github.com/psi4/psi4/pull/730:245,Testability,Test,Test,245,"## Description; Rehabilitates Cfour interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Interface working again for primary modes (~60 tests). Not yet for `vpt2()`; - [x] Test cases kw-7, kw-8, rohf-mp4 still failing for known reasons; * **User-Facing for Release Notes**; - [x] Cfour interface working again. Recc to use in communication with a developer. Cfour 2.00beta. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/730
https://github.com/psi4/psi4/pull/732:511,Deployability,Release,Release,511,## Description; Minor tweaks to finite differences in the atomic_displacements() function that is used only in prototype ROA calculations at present. . ## Todos; Now supports 3-point and 5-point formulae finite differences in the atomic_displacements() function.; Now returns displacements in canonical most negative to most positive order. * **Developer Interest**; I have used this function in dipole moment derivative/file17 computations. Further development along these lines is likely. * **User-Facing for Release Notes**; None at this juncture. ## Questions; None. ## Status; Should be ready to go.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/732
https://github.com/psi4/psi4/pull/734:977,Availability,Toler,Tolerate,977,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734
https://github.com/psi4/psi4/pull/734:1102,Deployability,Release,Release,1102,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734
https://github.com/psi4/psi4/pull/734:358,Integrability,rout,routines,358,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734
https://github.com/psi4/psi4/pull/734:210,Modifiability,flexible,flexible,210,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734
https://github.com/psi4/psi4/pull/734:411,Modifiability,layers,layers,411,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734
https://github.com/psi4/psi4/pull/734:547,Usability,feedback,feedback,547,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734
https://github.com/psi4/psi4/pull/736:1108,Integrability,rout,routine,1108,"## Description; I originally had grand plans for a few of the base classes, but this turned out to be harder then expected so this PR kind of took a turn. Best description of this is perhaps ""general cleanup"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Might compile faster. As a note two libraries have moved:; ```; ""psi4/libparallelPsiOutStream.h"" -> ""psi4/libpsi4util/PsiOutStream.h""; ""psi4/libparallel/process.h"" -> ""psi4/libpsi4util/process.h""; ```; There is no longer a `""psi4/libparallel/libparallel.h""`, you may need to include one of the two above libraries. - [x] Removed several IWL functions; - [x] Removed some `libciomr` functions; - [x] Cleaned up `libparallel`; - [x] Fixed a few bugs and syntax issues in Wavefunction; - [x] Removed some headers from `Process` and `psi4-dec` which required a larger header shake up. I hope we are finally starting to peel away the points where we accidentally include too many headers and those headers go viral.; - [x] Still working to pull pybind11 out of a few layers; - [x] A GEMM routine with the tag line ""a reasonably fast matrix multiply (at least on the DEC3100)"" was removed.; - [x] `extern1` was temporarily removed from quickest. Still need to decided on what to do here. ## Questions; - [x] Anything else we can do?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736
https://github.com/psi4/psi4/pull/736:1087,Modifiability,layers,layers,1087,"## Description; I originally had grand plans for a few of the base classes, but this turned out to be harder then expected so this PR kind of took a turn. Best description of this is perhaps ""general cleanup"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Might compile faster. As a note two libraries have moved:; ```; ""psi4/libparallelPsiOutStream.h"" -> ""psi4/libpsi4util/PsiOutStream.h""; ""psi4/libparallel/process.h"" -> ""psi4/libpsi4util/process.h""; ```; There is no longer a `""psi4/libparallel/libparallel.h""`, you may need to include one of the two above libraries. - [x] Removed several IWL functions; - [x] Removed some `libciomr` functions; - [x] Cleaned up `libparallel`; - [x] Fixed a few bugs and syntax issues in Wavefunction; - [x] Removed some headers from `Process` and `psi4-dec` which required a larger header shake up. I hope we are finally starting to peel away the points where we accidentally include too many headers and those headers go viral.; - [x] Still working to pull pybind11 out of a few layers; - [x] A GEMM routine with the tag line ""a reasonably fast matrix multiply (at least on the DEC3100)"" was removed.; - [x] `extern1` was temporarily removed from quickest. Still need to decided on what to do here. ## Questions; - [x] Anything else we can do?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736
https://github.com/psi4/psi4/pull/737:443,Deployability,Update,Update,443,"## Description; Allow symmetry to be used in SCF, but then convert the symmetrized wavefunction to a desymmetrized (C1) format for use by non-symmetry-aware modules. ## Todos; * **Developer Interest**; - [x] Correct bug in D_subset_helper() and F_subset_helper() for nonsymmetric matrices; - [x] Refactor D_subset_helper() and F_subset_helper() to a generic matrix_subset_helper(); - [x] Implement Wavefunction::c1_deep_copy() function; - [ ] Update bassisset_ to be C1 inside c1_deep_copy() function; - [ ] Call the new c1 deep copy from the driver in the appropriate places. * **User-Facing for Release Notes**; - [ ] Allow symmetry to be used in SCF even when post-SCF module is C1-only. ## Questions; - [x] The wavefunction object has a bassiset_ member that needs to be updated to C1. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/737
https://github.com/psi4/psi4/pull/737:597,Deployability,Release,Release,597,"## Description; Allow symmetry to be used in SCF, but then convert the symmetrized wavefunction to a desymmetrized (C1) format for use by non-symmetry-aware modules. ## Todos; * **Developer Interest**; - [x] Correct bug in D_subset_helper() and F_subset_helper() for nonsymmetric matrices; - [x] Refactor D_subset_helper() and F_subset_helper() to a generic matrix_subset_helper(); - [x] Implement Wavefunction::c1_deep_copy() function; - [ ] Update bassisset_ to be C1 inside c1_deep_copy() function; - [ ] Call the new c1 deep copy from the driver in the appropriate places. * **User-Facing for Release Notes**; - [ ] Allow symmetry to be used in SCF even when post-SCF module is C1-only. ## Questions; - [x] The wavefunction object has a bassiset_ member that needs to be updated to C1. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/737
https://github.com/psi4/psi4/pull/737:775,Deployability,update,updated,775,"## Description; Allow symmetry to be used in SCF, but then convert the symmetrized wavefunction to a desymmetrized (C1) format for use by non-symmetry-aware modules. ## Todos; * **Developer Interest**; - [x] Correct bug in D_subset_helper() and F_subset_helper() for nonsymmetric matrices; - [x] Refactor D_subset_helper() and F_subset_helper() to a generic matrix_subset_helper(); - [x] Implement Wavefunction::c1_deep_copy() function; - [ ] Update bassisset_ to be C1 inside c1_deep_copy() function; - [ ] Call the new c1 deep copy from the driver in the appropriate places. * **User-Facing for Release Notes**; - [ ] Allow symmetry to be used in SCF even when post-SCF module is C1-only. ## Questions; - [x] The wavefunction object has a bassiset_ member that needs to be updated to C1. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/737
https://github.com/psi4/psi4/pull/737:296,Modifiability,Refactor,Refactor,296,"## Description; Allow symmetry to be used in SCF, but then convert the symmetrized wavefunction to a desymmetrized (C1) format for use by non-symmetry-aware modules. ## Todos; * **Developer Interest**; - [x] Correct bug in D_subset_helper() and F_subset_helper() for nonsymmetric matrices; - [x] Refactor D_subset_helper() and F_subset_helper() to a generic matrix_subset_helper(); - [x] Implement Wavefunction::c1_deep_copy() function; - [ ] Update bassisset_ to be C1 inside c1_deep_copy() function; - [ ] Call the new c1 deep copy from the driver in the appropriate places. * **User-Facing for Release Notes**; - [ ] Allow symmetry to be used in SCF even when post-SCF module is C1-only. ## Questions; - [x] The wavefunction object has a bassiset_ member that needs to be updated to C1. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/737
https://github.com/psi4/psi4/issues/738:940,Energy Efficiency,energy,energy,940,"I am having some trouble with test case simint-scf5 failing, specifically in the singlet CUKS PK case. In principle, my changes should not have affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/issues/738:970,Energy Efficiency,energy,energy,970,"I am having some trouble with test case simint-scf5 failing, specifically in the singlet CUKS PK case. In principle, my changes should not have affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/issues/738:1108,Energy Efficiency,Charge,Charge,1108,"ve affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07 DIIS. ==> Post-Iterations <==. @Spin Contamination Metric: 1.00000; @S^2 Expected: 0.00000; @S^2 Observed: 1.00000. In the reference [correc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/issues/738:2247,Integrability,rout,routine,2247,"2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07 DIIS. ==> Post-Iterations <==. @Spin Contamination Metric: 1.00000; @S^2 Expected: 0.00000; @S^2 Observed: 1.00000. In the reference [correct] output, the Occupation by irrep is closed shell. Perhaps there is a bug in the Core Hamiltonian guess routine not respecting the multiplicity, and/or experiencing some small numerical instability. This problem seems intermittent for me, I thought I ran essentially the same code yesterday without this case failing. Attempting to attach test output. David. [output.txt](https://github.com/psi4/psi4/files/1066053/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/issues/738:30,Testability,test,test,30,"I am having some trouble with test case simint-scf5 failing, specifically in the singlet CUKS PK case. In principle, my changes should not have affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/issues/738:158,Testability,test,test,158,"I am having some trouble with test case simint-scf5 failing, specifically in the singlet CUKS PK case. In principle, my changes should not have affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/issues/738:213,Testability,test,test,213,"I am having some trouble with test case simint-scf5 failing, specifically in the singlet CUKS PK case. In principle, my changes should not have affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/issues/738:265,Testability,test,testing,265,"I am having some trouble with test case simint-scf5 failing, specifically in the singlet CUKS PK case. In principle, my changes should not have affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/issues/738:522,Testability,test,test,522,"I am having some trouble with test case simint-scf5 failing, specifically in the singlet CUKS PK case. In principle, my changes should not have affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/issues/738:560,Testability,test,testing,560,"I am having some trouble with test case simint-scf5 failing, specifically in the singlet CUKS PK case. In principle, my changes should not have affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/issues/738:2482,Testability,test,test,2482,"2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07 DIIS. ==> Post-Iterations <==. @Spin Contamination Metric: 1.00000; @S^2 Expected: 0.00000; @S^2 Observed: 1.00000. In the reference [correct] output, the Occupation by irrep is closed shell. Perhaps there is a bug in the Core Hamiltonian guess routine not respecting the multiplicity, and/or experiencing some small numerical instability. This problem seems intermittent for me, I thought I ran essentially the same code yesterday without this case failing. Attempting to attach test output. David. [output.txt](https://github.com/psi4/psi4/files/1066053/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738
https://github.com/psi4/psi4/pull/742:125,Deployability,Update,Update,125,"## Description; This pull request replaces the `DFERI` class with `DF_Helper` in DFEP2, MCSCF, SAPT-DFT, FSAPT, and USAPT. . Update 08/16/17: This pull request demolishes all traces of libthce. * **Developer Interest**; - [x] Sparsity utilization in 3-index integral transforms; - [x] Workflows optimized to fit procedure contexts; - [x] Intermediate recycling; - [x] Excellent parallel scaling; - [x] Simple UI including pythonic tensor indexing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/742
https://github.com/psi4/psi4/pull/742:295,Performance,optimiz,optimized,295,"## Description; This pull request replaces the `DFERI` class with `DF_Helper` in DFEP2, MCSCF, SAPT-DFT, FSAPT, and USAPT. . Update 08/16/17: This pull request demolishes all traces of libthce. * **Developer Interest**; - [x] Sparsity utilization in 3-index integral transforms; - [x] Workflows optimized to fit procedure contexts; - [x] Intermediate recycling; - [x] Excellent parallel scaling; - [x] Simple UI including pythonic tensor indexing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/742
https://github.com/psi4/psi4/pull/742:402,Usability,Simpl,Simple,402,"## Description; This pull request replaces the `DFERI` class with `DF_Helper` in DFEP2, MCSCF, SAPT-DFT, FSAPT, and USAPT. . Update 08/16/17: This pull request demolishes all traces of libthce. * **Developer Interest**; - [x] Sparsity utilization in 3-index integral transforms; - [x] Workflows optimized to fit procedure contexts; - [x] Intermediate recycling; - [x] Excellent parallel scaling; - [x] Simple UI including pythonic tensor indexing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/742
https://github.com/psi4/psi4/pull/743:1631,Energy Efficiency,energy,energy,1631,"x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time: 3.50 seconds. V: Grid : 0.333u 0.000s 0.209w 2 calls; JK: (A|mn) : 0.000u 0.000s 0.004w 2 calls; JK: (A|Q)^-1/2 : 0.783u 0.000s 0.256w 2 calls; JK: (Q|mn) : 0.000u 0.000s 0.001w 2 calls; HF: Form H : 0.150u 0.017s 0.007w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.000u 0.000s 0.001w 2 calls; HF: Form G : 18.817u 0.017s 1.883w 24 calls; RKS: Form V : 16.567u 0.017s 1.265w 24 calls; V: Properties : 2.047p 14064 calls; V: Functional : 6.249p 14064 calls; V: V_XC : 0.532p 14064 calls; V: LSDA : 0.182p 28128 calls; V: GGA : 0.218p 14064 calls; JK: D : 0.000u 0.000s 0.000w 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743
https://github.com/psi4/psi4/pull/743:1836,Energy Efficiency,energy,energy,1836,"x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time: 3.50 seconds. V: Grid : 0.333u 0.000s 0.209w 2 calls; JK: (A|mn) : 0.000u 0.000s 0.004w 2 calls; JK: (A|Q)^-1/2 : 0.783u 0.000s 0.256w 2 calls; JK: (Q|mn) : 0.000u 0.000s 0.001w 2 calls; HF: Form H : 0.150u 0.017s 0.007w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.000u 0.000s 0.001w 2 calls; HF: Form G : 18.817u 0.017s 1.883w 24 calls; RKS: Form V : 16.567u 0.017s 1.265w 24 calls; V: Properties : 2.047p 14064 calls; V: Functional : 6.249p 14064 calls; V: V_XC : 0.532p 14064 calls; V: LSDA : 0.182p 28128 calls; V: GGA : 0.218p 14064 calls; JK: D : 0.000u 0.000s 0.000w 24 calls; JK: USO2AO : 0.000u 0.000s 0.000w 24 calls; JK: JK : 2.250u 0.000s 0.616w 24 calls; JK: J : 0.000u 0.000s 0.000w 16 calls; JK: J1 : 0.000u 0.000s 0.000w 16 calls; JK: J2 : 0.000u 0.000s 0.000w 16 calls; JK: K : 0.000u 0.000s 0.00",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743
https://github.com/psi4/psi4/pull/743:353,Performance,optimiz,optimize,353,"## Description; It implements a new version of `timer` in `libqt`, which enables calling of `timer_on` and `timer_off` in OpenMP parallel blocks. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Parallel based on original code**; - [x] Have a working version of parallel timer; * **Introducing new C++ features and optimize performance**; - [x] Replace the original timer data structure (doubly linked list) by std::list; - [x] Replace old timing C functions by C++11 std::chrono library; - [x] Optimization; * **Timer format and output**; - [x] Nested timer; - [x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743
https://github.com/psi4/psi4/pull/743:362,Performance,perform,performance,362,"## Description; It implements a new version of `timer` in `libqt`, which enables calling of `timer_on` and `timer_off` in OpenMP parallel blocks. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Parallel based on original code**; - [x] Have a working version of parallel timer; * **Introducing new C++ features and optimize performance**; - [x] Replace the original timer data structure (doubly linked list) by std::list; - [x] Replace old timing C functions by C++11 std::chrono library; - [x] Optimization; * **Timer format and output**; - [x] Nested timer; - [x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743
https://github.com/psi4/psi4/pull/743:533,Performance,Optimiz,Optimization,533,"## Description; It implements a new version of `timer` in `libqt`, which enables calling of `timer_on` and `timer_off` in OpenMP parallel blocks. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Parallel based on original code**; - [x] Have a working version of parallel timer; * **Introducing new C++ features and optimize performance**; - [x] Replace the original timer data structure (doubly linked list) by std::list; - [x] Replace old timing C functions by C++11 std::chrono library; - [x] Optimization; * **Timer format and output**; - [x] Nested timer; - [x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743
https://github.com/psi4/psi4/pull/743:623,Testability,Test,Test,623,"## Description; It implements a new version of `timer` in `libqt`, which enables calling of `timer_on` and `timer_off` in OpenMP parallel blocks. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Parallel based on original code**; - [x] Have a working version of parallel timer; * **Introducing new C++ features and optimize performance**; - [x] Replace the original timer data structure (doubly linked list) by std::list; - [x] Replace old timing C functions by C++11 std::chrono library; - [x] Optimization; * **Timer format and output**; - [x] Nested timer; - [x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743
https://github.com/psi4/psi4/issues/744:70,Availability,error,error,70,"Dear developers,; I am doing optimization of geometry, but I got this error. ""ERROR: ERI - Libint cannot handle angular momentum this high (6) for first derivatives.; Rebuild Libint with MAX_AM_ERI at least 7."". Could you please show me how to fix it? PSI4 1.1 was installed from miniconda. Thank you. Kind regards,. Hassenky",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/744
https://github.com/psi4/psi4/issues/744:78,Availability,ERROR,ERROR,78,"Dear developers,; I am doing optimization of geometry, but I got this error. ""ERROR: ERI - Libint cannot handle angular momentum this high (6) for first derivatives.; Rebuild Libint with MAX_AM_ERI at least 7."". Could you please show me how to fix it? PSI4 1.1 was installed from miniconda. Thank you. Kind regards,. Hassenky",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/744
https://github.com/psi4/psi4/issues/744:265,Deployability,install,installed,265,"Dear developers,; I am doing optimization of geometry, but I got this error. ""ERROR: ERI - Libint cannot handle angular momentum this high (6) for first derivatives.; Rebuild Libint with MAX_AM_ERI at least 7."". Could you please show me how to fix it? PSI4 1.1 was installed from miniconda. Thank you. Kind regards,. Hassenky",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/744
https://github.com/psi4/psi4/issues/744:29,Performance,optimiz,optimization,29,"Dear developers,; I am doing optimization of geometry, but I got this error. ""ERROR: ERI - Libint cannot handle angular momentum this high (6) for first derivatives.; Rebuild Libint with MAX_AM_ERI at least 7."". Could you please show me how to fix it? PSI4 1.1 was installed from miniconda. Thank you. Kind regards,. Hassenky",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/744
https://github.com/psi4/psi4/pull/747:222,Availability,checkpoint,checkpointing,222,"## Description; This pull request aims to properly update energy, orbital energies, densities etc of the wave function for (conventional and density-fitted Mp2) and density-fitted CCSD calculations, so as to ensure proper checkpointing using FCHK interface. ; Also, there seems to be a problem in using FCHKWriter for conventional mp2 gradient calculations as I get a segmentation fault. This PR is meant to fix these problems which was pointed out by abdale on the psi4 forum. http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/747
https://github.com/psi4/psi4/pull/747:381,Availability,fault,fault,381,"## Description; This pull request aims to properly update energy, orbital energies, densities etc of the wave function for (conventional and density-fitted Mp2) and density-fitted CCSD calculations, so as to ensure proper checkpointing using FCHK interface. ; Also, there seems to be a problem in using FCHKWriter for conventional mp2 gradient calculations as I get a segmentation fault. This PR is meant to fix these problems which was pointed out by abdale on the psi4 forum. http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/747
https://github.com/psi4/psi4/pull/747:51,Deployability,update,update,51,"## Description; This pull request aims to properly update energy, orbital energies, densities etc of the wave function for (conventional and density-fitted Mp2) and density-fitted CCSD calculations, so as to ensure proper checkpointing using FCHK interface. ; Also, there seems to be a problem in using FCHKWriter for conventional mp2 gradient calculations as I get a segmentation fault. This PR is meant to fix these problems which was pointed out by abdale on the psi4 forum. http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/747
https://github.com/psi4/psi4/pull/747:58,Energy Efficiency,energy,energy,58,"## Description; This pull request aims to properly update energy, orbital energies, densities etc of the wave function for (conventional and density-fitted Mp2) and density-fitted CCSD calculations, so as to ensure proper checkpointing using FCHK interface. ; Also, there seems to be a problem in using FCHKWriter for conventional mp2 gradient calculations as I get a segmentation fault. This PR is meant to fix these problems which was pointed out by abdale on the psi4 forum. http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/747
https://github.com/psi4/psi4/pull/747:247,Integrability,interface,interface,247,"## Description; This pull request aims to properly update energy, orbital energies, densities etc of the wave function for (conventional and density-fitted Mp2) and density-fitted CCSD calculations, so as to ensure proper checkpointing using FCHK interface. ; Also, there seems to be a problem in using FCHKWriter for conventional mp2 gradient calculations as I get a segmentation fault. This PR is meant to fix these problems which was pointed out by abdale on the psi4 forum. http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/747
https://github.com/psi4/psi4/pull/747:548,Integrability,interface,interface,548,"## Description; This pull request aims to properly update energy, orbital energies, densities etc of the wave function for (conventional and density-fitted Mp2) and density-fitted CCSD calculations, so as to ensure proper checkpointing using FCHK interface. ; Also, there seems to be a problem in using FCHKWriter for conventional mp2 gradient calculations as I get a segmentation fault. This PR is meant to fix these problems which was pointed out by abdale on the psi4 forum. http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/747
https://github.com/psi4/psi4/issues/748:313,Deployability,install,installed,313,"This is probably the strangest issue I've seen yet. When numpy is imported _after_ psi4 in a Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.nor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:349,Deployability,install,installed,349,"This is probably the strangest issue I've seen yet. When numpy is imported _after_ psi4 in a Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.nor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:370,Deployability,install,install,370,"This is probably the strangest issue I've seen yet. When numpy is imported _after_ psi4 in a Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.nor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:434,Deployability,install,installed,434,"This is probably the strangest issue I've seen yet. When numpy is imported _after_ psi4 in a Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.nor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:596,Deployability,install,installed,596,"This is probably the strangest issue I've seen yet. When numpy is imported _after_ psi4 in a Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.nor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1372,Performance,load,loaded,1372," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1784,Performance,load,loaded,1784," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:554,Testability,test,tested,554,"This is probably the strangest issue I've seen yet. When numpy is imported _after_ psi4 in a Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.nor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1280,Testability,test,test,1280," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1430,Testability,test,test,1430," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1483,Testability,test,test,1483," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1692,Testability,test,test,1692," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1842,Testability,test,test,1842," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1895,Testability,test,test,1895," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1273,Usability,simpl,simple-test,1273," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1423,Usability,simpl,simple-test,1423," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1476,Usability,simpl,simple-test,1476," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1685,Usability,simpl,simple-test,1685," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1835,Usability,simpl,simple-test,1835," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/748:1888,Usability,simpl,simple-test,1888," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748
https://github.com/psi4/psi4/issues/749:69,Deployability,install,install,69,"In the process of debugging $#748 I noticed that after following the install instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier), that some of the install_name_tool / placeholder / rpath'y stuff for some of the dependencies looks wrong. I don't know if this is causing any issues or not, but it looks potentially incorrect. ```; $ otool -L /Users/mcgibbon/miniconda/envs/p4dev/lib/libdkh.dylib; /Users/mcgibbon/miniconda/envs/p4dev/lib/libdkh.dylib:; 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libgfortran.3.dylib (compatibility version 4.0.0, current version 4.0.0); 	@rpath/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/Users/ray/mc-x64-3.5/conda-bld/gcc-4.8_1477649012852/_b_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libquadmath.0.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/749
https://github.com/psi4/psi4/issues/749:283,Integrability,depend,dependencies,283,"In the process of debugging $#748 I noticed that after following the install instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier), that some of the install_name_tool / placeholder / rpath'y stuff for some of the dependencies looks wrong. I don't know if this is causing any issues or not, but it looks potentially incorrect. ```; $ otool -L /Users/mcgibbon/miniconda/envs/p4dev/lib/libdkh.dylib; /Users/mcgibbon/miniconda/envs/p4dev/lib/libdkh.dylib:; 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libgfortran.3.dylib (compatibility version 4.0.0, current version 4.0.0); 	@rpath/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/Users/ray/mc-x64-3.5/conda-bld/gcc-4.8_1477649012852/_b_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libquadmath.0.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/749
https://github.com/psi4/psi4/pull/750:556,Deployability,integrat,integration,556,"## Description; Make `core.Matrix.np_write(filename=None)` safer. The method returns a `dict` whose values are `np.ndarray`s. Currently, those arrays are views of memory owned by the `core.Matrix`, which means code like this is actually broken:. ```; def function():; matrix = function_that_returns_a_core_Matrix(); return matrix.np_write(filename=None); ```. This PR changes `np_write` to return copies of the data when `filename=None`, so it's less of a footgun. Eventually the need for this might go away, once the numpy->core.Matrix reference counting integration is accomplished, but that's much tricker. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/750
https://github.com/psi4/psi4/pull/750:556,Integrability,integrat,integration,556,"## Description; Make `core.Matrix.np_write(filename=None)` safer. The method returns a `dict` whose values are `np.ndarray`s. Currently, those arrays are views of memory owned by the `core.Matrix`, which means code like this is actually broken:. ```; def function():; matrix = function_that_returns_a_core_Matrix(); return matrix.np_write(filename=None); ```. This PR changes `np_write` to return copies of the data when `filename=None`, so it's less of a footgun. Eventually the need for this might go away, once the numpy->core.Matrix reference counting integration is accomplished, but that's much tricker. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/750
https://github.com/psi4/psi4/pull/750:59,Safety,safe,safer,59,"## Description; Make `core.Matrix.np_write(filename=None)` safer. The method returns a `dict` whose values are `np.ndarray`s. Currently, those arrays are views of memory owned by the `core.Matrix`, which means code like this is actually broken:. ```; def function():; matrix = function_that_returns_a_core_Matrix(); return matrix.np_write(filename=None); ```. This PR changes `np_write` to return copies of the data when `filename=None`, so it's less of a footgun. Eventually the need for this might go away, once the numpy->core.Matrix reference counting integration is accomplished, but that's much tricker. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/750
https://github.com/psi4/psi4/pull/751:629,Availability,down,downside,629,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/751
https://github.com/psi4/psi4/pull/751:1770,Availability,robust,robust,1770,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/751
https://github.com/psi4/psi4/pull/751:1715,Deployability,Release,Release,1715,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/751
https://github.com/psi4/psi4/pull/751:854,Integrability,depend,depending,854,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/751
https://github.com/psi4/psi4/pull/751:1748,Integrability,interface,interface,1748,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/751
https://github.com/psi4/psi4/pull/751:666,Performance,cache,cached,666,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/751
https://github.com/psi4/psi4/pull/751:1076,Performance,latency,latency,1076,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/751
https://github.com/psi4/psi4/pull/751:812,Security,access,accessors,812,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/751
https://github.com/psi4/psi4/issues/752:543,Modifiability,config,config,543,"There was some discussion on coming up with a coding style guide for Psi4. I don't think the idea is that we reformat all of Psi, but if you are going to reformat a section you should *try* to adhere to the following. My personal `clang-format` settings for C++ are:; ```; {; ""BasedOnStyle"": ""Google"",; ""IndentWidth"": 4,; ""ColumnLimit"": 120,; }; ```. Personally, I feel fairly strongly about the 4 indent width, I like the Google style in general, and the column limit is sort of an arbitrary number. My YAPF setting for Python are:; ```; {; ""config"": {; ""COLUMN_LIMIT"": 119,; }; }; ```; I seem to recall there is a good reason that it's 119 not 120, but I cannot remember what that is for the life of me. Personally, not a huge fan of enforced style guides through hook mechanisms, but I can go with the flow on it. I mostly feel that being a consistent style is really nice to have, but is not required. And those hook warnings like `# noflakes...` is worse than having a style thats a little off, again, IMO. Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/752
https://github.com/psi4/psi4/issues/752:59,Usability,guid,guide,59,"There was some discussion on coming up with a coding style guide for Psi4. I don't think the idea is that we reformat all of Psi, but if you are going to reformat a section you should *try* to adhere to the following. My personal `clang-format` settings for C++ are:; ```; {; ""BasedOnStyle"": ""Google"",; ""IndentWidth"": 4,; ""ColumnLimit"": 120,; }; ```. Personally, I feel fairly strongly about the 4 indent width, I like the Google style in general, and the column limit is sort of an arbitrary number. My YAPF setting for Python are:; ```; {; ""config"": {; ""COLUMN_LIMIT"": 119,; }; }; ```; I seem to recall there is a good reason that it's 119 not 120, but I cannot remember what that is for the life of me. Personally, not a huge fan of enforced style guides through hook mechanisms, but I can go with the flow on it. I mostly feel that being a consistent style is really nice to have, but is not required. And those hook warnings like `# noflakes...` is worse than having a style thats a little off, again, IMO. Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/752
https://github.com/psi4/psi4/issues/752:751,Usability,guid,guides,751,"There was some discussion on coming up with a coding style guide for Psi4. I don't think the idea is that we reformat all of Psi, but if you are going to reformat a section you should *try* to adhere to the following. My personal `clang-format` settings for C++ are:; ```; {; ""BasedOnStyle"": ""Google"",; ""IndentWidth"": 4,; ""ColumnLimit"": 120,; }; ```. Personally, I feel fairly strongly about the 4 indent width, I like the Google style in general, and the column limit is sort of an arbitrary number. My YAPF setting for Python are:; ```; {; ""config"": {; ""COLUMN_LIMIT"": 119,; }; }; ```; I seem to recall there is a good reason that it's 119 not 120, but I cannot remember what that is for the life of me. Personally, not a huge fan of enforced style guides through hook mechanisms, but I can go with the flow on it. I mostly feel that being a consistent style is really nice to have, but is not required. And those hook warnings like `# noflakes...` is worse than having a style thats a little off, again, IMO. Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/752
https://github.com/psi4/psi4/pull/754:108,Testability,test,tests,108,"## Description; I thought I would try out increasing our code coverage a bit. As such, I have added several tests and removed a deprecated pieces of code. This accidentally includes my NumPy PR, so please pull that one in first. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Always Flush on `outfile->Printf` call. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/754
https://github.com/psi4/psi4/issues/755:833,Testability,test,test,833,"Looks like we lost threading again at some point, especially in PSIthon. Kudos to @schiebermc for convincing me, even after pytest profiling showed all was in working order. I don't know when this actually happened. Fix seems easy enough for PSIthon, though I still wanted to run it by the core-devs, but PsiAPI is a little trickier. * PsiAPI, import psi4 before numpy: `python thread.py` --> _NO thread_; * PsiAPI, import numpy before psi4: `python thread.py` --> _THREAD_; * PSIthon, `bin/psi4` imports psi4 which imports numpy: `psi4 thread.py` --> _NO thread_ (yes, even if you comment out the thread setting line); * PSIthon, `bin/psi4` inserting `import numpy as np` [here](https://github.com/psi4/psi4/blob/master/psi4/run_psi4.py#L157-L158) to effectively import numpy before psi4: `psi4 thread.py` --> _THREAD_. `thread.py` test file (essentially [this](https://github.com/psi4/psi4/blob/master/tests/pytest/test_aaa_profiling.py)); ```; import time. # good; import numpy as np; import psi4. # bad; #import psi4; #import numpy as np. def test_threaded_blas():; threads = 20. times = {}. size = [200, 500, 2000, 4000]; threads = [1, threads]. for th in threads:; psi4.set_num_threads(th). for sz in size:; nruns = max(1, int(1.e10 / (sz ** 3))). a = psi4.core.Matrix(sz, sz); b = psi4.core.Matrix(sz, sz); c = psi4.core.Matrix(sz, sz). tp4 = time.time(); for n in range(nruns):; c.gemm(False, False, 1.0, a, b, 0.0). retp4 = (time.time() - tp4) / nruns. tnp = time.time(); for n in range(nruns):; np.dot(a, b, out=np.asarray(c)). retnp = (time.time() - tnp) / nruns; print(""Time for threads %2d, size %5d: Psi4: %12.6f NumPy: %12.6f"" % (th, sz, retp4, retnp)); if sz == 4000:; times[""p4-n{}"".format(th)] = retp4; times[""np-n{}"".format(th)] = retnp; assert psi4.get_num_threads() == th. rat1 = times[""np-n"" + str(threads[-1])] / times[""p4-n"" + str(threads[-1])]; rat2 = times[""p4-n"" + str(threads[0])] / times[""p4-n"" + str(threads[-1])]; print("" NumPy@n%d : Psi4@n%d ratio (want ~1): %.2f"" % (t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755
https://github.com/psi4/psi4/issues/755:904,Testability,test,tests,904,"Looks like we lost threading again at some point, especially in PSIthon. Kudos to @schiebermc for convincing me, even after pytest profiling showed all was in working order. I don't know when this actually happened. Fix seems easy enough for PSIthon, though I still wanted to run it by the core-devs, but PsiAPI is a little trickier. * PsiAPI, import psi4 before numpy: `python thread.py` --> _NO thread_; * PsiAPI, import numpy before psi4: `python thread.py` --> _THREAD_; * PSIthon, `bin/psi4` imports psi4 which imports numpy: `psi4 thread.py` --> _NO thread_ (yes, even if you comment out the thread setting line); * PSIthon, `bin/psi4` inserting `import numpy as np` [here](https://github.com/psi4/psi4/blob/master/psi4/run_psi4.py#L157-L158) to effectively import numpy before psi4: `psi4 thread.py` --> _THREAD_. `thread.py` test file (essentially [this](https://github.com/psi4/psi4/blob/master/tests/pytest/test_aaa_profiling.py)); ```; import time. # good; import numpy as np; import psi4. # bad; #import psi4; #import numpy as np. def test_threaded_blas():; threads = 20. times = {}. size = [200, 500, 2000, 4000]; threads = [1, threads]. for th in threads:; psi4.set_num_threads(th). for sz in size:; nruns = max(1, int(1.e10 / (sz ** 3))). a = psi4.core.Matrix(sz, sz); b = psi4.core.Matrix(sz, sz); c = psi4.core.Matrix(sz, sz). tp4 = time.time(); for n in range(nruns):; c.gemm(False, False, 1.0, a, b, 0.0). retp4 = (time.time() - tp4) / nruns. tnp = time.time(); for n in range(nruns):; np.dot(a, b, out=np.asarray(c)). retnp = (time.time() - tnp) / nruns; print(""Time for threads %2d, size %5d: Psi4: %12.6f NumPy: %12.6f"" % (th, sz, retp4, retnp)); if sz == 4000:; times[""p4-n{}"".format(th)] = retp4; times[""np-n{}"".format(th)] = retnp; assert psi4.get_num_threads() == th. rat1 = times[""np-n"" + str(threads[-1])] / times[""p4-n"" + str(threads[-1])]; rat2 = times[""p4-n"" + str(threads[0])] / times[""p4-n"" + str(threads[-1])]; print("" NumPy@n%d : Psi4@n%d ratio (want ~1): %.2f"" % (t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755
https://github.com/psi4/psi4/issues/755:1757,Testability,assert,assert,1757,"hen this actually happened. Fix seems easy enough for PSIthon, though I still wanted to run it by the core-devs, but PsiAPI is a little trickier. * PsiAPI, import psi4 before numpy: `python thread.py` --> _NO thread_; * PsiAPI, import numpy before psi4: `python thread.py` --> _THREAD_; * PSIthon, `bin/psi4` imports psi4 which imports numpy: `psi4 thread.py` --> _NO thread_ (yes, even if you comment out the thread setting line); * PSIthon, `bin/psi4` inserting `import numpy as np` [here](https://github.com/psi4/psi4/blob/master/psi4/run_psi4.py#L157-L158) to effectively import numpy before psi4: `psi4 thread.py` --> _THREAD_. `thread.py` test file (essentially [this](https://github.com/psi4/psi4/blob/master/tests/pytest/test_aaa_profiling.py)); ```; import time. # good; import numpy as np; import psi4. # bad; #import psi4; #import numpy as np. def test_threaded_blas():; threads = 20. times = {}. size = [200, 500, 2000, 4000]; threads = [1, threads]. for th in threads:; psi4.set_num_threads(th). for sz in size:; nruns = max(1, int(1.e10 / (sz ** 3))). a = psi4.core.Matrix(sz, sz); b = psi4.core.Matrix(sz, sz); c = psi4.core.Matrix(sz, sz). tp4 = time.time(); for n in range(nruns):; c.gemm(False, False, 1.0, a, b, 0.0). retp4 = (time.time() - tp4) / nruns. tnp = time.time(); for n in range(nruns):; np.dot(a, b, out=np.asarray(c)). retnp = (time.time() - tnp) / nruns; print(""Time for threads %2d, size %5d: Psi4: %12.6f NumPy: %12.6f"" % (th, sz, retp4, retnp)); if sz == 4000:; times[""p4-n{}"".format(th)] = retp4; times[""np-n{}"".format(th)] = retnp; assert psi4.get_num_threads() == th. rat1 = times[""np-n"" + str(threads[-1])] / times[""p4-n"" + str(threads[-1])]; rat2 = times[""p4-n"" + str(threads[0])] / times[""p4-n"" + str(threads[-1])]; print("" NumPy@n%d : Psi4@n%d ratio (want ~1): %.2f"" % (threads[-1], threads[-1], rat1)); print("" Psi4@n%d : Psi4@n%d ratio (want ~%d): %.2f"" % (threads[0], threads[-1], threads[-1], rat2)). if __name__ == '__main__':; test_threaded_blas(); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755
https://github.com/psi4/psi4/pull/756:728,Deployability,Release,Release,728,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Inclusion of outer P-shell for cc-pVTZ-MINAO for alkali and alkali earth was split between FOR (Rob, CDS, Susi) and AGAINST (FAE, Molpro). CDS changed his vote, so deleted and added as appropriate so filled in through Kr thanks to Cici. No change in test cases. We should now match Molpro.; - [x] Added conda package instructions to obtaining psi4 docs section; - [x] Nixed `using namespace std;` in favor of explicit `std::`. Appears to have broken sapt7 test (now fixed).; - [x] Made `std::abs` and `std::fabs` explicit; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/756
https://github.com/psi4/psi4/pull/756:435,Testability,test,test,435,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Inclusion of outer P-shell for cc-pVTZ-MINAO for alkali and alkali earth was split between FOR (Rob, CDS, Susi) and AGAINST (FAE, Molpro). CDS changed his vote, so deleted and added as appropriate so filled in through Kr thanks to Cici. No change in test cases. We should now match Molpro.; - [x] Added conda package instructions to obtaining psi4 docs section; - [x] Nixed `using namespace std;` in favor of explicit `std::`. Appears to have broken sapt7 test (now fixed).; - [x] Made `std::abs` and `std::fabs` explicit; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/756
https://github.com/psi4/psi4/pull/756:641,Testability,test,test,641,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Inclusion of outer P-shell for cc-pVTZ-MINAO for alkali and alkali earth was split between FOR (Rob, CDS, Susi) and AGAINST (FAE, Molpro). CDS changed his vote, so deleted and added as appropriate so filled in through Kr thanks to Cici. No change in test cases. We should now match Molpro.; - [x] Added conda package instructions to obtaining psi4 docs section; - [x] Nixed `using namespace std;` in favor of explicit `std::`. Appears to have broken sapt7 test (now fixed).; - [x] Made `std::abs` and `std::fabs` explicit; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/756
https://github.com/psi4/psi4/pull/757:621,Performance,optimiz,optimization,621,"## Description; This PR aims to export the first and second derivatives of one and two electron integrals in both AO and MO basis to python so that they can be used in psi4numpy for educational purposes. While calculating first derivatives, one gets a vector of matrices as the output, one for each cartesian component of the atom number provided in the input. Similarly, for hessians, one gets a total of 9 matrices for a given pair of atoms. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] add first derivatives ; - [X] add second derivatives; - [X] optimization and cleanup; - [X] add corresponding test cases in psi4numpy tests folder. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/757
https://github.com/psi4/psi4/pull/757:671,Testability,test,test,671,"## Description; This PR aims to export the first and second derivatives of one and two electron integrals in both AO and MO basis to python so that they can be used in psi4numpy for educational purposes. While calculating first derivatives, one gets a vector of matrices as the output, one for each cartesian component of the atom number provided in the input. Similarly, for hessians, one gets a total of 9 matrices for a given pair of atoms. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] add first derivatives ; - [X] add second derivatives; - [X] optimization and cleanup; - [X] add corresponding test cases in psi4numpy tests folder. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/757
https://github.com/psi4/psi4/pull/757:695,Testability,test,tests,695,"## Description; This PR aims to export the first and second derivatives of one and two electron integrals in both AO and MO basis to python so that they can be used in psi4numpy for educational purposes. While calculating first derivatives, one gets a vector of matrices as the output, one for each cartesian component of the atom number provided in the input. Similarly, for hessians, one gets a total of 9 matrices for a given pair of atoms. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] add first derivatives ; - [X] add second derivatives; - [X] optimization and cleanup; - [X] add corresponding test cases in psi4numpy tests folder. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/757
https://github.com/psi4/psi4/issues/758:36,Energy Efficiency,energy,energy,36,"I'm trying to calculate a potential energy surface for H2O double dissociation in a (4e,4o) active space using the input; ```; molecule h2o {; 0 1; symmetry c1; units bohr; O; H 1 R; H 1 R 2 110.6; }. R0=1.84345. set basis cc-pVTZ; set scf_type pk; h2o.R=3*R0; scf_e, scf_wfn = energy('scf', return_wfn=True). set frozen_docc [ 3 ]; set active [ 4 ]; set qc_module detci; set r_convergence 1e-8; set e_convergence 1e-10; set ci_maxiter 1000; set mcscf_algorithm ah. for ir in range(30, 7, -1):; h2o.R=R0*ir/10; print(h2o.R); if ir == 30:; cas_e, cas_wfn = energy('casscf', ref_wfn=scf_wfn, return_wfn=True); else:; cas_e, cas_wfn = energy('casscf', ref_wfn=cas_wfn, return_wfn=True); ```. Judging from output.dat, the run appears to crash in DiskJK for the third step. Somewhat oddly, if I look at the occupation numbers for the second step, I see; ```; Active Space Natural occupation numbers:. A 1620.561712 A 1145.170647 A 761.060310; A 410.061564; ```; whereas in the first step they're still sane; ```; Active Space Natural occupation numbers:. A 1.119206 A 1.083963 A 0.916038; A 0.880793; ```. What's going on here?!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758
https://github.com/psi4/psi4/issues/758:278,Energy Efficiency,energy,energy,278,"I'm trying to calculate a potential energy surface for H2O double dissociation in a (4e,4o) active space using the input; ```; molecule h2o {; 0 1; symmetry c1; units bohr; O; H 1 R; H 1 R 2 110.6; }. R0=1.84345. set basis cc-pVTZ; set scf_type pk; h2o.R=3*R0; scf_e, scf_wfn = energy('scf', return_wfn=True). set frozen_docc [ 3 ]; set active [ 4 ]; set qc_module detci; set r_convergence 1e-8; set e_convergence 1e-10; set ci_maxiter 1000; set mcscf_algorithm ah. for ir in range(30, 7, -1):; h2o.R=R0*ir/10; print(h2o.R); if ir == 30:; cas_e, cas_wfn = energy('casscf', ref_wfn=scf_wfn, return_wfn=True); else:; cas_e, cas_wfn = energy('casscf', ref_wfn=cas_wfn, return_wfn=True); ```. Judging from output.dat, the run appears to crash in DiskJK for the third step. Somewhat oddly, if I look at the occupation numbers for the second step, I see; ```; Active Space Natural occupation numbers:. A 1620.561712 A 1145.170647 A 761.060310; A 410.061564; ```; whereas in the first step they're still sane; ```; Active Space Natural occupation numbers:. A 1.119206 A 1.083963 A 0.916038; A 0.880793; ```. What's going on here?!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758
https://github.com/psi4/psi4/issues/758:556,Energy Efficiency,energy,energy,556,"I'm trying to calculate a potential energy surface for H2O double dissociation in a (4e,4o) active space using the input; ```; molecule h2o {; 0 1; symmetry c1; units bohr; O; H 1 R; H 1 R 2 110.6; }. R0=1.84345. set basis cc-pVTZ; set scf_type pk; h2o.R=3*R0; scf_e, scf_wfn = energy('scf', return_wfn=True). set frozen_docc [ 3 ]; set active [ 4 ]; set qc_module detci; set r_convergence 1e-8; set e_convergence 1e-10; set ci_maxiter 1000; set mcscf_algorithm ah. for ir in range(30, 7, -1):; h2o.R=R0*ir/10; print(h2o.R); if ir == 30:; cas_e, cas_wfn = energy('casscf', ref_wfn=scf_wfn, return_wfn=True); else:; cas_e, cas_wfn = energy('casscf', ref_wfn=cas_wfn, return_wfn=True); ```. Judging from output.dat, the run appears to crash in DiskJK for the third step. Somewhat oddly, if I look at the occupation numbers for the second step, I see; ```; Active Space Natural occupation numbers:. A 1620.561712 A 1145.170647 A 761.060310; A 410.061564; ```; whereas in the first step they're still sane; ```; Active Space Natural occupation numbers:. A 1.119206 A 1.083963 A 0.916038; A 0.880793; ```. What's going on here?!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758
https://github.com/psi4/psi4/issues/758:632,Energy Efficiency,energy,energy,632,"I'm trying to calculate a potential energy surface for H2O double dissociation in a (4e,4o) active space using the input; ```; molecule h2o {; 0 1; symmetry c1; units bohr; O; H 1 R; H 1 R 2 110.6; }. R0=1.84345. set basis cc-pVTZ; set scf_type pk; h2o.R=3*R0; scf_e, scf_wfn = energy('scf', return_wfn=True). set frozen_docc [ 3 ]; set active [ 4 ]; set qc_module detci; set r_convergence 1e-8; set e_convergence 1e-10; set ci_maxiter 1000; set mcscf_algorithm ah. for ir in range(30, 7, -1):; h2o.R=R0*ir/10; print(h2o.R); if ir == 30:; cas_e, cas_wfn = energy('casscf', ref_wfn=scf_wfn, return_wfn=True); else:; cas_e, cas_wfn = energy('casscf', ref_wfn=cas_wfn, return_wfn=True); ```. Judging from output.dat, the run appears to crash in DiskJK for the third step. Somewhat oddly, if I look at the occupation numbers for the second step, I see; ```; Active Space Natural occupation numbers:. A 1620.561712 A 1145.170647 A 761.060310; A 410.061564; ```; whereas in the first step they're still sane; ```; Active Space Natural occupation numbers:. A 1.119206 A 1.083963 A 0.916038; A 0.880793; ```. What's going on here?!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758
https://github.com/psi4/psi4/issues/759:609,Energy Efficiency,energy,energy,609,"So here's another weird issue with PES scans in Psi4. Namely, it looks like the scan crashes in the SCF cycle every 4 or 5 points, even when I'm not feeding in the previous scf solution. If you try a new calculation in the point where it failed to converge, there's no problem. Test input; ```; molecule mol {; 0 1; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 R1; H 0.0 0.0 R2; H 0.0 0.0 R3; } ; ; set basis STO-3G; set ci_maxiter 100. # This crashes at R=0.68; #for ir in range(60, 80, 2):; # This crashes at R=0.74; for ir in range(68, 80, 2):; mol.R1 = 1*(ir/100); mol.R2 = 2*(ir/100); mol.R3 = 3*(ir/100); ci_e=energy('fci'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/759
https://github.com/psi4/psi4/issues/759:278,Testability,Test,Test,278,"So here's another weird issue with PES scans in Psi4. Namely, it looks like the scan crashes in the SCF cycle every 4 or 5 points, even when I'm not feeding in the previous scf solution. If you try a new calculation in the point where it failed to converge, there's no problem. Test input; ```; molecule mol {; 0 1; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 R1; H 0.0 0.0 R2; H 0.0 0.0 R3; } ; ; set basis STO-3G; set ci_maxiter 100. # This crashes at R=0.68; #for ir in range(60, 80, 2):; # This crashes at R=0.74; for ir in range(68, 80, 2):; mol.R1 = 1*(ir/100); mol.R2 = 2*(ir/100); mol.R3 = 3*(ir/100); ci_e=energy('fci'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/759
https://github.com/psi4/psi4/pull/760:374,Modifiability,variab,variable,374,"## Description; This simplifies some CAS machinery and fixes UKS GGA XC derivatives. ## Todos; * **Developer Interest**; - [x] UKS XC derivates are now (likely) correct through GGA's.; - [x] Fixes silly bug where SCF-level linear response would fail if no OEProp quantities were specified. @ashutoshvt brought this issue up.; - [x] Freezes molecular geometry when setting a variable for cartesian coordinates. @loriab please check this out. Closes #759 and closes #59. If we like this we need fix the odd zmat/cart combined cases.; - [x] Adds SAPT midbond functions for @konpat @loriab ; - [x] Fixes HF3C gradients.; - [x] Makes building molecules slightly safer, closes #765. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760
https://github.com/psi4/psi4/pull/760:657,Safety,safe,safer,657,"## Description; This simplifies some CAS machinery and fixes UKS GGA XC derivatives. ## Todos; * **Developer Interest**; - [x] UKS XC derivates are now (likely) correct through GGA's.; - [x] Fixes silly bug where SCF-level linear response would fail if no OEProp quantities were specified. @ashutoshvt brought this issue up.; - [x] Freezes molecular geometry when setting a variable for cartesian coordinates. @loriab please check this out. Closes #759 and closes #59. If we like this we need fix the odd zmat/cart combined cases.; - [x] Adds SAPT midbond functions for @konpat @loriab ; - [x] Fixes HF3C gradients.; - [x] Makes building molecules slightly safer, closes #765. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760
https://github.com/psi4/psi4/pull/760:21,Usability,simpl,simplifies,21,"## Description; This simplifies some CAS machinery and fixes UKS GGA XC derivatives. ## Todos; * **Developer Interest**; - [x] UKS XC derivates are now (likely) correct through GGA's.; - [x] Fixes silly bug where SCF-level linear response would fail if no OEProp quantities were specified. @ashutoshvt brought this issue up.; - [x] Freezes molecular geometry when setting a variable for cartesian coordinates. @loriab please check this out. Closes #759 and closes #59. If we like this we need fix the odd zmat/cart combined cases.; - [x] Adds SAPT midbond functions for @konpat @loriab ; - [x] Fixes HF3C gradients.; - [x] Makes building molecules slightly safer, closes #765. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760
https://github.com/psi4/psi4/pull/761:255,Testability,test,test,255,"## Description; 99% of the docstrings export_mints.cc are now composed, with appropriate py::arg's. There are a few docstrings remaining, which were left either because I couldn't figure them out or they lacked C++ documentation. Psi4 compiled and psi4 --test finished successfully after these changes.; ## Todos; - [ ] Fill in last remaining docstrings. ## Questions; - [ ] Psi4 does not compile when I supply the MatrixFactory function's py::args, and I could not figure out why. Can someone more knowledgeable take a look at this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/761
https://github.com/psi4/psi4/pull/762:165,Safety,avoid,avoid,165,"## Description; Implemented a pair of functions,; - `void start_skip_timers()`; - `void stop_skip_timers()`; to skip all nested `timer_on` and `timer_off` calls and avoid complicated timing output. ## Todos; - [x] Implement two functions. ## Status; - [x] Ready to go. ## Example; By the following modification to `/psi4/psi4/src/psi4/libscf_solver/sad.cc`:; ```; void SADGuess::compute_guess(); {. timer_on(""SAD Guess"");; start_skip_timers(); // Added new line.; form_D();; form_C();; stop_skip_timers(); // Added new line.; timer_off(""SAD Guess"");; }; ```; the output `timer.dat` shows:; ```; HF: Form H : 0.000u 0.017s 0.019w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.400u 0.000s 0.247w 2 calls; | SAD Guess : 0.400u 0.000s 0.238w 2 calls; HF: Form G : 2.267u 0.000s 1.363w 31 calls; | JK: D : 0.000u 0.000s 0.000w 31 calls; | JK: USO2AO : 0.000u 0.000s 0.000w 31 calls; | JK: JK : 2.267u 0.000s 1.361w 31 calls; | JK: AO2USO : 0.000u 0.000s 0.000w 31 calls; HF: Form F : 0.000u 0.000s 0.000w 31 calls; HF: DIIS : 0.000u 0.000s 0.019w 31 calls; | DIISManager::add_entry : 0.000u 0.000s 0.011w 29 calls; | DIISManager::extrapolate : 0.000u 0.000s 0.006w 27 calls; | | DIISManager::extrapolate: bMatrix setup: 0.000u 0.000s 0.002w 27 calls; | | DIISManager::extrapolate: bMatrix pseudoinverse: 0.000u 0.000s 0.001w 27 calls; | | DIISManager::extrapolate: form new data: 0.000u 0.000s 0.002w 27 calls; HF: Form C : 0.000u 0.000s 0.004w 31 calls; HF: Form D : 0.000u 0.000s 0.000w 31 calls; ```; which is much more concise than originally:; ```; HF: Form H : 0.000u 0.033s 0.019w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.417u 0.000s 0.251w 2 calls; | SAD Guess : 0.383u 0.000s 0.242w 2 calls; | | JK: (A|mn) : 0.033u 0.000s 0.007w 4 calls; | | JK: (A|Q)^-1/2 : 0.100u 0.000s 0.072w 4 calls; | | JK: (Q|mn) : 0.000u 0.000s 0.000w 4 calls; | | JK: D : 0.000u 0.000s 0.000w 18 calls; | | JK: USO2AO : 0.000u 0.000s 0.000w 18 calls; | | JK: JK : 0.000u ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/762
https://github.com/psi4/psi4/issues/763:159,Deployability,release,release,159,"For example, there seems no tag that corresponding to the dev package ""linux-64/psi4-1.2a1.dev419+809f363-py36_0.tar.bz2"". How can I find the code, commits or release notes? Thank you.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/763
https://github.com/psi4/psi4/issues/764:572,Availability,Error,Error,572,"Running the following input. ```; molecule mol {; 0 1; H 0.0 0.0 0.000000; H 0.0 0.0 0.700000; H 0.0 0.0 1.400000; H 0.0 0.0 2.100000; H 0.0 0.0 2.800000; H 0.0 0.0 3.500000; }. memory 3500 mb. set basis aug-cc-pVDZ; set reference rohf; set guess core; set scf_type df. scf_e, scf_wfn = energy('scf', return_wfn = True). set restricted_docc [ 0, 0, 0, 0, 0, 0, 0, 0 ]; set restricted_uocc [ 0, 0, 6, 6, 0, 0, 6, 6 ]; set qc_module detci; set nat_orbs true. ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); ```. crashes with; ```; RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; Error occurred in file: /builddir/build/BUILD/psi4-add49b95b6be2441c522f71bddb47f1371e16958/psi4/src/psi4/libmints/matrix.cc on line: 1517; ```. both in the Fedora package of Psi4 1.1 as well as the conda package. The script runs without errors in the up-to-date trunk. Could this issue be fixed in the conda package? Alternatively, is there a conda channel for the development version?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764
https://github.com/psi4/psi4/issues/764:616,Availability,Error,Error,616,"Running the following input. ```; molecule mol {; 0 1; H 0.0 0.0 0.000000; H 0.0 0.0 0.700000; H 0.0 0.0 1.400000; H 0.0 0.0 2.100000; H 0.0 0.0 2.800000; H 0.0 0.0 3.500000; }. memory 3500 mb. set basis aug-cc-pVDZ; set reference rohf; set guess core; set scf_type df. scf_e, scf_wfn = energy('scf', return_wfn = True). set restricted_docc [ 0, 0, 0, 0, 0, 0, 0, 0 ]; set restricted_uocc [ 0, 0, 6, 6, 0, 0, 6, 6 ]; set qc_module detci; set nat_orbs true. ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); ```. crashes with; ```; RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; Error occurred in file: /builddir/build/BUILD/psi4-add49b95b6be2441c522f71bddb47f1371e16958/psi4/src/psi4/libmints/matrix.cc on line: 1517; ```. both in the Fedora package of Psi4 1.1 as well as the conda package. The script runs without errors in the up-to-date trunk. Could this issue be fixed in the conda package? Alternatively, is there a conda channel for the development version?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764
https://github.com/psi4/psi4/issues/764:854,Availability,error,errors,854,"Running the following input. ```; molecule mol {; 0 1; H 0.0 0.0 0.000000; H 0.0 0.0 0.700000; H 0.0 0.0 1.400000; H 0.0 0.0 2.100000; H 0.0 0.0 2.800000; H 0.0 0.0 3.500000; }. memory 3500 mb. set basis aug-cc-pVDZ; set reference rohf; set guess core; set scf_type df. scf_e, scf_wfn = energy('scf', return_wfn = True). set restricted_docc [ 0, 0, 0, 0, 0, 0, 0, 0 ]; set restricted_uocc [ 0, 0, 6, 6, 0, 0, 6, 6 ]; set qc_module detci; set nat_orbs true. ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); ```. crashes with; ```; RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; Error occurred in file: /builddir/build/BUILD/psi4-add49b95b6be2441c522f71bddb47f1371e16958/psi4/src/psi4/libmints/matrix.cc on line: 1517; ```. both in the Fedora package of Psi4 1.1 as well as the conda package. The script runs without errors in the up-to-date trunk. Could this issue be fixed in the conda package? Alternatively, is there a conda channel for the development version?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764
https://github.com/psi4/psi4/issues/764:287,Energy Efficiency,energy,energy,287,"Running the following input. ```; molecule mol {; 0 1; H 0.0 0.0 0.000000; H 0.0 0.0 0.700000; H 0.0 0.0 1.400000; H 0.0 0.0 2.100000; H 0.0 0.0 2.800000; H 0.0 0.0 3.500000; }. memory 3500 mb. set basis aug-cc-pVDZ; set reference rohf; set guess core; set scf_type df. scf_e, scf_wfn = energy('scf', return_wfn = True). set restricted_docc [ 0, 0, 0, 0, 0, 0, 0, 0 ]; set restricted_uocc [ 0, 0, 6, 6, 0, 0, 6, 6 ]; set qc_module detci; set nat_orbs true. ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); ```. crashes with; ```; RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; Error occurred in file: /builddir/build/BUILD/psi4-add49b95b6be2441c522f71bddb47f1371e16958/psi4/src/psi4/libmints/matrix.cc on line: 1517; ```. both in the Fedora package of Psi4 1.1 as well as the conda package. The script runs without errors in the up-to-date trunk. Could this issue be fixed in the conda package? Alternatively, is there a conda channel for the development version?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764
https://github.com/psi4/psi4/issues/764:472,Energy Efficiency,energy,energy,472,"Running the following input. ```; molecule mol {; 0 1; H 0.0 0.0 0.000000; H 0.0 0.0 0.700000; H 0.0 0.0 1.400000; H 0.0 0.0 2.100000; H 0.0 0.0 2.800000; H 0.0 0.0 3.500000; }. memory 3500 mb. set basis aug-cc-pVDZ; set reference rohf; set guess core; set scf_type df. scf_e, scf_wfn = energy('scf', return_wfn = True). set restricted_docc [ 0, 0, 0, 0, 0, 0, 0, 0 ]; set restricted_uocc [ 0, 0, 6, 6, 0, 0, 6, 6 ]; set qc_module detci; set nat_orbs true. ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); ```. crashes with; ```; RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; Error occurred in file: /builddir/build/BUILD/psi4-add49b95b6be2441c522f71bddb47f1371e16958/psi4/src/psi4/libmints/matrix.cc on line: 1517; ```. both in the Fedora package of Psi4 1.1 as well as the conda package. The script runs without errors in the up-to-date trunk. Could this issue be fixed in the conda package? Alternatively, is there a conda channel for the development version?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764
https://github.com/psi4/psi4/pull/766:382,Deployability,Update,Updates,382,"## Description; A friend noticed that the samples bundled with Conda are out of date and at least one (`dfmp2-grad1`) doesn't run as a result. He also had problems compiling with python 2.6, but solved them with python 2.7, which should just be the minimum supported. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **Developer Interest**; - [x] Updates samples, mostly for Conda users.; - [x] Forces cmake to look for Python 2.7+.; * **User-Facing for Release Notes**; - [x] Python2.7+ is now required by cmake. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/766
https://github.com/psi4/psi4/pull/766:489,Deployability,Release,Release,489,"## Description; A friend noticed that the samples bundled with Conda are out of date and at least one (`dfmp2-grad1`) doesn't run as a result. He also had problems compiling with python 2.6, but solved them with python 2.7, which should just be the minimum supported. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **Developer Interest**; - [x] Updates samples, mostly for Conda users.; - [x] Forces cmake to look for Python 2.7+.; * **User-Facing for Release Notes**; - [x] Python2.7+ is now required by cmake. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/766
https://github.com/psi4/psi4/pull/767:651,Deployability,Release,Release,651,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/767
https://github.com/psi4/psi4/pull/767:332,Integrability,depend,dependent,332,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/767
https://github.com/psi4/psi4/pull/767:435,Integrability,interface,interface,435,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/767
https://github.com/psi4/psi4/pull/767:719,Safety,detect,detection,719,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/767
https://github.com/psi4/psi4/pull/767:374,Testability,test,testing,374,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/767
https://github.com/psi4/psi4/issues/768:1268,Deployability,install,installation,1268,"When importing psi4 in python3.6 I get . ```; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); /usr/local/psi4/lib/psi4/__init__.py in <module>(); 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: dlopen(/usr/local/psi4/lib/psi4/core.so, 2): Symbol not found: __Py_ZeroStruct; Referenced from: /usr/local/psi4/lib/psi4/core.so; Expected in: flat namespace; in /usr/local/psi4/lib/psi4/core.so. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); <ipython-input-3-becb93fbd2ca> in <module>(); ----> 1 import psi4. /usr/local/psi4/lib/psi4/__init__.py in <module>(); 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61 ; 62 from psi4.core import set_output_file, get_variable, set_variable, get_num_threads, set_num_threads. ImportError: dlopen(/usr/local/psi4/lib/psi4/core.so, 2): Symbol not found: __Py_ZeroStruct; Referenced from: /usr/local/psi4/lib/psi4/core.so; Expected in: flat namespace; in /usr/local/psi4/lib/psi4/core.so; ```. Note that: ; 1. importing in python2.7 seem to work; 2. my installation tests all came back failed but I made anyway. Not sure why the tests failed. Cloned git and installed as per http://psicode.org/psi4manual/master/build_planning.html#faq-cmakeviasetup . I am working in OSX.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768
https://github.com/psi4/psi4/issues/768:1373,Deployability,install,installed,1373,"When importing psi4 in python3.6 I get . ```; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); /usr/local/psi4/lib/psi4/__init__.py in <module>(); 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: dlopen(/usr/local/psi4/lib/psi4/core.so, 2): Symbol not found: __Py_ZeroStruct; Referenced from: /usr/local/psi4/lib/psi4/core.so; Expected in: flat namespace; in /usr/local/psi4/lib/psi4/core.so. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); <ipython-input-3-becb93fbd2ca> in <module>(); ----> 1 import psi4. /usr/local/psi4/lib/psi4/__init__.py in <module>(); 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61 ; 62 from psi4.core import set_output_file, get_variable, set_variable, get_num_threads, set_num_threads. ImportError: dlopen(/usr/local/psi4/lib/psi4/core.so, 2): Symbol not found: __Py_ZeroStruct; Referenced from: /usr/local/psi4/lib/psi4/core.so; Expected in: flat namespace; in /usr/local/psi4/lib/psi4/core.so; ```. Note that: ; 1. importing in python2.7 seem to work; 2. my installation tests all came back failed but I made anyway. Not sure why the tests failed. Cloned git and installed as per http://psicode.org/psi4manual/master/build_planning.html#faq-cmakeviasetup . I am working in OSX.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768
https://github.com/psi4/psi4/issues/768:1281,Testability,test,tests,1281,"When importing psi4 in python3.6 I get . ```; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); /usr/local/psi4/lib/psi4/__init__.py in <module>(); 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: dlopen(/usr/local/psi4/lib/psi4/core.so, 2): Symbol not found: __Py_ZeroStruct; Referenced from: /usr/local/psi4/lib/psi4/core.so; Expected in: flat namespace; in /usr/local/psi4/lib/psi4/core.so. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); <ipython-input-3-becb93fbd2ca> in <module>(); ----> 1 import psi4. /usr/local/psi4/lib/psi4/__init__.py in <module>(); 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61 ; 62 from psi4.core import set_output_file, get_variable, set_variable, get_num_threads, set_num_threads. ImportError: dlopen(/usr/local/psi4/lib/psi4/core.so, 2): Symbol not found: __Py_ZeroStruct; Referenced from: /usr/local/psi4/lib/psi4/core.so; Expected in: flat namespace; in /usr/local/psi4/lib/psi4/core.so; ```. Note that: ; 1. importing in python2.7 seem to work; 2. my installation tests all came back failed but I made anyway. Not sure why the tests failed. Cloned git and installed as per http://psicode.org/psi4manual/master/build_planning.html#faq-cmakeviasetup . I am working in OSX.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768
https://github.com/psi4/psi4/issues/768:1344,Testability,test,tests,1344,"When importing psi4 in python3.6 I get . ```; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); /usr/local/psi4/lib/psi4/__init__.py in <module>(); 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: dlopen(/usr/local/psi4/lib/psi4/core.so, 2): Symbol not found: __Py_ZeroStruct; Referenced from: /usr/local/psi4/lib/psi4/core.so; Expected in: flat namespace; in /usr/local/psi4/lib/psi4/core.so. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); <ipython-input-3-becb93fbd2ca> in <module>(); ----> 1 import psi4. /usr/local/psi4/lib/psi4/__init__.py in <module>(); 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61 ; 62 from psi4.core import set_output_file, get_variable, set_variable, get_num_threads, set_num_threads. ImportError: dlopen(/usr/local/psi4/lib/psi4/core.so, 2): Symbol not found: __Py_ZeroStruct; Referenced from: /usr/local/psi4/lib/psi4/core.so; Expected in: flat namespace; in /usr/local/psi4/lib/psi4/core.so; ```. Note that: ; 1. importing in python2.7 seem to work; 2. my installation tests all came back failed but I made anyway. Not sure why the tests failed. Cloned git and installed as per http://psicode.org/psi4manual/master/build_planning.html#faq-cmakeviasetup . I am working in OSX.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768
https://github.com/psi4/psi4/pull/769:68,Availability,error,error,68,## Description; DFT-D plus the use of a guess basis set produced an error because of a typo in setting the dispersion energy: set_variables -> set_variable. . ## Status; - [X] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/769
https://github.com/psi4/psi4/pull/769:118,Energy Efficiency,energy,energy,118,## Description; DFT-D plus the use of a guess basis set produced an error because of a typo in setting the dispersion energy: set_variables -> set_variable. . ## Status; - [X] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/769
https://github.com/psi4/psi4/pull/770:568,Availability,down,downloads,568,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/770
https://github.com/psi4/psi4/pull/770:815,Availability,down,downstream,815,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/770
https://github.com/psi4/psi4/pull/770:262,Deployability,update,updates,262,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/770
https://github.com/psi4/psi4/pull/770:993,Deployability,Release,Release,993,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/770
https://github.com/psi4/psi4/pull/770:725,Modifiability,plugin,plugins,725,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/770
https://github.com/psi4/psi4/pull/770:830,Modifiability,plugin,plugins,830,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/770
https://github.com/psi4/psi4/pull/770:31,Testability,test,tests,31,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/770
https://github.com/psi4/psi4/pull/770:485,Testability,test,test,485,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/770
https://github.com/psi4/psi4/issues/771:520,Availability,error,error,520,"clang 4.0 / ifort 15.0.3 / MKL on macOS 10.12. After compiling from source code (tag v1.1), with ENABLE_gdma=ON, the following command quits without any output.; ```bash; python -c 'import psi4; print(psi4.__file__)'; ```; Running; ```bash; python -v -c ""import psi4""; ```; The last few lines of output are; ```bash; import psi4 # precompiled from /path/psi4-gdma/lib/psi4/__init__.pyc; dlopen(""/path/psi4-gdma/lib/psi4/core.so"", 2);; import psi4.core # dynamically loaded from /path/psi4-gdma/lib/psi4/core.so; ```; No error message. Modifying the following code; https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L1219-L1221; to; ```cpp; #ifdef INTEL_Fortran_ENABLED; static int argc = 1;; static char* argv = (char*) """";; for_rtl_init_(&argc, &argv);; #endif; ```; solves the problem. Any comments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/771
https://github.com/psi4/psi4/issues/771:526,Integrability,message,message,526,"clang 4.0 / ifort 15.0.3 / MKL on macOS 10.12. After compiling from source code (tag v1.1), with ENABLE_gdma=ON, the following command quits without any output.; ```bash; python -c 'import psi4; print(psi4.__file__)'; ```; Running; ```bash; python -v -c ""import psi4""; ```; The last few lines of output are; ```bash; import psi4 # precompiled from /path/psi4-gdma/lib/psi4/__init__.pyc; dlopen(""/path/psi4-gdma/lib/psi4/core.so"", 2);; import psi4.core # dynamically loaded from /path/psi4-gdma/lib/psi4/core.so; ```; No error message. Modifying the following code; https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L1219-L1221; to; ```cpp; #ifdef INTEL_Fortran_ENABLED; static int argc = 1;; static char* argv = (char*) """";; for_rtl_init_(&argc, &argv);; #endif; ```; solves the problem. Any comments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/771
https://github.com/psi4/psi4/issues/771:466,Performance,load,loaded,466,"clang 4.0 / ifort 15.0.3 / MKL on macOS 10.12. After compiling from source code (tag v1.1), with ENABLE_gdma=ON, the following command quits without any output.; ```bash; python -c 'import psi4; print(psi4.__file__)'; ```; Running; ```bash; python -v -c ""import psi4""; ```; The last few lines of output are; ```bash; import psi4 # precompiled from /path/psi4-gdma/lib/psi4/__init__.pyc; dlopen(""/path/psi4-gdma/lib/psi4/core.so"", 2);; import psi4.core # dynamically loaded from /path/psi4-gdma/lib/psi4/core.so; ```; No error message. Modifying the following code; https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L1219-L1221; to; ```cpp; #ifdef INTEL_Fortran_ENABLED; static int argc = 1;; static char* argv = (char*) """";; for_rtl_init_(&argc, &argv);; #endif; ```; solves the problem. Any comments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/771
https://github.com/psi4/psi4/pull/772:40,Integrability,interface,interface,40,"## Description; Changes to psi4 for MDT interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - [x] adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.; - [x] Adds handling of several one-electron properties to the API and saves them to the wavefunction. ## Status; - [ ] Ready for comment but not for final merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/772
https://github.com/psi4/psi4/pull/772:205,Performance,optimiz,optimize,205,"## Description; Changes to psi4 for MDT interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - [x] adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.; - [x] Adds handling of several one-electron properties to the API and saves them to the wavefunction. ## Status; - [ ] Ready for comment but not for final merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/772
https://github.com/psi4/psi4/pull/772:317,Performance,optimiz,optimization,317,"## Description; Changes to psi4 for MDT interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - [x] adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.; - [x] Adds handling of several one-electron properties to the API and saves them to the wavefunction. ## Status; - [ ] Ready for comment but not for final merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/772
https://github.com/psi4/psi4/issues/773:5,Performance,perform,performing,5,"When performing a B3LYP-D2 single point, with custom basis sets, I am getting different behavior from the conda binary (version: 1.2a1.dev458) and the source build (version: 1.2a1.dev458) on OS X with the exact same input file. . The conda binary produces the first few iterations and does not converge: ; ```; @DF-RKS iter 0: -2879.17610215408513 -2.87918e+03 1.22721e-02 ; @DF-RKS iter 1: -2858.84066999046217 2.03354e+01 1.56850e-03 ; @DF-RKS iter 2: -2827.41152127256692 3.14291e+01 5.78505e-03 DIIS; ``` . My source build produces the first few iterations and does converge: ; ```; @DF-RKS iter 0: -2879.11745920690237 -2.87912e+03 2.36222e-02; @DF-RKS iter 1: -2858.74896735363154 2.03685e+01 3.85843e-03; @DF-RKS iter 2: -2830.12148835513381 2.86275e+01 1.21879e-02 DIIS; ```. Diffing the outputs reveals nothing unexpected other than the RKS iterations. I have attached the input and basis sets for completeness. [binary_vs_source.zip](https://github.com/psi4/psi4/files/1183857/binary_vs_source.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773
https://github.com/psi4/psi4/pull/774:66,Deployability,update,updates,66,## Description; Adds diagnostic pragmas for clang to pragma.h and updates a couple of places to use them. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/774
https://github.com/psi4/psi4/issues/775:69,Availability,error,error,69,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:195,Availability,error,error,195,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:891,Availability,Error,Error,891,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:589,Deployability,install,installed,589,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:666,Deployability,install,installed,666,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
https://github.com/psi4/psi4/issues/775:742,Deployability,install,installed,742,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775
