id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:56,Availability,error,error,56,/** Increases the minimization step counter by the test error evaluation; * period and uses the provided test error value to determine if the; * minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:110,Availability,error,error,110,/** Increases the minimization step counter by the test error evaluation; * period and uses the provided test error value to determine if the; * minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:51,Testability,test,test,51,/** Increases the minimization step counter by the test error evaluation; * period and uses the provided test error value to determine if the; * minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:105,Testability,test,test,105,/** Increases the minimization step counter by the test error evaluation; * period and uses the provided test error value to determine if the; * minimization has converged. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Minimizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h:388,Energy Efficiency,allocate,allocates,388,"/** \class TNet. Generic neural network class. This generic neural network class represents a concrete neural; network through a vector of layers and coordinates the forward; and backward propagation through the net. The net takes as input a batch from the training data given in; matrix form, with each row corresponding to a certain training; event. On construction, the neural network allocates all the memory; required for the training of the neural net and keeps it until; its destruction. The Architecture type argument simply holds the; architecture-specific data types, which are just the matrix type; Matrix_t and the used scalar type Scalar_t. \tparam Architecture The Architecture type that holds the; \tparam Layer_t The type used for the layers. Can be either; Layer<Architecture> or SharedWeightLayer<Architecture>.; datatypes for a given architecture.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Net.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h:139,Modifiability,layers,layers,139,"/** \class TNet. Generic neural network class. This generic neural network class represents a concrete neural; network through a vector of layers and coordinates the forward; and backward propagation through the net. The net takes as input a batch from the training data given in; matrix form, with each row corresponding to a certain training; event. On construction, the neural network allocates all the memory; required for the training of the neural net and keeps it until; its destruction. The Architecture type argument simply holds the; architecture-specific data types, which are just the matrix type; Matrix_t and the used scalar type Scalar_t. \tparam Architecture The Architecture type that holds the; \tparam Layer_t The type used for the layers. Can be either; Layer<Architecture> or SharedWeightLayer<Architecture>.; datatypes for a given architecture.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Net.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h:751,Modifiability,layers,layers,751,"/** \class TNet. Generic neural network class. This generic neural network class represents a concrete neural; network through a vector of layers and coordinates the forward; and backward propagation through the net. The net takes as input a batch from the training data given in; matrix form, with each row corresponding to a certain training; event. On construction, the neural network allocates all the memory; required for the training of the neural net and keeps it until; its destruction. The Architecture type argument simply holds the; architecture-specific data types, which are just the matrix type; Matrix_t and the used scalar type Scalar_t. \tparam Architecture The Architecture type that holds the; \tparam Layer_t The type used for the layers. Can be either; Layer<Architecture> or SharedWeightLayer<Architecture>.; datatypes for a given architecture.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Net.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h:526,Usability,simpl,simply,526,"/** \class TNet. Generic neural network class. This generic neural network class represents a concrete neural; network through a vector of layers and coordinates the forward; and backward propagation through the net. The net takes as input a batch from the training data given in; matrix form, with each row corresponding to a certain training; event. On construction, the neural network allocates all the memory; required for the training of the neural net and keeps it until; its destruction. The Architecture type argument simply holds the; architecture-specific data types, which are just the matrix type; Matrix_t and the used scalar type Scalar_t. \tparam Architecture The Architecture type that holds the; \tparam Layer_t The type used for the layers. Can be either; Layer<Architecture> or SharedWeightLayer<Architecture>.; datatypes for a given architecture.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Net.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h:5,Modifiability,Layers,Layers,5,"///< Layers in the network.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Net.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h:15,Modifiability,layers,layers,15,/*! Remove all layers from the network.*/,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Net.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h:68,Availability,error,error,68,/*! Propagate the input batch X through the net and evaluate the; * error function for the resulting activations of the output; * layer */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Net.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h:31,Safety,predict,prediction,31,/*! Compute the neural network prediction obtained from forwarding the; * batch X through the neural network and applying the output function; * f to the activation of the last layer in the network. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Net.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h:31,Safety,predict,prediction,31,/*! Compute the neural network prediction obtained from applying the output; * function f to the activation of the last layer in the network. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Net.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Net.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VOptimizer *; * *; * *; * Description: *; * General Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018 : *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VOptimizer *; * *; * *; * Description: *; * General Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018 : *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:301,Performance,Optimiz,Optimizer,301,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VOptimizer *; * *; * *; * Description: *; * General Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018 : *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:31,Performance,Optimiz,Optimizer,31,/** \class VOptimizer; Generic Optimizer class. This class represents the general class for all optimizers in the Deep Learning; Module.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:96,Performance,optimiz,optimizers,96,/** \class VOptimizer; Generic Optimizer class. This class represents the general class for all optimizers in the Deep Learning; Module.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:119,Usability,Learn,Learning,119,/** \class VOptimizer; Generic Optimizer class. This class represents the general class for all optimizers in the Deep Learning; Module.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:9,Usability,learn,learning,9,"///< The learning rate used for training.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:41,Deployability,Update,Update,41,"///< The reference to the deep net.; /*! Update the weights, given the current weight gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:4,Deployability,Update,Update,4,"/*! Update the biases, given the current bias gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:4,Performance,Perform,Performs,4,/*! Performs one step of optimization. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:25,Performance,optimiz,optimization,25,/*! Performs one step of optimization. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:23,Performance,Optimiz,Optimizer,23,"//; //; // The General Optimizer Class - Implementation; //_________________________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Optimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/ReshapeLayer.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TReshapeLayer *; * *; * *; * Description: *; * Reshape Deep Neural Network Layer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/ReshapeLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/ReshapeLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/ReshapeLayer.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TReshapeLayer *; * *; * *; * Description: *; * Reshape Deep Neural Network Layer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/ReshapeLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/ReshapeLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TRMSProp *; * *; * *; * Description: *; * RMSProp Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TRMSProp *; * *; * *; * Description: *; * RMSProp Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:299,Performance,Optimiz,Optimizer,299,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TRMSProp *; * *; * *; * Description: *; * RMSProp Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:31,Performance,Optimiz,Optimizer,31,/** \class TRMSProp; * RMSProp Optimizer class; *; * This class represents the RMSProp Optimizer with options for applying momentum.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:87,Performance,Optimiz,Optimizer,87,/** \class TRMSProp; * RMSProp Optimizer class; *; * This class represents the RMSProp Optimizer with options for applying momentum.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:34,Performance,optimiz,optimizer,34,"///< The Rho constant used by the optimizer.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:32,Safety,avoid,avoid,32,"///< The Smoothing term used to avoid division by zero.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:57,Deployability,update,updates,57,"///< The accumulation of the past Weights for performing updates.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:46,Performance,perform,performing,46,"///< The accumulation of the past Weights for performing updates.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:56,Deployability,update,updates,56,"///< The accumulation of the past Biases for performing updates.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:45,Performance,perform,performing,45,"///< The accumulation of the past Biases for performing updates.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:81,Deployability,Update,Update,81,"///< working tensor used to keep a temporary copy of bias or bias gradients; /*! Update the weights, given the current weight gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:4,Deployability,Update,Update,4,"/*! Update the biases, given the current bias gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:23,Performance,Optimiz,Optimizer,23,"//; //; // The RMSProp Optimizer Class - Implementation; //_________________________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:27,Usability,learn,learningRate,27,"// Wt = momentum * Wt-1 + (learningRate * currentWeightGradients) / (sqrt(Vt + epsilon))",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h:27,Usability,learn,learningRate,27,"// Wt = momentum * Wt-1 + (learningRate * currentBiasGradients) / (sqrt(Vt + epsilon))",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RMSProp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RMSProp.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSGD *; * *; * *; * Description: *; * Stochastic Batch Gradient Descent Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/SGD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSGD *; * *; * *; * Description: *; * Stochastic Batch Gradient Descent Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/SGD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h:321,Performance,Optimiz,Optimizer,321,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSGD *; * *; * *; * Description: *; * Stochastic Batch Gradient Descent Optimizer Class *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/SGD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h:53,Performance,Optimiz,Optimizer,53,/** \class TSGD; * Stochastic Batch Gradient Descent Optimizer class; *; * This class represents the Stochastic Batch Gradient Descent Optimizer with options for applying momentum; * and nesterov momentum.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/SGD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h:135,Performance,Optimiz,Optimizer,135,/** \class TSGD; * Stochastic Batch Gradient Descent Optimizer class; *; * This class represents the Stochastic Batch Gradient Descent Optimizer with options for applying momentum; * and nesterov momentum.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/SGD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h:75,Deployability,Update,Update,75,"///< The sum of the past bias gradients associated with the deep net.; /*! Update the weights, given the current weight gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/SGD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h:4,Deployability,Update,Update,4,"/*! Update the biases, given the current bias gradients. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/SGD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h:43,Performance,Optimiz,Optimizer,43,"//; //; // The Stochastic Gradient Descent Optimizer Class - Implementation; //_________________________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/SGD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h:45,Usability,learn,learningRate,45,"// updating the weights.; // theta = theta - learningRate * Vt",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/SGD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h:43,Usability,learn,learningRate,43,"// updating the biases; // theta = theta - learningRate * Vt",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/SGD.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/SGD.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:317,Performance,Load,Loader,317,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:173,Security,access,accessed,173,/** TTensorBatch; *; * Class representing training batches consisting of a vector of matrices as input data; * and a matrix of output data. The input and output data can be accessed using; * the GetInput() and GetOutput() member functions.; *; * \tparam Architecture_t The underlying architecture.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:31,Usability,Simpl,Simple,31,/** TTensorBatchIterator; *; * Simple iterator class for the iterations over the training batches in; * a given data set represented by a TTensorDataLoader object.; *; * \tparam Data_t The input data type.; * \tparam Architecture_t The underlying architecture type.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:29,Performance,load,loaded,29,"///< The data that should be loaded in the batches.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:30,Performance,load,load,30,"///< The host buffers used to load the input, output and weight data.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:151,Integrability,rout,routine,151,"/** Shuffle the order of the samples in the batch. The shuffling is indirect,; * i.e. only the indices are shuffled. No input data is moved by this; * routine. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:20,Modifiability,layers,layers,20,"// in case of dense layers",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:596,Integrability,interface,interface,596,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 05/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////; // Definition of the TCpu architecture, which provides a //; // multi-threaded CPU implementation of the low-level interface //; // networks for Cpus using BLAS and Roots TThreadExecutor //; //////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:545,Performance,multi-thread,multi-threaded,545,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 05/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////; // Definition of the TCpu architecture, which provides a //; // multi-threaded CPU implementation of the low-level interface //; // networks for Cpus using BLAS and Roots TThreadExecutor //; //////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:49,Integrability,interface,interface,49,"/** The TCpu architecture class.; *; * Low-level interface class for multi-threaded CPU architectures. Contains as; * public types the declaration of the scalar, matrix and data loader types; * for this architecture as well as the remaining functions in the low-level; * interface in the form of static members.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:271,Integrability,interface,interface,271,"/** The TCpu architecture class.; *; * Low-level interface class for multi-threaded CPU architectures. Contains as; * public types the declaration of the scalar, matrix and data loader types; * for this architecture as well as the remaining functions in the low-level; * interface in the form of static members.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:69,Performance,multi-thread,multi-threaded,69,"/** The TCpu architecture class.; *; * Low-level interface class for multi-threaded CPU architectures. Contains as; * public types the declaration of the scalar, matrix and data loader types; * for this architecture as well as the remaining functions in the low-level; * interface in the form of static members.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:178,Performance,load,loader,178,"/** The TCpu architecture class.; *; * Low-level interface class for multi-threaded CPU architectures. Contains as; * public types the declaration of the scalar, matrix and data loader types; * for this architecture as well as the remaining functions in the low-level; * interface in the form of static members.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:137,Performance,optimiz,optimizers,137,"// create a weight tensor/matrix vector from another tensor/weight vector using the given tensor shapes; // this function is used by the optimizers to store intermediate weights representations",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:4,Deployability,Release,Release,4,/** Release CNN data/operator descriptors. Not used at the moment.*/,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:38,Modifiability,Layers,Layers,38,"/** @name Backward Propagation (Dense Layers); * Low-level functions required for the forward propagation of activations; * through the network.; */; ///@{; /** Perform the complete backward propagation step. If the provided; * \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:161,Performance,Perform,Perform,161,"/** @name Backward Propagation (Dense Layers); * Low-level functions required for the forward propagation of activations; * through the network.; */; ///@{; /** Perform the complete backward propagation step. If the provided; * \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:116,Deployability,update,update,116,/** Adds a the elements in matrix B scaled by c to the elements in; * the matrix A. This is required for the weight update in the gradient; * descent step.*/,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:20,Modifiability,extend,extended,20,/** Above functions extended to vectors */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:274,Integrability,interface,interface,274,"///@}; //____________________________________________________________________________; //; // Activation Functions; //____________________________________________________________________________; /** @name Activation Functions; * For each activation function, the low-level interface contains two routines.; * One that applies the activation function to a matrix and one that evaluate; * the derivatives of the activation function at the elements of a given matrix; * and writes the results into the result matrix.; */; ///@{; /* impl using Matrix */; /*inline void evaluate(Matrix_t &A, EActivationFunction f); {; Tensor_t tA(A);; evaluate<TCpu<AReal>>(tA,f);; }*/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:297,Integrability,rout,routines,297,"///@}; //____________________________________________________________________________; //; // Activation Functions; //____________________________________________________________________________; /** @name Activation Functions; * For each activation function, the low-level interface contains two routines.; * One that applies the activation function to a matrix and one that evaluate; * the derivatives of the activation function at the elements of a given matrix; * and writes the results into the result matrix.; */; ///@{; /* impl using Matrix */; /*inline void evaluate(Matrix_t &A, EActivationFunction f); {; Tensor_t tA(A);; evaluate<TCpu<AReal>>(tA,f);; }*/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:31,Availability,avail,available,31,"// fast tanh (only when VDT is available)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:437,Integrability,rout,routing,437,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:346,Safety,predict,prediction,346,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:400,Safety,predict,prediction,400,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:324,Safety,predict,prediction,324,"///@}; //____________________________________________________________________________; //; // Output Functions; //____________________________________________________________________________; /** @name Output Functions; * Output functions transform the activations \p output of the; * output layer in the network to a valid prediction \p YHat for; * the desired usage of the network, e.g. the identity function; * for regression or the sigmoid transformation for two-class; * classification.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:280,Integrability,interface,interface,280,"///@}; //____________________________________________________________________________; //; // Initialization; //____________________________________________________________________________; /** @name Initialization; * For each initialization method, one function in the low-level interface; * is provided. The naming scheme is <p>Initialize<Type></p> for a given; * initialization method Type.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:423,Modifiability,variab,variable,423,"///@}; //____________________________________________________________________________; //; // Batch Normalization; //____________________________________________________________________________; /** @name Batch Normalization Layer Propagation; */; ///@{; /** The input from each batch are normalized during training to have zero mean and unit variance; * and they are then scaled by two parameter, different for each input variable:; * - a scale factor `\gamma` gamma; * - an offset `\beta` beta */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:188,Performance,Perform,Perform,188,"// Empty struct for cuda architecture; // void * cudnnWorkspace = nullptr); // Remains nullptr for cuda architecture; /** @name Backward Propagation in Convolutional Layer; */; ///@{; /** Perform the complete backward propagation step in a Convolutional Layer.; * If the provided \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:272,Availability,Down,Downsample,272,"///@}; //____________________________________________________________________________; //; // Max Pooling Layer Propagation; //____________________________________________________________________________; /** @name Forward Propagation in Max Pooling Layer; */; ///@{; /** Downsample the matrix \p C to the matrix \p A, using max; * operation, such that the winning indices are stored in matrix; * \p B. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:75,Performance,Perform,Perform,75,"///@}; /** @name Backward Propagation in Max Pooling Layer; */; ///@{; /** Perform the complete backward propagation step in a Pooling Layer. Based on the; * winning indices stored in the index matrix, it just forwards the activation; * gradients to the previous layer. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:329,Integrability,interface,interface,329,///@}; //____________________________________________________________________________; //; // Additional Arithmetic Functions; //____________________________________________________________________________; /** @name Additional Arithmetic Functions; *; * Additional arithmetic on CUDA matrices used to implement the low-level; * interface.; */; ///@{; /** Standard multiplication of two matrices \p A and \p B with the result being; * written into C.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:70,Availability,error,errors,70,"/** Check two matrices for equality, taking floating point arithmetic errors into account. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:3,Performance,optimiz,optimizer,3,"// optimizer functions",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:79,Energy Efficiency,efficient,efficient,79,"// copy from another architecture using the reference one; // this is not very efficient since creates temporary objects",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:50,Integrability,interface,interface,50,"/** The TCuda architecture class.; *; * Low-level interface class for CUDA computing architectures. Contains as; * public types the declaration of the scalar, matrix and buffer types; * for this architecture as well as the remaining functions in the low-level; * interface in the form of static members.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:263,Integrability,interface,interface,263,"/** The TCuda architecture class.; *; * Low-level interface class for CUDA computing architectures. Contains as; * public types the declaration of the scalar, matrix and buffer types; * for this architecture as well as the remaining functions in the low-level; * interface in the form of static members.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:319,Performance,optimiz,optimizers,319,"// create a weight tensor/matrix from another tensor using its shape; // static Matrix_t CreateWeightTensor( Matrix_t & A) {; // return Matrix_t( A.GetNrows(), A.GetNcols());; // }; // create a weight tensor/matrix vector from another tensor/weight vector using the given tensor shapes; // this function is used by the optimizers to store intermediate weights representations",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:4,Deployability,Release,Release,4,/** Release CNN data/operator descriptors. Not used at the moment.*/,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:38,Modifiability,Layers,Layers,38,"/** @name Backward Propagation (Dense Layers); * Low-level functions required for the forward propagation of activations; * through the network.; */; ///@{; /** Perform the complete backward propagation step. If the provided; * \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:161,Performance,Perform,Perform,161,"/** @name Backward Propagation (Dense Layers); * Low-level functions required for the forward propagation of activations; * through the network.; */; ///@{; /** Perform the complete backward propagation step. If the provided; * \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:116,Deployability,update,update,116,/** Adds a the elements in matrix B scaled by c to the elements in; * the matrix A. This is required for the weight update in the gradient; * descent step.*/,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:20,Modifiability,extend,extended,20,/** Above functions extended to vectors */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:274,Integrability,interface,interface,274,"///@}; //____________________________________________________________________________; //; // Activation Functions; //____________________________________________________________________________; /** @name Activation Functions; * For each activation function, the low-level interface contains two routines.; * One that applies the activation function to a matrix and one that evaluate; * the derivatives of the activation function at the elements of a given matrix; * and writes the results into the result matrix.; */; ///@{; /* impl using Matrix */; /*inline void evaluate(Matrix_t &A, EActivationFunction f); {; Tensor_t tA(A);; evaluate<TCuda<AReal>>(tA,f);; }*/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:297,Integrability,rout,routines,297,"///@}; //____________________________________________________________________________; //; // Activation Functions; //____________________________________________________________________________; /** @name Activation Functions; * For each activation function, the low-level interface contains two routines.; * One that applies the activation function to a matrix and one that evaluate; * the derivatives of the activation function at the elements of a given matrix; * and writes the results into the result matrix.; */; ///@{; /* impl using Matrix */; /*inline void evaluate(Matrix_t &A, EActivationFunction f); {; Tensor_t tA(A);; evaluate<TCuda<AReal>>(tA,f);; }*/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:437,Integrability,rout,routing,437,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:346,Safety,predict,prediction,346,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:400,Safety,predict,prediction,400,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:324,Safety,predict,prediction,324,"///@}; //____________________________________________________________________________; //; // Output Functions; //____________________________________________________________________________; /** @name Output Functions; * Output functions transform the activations \p output of the; * output layer in the network to a valid prediction \p YHat for; * the desired usage of the network, e.g. the identity function; * for regression or the sigmoid transformation for two-class; * classification.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:280,Integrability,interface,interface,280,"///@}; //____________________________________________________________________________; //; // Initialization; //____________________________________________________________________________; /** @name Initialization; * For each initialization method, one function in the low-level interface; * is provided. The naming scheme is <p>Initialize`<Type>`</p> for a given; * initialization method Type.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:423,Modifiability,variab,variable,423,"///@}; //____________________________________________________________________________; //; // Batch Normalization; //____________________________________________________________________________; /** @name Batch Normalization Layer Propagation; */; ///@{; /** The input from each batch are normalized during training to have zero mean and unit variance; * and they are then scaled by two parameter, different for each input variable:; * - a scale factor `\gamma` gamma; * - an offset `\beta` beta */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:187,Performance,Perform,Perform,187,"// Empty struct for cuda architecture; //void * cudnnWorkspace = nullptr); // Remains nullptr for cuda architecture; /** @name Backward Propagation in Convolutional Layer; */; ///@{; /** Perform the complete backward propagation step in a Convolutional Layer.; * If the provided \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:272,Availability,Down,Downsample,272,"///@}; //____________________________________________________________________________; //; // Max Pooling Layer Propagation; //____________________________________________________________________________; /** @name Forward Propagation in Max Pooling Layer; */; ///@{; /** Downsample the matrix \p C to the matrix \p A, using max; * operation, such that the winning indices are stored in matrix; * \p B. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:75,Performance,Perform,Perform,75,"///@}; /** @name Backward Propagation in Max Pooling Layer; */; ///@{; /** Perform the complete backward propagation step in a Pooling Layer. Based on the; * winning indices stored in the index matrix, it just forwards the activation; * gradients to the previous layer. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:329,Integrability,interface,interface,329,///@}; //____________________________________________________________________________; //; // Additional Arithmetic Functions; //____________________________________________________________________________; /** @name Additional Arithmetic Functions; *; * Additional arithmetic on CUDA matrices used to implement the low-level; * interface.; */; ///@{; /** Standard multiplication of two matrices \p A and \p B with the result being; * written into C.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:70,Availability,error,errors,70,"/** Check two matrices for equality, taking floating point arithmetic errors into account. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:3,Performance,optimiz,optimizer,3,"// optimizer functions",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h:79,Energy Efficiency,efficient,efficient,79,"// copy from another architecture using the reference one; // this is not very efficient since creates temporary objects",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:599,Integrability,interface,interface,599,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 20/06/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////////; // Declaration of the TReference architecture, which provides a //; // reference implementation of the low-level interface for the DNN //; // implementation based on ROOT's TMatrixT matrix type. //; ///////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:186,Integrability,interface,interface,186,// struct TDescriptors {; // };; // struct TWorkspace {; // };; /*! The reference architecture class.; *; * Class template that contains the reference implementation of the low-level; * interface for the DNN implementation. The reference implementation uses the; * TMatrixT class template to represent matrices.; *; * \tparam AReal The floating point type used to represent scalars.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:153,Performance,Perform,Perform,153,"///@}; /** @name Backward Propagation; * Low-level functions required for the forward propagation of activations; * through the network.; */; ///@{; /** Perform the complete backward propagation step. If the provided; * \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:116,Deployability,update,update,116,/** Adds a the elements in matrix B scaled by c to the elements in; * the matrix A. This is required for the weight update in the gradient; * descent step.*/,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:20,Modifiability,extend,extended,20,/** Above functions extended to vectors */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:274,Integrability,interface,interface,274,"///@}; //____________________________________________________________________________; //; // Activation Functions; //____________________________________________________________________________; /** @name Activation Functions; * For each activation function, the low-level interface contains two routines.; * One that applies the activation function to a matrix and one that evaluate; * the derivatives of the activation function at the elements of a given matrix; * and writes the results into the result matrix.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:297,Integrability,rout,routines,297,"///@}; //____________________________________________________________________________; //; // Activation Functions; //____________________________________________________________________________; /** @name Activation Functions; * For each activation function, the low-level interface contains two routines.; * One that applies the activation function to a matrix and one that evaluate; * the derivatives of the activation function at the elements of a given matrix; * and writes the results into the result matrix.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:437,Integrability,rout,routing,437,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:346,Safety,predict,prediction,346,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:400,Safety,predict,prediction,400,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:324,Safety,predict,prediction,324,"///@}; //____________________________________________________________________________; //; // Output Functions; //____________________________________________________________________________; /** @name Output Functions; * Output functions transform the activations \p output of the; * output layer in the network to a valid prediction \p YHat for; * the desired usage of the network, e.g. the identity function; * for regression or the sigmoid transformation for two-class; * classification.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:280,Integrability,interface,interface,280,"///@}; //____________________________________________________________________________; //; // Initialization; //____________________________________________________________________________; /** @name Initialization; * For each initialization method, one function in the low-level interface; * is provided. The naming scheme is `Initialize<Type>` for a given; * initialization method Type.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:70,Performance,Perform,Perform,70,"/** @name Backward Propagation in Convolutional Layer; */; ///@{; /** Perform the complete backward propagation step in a Convolutional Layer.; * If the provided \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:265,Availability,Down,Downsample,265,"//____________________________________________________________________________; //; // Max Pooling Layer Propagation; //____________________________________________________________________________; /** @name Forward Propagation in Max Pooling Layer; */; ///@{; /** Downsample the matrix \p C to the matrix \p A, using max; * operation, such that the winning indices are stored in matrix; * \p B. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:75,Performance,Perform,Perform,75,"///@}; /** @name Backward Propagation in Max Pooling Layer; */; ///@{; /** Perform the complete backward propagation step in a Max Pooling Layer. Based on the; * winning indices stored in the index matrix, it just forwards the activation; * gradients to the previous layer. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:13,Deployability,update,update,13,"// optimizer update functions; /// Update functions for ADAM optimizer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:35,Deployability,Update,Update,35,"// optimizer update functions; /// Update functions for ADAM optimizer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:3,Performance,optimiz,optimizer,3,"// optimizer update functions; /// Update functions for ADAM optimizer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:61,Performance,optimiz,optimizer,61,"// optimizer update functions; /// Update functions for ADAM optimizer",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:77,Deployability,update,updated,77,"// Updating parameters after every backward pass. Weights and biases are; // updated.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h:82,Availability,mask,masked,82,"// Corrupt the input values randomly on corruption Level.; //Basically inputs are masked currently.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:546,Integrability,wrap,wrapping,546,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Joana Niermann 23/07/19; /*************************************************************************; * Copyright (C) 2019, Joana Niermann *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Definition of the TCudnn architecture class, which provides //; // a wrapping of the low-level functionality for neural networks //; // in the cuDNN library. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:51,Integrability,interface,interface,51,"/** The TCudnn architecture class.; *; * Low-level interface class for CUDA computing architectures using the cuDNN; * library as backend. Contains as public types the declaration of the scalar,; * matrix and buffer types for this architecture, as well as the remaining; * functions in the low-level interface in the form of static members.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:300,Integrability,interface,interface,300,"/** The TCudnn architecture class.; *; * Low-level interface class for CUDA computing architectures using the cuDNN; * library as backend. Contains as public types the declaration of the scalar,; * matrix and buffer types for this architecture, as well as the remaining; * functions in the low-level interface in the form of static members.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:137,Performance,optimiz,optimizers,137,"// create a weight tensor/matrix vector from another tensor/weight vector using the given tensor shapes; // this function is used by the optimizers to store intermediate weights representations",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:38,Modifiability,Layers,Layers,38,"/** @name Backward Propagation (Dense Layers); * Low-level functions required for the forward propagation of activations; * through the network.; */; ///@{; /** Perform the complete backward propagation step. If the provided; * \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:161,Performance,Perform,Perform,161,"/** @name Backward Propagation (Dense Layers); * Low-level functions required for the forward propagation of activations; * through the network.; */; ///@{; /** Perform the complete backward propagation step. If the provided; * \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:20,Modifiability,extend,extended,20,/** Above functions extended to vectors */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:267,Integrability,interface,interface,267,"//____________________________________________________________________________; //; // Activation Functions; //____________________________________________________________________________; /** @name Activation Functions; * For each activation function, the low-level interface contains two routines.; * One that applies the activation function to a matrix and one that evaluate; * the derivatives of the activation function at the elements of a given matrix; * and writes the results into the result matrix.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:290,Integrability,rout,routines,290,"//____________________________________________________________________________; //; // Activation Functions; //____________________________________________________________________________; /** @name Activation Functions; * For each activation function, the low-level interface contains two routines.; * One that applies the activation function to a matrix and one that evaluate; * the derivatives of the activation function at the elements of a given matrix; * and writes the results into the result matrix.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:437,Integrability,rout,routing,437,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:346,Safety,predict,prediction,346,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:400,Safety,predict,prediction,400,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:324,Safety,predict,prediction,324,"///@}; //____________________________________________________________________________; //; // Output Functions; //____________________________________________________________________________; /** @name Output Functions; * Output functions transform the activations \p output of the; * output layer in the network to a valid prediction \p YHat for; * the desired usage of the network, e.g. the identity function; * for regression or the sigmoid transformation for two-class; * classification.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:423,Modifiability,variab,variable,423,"///@}; //____________________________________________________________________________; //; // Batch Normalization; //____________________________________________________________________________; /** @name Batch Normalization Layer Propagation; */; ///@{; /** The input from each batch are normalized during training to have zero mean and unit variance; * and they are then scaled by two parameter, different for each input variable:; * - a scale factor \gamma gamma; * - an offset \beta beta */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:280,Integrability,interface,interface,280,"///@}; //____________________________________________________________________________; //; // Initialization; //____________________________________________________________________________; /** @name Initialization; * For each initialization method, one function in the low-level interface; * is provided. The naming scheme is <p>Initialize<Type></p> for a given; * initialization method Type.; */; ///@{",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:126,Performance,Perform,Perform,126,"// const AFloat alpha = 1,; // const AFloat beta = 1);; /** @name Backward Propagation in Convolutional Layer; */; ///@{; /** Perform the complete backward propagation step in a Convolutional Layer.; * If the provided \p activationGradientsBackward matrix is not empty, compute the; * gradients of the objective function with respect to the activations; * of the previous layer (backward direction).; * Also compute the weight and the bias gradients. Modifies the values; * in \p df and thus produces only a valid result, if it is applied the; * first time after the corresponding forward propagation has been per-; * formed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:272,Availability,Down,Downsample,272,"///@}; //____________________________________________________________________________; //; // Max Pooling Layer Propagation; //____________________________________________________________________________; /** @name Forward Propagation in Max Pooling Layer; */; ///@{; /** Downsample the matrix \p C to the matrix \p A, using max; * operation, such that the winning indices are stored in matrix; * \p B. No winning indices needed for cuDNN. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:75,Performance,Perform,Perform,75,"///@}; /** @name Backward Propagation in Max Pooling Layer; */; ///@{; /** Perform the complete backward propagation step in a Pooling Layer. Based on the; * input to and output from the MaxPoolLayer, the gradients for the winning pixels; * are computed. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:329,Integrability,interface,interface,329,///@}; //____________________________________________________________________________; //; // Additional Arithmetic Functions; //____________________________________________________________________________; /** @name Additional Arithmetic Functions; *; * Additional arithmetic on CUDA matrices used to implement the low-level; * interface.; */; /** In-place Hadamard (element-wise) product of matrices \p A and \p B; * with the result being written into \p A.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:70,Availability,error,errors,70,"/** Check two matrices for equality, taking floating point arithmetic errors into account. */; //static bool AlmostEquals(const Matrix_t &A, const Matrix_t &B, double epsilon = 0.1);; /** Add the constant \p beta to all the elements of matrix \p A and write the; * result into \p A.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:3,Performance,optimiz,optimizer,3,"// optimizer functions",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:21,Testability,assert,assert,21,"// should add static assert that A has not to be same type as B; // this copying tensors from different architectures",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:79,Energy Efficiency,efficient,efficient,79,"// copy from another architecture using the reference one; // this is not very efficient since creates temporary objects",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:60,Testability,assert,assert,60,"// this is for CNN weights that are in row-major formats; //assert(B.GetShape().size() == 4); // weights shape should be 4",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h:490,Integrability,interface,interface,490,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/08/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // CPU Buffer interface class for the generic data loader. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h:527,Performance,load,loader,527,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/08/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // CPU Buffer interface class for the generic data loader. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h:442,Performance,perform,performs,442,"/** TCpuBuffer; *; * Since the memory on the CPU is homogeneous, only one buffer class is required.; * The host and device buffer classes are the same and copying between the host; * and device buffer is achieved by simply swapping the memory pointers.; *; * Memory is handled as a shared pointer to a pointer of type AFloat, which is; * the floating point type used for the implementation.; *; * Copying and assignment of TCpuBuffer objects performs only a shallow copy; * meaning the underlying data is shared between those objects.; *; * \tparam AFloat The floating point type used for the computations.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h:216,Usability,simpl,simply,216,"/** TCpuBuffer; *; * Since the memory on the CPU is homogeneous, only one buffer class is required.; * The host and device buffer classes are the same and copying between the host; * and device buffer is achieved by simply swapping the memory pointers.; *; * Memory is handled as a shared pointer to a pointer of type AFloat, which is; * the floating point type used for the implementation.; *; * Copying and assignment of TCpuBuffer objects performs only a shallow copy; * meaning the underlying data is shared between those objects.; *; * \tparam AFloat The floating point type used for the computations.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h:54,Performance,perform,performed,54,"/** Copy data from another buffer. No real copying is performed, only the; * data pointers are swapped. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h:52,Performance,perform,performed,52,"/** Copy data to another buffer. No real copying is performed, only the; * data pointers are swapped. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h:160,Testability,Test,Test,160,"/*; * Debug(!) function for printing matrices.; *; * Prints the input expression `mat` using preprocessor directives (with; * `#mat`). E.g. `PrintMatrix(matA, ""Test"")` _could_ generate; * ""matA is null pointer"".; *; * Note: This is a preprocessor macro. It does _not_ respect namespaces.; *; * @param mat Matrix to print; * @param text Name of matrix; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h:49,Performance,multi-thread,multi-threaded,49,"/** The TCpuMatrix class.; *; * Matrix class for multi-threaded CPU architectures. Uses the TCpuBuffer; * class to store the matrices in column-major format for compatibility with; * BLAS. Provides Map and MapFrom member functions to simplify the application of; * activation functions and derivatives to matrices.; *; * Copying and assignment of TCpuMatrix objects only performs shallow copies, i.e.; * copying is fast and the resulting objects share the element data.; *; * \tparam AFloat The floating point type used to represent the matrix elements.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h:371,Performance,perform,performs,371,"/** The TCpuMatrix class.; *; * Matrix class for multi-threaded CPU architectures. Uses the TCpuBuffer; * class to store the matrices in column-major format for compatibility with; * BLAS. Provides Map and MapFrom member functions to simplify the application of; * activation functions and derivatives to matrices.; *; * Copying and assignment of TCpuMatrix objects only performs shallow copies, i.e.; * copying is fast and the resulting objects share the element data.; *; * \tparam AFloat The floating point type used to represent the matrix elements.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h:234,Usability,simpl,simplify,234,"/** The TCpuMatrix class.; *; * Matrix class for multi-threaded CPU architectures. Uses the TCpuBuffer; * class to store the matrices in column-major format for compatibility with; * BLAS. Provides Map and MapFrom member functions to simplify the application of; * activation functions and derivatives to matrices.; *; * Copying and assignment of TCpuMatrix objects only performs shallow copies, i.e.; * copying is fast and the resulting objects share the element data.; *; * \tparam AFloat The floating point type used to represent the matrix elements.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h:25,Energy Efficiency,allocate,allocate,25,/** Construct matrix and allocate space for its elements. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h:4,Usability,Clear,Clear,4,/** Clear content of the matrix and initialize to zero elements; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h:44,Performance,Perform,Performs,44,/** Convert to a TMatrixT<AFloat_t> object. Performs a deep copy of the matrix; * elements. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h:72,Modifiability,Config,Config,72,"// nElements should have at least 100; // const size_t nWorkers = TMVA::Config::Instance().GetNCpu();; // return (nElements > nWorkers) ? (int) nElements/nWorkers : 1;",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:39,Integrability,wrap,wrapper,39,"// CPU Tensor Class; // It is a simple wrapper for TMVA RTensor based on; // memory owned by CPU Buffer; // We need to keep a pointer for CPUBuffer for fast conversion; // without copying to TCpuMatrix; // also provides compatibility with old interface",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:243,Integrability,interface,interface,243,"// CPU Tensor Class; // It is a simple wrapper for TMVA RTensor based on; // memory owned by CPU Buffer; // We need to keep a pointer for CPUBuffer for fast conversion; // without copying to TCpuMatrix; // also provides compatibility with old interface",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:32,Usability,simpl,simple,32,"// CPU Tensor Class; // It is a simple wrapper for TMVA RTensor based on; // memory owned by CPU Buffer; // We need to keep a pointer for CPUBuffer for fast conversion; // without copying to TCpuMatrix; // also provides compatibility with old interface",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:53,Safety,unsafe,unsafe,53,"/** constructors from a TCpuBuffer and a shape */; //unsafe method for backwards compatibility, const not promised. A view.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:107,Safety,unsafe,unsafe,107,"/** constructors from a TCpuMatrix. Memory layout is forced to be same as matrix (i.e. columnlayout) */; //unsafe method for backwards compatibility, const not promised. A view of underlying data.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:44,Performance,Perform,Performs,44,/** Convert to a TMatrixT<AFloat_t> object. Performs a deep copy of the matrix; * elements. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:207,Testability,log,logic,207,"// return the size of the first dimension (if in row order) or last dimension if in column order; // Tensor is F x H x W x...for row order layout FHWC; // or H x W x ... x F for column order layout CHWF; // logic copied from TCudaTensor",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:18,Safety,unsafe,unsafe,18,"//this will be an unsafe view. Method exists for backwards compatibility only",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:3,Security,access,access,3,"// access single element - assume tensor dim is 2",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:3,Security,access,access,3,"// access single element - assume tensor dim is 3. First index i is always the major independent of row-major or; // column major row- major I - J - K . Column- major is J - K - I",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:3,Security,access,access,3,"// access single element - assume tensor dim is 2",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h:26,Integrability,Wrap,Wrapper,26,/** TCudaHostBuffer; *; * Wrapper class for pinned memory buffers on the host. Uses; * std::shared_pointer with custom destructor to ensure consistent; * memory management and allow for easy copying/moving of the; * buffers. Copying is asynchronous and will set the cudaStream of the; * device buffer so that subsequent computations on the device buffer; * can be performed on the same stream.; *; * \tparam AFloat The floating point type to be stored in the buffers.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h:364,Performance,perform,performed,364,/** TCudaHostBuffer; *; * Wrapper class for pinned memory buffers on the host. Uses; * std::shared_pointer with custom destructor to ensure consistent; * memory management and allow for easy copying/moving of the; * buffers. Copying is asynchronous and will set the cudaStream of the; * device buffer so that subsequent computations on the device buffer; * can be performed on the same stream.; *; * \tparam AFloat The floating point type to be stored in the buffers.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h:289,Integrability,synchroniz,synchronization,289,"/** TCudaDeviceBuffer; *; * Service class for on-device memory buffers. Uses; * std::shared_pointer with custom destructor to ensure consistent; * memory management and allow for easy copying/moving. A device; * buffer has an associated CUDA compute stream , which is used for; * implicit synchronization of data transfers.; *; * \tparam AFloat The floating point type to be stored in the buffers.; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:432,Integrability,synchroniz,synchronization,432,//____________________________________________________________________________; //; // Cuda Device Reference; //____________________________________________________________________________; /** TCudaDeviceReference; *; * Helper class emulating lvalue references for AFloat values that are; * physically on the device. Allows for example to assign to matrix elements.; * Note that device access through CudaDeviceReferences enforces synchronization; * with all streams and thus qualifies as performance killer. Only used for; * testing.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:490,Performance,perform,performance,490,//____________________________________________________________________________; //; // Cuda Device Reference; //____________________________________________________________________________; /** TCudaDeviceReference; *; * Helper class emulating lvalue references for AFloat values that are; * physically on the device. Allows for example to assign to matrix elements.; * Note that device access through CudaDeviceReferences enforces synchronization; * with all streams and thus qualifies as performance killer. Only used for; * testing.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:387,Security,access,access,387,//____________________________________________________________________________; //; // Cuda Device Reference; //____________________________________________________________________________; /** TCudaDeviceReference; *; * Helper class emulating lvalue references for AFloat values that are; * physically on the device. Allows for example to assign to matrix elements.; * Note that device access through CudaDeviceReferences enforces synchronization; * with all streams and thus qualifies as performance killer. Only used for; * testing.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:527,Testability,test,testing,527,//____________________________________________________________________________; //; // Cuda Device Reference; //____________________________________________________________________________; /** TCudaDeviceReference; *; * Helper class emulating lvalue references for AFloat values that are; * physically on the device. Allows for example to assign to matrix elements.; * Note that device access through CudaDeviceReferences enforces synchronization; * with all streams and thus qualifies as performance killer. Only used for; * testing.; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:557,Energy Efficiency,allocate,allocated,557,"//____________________________________________________________________________; //; // Cuda Matrix; //____________________________________________________________________________; /** TCudaMatrix Class; *; * The TCudaMatrix class represents matrices on a CUDA device. The elements; * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; * the allocation and freeing of the device memory. TCudaMatrices are lightweight; * object, that means on assignment and copy creation only a shallow copy is; * performed and no new element buffer allocated. To perform a deep copy use; * the static Copy method of the TCuda architecture class.; *; * The TCudaDeviceBuffer has an associated cuda stream, on which the data is; * transferred to the device. This stream can be accessed through the; * GetComputeStream member function and used to synchronize computations.; *; * The TCudaMatrix class also holds static references to CUDA resources.; * Those are the cublas handle, a buffer of curand states for the generation; * of random numbers as well as a vector containing ones, which is used for; * summing column matrices using matrix-vector multiplication. The class also; * has a static buffer for returning results from the device.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:852,Integrability,synchroniz,synchronize,852,"//____________________________________________________________________________; //; // Cuda Matrix; //____________________________________________________________________________; /** TCudaMatrix Class; *; * The TCudaMatrix class represents matrices on a CUDA device. The elements; * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; * the allocation and freeing of the device memory. TCudaMatrices are lightweight; * object, that means on assignment and copy creation only a shallow copy is; * performed and no new element buffer allocated. To perform a deep copy use; * the static Copy method of the TCuda architecture class.; *; * The TCudaDeviceBuffer has an associated cuda stream, on which the data is; * transferred to the device. This stream can be accessed through the; * GetComputeStream member function and used to synchronize computations.; *; * The TCudaMatrix class also holds static references to CUDA resources.; * Those are the cublas handle, a buffer of curand states for the generation; * of random numbers as well as a vector containing ones, which is used for; * summing column matrices using matrix-vector multiplication. The class also; * has a static buffer for returning results from the device.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:521,Performance,perform,performed,521,"//____________________________________________________________________________; //; // Cuda Matrix; //____________________________________________________________________________; /** TCudaMatrix Class; *; * The TCudaMatrix class represents matrices on a CUDA device. The elements; * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; * the allocation and freeing of the device memory. TCudaMatrices are lightweight; * object, that means on assignment and copy creation only a shallow copy is; * performed and no new element buffer allocated. To perform a deep copy use; * the static Copy method of the TCuda architecture class.; *; * The TCudaDeviceBuffer has an associated cuda stream, on which the data is; * transferred to the device. This stream can be accessed through the; * GetComputeStream member function and used to synchronize computations.; *; * The TCudaMatrix class also holds static references to CUDA resources.; * Those are the cublas handle, a buffer of curand states for the generation; * of random numbers as well as a vector containing ones, which is used for; * summing column matrices using matrix-vector multiplication. The class also; * has a static buffer for returning results from the device.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:571,Performance,perform,perform,571,"//____________________________________________________________________________; //; // Cuda Matrix; //____________________________________________________________________________; /** TCudaMatrix Class; *; * The TCudaMatrix class represents matrices on a CUDA device. The elements; * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; * the allocation and freeing of the device memory. TCudaMatrices are lightweight; * object, that means on assignment and copy creation only a shallow copy is; * performed and no new element buffer allocated. To perform a deep copy use; * the static Copy method of the TCuda architecture class.; *; * The TCudaDeviceBuffer has an associated cuda stream, on which the data is; * transferred to the device. This stream can be accessed through the; * GetComputeStream member function and used to synchronize computations.; *; * The TCudaMatrix class also holds static references to CUDA resources.; * Those are the cublas handle, a buffer of curand states for the generation; * of random numbers as well as a vector containing ones, which is used for; * summing column matrices using matrix-vector multiplication. The class also; * has a static buffer for returning results from the device.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:783,Security,access,accessed,783,"//____________________________________________________________________________; //; // Cuda Matrix; //____________________________________________________________________________; /** TCudaMatrix Class; *; * The TCudaMatrix class represents matrices on a CUDA device. The elements; * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; * the allocation and freeing of the device memory. TCudaMatrices are lightweight; * object, that means on assignment and copy creation only a shallow copy is; * performed and no new element buffer allocated. To perform a deep copy use; * the static Copy method of the TCuda architecture class.; *; * The TCudaDeviceBuffer has an associated cuda stream, on which the data is; * transferred to the device. This stream can be accessed through the; * GetComputeStream member function and used to synchronize computations.; *; * The TCudaMatrix class also holds static references to CUDA resources.; * Those are the cublas handle, a buffer of curand states for the generation; * of random numbers as well as a vector containing ones, which is used for; * summing column matrices using matrix-vector multiplication. The class also; * has a static buffer for returning results from the device.; *; */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:41,Performance,Perform,Performs,41,/** Convert cuda matrix to Root TMatrix. Performs synchronous data transfer. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:13,Integrability,synchroniz,synchronization,13,"/** Blocking synchronization with the associated compute stream, if it's; * not the default stream. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:142,Integrability,synchroniz,synchronization,142,/** Access to elements of device matrices provided through TCudaDeviceReference; * class. Note that access is synchronous end enforces device synchronization; * on all streams. Only used for testing. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:4,Security,Access,Access,4,/** Access to elements of device matrices provided through TCudaDeviceReference; * class. Note that access is synchronous end enforces device synchronization; * on all streams. Only used for testing. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:100,Security,access,access,100,/** Access to elements of device matrices provided through TCudaDeviceReference; * class. Note that access is synchronous end enforces device synchronization; * on all streams. Only used for testing. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:191,Testability,test,testing,191,/** Access to elements of device matrices provided through TCudaDeviceReference; * class. Note that access is synchronous end enforces device synchronization; * on all streams. Only used for testing. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:108,Energy Efficiency,allocate,allocated,108,/** Initializes all shared devices resource and makes sure that a sufficient; * number of curand states are allocated on the device and initialized as; * well as that the one-vector for the summation over columns has the right; * size. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h:230,Modifiability,extend,extends,230,//____________________________________________________________________________; //; // Cuda Tensor; //____________________________________________________________________________; /** TCudaTensor Class; *; * The TCudaTensor class extends the TCudaMatrix class for dimensions > 2.; *; */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h:41,Performance,Perform,Performs,41,/** Convert cuda matrix to Root TMatrix. Performs synchronous data transfer. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h:2,Testability,assert,assert,2,"//assert(GetLayout() == MemoryLayout::ColumnMajor );",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h:11,Security,access,access,11,"// element access ( for debugging)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h:11,Security,access,access,11,"// element access ( for debugging)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h:19,Testability,assert,assert,19,"// for row wise; //assert(GetLayout() == MemoryLayout::RowMajor);",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h:108,Energy Efficiency,allocate,allocated,108,/** Initializes all shared devices resource and makes sure that a sufficient; * number of curand states are allocated on the device and initialized as; * well as that the one-vector for the summation over columns has the right; * size. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h:538,Energy Efficiency,adapt,adapt,538,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 06/06/17; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Partial specialization of the TDataLoader class to adapt it to //; // the TMatrix class. Also the data transfer is kept simple, since //; // this implementation (being intended as reference and fallback //; // is not optimized for performance. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h:538,Modifiability,adapt,adapt,538,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 06/06/17; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Partial specialization of the TDataLoader class to adapt it to //; // the TMatrix class. Also the data transfer is kept simple, since //; // this implementation (being intended as reference and fallback //; // is not optimized for performance. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h:704,Performance,optimiz,optimized,704,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 06/06/17; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Partial specialization of the TDataLoader class to adapt it to //; // the TMatrix class. Also the data transfer is kept simple, since //; // this implementation (being intended as reference and fallback //; // is not optimized for performance. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h:718,Performance,perform,performance,718,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 06/06/17; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Partial specialization of the TDataLoader class to adapt it to //; // the TMatrix class. Also the data transfer is kept simple, since //; // this implementation (being intended as reference and fallback //; // is not optimized for performance. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h:607,Usability,simpl,simple,607,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 06/06/17; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Partial specialization of the TDataLoader class to adapt it to //; // the TMatrix class. Also the data transfer is kept simple, since //; // this implementation (being intended as reference and fallback //; // is not optimized for performance. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h:151,Integrability,rout,routine,151,"/** Shuffle the order of the samples in the batch. The shuffling is indirect,; * i.e. only the indices are shuffled. No input data is moved by this; * routine. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; //////////////////////////////////////////////////////////////////////////; // Partial specialization of the TTensorDataLoader class to adapt //; // it to the TMatrix class. Also the data transfer is kept simple, //; // since this implementation (being intended as reference and fallback) //; // is not optimized for performance. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h:1003,Energy Efficiency,adapt,adapt,1003,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; //////////////////////////////////////////////////////////////////////////; // Partial specialization of the TTensorDataLoader class to adapt //; // it to the TMatrix class. Also the data transfer is kept simple, //; // since this implementation (being intended as reference and fallback) //; // is not optimized for performance. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; //////////////////////////////////////////////////////////////////////////; // Partial specialization of the TTensorDataLoader class to adapt //; // it to the TMatrix class. Also the data transfer is kept simple, //; // since this implementation (being intended as reference and fallback) //; // is not optimized for performance. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h:1003,Modifiability,adapt,adapt,1003,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; //////////////////////////////////////////////////////////////////////////; // Partial specialization of the TTensorDataLoader class to adapt //; // it to the TMatrix class. Also the data transfer is kept simple, //; // since this implementation (being intended as reference and fallback) //; // is not optimized for performance. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h:339,Performance,Load,Loader,339,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; //////////////////////////////////////////////////////////////////////////; // Partial specialization of the TTensorDataLoader class to adapt //; // it to the TMatrix class. Also the data transfer is kept simple, //; // since this implementation (being intended as reference and fallback) //; // is not optimized for performance. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h:1170,Performance,optimiz,optimized,1170,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; //////////////////////////////////////////////////////////////////////////; // Partial specialization of the TTensorDataLoader class to adapt //; // it to the TMatrix class. Also the data transfer is kept simple, //; // since this implementation (being intended as reference and fallback) //; // is not optimized for performance. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h:1184,Performance,perform,performance,1184,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; //////////////////////////////////////////////////////////////////////////; // Partial specialization of the TTensorDataLoader class to adapt //; // it to the TMatrix class. Also the data transfer is kept simple, //; // since this implementation (being intended as reference and fallback) //; // is not optimized for performance. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h:1072,Usability,simpl,simple,1072,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; //////////////////////////////////////////////////////////////////////////; // Partial specialization of the TTensorDataLoader class to adapt //; // it to the TMatrix class. Also the data transfer is kept simple, //; // since this implementation (being intended as reference and fallback) //; // is not optimized for performance. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h:29,Performance,load,loaded,29,"///< The data that should be loaded in the batches.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h:151,Integrability,rout,routine,151,"/** Shuffle the order of the samples in the batch. The shuffling is indirect,; * i.e. only the indices are shuffled. No input data is moved by this; * routine. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ContextHandles.h:45,Modifiability,layers,layers,45,"///< Used to define possible helpers for the layers (e.g. activations)",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/ContextHandles.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ContextHandles.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TConvLayer *; * *; * *; * Description: *; * Convolutional Deep Neural Network Layer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TConvLayer *; * *; * *; * Description: *; * Convolutional Deep Neural Network Layer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h:24,Modifiability,layers,layers,24,"///< The number of zero layers added top and bottom of the input.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h:24,Modifiability,layers,layers,24,"///< The number of zero layers left and right of the input.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h:24,Modifiability,layers,layers,24,"///< The number of zero layers added top and bottom of the input.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h:24,Modifiability,layers,layers,24,"///< The number of zero layers left and right of the input.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h:5,Performance,Cache,Cache,5,"///< Cache tensor used for speeding-up the forward pass.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h:38,Testability,test,testing,38,"// The following getters are used for testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMaxPoolLayer *; * *; * *; * Description: *; * Max Pool Deep Neural Network Layer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMaxPoolLayer *; * *; * *; * Description: *; * Max Pool Deep Neural Network Layer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h:137,Modifiability,inherit,inherits,137,"/** \class TMaxPoolLayer. Generic Max Pooling Layer class. This generic Max Pooling Layer Class represents a pooling layer of; a CNN. It inherits all of the properties of the convolutional layer; TConvLayer, but it overrides the propagation methods. In a sense, max pooling; can be seen as non-linear convolution: a filter slides over the input and produces; one element as a function of the elements within the receptive field.; In addition to that, it contains a matrix of winning units. The height and width of the weights and biases is set to 0, since this; layer does not contain any weights. */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h:220,Availability,down,downsamples,220,// virtual void Initialize();; /*! Computes activation of the layer for the given input. The input; * must be in 3D tensor form with the different matrices corresponding to; * different events in the batch. It spatially downsamples the input; * matrices. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h:4,Integrability,Depend,Depending,4,"/*! Depending on the winning units determined during the Forward pass,; * it only forwards the derivatives to the right units in the previous; * layer. Must only be called directly at the corresponding call; * to Forward(...). */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h:38,Testability,test,testing,38,"// The following getters are used for testing",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:183,Deployability,integrat,integrated,183,"// @(#)root/tmva/tmva/dnn/gru:$Id$; // Author: Surya S Dwivedi 03/07/19; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BasicGRULayer *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Surya S Dwivedi <surya2191997@gmail.com> - IIT Kharagpur, India *; * *; * Copyright (c) 2005-2019: *; * All rights reserved. *; * CERN, Switzerland *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; **********************************************************************************/; //#pragma once; //////////////////////////////////////////////////////////////////////; // This class implements the GRU layer. GRU is a variant of vanilla; // RNN which is capable of learning long range dependencies.; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:183,Integrability,integrat,integrated,183,"// @(#)root/tmva/tmva/dnn/gru:$Id$; // Author: Surya S Dwivedi 03/07/19; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BasicGRULayer *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Surya S Dwivedi <surya2191997@gmail.com> - IIT Kharagpur, India *; * *; * Copyright (c) 2005-2019: *; * All rights reserved. *; * CERN, Switzerland *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; **********************************************************************************/; //#pragma once; //////////////////////////////////////////////////////////////////////; // This class implements the GRU layer. GRU is a variant of vanilla; // RNN which is capable of learning long range dependencies.; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:919,Integrability,depend,dependencies,919,"// @(#)root/tmva/tmva/dnn/gru:$Id$; // Author: Surya S Dwivedi 03/07/19; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BasicGRULayer *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Surya S Dwivedi <surya2191997@gmail.com> - IIT Kharagpur, India *; * *; * Copyright (c) 2005-2019: *; * All rights reserved. *; * CERN, Switzerland *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; **********************************************************************************/; //#pragma once; //////////////////////////////////////////////////////////////////////; // This class implements the GRU layer. GRU is a variant of vanilla; // RNN which is capable of learning long range dependencies.; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:899,Usability,learn,learning,899,"// @(#)root/tmva/tmva/dnn/gru:$Id$; // Author: Surya S Dwivedi 03/07/19; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BasicGRULayer *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Surya S Dwivedi <surya2191997@gmail.com> - IIT Kharagpur, India *; * *; * Copyright (c) 2005-2019: *; * All rights reserved. *; * CERN, Switzerland *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; **********************************************************************************/; //#pragma once; //////////////////////////////////////////////////////////////////////; // This class implements the GRU layer. GRU is a variant of vanilla; // RNN which is capable of learning long range dependencies.; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:5,Deployability,Update,Update,5,"///< Update Gate weights for input, fWeights[2]",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:5,Deployability,Update,Update,5,"///< Update Gate weights for prev state, fWeights[3]",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:5,Deployability,Update,Update,5,"///< Update Gate bias",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:5,Deployability,Update,Update,5,"///< Update gate value for every time step",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:43,Deployability,update,update,43,"///< First fDerivatives of the activations update gate",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:25,Deployability,update,update,25,"///< Gradients w.r.t the update gate - input weights",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:25,Deployability,update,update,25,"///< Gradients w.r.t the update gate - hidden state weights",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:25,Deployability,update,update,25,"///< Gradients w.r.t the update gate - bias weights",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:5,Performance,cache,cached,5,"///< cached input tensor as T x B x I",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:5,Performance,cache,cached,5,"///< cached output tensor as T x B x S",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:5,Performance,cache,cached,5,"///< cached gradient on the input (output of backward) as T x B x I",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:5,Performance,cache,cached,5,"///< cached activation gradient (input of backward) as T x B x S",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:23,Availability,error,error,23,/*! Backpropagates the error. Must only be called directly at the corresponding; * call to Forward(...). */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:3,Deployability,Update,Updates,3,"/* Updates weights and biases, given the learning rate */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:41,Usability,learn,learning,41,"/* Updates weights and biases, given the learning rate */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:29,Deployability,update,update,29,/*! Decides the values we'll update (NN with Sigmoid) */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:13,Deployability,update,update,13,/*! Computes update gate values according to equation:; * forget = act(W_input . input + W_state . state + bias); * activation function: sigmoid. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:30,Deployability,update,updateGateValues,30,"// this will reuse content of updateGateValues",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:3,Deployability,Update,Update,3,"// Update state",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h:3,Deployability,Update,Update,3,"// Update Gate.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/GRULayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:184,Deployability,integrat,integrated,184,"// @(#)root/tmva/tmva/dnn/lstm:$Id$; // Author: Surya S Dwivedi 27/05/19; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BasicLSTMLayer *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Surya S Dwivedi <surya2191997@gmail.com> - IIT Kharagpur, India *; * *; * Copyright (c) 2005-2019: *; * All rights reserved. *; * CERN, Switzerland *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; **********************************************************************************/; //#pragma once; //////////////////////////////////////////////////////////////////////; // This class implements the LSTM layer. LSTM is a variant of vanilla; // RNN which is capable of learning long range dependencies.; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:184,Integrability,integrat,integrated,184,"// @(#)root/tmva/tmva/dnn/lstm:$Id$; // Author: Surya S Dwivedi 27/05/19; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BasicLSTMLayer *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Surya S Dwivedi <surya2191997@gmail.com> - IIT Kharagpur, India *; * *; * Copyright (c) 2005-2019: *; * All rights reserved. *; * CERN, Switzerland *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; **********************************************************************************/; //#pragma once; //////////////////////////////////////////////////////////////////////; // This class implements the LSTM layer. LSTM is a variant of vanilla; // RNN which is capable of learning long range dependencies.; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:923,Integrability,depend,dependencies,923,"// @(#)root/tmva/tmva/dnn/lstm:$Id$; // Author: Surya S Dwivedi 27/05/19; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BasicLSTMLayer *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Surya S Dwivedi <surya2191997@gmail.com> - IIT Kharagpur, India *; * *; * Copyright (c) 2005-2019: *; * All rights reserved. *; * CERN, Switzerland *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; **********************************************************************************/; //#pragma once; //////////////////////////////////////////////////////////////////////; // This class implements the LSTM layer. LSTM is a variant of vanilla; // RNN which is capable of learning long range dependencies.; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:903,Usability,learn,learning,903,"// @(#)root/tmva/tmva/dnn/lstm:$Id$; // Author: Surya S Dwivedi 27/05/19; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BasicLSTMLayer *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Surya S Dwivedi <surya2191997@gmail.com> - IIT Kharagpur, India *; * *; * Copyright (c) 2005-2019: *; * All rights reserved. *; * CERN, Switzerland *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; **********************************************************************************/; //#pragma once; //////////////////////////////////////////////////////////////////////; // This class implements the LSTM layer. LSTM is a variant of vanilla; // RNN which is capable of learning long range dependencies.; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:5,Performance,cache,cached,5,"///< cached input tensor as T x B x I",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:5,Performance,cache,cached,5,"///< cached output tensor as T x B x S",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:5,Performance,cache,cached,5,"///< cached gradient on the input (output of backward) as T x B x I",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:5,Performance,cache,cached,5,"///< cached activation gradient (input of backward) as T x B x S",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:23,Availability,error,error,23,/*! Backpropagates the error. Must only be called directly at the corresponding; * call to Forward(...). */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:3,Deployability,Update,Updates,3,"/* Updates weights and biases, given the learning rate */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:41,Usability,learn,learning,41,"/* Updates weights and biases, given the learning rate */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:29,Deployability,update,update,29,/*! Decides the values we'll update (NN with Sigmoid) */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:3,Deployability,Update,Update,3,"// Update cell state.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:3,Deployability,Update,Update,3,"// Update hidden state.",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h:146,Deployability,update,update,146,/*! The Hadamard product of output_gate_value . tanh(cell_state); * will be copied to next hidden state (passed to next LSTM cell); * and we will update our outputGateValues also. */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/LSTMLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h:182,Deployability,integrat,integrated,182,"// @(#)root/tmva/tmva/dnn/rnn:$Id$; // Author: Saurav Shekhar 19/07/17; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BasicRNNLayer *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Saurav Shekhar <sauravshekhar01@gmail.com> - ETH Zurich, Switzerland *; * *; * Copyright (c) 2005-2015: *; * All rights reserved. *; * CERN, Switzerland *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; **********************************************************************************/; //#pragma once; //////////////////////////////////////////////////////////////////////; // <Description> //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h:182,Integrability,integrat,integrated,182,"// @(#)root/tmva/tmva/dnn/rnn:$Id$; // Author: Saurav Shekhar 19/07/17; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BasicRNNLayer *; * *; * Description: *; * NeuralNetwork *; * *; * Authors (alphabetical): *; * Saurav Shekhar <sauravshekhar01@gmail.com> - ETH Zurich, Switzerland *; * *; * Copyright (c) 2005-2015: *; * All rights reserved. *; * CERN, Switzerland *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; **********************************************************************************/; //#pragma once; //////////////////////////////////////////////////////////////////////; // <Description> //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h:5,Performance,cache,cached,5,"///< cached input tensor as T x B x I",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h:5,Performance,cache,cached,5,"///< cached output tensor as T x B x S",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h:5,Performance,cache,cached,5,"///< cached gradient on the input (output of backward) as T x B x I",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h:5,Performance,cache,cached,5,"///< cached activation gradient (input of backward) as T x B x S",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h:23,Availability,error,error,23,/*! Backpropagates the error. Must only be called directly at the corresponding; * call to Forward(...). */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h:3,Deployability,Update,Updates,3,"/* Updates weights and biases, given the learning rate */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h:41,Usability,learn,learning,41,"/* Updates weights and biases, given the learning rate */",MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h:42,Deployability,Release,ReleaseDescriptors,42,// void InitializeDescriptors();; // void ReleaseDescriptors();; // void InitializeWorkspace();; // void FreeWorkspace();; /** Getters */,MatchSource.CODE_COMMENT,tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/RNN/RNNLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BDTEventWrapper.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BDTEventWrapper *; * *; * *; * Description: *; * *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/BDTEventWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BDTEventWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BDTEventWrapper.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BDTEventWrapper *; * *; * *; * Description: *; * *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/BDTEventWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BDTEventWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BinarySearchTree *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::BinarySearchTree; \ingroup TMVA. A simple Binary search tree including a volume search method. */",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BinarySearchTree *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::BinarySearchTree; \ingroup TMVA. A simple Binary search tree including a volume search method. */",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:1117,Usability,simpl,simple,1117,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : BinarySearchTree *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::BinarySearchTree; \ingroup TMVA. A simple Binary search tree including a volume search method. */",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:3,Safety,sanity check,sanity check,3,"// sanity check:",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:155,Modifiability,variab,variables,155,"////////////////////////////////////////////////////////////////////////////////; /// create the search tree from the event collection; /// using ONLY the variables specified in ""theVars""",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:155,Modifiability,variab,variables,155,"////////////////////////////////////////////////////////////////////////////////; /// create the search tree from the events in a TTree; /// using ALL the variables specified included in the Event",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:123,Energy Efficiency,reduce,reduce,123,"////////////////////////////////////////////////////////////////////////////////; /// normalises the binary-search tree to reduce the branch length and hence speed up the; /// search procedure (on average).",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:86,Usability,clear,clear,86,"////////////////////////////////////////////////////////////////////////////////; /// clear nodes",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:86,Testability,test,test,86,"////////////////////////////////////////////////////////////////////////////////; /// test if the data points are in the given volume",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:133,Modifiability,variab,variable,133,"////////////////////////////////////////////////////////////////////////////////; /// calculate basic statistics (mean, rms for each variable)",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTreeNode.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Classes: Node *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * CopyRight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::BinarySearchTreeNode; \ingroup TMVA. Node for the BinarySearch or Decision Trees. for the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. in case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node, including; the respective cut value.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTreeNode.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Classes: Node *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * CopyRight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::BinarySearchTreeNode; \ingroup TMVA. Node for the BinarySearch or Decision Trees. for the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. in case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node, including; the respective cut value.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTreeNode.cxx:1260,Modifiability,variab,variable,1260,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Classes: Node *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * CopyRight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::BinarySearchTreeNode; \ingroup TMVA. Node for the BinarySearch or Decision Trees. for the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. in case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node, including; the respective cut value.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/BinarySearchTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinaryTree.cxx:218,Deployability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::BinaryTree *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::BinaryTree; \ingroup TMVA. Base class for BinarySearch and Decision Trees. */",MatchSource.CODE_COMMENT,tmva/tmva/src/BinaryTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinaryTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinaryTree.cxx:218,Integrability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::BinaryTree *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::BinaryTree; \ingroup TMVA. Base class for BinarySearch and Decision Trees. */",MatchSource.CODE_COMMENT,tmva/tmva/src/BinaryTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinaryTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinaryTree.cxx:158,Integrability,depend,depends,158,"////////////////////////////////////////////////////////////////////////////////; /// Read the binary tree from an input stream.; /// The input stream format depends on the tree type,; /// it is defined be the node of the tree",MatchSource.CODE_COMMENT,tmva/tmva/src/BinaryTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinaryTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCPruner *; * *; * *; * Description: Cost Complexity Pruning *; *; * Author: Doug Schouten (dschoute@sfu.ca); *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/CCPruner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCPruner *; * *; * *; * Description: Cost Complexity Pruning *; *; * Author: Doug Schouten (dschoute@sfu.ca); *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/CCPruner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx:1155,Security,validat,validation,1155,"/*! \class TMVA::CCPruner; \ingroup TMVA; A helper class to prune a decision tree using the Cost Complexity method; (see Classification and Regression Trees by Leo Breiman et al). ### Some definitions:. - \f$ T_{max} \f$ - the initial, usually highly overtrained tree, that is to be pruned back; - \f$ R(T) \f$ - quality index (Gini, misclassification rate, or other) of a tree \f$ T \f$; - \f$ \sim T \f$ - set of terminal nodes in \f$ T \f$; - \f$ T' \f$ - the pruned subtree of \f$ T_max \f$ that has the best quality index \f$ R(T') \f$; - \f$ \alpha \f$ - the prune strength parameter in Cost Complexity pruning \f$ (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \f$. There are two running modes in CCPruner: (i) one may select a prune strength and prune back; the tree \f$ T_{max}\f$ until the criterion:; \f[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \f]. is true for all nodes t in \f$ T \f$, or (ii) the algorithm finds the sequence of critical points; \f$ \alpha_k < \alpha_{k+1} ... < \alpha_K \f$ such that \f$ T_K = root(T_{max}) \f$ and then selects the optimally-pruned; subtree, defined to be the subtree with the best quality index for the validation sample.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/CCPruner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx:66,Integrability,wrap,wrapper,66,"// keep pruning the tree until reach the limit fAlpha; // build a wrapper tree to perform work on",MatchSource.CODE_COMMENT,tmva/tmva/src/CCPruner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx:82,Performance,perform,perform,82,"// keep pruning the tree until reach the limit fAlpha; // build a wrapper tree to perform work on",MatchSource.CODE_COMMENT,tmva/tmva/src/CCPruner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCTreeWrapper *; * *; * *; * Description: a light wrapper of a decision tree, used to perform cost *; * complexity pruning ""in-place"" Cost Complexity Pruning *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CCTreeWrapper; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/CCTreeWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCTreeWrapper *; * *; * *; * Description: a light wrapper of a decision tree, used to perform cost *; * complexity pruning ""in-place"" Cost Complexity Pruning *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CCTreeWrapper; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/CCTreeWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx:242,Integrability,wrap,wrapper,242,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCTreeWrapper *; * *; * *; * Description: a light wrapper of a decision tree, used to perform cost *; * complexity pruning ""in-place"" Cost Complexity Pruning *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CCTreeWrapper; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/CCTreeWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx:278,Performance,perform,perform,278,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCTreeWrapper *; * *; * *; * Description: a light wrapper of a decision tree, used to perform cost *; * complexity pruning ""in-place"" Cost Complexity Pruning *; * *; * Author: Doug Schouten (dschoute@sfu.ca) *; * *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CCTreeWrapper; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/CCTreeWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx:143,Security,validat,validation,143,"////////////////////////////////////////////////////////////////////////////////; /// return the misclassification rate of a pruned tree for a validation event sample; /// using an EventList",MatchSource.CODE_COMMENT,tmva/tmva/src/CCTreeWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx:143,Security,validat,validation,143,"////////////////////////////////////////////////////////////////////////////////; /// return the misclassification rate of a pruned tree for a validation event sample; /// using the DataSet",MatchSource.CODE_COMMENT,tmva/tmva/src/CCTreeWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx:3,Testability,test,test,3,"// test the tree quality.. in terms of Misclassification",MatchSource.CODE_COMMENT,tmva/tmva/src/CCTreeWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:196,Testability,test,test,196,"//_______________________________________________________________________; /**; * Method to get ROC-Integral value from mvas.; * \param iClass category, default 0 then signal; * \param type train/test tree, default test.; * \return Double_t with the ROC-Integral value.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:215,Testability,test,test,215,"//_______________________________________________________________________; /**; * Method to get ROC-Integral value from mvas.; * \param iClass category, default 0 then signal; * \param type train/test tree, default test.; * \return Double_t with the ROC-Integral value.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:189,Testability,test,test,189,"//_______________________________________________________________________; /**; * Method to get TMVA::ROCCurve Object.; * \param iClass category, default 0 then signal; * \param type train/test tree, default test.; * \return TMVA::ROCCurve object.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:208,Testability,test,test,208,"//_______________________________________________________________________; /**; * Method to get TMVA::ROCCurve Object.; * \param iClass category, default 0 then signal; * \param type train/test tree, default test.; * \return TMVA::ROCCurve object.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:129,Performance,load,loader,129,"//_______________________________________________________________________; /**; * Method to print the results in stdout.; * data loader name, method name/tittle and ROC-integ.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:200,Testability,test,test,200,"//_______________________________________________________________________; /**; * Method to get TGraph object with the ROC curve.; * \param iClass category, default 0 then signal; * \param type train/test tree, default test.; * \return TGraph object.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:219,Testability,test,test,219,"//_______________________________________________________________________; /**; * Method to get TGraph object with the ROC curve.; * \param iClass category, default 0 then signal; * \param type train/test tree, default test.; * \return TGraph object.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:195,Testability,test,test,195,//_______________________________________________________________________; /**; * Contructor to create a two class classifier.; * \param dataloader TMVA::DataLoader object with the data to train/test.; * \param file TFile object to save the results; * \param options string extra options.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:215,Testability,test,test,215,//_______________________________________________________________________; /**; * Contructor to create a two class classifier without output file.; * \param dataloader TMVA::DataLoader object with the data to train/test.; * \param options string extra options.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:8,Modifiability,config,configurable,8,"// init configurable",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:92,Performance,perform,perform,92,//_______________________________________________________________________; /**; * Method to perform Train/Test over all ml method booked.; * If the option Jobs > 1 can do it in parallel with MultiProc.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:106,Testability,Test,Test,106,//_______________________________________________________________________; /**; * Method to perform Train/Test over all ml method booked.; * If the option Jobs > 1 can do it in parallel with MultiProc.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:31,Performance,perform,performed,31,"// check-for-unused-options is performed; may be overridden by derived classes",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:82,Performance,Perform,Perform,82,//_______________________________________________________________________; /**; * Perform test evaluation in all booked methods.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:90,Testability,test,test,90,//_______________________________________________________________________; /**; * Perform test evaluation in all booked methods.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:87,Performance,perform,perform,87,//_______________________________________________________________________; /**; * Lets perform test an specific ml method.; * \param methodname name of the method.; * \param methodtitle method title.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:95,Testability,test,test,95,//_______________________________________________________________________; /**; * Lets perform test an specific ml method.; * \param methodname name of the method.; * \param methodtitle method title.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:313,Modifiability,variab,variables,313,"// -----------------------------------------------------------------------; // First part of evaluation process; // --> compute efficiencies, and other separation estimators; // -----------------------------------------------------------------------; // although equal, we now want to separate the output for the variables; // and the real methods",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:35,Modifiability,Variab,Variable,35,"// will be 0 for a Method; 1 for a Variable",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:15,Modifiability,Variab,Variable,15,"// 0 Method; 1 Variable",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:3,Performance,perform,perform,3,"// perform the evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:16,Modifiability,variab,variables,16,"// now sort the variables according to the best 'eff at Beff=0.10'",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:196,Modifiability,variab,variables,196,"// -----------------------------------------------------------------------; // Second part of evaluation process; // --> compute correlations among MVAs; // --> compute correlations between input variables and MVA (determines importance); // --> count overlaps; // -----------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:25,Testability,test,test,25,"// init...; // loop over test tree",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:11,Modifiability,variab,variables,11,"// extract variables - to MVA matrix",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:59,Testability,test,test,59,"// give notice that cut method has been excluded from this test",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:9,Testability,test,test,9,"// write test/training trees",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:87,Performance,perform,perform,87,//_______________________________________________________________________; /**; * Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA.; * \param method TMVA::Types::EMVA type.; * \param methodtitle method title.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:95,Testability,test,test,95,//_______________________________________________________________________; /**; * Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA.; * \param method TMVA::Types::EMVA type.; * \param methodtitle method title.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:230,Testability,test,test,230,"//_______________________________________________________________________; /**; * Method to get TMVA::ROCCurve Object.; * \param method TMVA::MethodBase object; * \param iClass category, default 0 then signal; * \param type train/test tree, default test.; * \return TMVA::ROCCurve object.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:249,Testability,test,test,249,"//_______________________________________________________________________; /**; * Method to get TMVA::ROCCurve Object.; * \param method TMVA::MethodBase object; * \param iClass category, default 0 then signal; * \param type train/test tree, default test.; * \return TMVA::ROCCurve object.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:265,Testability,test,test,265,"//_______________________________________________________________________; /**; * Method to get TMVA::ROCCurve Object.; * \param methodname ml method name.; * \param methodtitle ml method title.; * \param iClass category, default 0 then signal; * \param type train/test tree, default test.; * \return TMVA::ROCCurve object.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:284,Testability,test,test,284,"//_______________________________________________________________________; /**; * Method to get TMVA::ROCCurve Object.; * \param methodname ml method name.; * \param methodtitle ml method title.; * \param iClass category, default 0 then signal; * \param type train/test tree, default test.; * \return TMVA::ROCCurve object.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Classification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassifierFactory.cxx:198,Deployability,integrat,integrated,198,"// @(#)Root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * *; * Copyright (c) 2008: *; * DESY, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ClassifierFactory; \ingroup TMVA; This is the MVA factory.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ClassifierFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassifierFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassifierFactory.cxx:198,Integrability,integrat,integrated,198,"// @(#)Root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * *; * Copyright (c) 2008: *; * DESY, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ClassifierFactory; \ingroup TMVA; This is the MVA factory.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ClassifierFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassifierFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassifierFactory.cxx:86,Security,access,access,86,"////////////////////////////////////////////////////////////////////////////////; /// access to the ClassifierFactory singleton; /// creates the instance if needed",MatchSource.CODE_COMMENT,tmva/tmva/src/ClassifierFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassifierFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassInfo.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ClassInfo *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ClassInfo; \ingroup TMVA. Class that contains all the information of a class. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ClassInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassInfo.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ClassInfo *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ClassInfo; \ingroup TMVA. Class that contains all the information of a class. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ClassInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::Config; \ingroup TMVA. Singleton class for global configuration settings used by TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/Config.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx:1103,Deployability,configurat,configuration,1103,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::Config; \ingroup TMVA. Singleton class for global configuration settings used by TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/Config.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::Config; \ingroup TMVA. Singleton class for global configuration settings used by TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/Config.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx:290,Modifiability,Config,Config,290,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::Config; \ingroup TMVA. Singleton class for global configuration settings used by TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/Config.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx:1053,Modifiability,Config,Config,1053,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::Config; \ingroup TMVA. Singleton class for global configuration settings used by TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/Config.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx:1103,Modifiability,config,configuration,1103,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Config *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, GER *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * Iowa State U., USA *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::Config; \ingroup TMVA. Singleton class for global configuration settings used by TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/Config.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Config.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Configurable *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::; \ingroup TMVA. Base Class for all classes that need option parsing. */",MatchSource.CODE_COMMENT,tmva/tmva/src/Configurable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Configurable *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::; \ingroup TMVA. Base Class for all classes that need option parsing. */",MatchSource.CODE_COMMENT,tmva/tmva/src/Configurable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:270,Modifiability,Config,Configurable,270,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Configurable *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::; \ingroup TMVA. Base Class for all classes that need option parsing. */",MatchSource.CODE_COMMENT,tmva/tmva/src/Configurable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:54,Availability,avail,availability,54,"// loop over the declared options and check for their availability",MatchSource.CODE_COMMENT,tmva/tmva/src/Configurable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:83,Integrability,depend,depend,83,"// First check if the optname exists in the list of the; // objects. This does not depend on the existence of a [] in; // the optname. Sometimes the [] is part of the optname and; // does not describe an array",MatchSource.CODE_COMMENT,tmva/tmva/src/Configurable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:11,Modifiability,variab,variables,11,"// boolean variables can be specified by just their name (!name),; // which will set the to true (false): ...:V:...:!S:..",MatchSource.CODE_COMMENT,tmva/tmva/src/Configurable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:32,Availability,Error,Error,32,"// file could not be opened --> Error",MatchSource.CODE_COMMENT,tmva/tmva/src/Configurable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:112,Testability,test,test,112,"// first set the IsSet flag of all declared options to false; // that is only necessary in our factory, when we test right; // after the training",MatchSource.CODE_COMMENT,tmva/tmva/src/Configurable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ConvergenceTest *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ConvergenceTest; \ingroup TMVA. Check for convergence. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ConvergenceTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ConvergenceTest *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ConvergenceTest; \ingroup TMVA. Check for convergence. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ConvergenceTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx:248,Usability,simpl,simple,248,"////////////////////////////////////////////////////////////////////////////////; /// gives back true if the last ""steps"" steps have lead to an improvement of the; /// ""fitness"" of the ""individuals"" of at least ""improvement""; ///; /// this gives a simple measure of if the estimator of the MLP is; /// converging and no major improvement is to be expected.",MatchSource.CODE_COMMENT,tmva/tmva/src/ConvergenceTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx:518,Energy Efficiency,reduce,reduce,518,"////////////////////////////////////////////////////////////////////////////////; /// this function provides the ability to change the learning rate according to; /// the success of the last generations.; ///; /// Parameters:; ///; /// - int ofSteps : = if OF the number of STEPS given in this variable (ofSteps) the; /// rate of improvement has to be calculated; ///; /// using this function one can increase the stepSize of the mutation when we have; /// good success (to pass fast through the easy phase-space) and reduce the learning rate; /// if we are in a difficult ""territory"" of the phase-space.",MatchSource.CODE_COMMENT,tmva/tmva/src/ConvergenceTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx:294,Modifiability,variab,variable,294,"////////////////////////////////////////////////////////////////////////////////; /// this function provides the ability to change the learning rate according to; /// the success of the last generations.; ///; /// Parameters:; ///; /// - int ofSteps : = if OF the number of STEPS given in this variable (ofSteps) the; /// rate of improvement has to be calculated; ///; /// using this function one can increase the stepSize of the mutation when we have; /// good success (to pass fast through the easy phase-space) and reduce the learning rate; /// if we are in a difficult ""territory"" of the phase-space.",MatchSource.CODE_COMMENT,tmva/tmva/src/ConvergenceTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx:135,Usability,learn,learning,135,"////////////////////////////////////////////////////////////////////////////////; /// this function provides the ability to change the learning rate according to; /// the success of the last generations.; ///; /// Parameters:; ///; /// - int ofSteps : = if OF the number of STEPS given in this variable (ofSteps) the; /// rate of improvement has to be calculated; ///; /// using this function one can increase the stepSize of the mutation when we have; /// good success (to pass fast through the easy phase-space) and reduce the learning rate; /// if we are in a difficult ""territory"" of the phase-space.",MatchSource.CODE_COMMENT,tmva/tmva/src/ConvergenceTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx:529,Usability,learn,learning,529,"////////////////////////////////////////////////////////////////////////////////; /// this function provides the ability to change the learning rate according to; /// the success of the last generations.; ///; /// Parameters:; ///; /// - int ofSteps : = if OF the number of STEPS given in this variable (ofSteps) the; /// rate of improvement has to be calculated; ///; /// using this function one can increase the stepSize of the mutation when we have; /// good success (to pass fast through the easy phase-space) and reduce the learning rate; /// if we are in a difficult ""territory"" of the phase-space.",MatchSource.CODE_COMMENT,tmva/tmva/src/ConvergenceTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::CostComplexityPruneTool; \ingroup TMVA; A class to prune a decision tree using the Cost Complexity method.; (see ""Classification and Regression Trees"" by Leo Breiman et al). ### Some definitions:. - \f$ T_{max} \f$ - the initial, usually highly overtrained tree, that is to be pruned back; - \f$ R(T) \f$ - quality index (Gini, misclassification rate, or other) of a tree \f$ T \f$; - \f$ \sim T \f$ - set of terminal nodes in \f$ T \f$; - \f$ T' \f$ - the pruned subtree of \f$ T_max \f$ that has the best quality index \f$ R(T') \f$; - \f$ \alpha \f$ - the prune strength parameter in Cost Complexity pruning \f$ (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \f$. There are two running modes in CCPruner: (i) one may select a prune strength and prune back; the tree \f$ T_{max}\f$ until the criterion:; \f[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \f]. is true for all nodes t in \f$ T \f$, or (ii) the algorithm finds the sequence of critical points; \f$ \alpha_k < \alpha_{k+1} ... < \alpha_K \f$ such that \f$ T_K",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::CostComplexityPruneTool; \ingroup TMVA; A class to prune a decision tree using the Cost Complexity method.; (see ""Classification and Regression Trees"" by Leo Breiman et al). ### Some definitions:. - \f$ T_{max} \f$ - the initial, usually highly overtrained tree, that is to be pruned back; - \f$ R(T) \f$ - quality index (Gini, misclassification rate, or other) of a tree \f$ T \f$; - \f$ \sim T \f$ - set of terminal nodes in \f$ T \f$; - \f$ T' \f$ - the pruned subtree of \f$ T_max \f$ that has the best quality index \f$ R(T') \f$; - \f$ \alpha \f$ - the prune strength parameter in Cost Complexity pruning \f$ (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \f$. There are two running modes in CCPruner: (i) one may select a prune strength and prune back; the tree \f$ T_{max}\f$ until the criterion:; \f[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \f]. is true for all nodes t in \f$ T \f$, or (ii) the algorithm finds the sequence of critical points; \f$ \alpha_k < \alpha_{k+1} ... < \alpha_K \f$ such that \f$ T_K",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:2132,Security,validat,validation,2132,"lysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::CostComplexityPruneTool; \ingroup TMVA; A class to prune a decision tree using the Cost Complexity method.; (see ""Classification and Regression Trees"" by Leo Breiman et al). ### Some definitions:. - \f$ T_{max} \f$ - the initial, usually highly overtrained tree, that is to be pruned back; - \f$ R(T) \f$ - quality index (Gini, misclassification rate, or other) of a tree \f$ T \f$; - \f$ \sim T \f$ - set of terminal nodes in \f$ T \f$; - \f$ T' \f$ - the pruned subtree of \f$ T_max \f$ that has the best quality index \f$ R(T') \f$; - \f$ \alpha \f$ - the prune strength parameter in Cost Complexity pruning \f$ (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \f$. There are two running modes in CCPruner: (i) one may select a prune strength and prune back; the tree \f$ T_{max}\f$ until the criterion:; \f[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \f]. is true for all nodes t in \f$ T \f$, or (ii) the algorithm finds the sequence of critical points; \f$ \alpha_k < \alpha_{k+1} ... < \alpha_K \f$ such that \f$ T_K = root(T_{max}) \f$ and then selects the optimally-pruned; subtree, defined to be the subtree with the best quality index for the validation sample.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:349,Usability,simpl,simply,349,"// !! changed from Dougs code. Now use the QualityIndex stored already; // in the nodes when no ""new"" QualityIndex calculator is given. Like this; // I can easily implement the Regression. For Regression, the pruning uses the; // same separation index as in the tree building, hence doesn't need to re-calculate; // (which would need more info than simply ""s"" and ""b"")",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:90,Integrability,rout,routine,90,"////////////////////////////////////////////////////////////////////////////////; /// the routine that basically ""steers"" the pruning process. Call the calculation of; /// the pruning sequence, the tree quality and alike..",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:118,Testability,test,test,118,"// must have a valid decision tree to prune, and if the prune strength; // is to be chosen automatically, must have a test sample from; // which to calculate the quality of the pruned tree(s)",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:19,Security,validat,validation,19,"// run the pruning validation sample through the unpruned tree",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:41,Security,validat,validation,41,"// get the sum of weights in the pruning validation sample; // calculate the quality of the tree in the unpruned case",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:196,Availability,down,down,196,"////////////////////////////////////////////////////////////////////////////////; /// initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; /// critical alpha, the minimal alpha down the tree, etc... for each node!!",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:106,Testability,Log,Log,106,"// DecisionTreeNode* R = (DecisionTreeNode*)mdt->GetRoot();; // Double_t x = R->GetAlphaMinSubtree();; // Log() << ""alphaMin(Root) = "" << x << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:351,Availability,error,error,351,"////////////////////////////////////////////////////////////////////////////////; /// after the critical \f$ \alpha \f$ values (at which the corresponding nodes would; /// be pruned away) had been established in the ""InitMetaData"" we need now:; /// automatic pruning:; ///; /// find the value of \f$ \alpha \f$ for which the test sample gives minimal error,; /// on the tree with all nodes pruned that have \f$ \alpha_{critical} < \alpha \f$,; /// fixed parameter pruning; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:325,Testability,test,test,325,"////////////////////////////////////////////////////////////////////////////////; /// after the critical \f$ \alpha \f$ values (at which the corresponding nodes would; /// be pruned away) had been established in the ""InitMetaData"" we need now:; /// automatic pruning:; ///; /// find the value of \f$ \alpha \f$ for which the test sample gives minimal error,; /// on the tree with all nodes pruned that have \f$ \alpha_{critical} < \alpha \f$,; /// fixed parameter pruning; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:353,Usability,simpl,simply,353,"// now prune the tree in steps until it is gone. At each pruning step, the pruning; // takes place at the node that is regarded as the ""weakest link"".; // for automatic pruning, at each step, we calculate the current quality of the; // tree and in the end we will prune at the minimum of the tree quality; // for the fixed parameter pruning, the cut is simply set at a relative position; // in the sequence according to the ""length"" of the sequence of pruned trees.; // 100: at the end (pruned until the root node would be the next pruning candidate; // 50: in the middle of the sequence; // etc...",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:3,Testability,Log,Log,3,"// Log() << kDEBUG << ""alpha["" << k << ""]: "" << alpha << Endl;; // Log() << kDEBUG << ""==========================="" << Endl; // << ""Pruning branch listed below the node"" << Endl;; // t->Print( Log() );; // Log() << kDEBUG << ""==========================="" << Endl;; // t->PrintRecPrune( Log() );",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:67,Testability,Log,Log,67,"// Log() << kDEBUG << ""alpha["" << k << ""]: "" << alpha << Endl;; // Log() << kDEBUG << ""==========================="" << Endl; // << ""Pruning branch listed below the node"" << Endl;; // t->Print( Log() );; // Log() << kDEBUG << ""==========================="" << Endl;; // t->PrintRecPrune( Log() );",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:193,Testability,Log,Log,193,"// Log() << kDEBUG << ""alpha["" << k << ""]: "" << alpha << Endl;; // Log() << kDEBUG << ""==========================="" << Endl; // << ""Pruning branch listed below the node"" << Endl;; // t->Print( Log() );; // Log() << kDEBUG << ""==========================="" << Endl;; // t->PrintRecPrune( Log() );",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:206,Testability,Log,Log,206,"// Log() << kDEBUG << ""alpha["" << k << ""]: "" << alpha << Endl;; // Log() << kDEBUG << ""==========================="" << Endl; // << ""Pruning branch listed below the node"" << Endl;; // t->Print( Log() );; // Log() << kDEBUG << ""==========================="" << Endl;; // t->PrintRecPrune( Log() );",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:286,Testability,Log,Log,286,"// Log() << kDEBUG << ""alpha["" << k << ""]: "" << alpha << Endl;; // Log() << kDEBUG << ""==========================="" << Endl; // << ""Pruning branch listed below the node"" << Endl;; // t->Print( Log() );; // Log() << kDEBUG << ""==========================="" << Endl;; // t->PrintRecPrune( Log() );",MatchSource.CODE_COMMENT,tmva/tmva/src/CostComplexityPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::CrossEntropy *; * *; * *; * Description: Implementation of the CrossEntropy as separation criterion *; * -p log (p) - (1-p)log(1-p); p=purity *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CrossEntropy; \ingroup TMVA. Implementation of the CrossEntropy as separation criterion. -p log (p) - (1-p)log(1-p); p=purity; */",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossEntropy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::CrossEntropy *; * *; * *; * Description: Implementation of the CrossEntropy as separation criterion *; * -p log (p) - (1-p)log(1-p); p=purity *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CrossEntropy; \ingroup TMVA. Implementation of the CrossEntropy as separation criterion. -p log (p) - (1-p)log(1-p); p=purity; */",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossEntropy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:394,Testability,log,log,394,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::CrossEntropy *; * *; * *; * Description: Implementation of the CrossEntropy as separation criterion *; * -p log (p) - (1-p)log(1-p); p=purity *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CrossEntropy; \ingroup TMVA. Implementation of the CrossEntropy as separation criterion. -p log (p) - (1-p)log(1-p); p=purity; */",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossEntropy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:409,Testability,log,log,409,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::CrossEntropy *; * *; * *; * Description: Implementation of the CrossEntropy as separation criterion *; * -p log (p) - (1-p)log(1-p); p=purity *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CrossEntropy; \ingroup TMVA. Implementation of the CrossEntropy as separation criterion. -p log (p) - (1-p)log(1-p); p=purity; */",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossEntropy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:1141,Testability,log,log,1141,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::CrossEntropy *; * *; * *; * Description: Implementation of the CrossEntropy as separation criterion *; * -p log (p) - (1-p)log(1-p); p=purity *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CrossEntropy; \ingroup TMVA. Implementation of the CrossEntropy as separation criterion. -p log (p) - (1-p)log(1-p); p=purity; */",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossEntropy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:1156,Testability,log,log,1156,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::CrossEntropy *; * *; * *; * Description: Implementation of the CrossEntropy as separation criterion *; * -p log (p) - (1-p)log(1-p); p=purity *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CrossEntropy; \ingroup TMVA. Implementation of the CrossEntropy as separation criterion. -p log (p) - (1-p)log(1-p); p=purity; */",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossEntropy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:125,Testability,log,log,125,"////////////////////////////////////////////////////////////////////////////////; /// Cross Entropy defined as:; ///; /// -p log (p) - (1-p)log(1-p); p=purity = s/(s+b)",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossEntropy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:140,Testability,log,log,140,"////////////////////////////////////////////////////////////////////////////////; /// Cross Entropy defined as:; ///; /// -p log (p) - (1-p)log(1-p); p=purity = s/(s+b)",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossEntropy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:18,Testability,log,log,18,"// return - ( p * log (p) + (1-p)*log(1-p) );",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossEntropy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:34,Testability,log,log,34,"// return - ( p * log (p) + (1-p)*log(1-p) );",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossEntropy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:94,Availability,alive,alive,94,"// note this function will create memory leak for the TMultiGraph; // but it needs to be kept alive in order to display the canvas",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:276,Testability,test,test,276,"/**; * \class TMVA::CrossValidation; * \ingroup TMVA; * \brief. Use html for explicit line breaking<br>; Markdown links? [class reference](#reference)?. ~~~{.cpp}; ce->BookMethod(dataloader, options);; ce->Evaluate();; ~~~. Cross-evaluation will generate a new training and a test set dynamically from; from `K` folds. These `K` folds are generated by splitting the input training; set. The input test set is currently ignored. This means that when you specify your DataSet you should include all events; in your training set. One way of doing this would be the following:. ~~~{.cpp}; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );; ~~~. ## Split Expression; See CVSplit documentation?. */; ////////////////////////////////////////////////////////////////////////////////; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:397,Testability,test,test,397,"/**; * \class TMVA::CrossValidation; * \ingroup TMVA; * \brief. Use html for explicit line breaking<br>; Markdown links? [class reference](#reference)?. ~~~{.cpp}; ce->BookMethod(dataloader, options);; ce->Evaluate();; ~~~. Cross-evaluation will generate a new training and a test set dynamically from; from `K` folds. These `K` folds are generated by splitting the input training; set. The input test set is currently ignored. This means that when you specify your DataSet you should include all events; in your training set. One way of doing this would be the following:. ~~~{.cpp}; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );; ~~~. ## Split Expression; See CVSplit documentation?. */; ////////////////////////////////////////////////////////////////////////////////; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:141,Testability,test,test,141,"////////////////////////////////////////////////////////////////////////////////; /// Evaluates each fold in turn.; /// - Prepares train and test data sets; /// - Trains method; /// - Evalutes on test set; /// - Stores the evaluation internally; ///; /// @param iFold fold to evaluate; /// @param methodInfo method metadata; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:196,Testability,test,test,196,"////////////////////////////////////////////////////////////////////////////////; /// Evaluates each fold in turn.; /// - Prepares train and test data sets; /// - Trains method; /// - Evalutes on test set; /// - Stores the evaluation internally; ///; /// @param iFold fold to evaluate; /// @param methodInfo method metadata; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:125,Performance,perform,performance,125,"////////////////////////////////////////////////////////////////////////////////; /// Does training, test set evaluation and performance evaluation of using; /// cross-evalution.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:101,Testability,test,test,101,"////////////////////////////////////////////////////////////////////////////////; /// Does training, test set evaluation and performance evaluation of using; /// cross-evalution.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:23,Modifiability,config,config,23,"// Fall back to global config",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:68,Testability,test,testing,68,"// Recombination of data (making sure there is data in training and testing trees).",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:11,Testability,Test,Testing,11,"// Eval on Testing set",MatchSource.CODE_COMMENT,tmva/tmva/src/CrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:110,Testability,test,test,110,"////////////////////////////////////////////////////////////////////////////////; /// \brief Set training and test set vectors of dataset described by `dsi`.; /// \param[in] dsi DataSetInfo for data set to be split; /// \param[in] foldNumber Ordinal of fold to prepare; /// \param[in] tt The set used to prepare fold. If equal to `Types::kTraining`; /// splitting will be based off the original train set. If instead; /// equal to `Types::kTesting` the test set will be used.; /// The original training/test set is the set as defined by; /// `DataLoader::PrepareTrainingAndTestSet`.; ///; /// Sets the training and test set vectors of the DataSet described by `dsi` as; /// defined by the split. If `tt` is eqal to `Types::kTraining` the split will; /// be based off of the original training set.; ///; /// Note: Requires `MakeKFoldDataSet` to have been called first.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:453,Testability,test,test,453,"////////////////////////////////////////////////////////////////////////////////; /// \brief Set training and test set vectors of dataset described by `dsi`.; /// \param[in] dsi DataSetInfo for data set to be split; /// \param[in] foldNumber Ordinal of fold to prepare; /// \param[in] tt The set used to prepare fold. If equal to `Types::kTraining`; /// splitting will be based off the original train set. If instead; /// equal to `Types::kTesting` the test set will be used.; /// The original training/test set is the set as defined by; /// `DataLoader::PrepareTrainingAndTestSet`.; ///; /// Sets the training and test set vectors of the DataSet described by `dsi` as; /// defined by the split. If `tt` is eqal to `Types::kTraining` the split will; /// be based off of the original training set.; ///; /// Note: Requires `MakeKFoldDataSet` to have been called first.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:503,Testability,test,test,503,"////////////////////////////////////////////////////////////////////////////////; /// \brief Set training and test set vectors of dataset described by `dsi`.; /// \param[in] dsi DataSetInfo for data set to be split; /// \param[in] foldNumber Ordinal of fold to prepare; /// \param[in] tt The set used to prepare fold. If equal to `Types::kTraining`; /// splitting will be based off the original train set. If instead; /// equal to `Types::kTesting` the test set will be used.; /// The original training/test set is the set as defined by; /// `DataLoader::PrepareTrainingAndTestSet`.; ///; /// Sets the training and test set vectors of the DataSet described by `dsi` as; /// defined by the split. If `tt` is eqal to `Types::kTraining` the split will; /// be based off of the original training set.; ///; /// Note: Requires `MakeKFoldDataSet` to have been called first.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:615,Testability,test,test,615,"////////////////////////////////////////////////////////////////////////////////; /// \brief Set training and test set vectors of dataset described by `dsi`.; /// \param[in] dsi DataSetInfo for data set to be split; /// \param[in] foldNumber Ordinal of fold to prepare; /// \param[in] tt The set used to prepare fold. If equal to `Types::kTraining`; /// splitting will be based off the original train set. If instead; /// equal to `Types::kTesting` the test set will be used.; /// The original training/test set is the set as defined by; /// `DataLoader::PrepareTrainingAndTestSet`.; ///; /// Sets the training and test set vectors of the DataSet described by `dsi` as; /// defined by the split. If `tt` is eqal to `Types::kTraining` the split will; /// be based off of the original training set.; ///; /// Note: Requires `MakeKFoldDataSet` to have been called first.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:20,Testability,test,test,20,"// Insert data into test set",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:23,Modifiability,variab,variable,23,"// std::cout << ""Found variable with name \"""" << name << ""\""."" << std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:49,Modifiability,variab,variable,49,"// std::cout << ""NumFolds|numFolds is a reserved variable! Adding to context."" << std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:145,Testability,test,test,145,"// NOTE: We are using a double to represent an integer here. This _will_; // lead to problems if the norm of the double grows too large. A quick test; // with python suggests that problems arise at a magnitude of ~1e16.",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:332,Security,validat,validation,332,"/* =============================================================================; TMVA::CvSplitKFolds; ============================================================================= */; ////////////////////////////////////////////////////////////////////////////////; /// \brief Splits a dataset into k folds, ready for use in cross validation.; /// \param[in] numFolds Number of folds to split data into; /// \param[in] stratified If true, use stratified splitting, balancing the; /// number of events across classes and folds. If false,; /// no such balancing is done. For; /// \param[in] splitExpr Expression used to split data into folds. If `""""` a; /// random assignment will be done. Otherwise the; /// expression is fed into a TFormula and evaluated per; /// event. The resulting value is the fold assignment.; /// \param[in] seed Used only when using random splitting (i.e. when; /// `splitExpr` is `""""`). Seed is used to initialise the random; /// number generator when assigning events to folds.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:122,Security,validat,validation,122,"////////////////////////////////////////////////////////////////////////////////; /// \brief Prepares a DataSet for cross validation",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:3,Security,Validat,Validate,3,"// Validate spectator; // fSpectatorIdx = GetSpectatorIndexForName(dsi, fSpectatorName);",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:38,Testability,test,testing,38,"// Get the original event vectors for testing and training from the dataset.",MatchSource.CODE_COMMENT,tmva/tmva/src/CvSplit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataInputHandler.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataInputHandler *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataInputHandler; \ingroup TMVA. Class that contains all the data information. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataInputHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataInputHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataInputHandler.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataInputHandler *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataInputHandler; \ingroup TMVA. Class that contains all the data information. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataInputHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataInputHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataInputHandler.cxx:134,Testability,Test,Testing,134,"////////////////////////////////////////////////////////////////////////////////; /// add tree of *className* events for tt (Training;Testing..) type as input ..",MatchSource.CODE_COMMENT,tmva/tmva/src/DataInputHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataInputHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:233,Deployability,integrat,integrated,233,"// @(#)root/tmva $Id$; // Author: Omar Zapata; // Mentors: Lorenzo Moneta, Sergei Gleyzer; //NOTE: Based on TMVA::Factory; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataLoader *; * *; * *; * Description: *; * This is a class to load datasets into every booked method *; * *; * Authors (alphabetical): *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Omar Zapata <Omar.Zapata@cern.ch> - ITM/UdeA, Colombia *; * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * ITM/UdeA, Colombia *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataLoader; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:233,Integrability,integrat,integrated,233,"// @(#)root/tmva $Id$; // Author: Omar Zapata; // Mentors: Lorenzo Moneta, Sergei Gleyzer; //NOTE: Based on TMVA::Factory; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataLoader *; * *; * *; * Description: *; * This is a class to load datasets into every booked method *; * *; * Authors (alphabetical): *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Omar Zapata <Omar.Zapata@cern.ch> - ITM/UdeA, Colombia *; * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * ITM/UdeA, Colombia *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataLoader; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:378,Performance,load,load,378,"// @(#)root/tmva $Id$; // Author: Omar Zapata; // Mentors: Lorenzo Moneta, Sergei Gleyzer; //NOTE: Based on TMVA::Factory; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataLoader *; * *; * *; * Description: *; * This is a class to load datasets into every booked method *; * *; * Authors (alphabetical): *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Omar Zapata <Omar.Zapata@cern.ch> - ITM/UdeA, Colombia *; * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * ITM/UdeA, Colombia *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataLoader; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:101,Performance,load,loader,101,"////////////////////////////////////////////////////////////////////////////////; /*** Create a data loader; \param[in] thedlName name of DataLoader object. This name will be used as the; top directory name where the training results; (weights, i.e .XML and .C files) will be stored.; The results will be stored by default in the `theDlName/weights`; directory and relative to the current directory. If the directory is not existing,; a new one will be created automatically.; For using a different location (i.e. a different path to the current directory) one; can set an absolute path location in `TMVA::gConfig()::GetIONames().fWeightFileDirPrefix`; For example, by setting; ~~~~~~~~~~~~~~~{.cpp}; TMVA::gConfig()::GetIONames().fWeightFileDirPrefix = ""/tmp"";; TMVA::gConfig()::GetIONames().fWeightFileDir = ""myTrainingResults"";; ~~~~~~~~~~~~~~~; The training results will be stored in the `/tmp/thedlName/myTrainingResults`; directory.; **/",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:169,Modifiability,Config,Config,169,"// DSMTEST; // problem with call of REGISTER_METHOD macro ...; // ClassifierDataLoader::DestroyInstance();; // Types::DestroyInstance();; //Tools::DestroyInstance();; //Config::DestroyInstance();",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:101,Modifiability,variab,variables,101,"////////////////////////////////////////////////////////////////////////////////; /// Transforms the variables and return a new DataLoader with the transformed; /// variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:165,Modifiability,variab,variables,165,"////////////////////////////////////////////////////////////////////////////////; /// Transforms the variables and return a new DataLoader with the transformed; /// variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:22,Modifiability,variab,variable,22,"// variance threshold variable transformation",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:7,Modifiability,variab,variables,7,"// add variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:97,Testability,test,testing,97,"////////////////////////////////////////////////////////////////////////////////; /// add signal testing event",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// add signal test event",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:140,Modifiability,variab,variables,140,"////////////////////////////////////////////////////////////////////////////////; /// add event; /// vector event : the order of values is: variables + targets + spectators",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:114,Modifiability,variab,variable,114,"////////////////////////////////////////////////////////////////////////////////; /// user inserts discriminating variable in data set info",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:114,Modifiability,variab,variable,114,"////////////////////////////////////////////////////////////////////////////////; /// user inserts discriminating variable in data set info",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:123,Modifiability,variab,variables,123,"////////////////////////////////////////////////////////////////////////////////; /// user inserts discriminating array of variables in data set info; /// in case input tree provides an array of values",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:97,Modifiability,variab,variables,97,"////////////////////////////////////////////////////////////////////////////////; /// fill input variables in data set",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:2,Testability,Log,Log,2,"//Log() << kWarning << DefaultDataSetInfo().GetNClasses() /*fClasses.size()*/ << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:111,Testability,test,test,111,"////////////////////////////////////////////////////////////////////////////////; /// prepare the training and test trees",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:111,Testability,test,test,111,"////////////////////////////////////////////////////////////////////////////////; /// prepare the training and test trees; /// kept for backward compatibility",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:111,Testability,test,test,111,"////////////////////////////////////////////////////////////////////////////////; /// prepare the training and test trees; /// -> same cuts for signal and background",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:111,Testability,test,test,111,"////////////////////////////////////////////////////////////////////////////////; /// prepare the training and test trees",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:2,Testability,Log,Log,2,"//Log() << kINFO <<""Preparing trees for training and testing...""<< Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:53,Testability,test,testing,53,"//Log() << kINFO <<""Preparing trees for training and testing...""<< Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:325,Security,validat,validation,325,"////////////////////////////////////////////////////////////////////////////////; /// Function required to split the training and testing datasets into a; /// number of folds. Required by the CrossValidation and HyperParameterOptimisation; /// classes. The option to split the training dataset into a training set and; /// a validation set is implemented but not currently used.",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:130,Testability,test,testing,130,"////////////////////////////////////////////////////////////////////////////////; /// Function required to split the training and testing datasets into a; /// number of folds. Required by the CrossValidation and HyperParameterOptimisation; /// classes. The option to split the training dataset into a training set and; /// a validation set is implemented but not currently used.",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:134,Testability,test,testing,134,"////////////////////////////////////////////////////////////////////////////////; /// Function for assigning the correct folds to the testing or training set.",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:132,Integrability,depend,depend,132,"////////////////////////////////////////////////////////////////////////////////; /// Recombines the dataset. The precise semantics depend on the actual split.; ///; /// Similar to the inverse operation of `MakeKFoldDataSet` but _will_ differ.; /// See documentation for each particular split for more information.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:85,Performance,Load,Loading,85,"////////////////////////////////////////////////////////////////////////////////; ///Loading Dataset from DataInputHandler for subseed",MatchSource.CODE_COMMENT,tmva/tmva/src/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSet *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataSet; \ingroup TMVA. Class that contains all the data information. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSet *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataSet; \ingroup TMVA. Class that contains all the data information. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:107,Modifiability,variab,variables,107,"////////////////////////////////////////////////////////////////////////////////; /// access the number of variables through the datasetinfo",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:86,Security,access,access,86,"////////////////////////////////////////////////////////////////////////////////; /// access the number of variables through the datasetinfo",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:86,Security,access,access,86,"////////////////////////////////////////////////////////////////////////////////; /// access the number of targets through the datasetinfo",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:86,Security,access,access,86,"////////////////////////////////////////////////////////////////////////////////; /// access the number of targets through the datasetinfo",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:2,Testability,Log,Log,2,"//Log() << kINFO << "" GetResults(""<<info<<"") returns existing result."" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:2,Testability,Log,Log,2,"//Log() << kINFO << "" GetResults(""<<info<<"") can't create new one."" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:2,Testability,Log,Log,2,"//Log() << kINFO << "" GetResults(""<<info<<"") builds new result."" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:239,Testability,test,testing,239,"////////////////////////////////////////////////////////////////////////////////; /// delete the results stored for this particular Method instance.; /// (here apparently called resultsName instead of MethodTitle; /// Tree type (Training, testing etc..); /// Analysis Type (Classification, Multiclass, Regression etc..)",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:110,Testability,test,test,110,"////////////////////////////////////////////////////////////////////////////////; /// return number of signal test events in dataset",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:114,Testability,test,test,114,"////////////////////////////////////////////////////////////////////////////////; /// return number of background test events in dataset",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:10,Usability,clear,clear,10,"// first, clear the lists",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:8,Modifiability,variab,variables,8,"// some variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:130,Modifiability,variab,variables,130,"////////////////////////////////////////////////////////////////////////////////; /// create the test/trainings tree with all the variables, the weights, the; /// classes, the targets, the spectators, the MVA outputs",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// create the test/trainings tree with all the variables, the weights, the; /// classes, the targets, the spectators, the MVA outputs",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:29,Modifiability,variab,variables,29,"// create branches for event-variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:31,Modifiability,variab,variables,31,"// create all branches for the variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:3,Modifiability,variab,variable,3,"// variable is an array",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:41,Modifiability,variab,variables,41,"// create the branches for the spectator variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:3,Safety,Sanity check,Sanity check,3,"// Sanity check, ensure all result sets have the expected number of events",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:19,Modifiability,variab,variables,19,"// write the event-variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:13,Modifiability,variab,variables,13,"// write the variables, targets and spectator variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:46,Modifiability,variab,variables,46,"// write the variables, targets and spectator variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:12,Modifiability,variab,variables,12,"// fill the variables into the tree",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:221,Deployability,integrat,integrated,221,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Helge Voss; /*****************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetFactory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU, USA *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2009: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; *****************************************************************************/; /*! \class TMVA::DataSetFactory; \ingroup TMVA. Class that contains all the data information. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:221,Integrability,integrat,integrated,221,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Helge Voss; /*****************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetFactory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU, USA *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2009: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; *****************************************************************************/; /*! \class TMVA::DataSetFactory; \ingroup TMVA. Class that contains all the data information. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:2,Testability,Log,Log,2,"//Log() << kHEADER << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:54,Modifiability,variab,variables,54,"// create a DataSet with one Event which uses dynamic variables; // (pointers to variables)",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:81,Modifiability,variab,variables,81,"// create a DataSet with one Event which uses dynamic variables; // (pointers to variables)",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:162,Modifiability,variab,variables,162,"////////////////////////////////////////////////////////////////////////////////; /// if no entries, than create a DataSet with one Event which uses; /// dynamic variables (pointers to variables)",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:185,Modifiability,variab,variables,185,"////////////////////////////////////////////////////////////////////////////////; /// if no entries, than create a DataSet with one Event which uses; /// dynamic variables (pointers to variables)",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:141,Testability,test,testing,141,"////////////////////////////////////////////////////////////////////////////////; /// While the data gets copied into the local training and testing; /// trees, the input tree can change (for instance when changing from; /// signal to background tree, or using TChains as input) The; /// TTreeFormulas, that hold the input expressions need to be; /// re-associated with the new tree, which is done here",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:81,Modifiability,variab,variable,81,"// Set to false if wants to enable only some branch in the tree; // 1) the input variable formulas",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:11,Modifiability,variab,variable,11,"// it is a variable from an array",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:3,Performance,perform,perform,3,"// perform event loop",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:90,Modifiability,variab,variable,90,"// if( TMath::Abs(vmax[ivar]-vmin[ivar]) <= FLT_MIN ); // Log() << kWARNING << ""Spectator variable "" << dsi.GetSpectatorInfo(ivar).GetExpression().Data() << "" is constant."" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:58,Testability,Log,Log,58,"// if( TMath::Abs(vmax[ivar]-vmin[ivar]) <= FLT_MIN ); // Log() << kWARNING << ""Spectator variable "" << dsi.GetSpectatorInfo(ivar).GetExpression().Data() << "" is constant."" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:118,Modifiability,variab,variables,118,"////////////////////////////////////////////////////////////////////////////////; /// computes correlation matrix for variables ""theVars"" in tree;; /// ""theType"" defines the required event ""type""; /// (""type"" variable must be present in tree)",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:209,Modifiability,variab,variable,209,"////////////////////////////////////////////////////////////////////////////////; /// computes correlation matrix for variables ""theVars"" in tree;; /// ""theType"" defines the required event ""type""; /// (""type"" variable must be present in tree)",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:3,Performance,perform,perform,3,"// perform event loop",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:10,Testability,log,logging,10,"// output logging verbosity",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:317,Availability,error,errors,317,"//Bool_t haveArrayVariable = kFALSE;; //Bool_t *varIsArray = new Bool_t[nvars];; // If there are NaNs in the tree:; // => warn if used variables/cuts/weights contain nan (no problem if event is cut out); // => fatal if cut value is nan or (event not cut out and nans somewhere); // Count & collect all these warnings/errors and output them at the end.",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:135,Modifiability,variab,variables,135,"//Bool_t haveArrayVariable = kFALSE;; //Bool_t *varIsArray = new Bool_t[nvars];; // If there are NaNs in the tree:; // => warn if used variables/cuts/weights contain nan (no problem if event is cut out); // => fatal if cut value is nan or (event not cut out and nans somewhere); // Count & collect all these warnings/errors and output them at the end.",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:2,Testability,Log,Log,2,"//Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create training and testing trees -- looping over class \"""" << dsi.GetClassInfo(cl)->GetName() << ""\"" ..."" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:81,Testability,test,testing,81,"//Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create training and testing trees -- looping over class \"""" << dsi.GetClassInfo(cl)->GetName() << ""\"" ..."" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:18,Modifiability,variab,variables,18,"// read first the variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:29,Integrability,message,message,29,"// flag to control a warning message when size of array in disk are bigger than what requested",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:143,Modifiability,variab,variables,143,"// ======= evaluate all formulas =================; // first we check if some of the formulas are arrays; // This is the case when all inputs (variables, targets and spectetors are array and a TMVA event is not; // an event of the tree but an event + array index). In this case we set the flag haveAllArrayData = true; // Otherwise we support for arrays of variables where each; // element of the array corresponds to a different variable like in the case of image; // In that case the VAriableInfo has a bit, IsVariableFromArray that is set and we have a single formula for the array; // fInputFormulaTable contains a map of the formula and the variable index to evaluate the formula",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:357,Modifiability,variab,variables,357,"// ======= evaluate all formulas =================; // first we check if some of the formulas are arrays; // This is the case when all inputs (variables, targets and spectetors are array and a TMVA event is not; // an event of the tree but an event + array index). In this case we set the flag haveAllArrayData = true; // Otherwise we support for arrays of variables where each; // element of the array corresponds to a different variable like in the case of image; // In that case the VAriableInfo has a bit, IsVariableFromArray that is set and we have a single formula for the array; // fInputFormulaTable contains a map of the formula and the variable index to evaluate the formula",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:430,Modifiability,variab,variable,430,"// ======= evaluate all formulas =================; // first we check if some of the formulas are arrays; // This is the case when all inputs (variables, targets and spectetors are array and a TMVA event is not; // an event of the tree but an event + array index). In this case we set the flag haveAllArrayData = true; // Otherwise we support for arrays of variables where each; // element of the array corresponds to a different variable like in the case of image; // In that case the VAriableInfo has a bit, IsVariableFromArray that is set and we have a single formula for the array; // fInputFormulaTable contains a map of the formula and the variable index to evaluate the formula",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:486,Modifiability,VAriab,VAriableInfo,486,"// ======= evaluate all formulas =================; // first we check if some of the formulas are arrays; // This is the case when all inputs (variables, targets and spectetors are array and a TMVA event is not; // an event of the tree but an event + array index). In this case we set the flag haveAllArrayData = true; // Otherwise we support for arrays of variables where each; // element of the array corresponds to a different variable like in the case of image; // In that case the VAriableInfo has a bit, IsVariableFromArray that is set and we have a single formula for the array; // fInputFormulaTable contains a map of the formula and the variable index to evaluate the formula",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:646,Modifiability,variab,variable,646,"// ======= evaluate all formulas =================; // first we check if some of the formulas are arrays; // This is the case when all inputs (variables, targets and spectetors are array and a TMVA event is not; // an event of the tree but an event + array index). In this case we set the flag haveAllArrayData = true; // Otherwise we support for arrays of variables where each; // element of the array corresponds to a different variable like in the case of image; // In that case the VAriableInfo has a bit, IsVariableFromArray that is set and we have a single formula for the array; // fInputFormulaTable contains a map of the formula and the variable index to evaluate the formula",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:26,Modifiability,variab,variable,26,"// distinguish case where variable is not from an array",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:53,Availability,error,errors,53,"// if event is cut out, add to warnings, else add to errors.",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:13,Modifiability,variab,variable,13,"// the input variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:46,Modifiability,variab,variable,46,"// check fomula ndata size (in case of arrays variable); // enough to check for ivarindex = 0 then formula is the same; // this check might take some time. Maybe do only in debug mode",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:30,Modifiability,variab,variables,30,"// now read the event-values (variables and regression targets)",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:96,Availability,avail,available,96,"// check for each class the number of training and testing events, the requested number and the available number",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:51,Testability,test,testing,51,"// check for each class the number of training and testing events, the requested number and the available number",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:66,Testability,test,testing,66,"// check if enough or too many events are already in the training/testing eventvectors of the class cls",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:125,Testability,test,testing,125,"// If TrainTestSplit_<class> is set, set number of requested training events to split*num_all_events; // Requested number of testing events is set to zero and therefore takes all other events; // The option TrainTestSplit_<class> overrides nTrain_<class> or nTest_<class>",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:20,Availability,avail,available,20,"// nomenclature r = available training; // s = available testing; // u = available undefined; // R = requested training; // S = requested testing; // nR = to be used to select training events; // nS = to be used to select test events; // we have the constraint: nR + nS < r+s+u,; // since we can not use more events than we have; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nomenclature: Thet(x) = x, if x>0 else 0; // nR = max(R,r) + 0.5 * Nfree; // nS = max(S,s) + 0.5 * Nfree; // nR +nS = R+S + u-R+r-S+s = u+r+s= ok! for R>r; // nR +nS = r+S + u-S+s = u+r+s= ok! for r>R; // three different cases might occur here; //; // Case a; // requestedTraining and requestedTesting >0; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nR = Max(R,r) + 0.5 * Nfree; // nS = Max(S,s) + 0.5 * Nfree; //; // Case b; // exactly one of requestedTraining or requestedTesting >0; // assume training R >0; // nR = max(R,r); // nS = s+u+r-nR; // and s=nS; //; // Case c; // requestedTraining=0, requestedTesting=0; // Nfree = u-|r-s|; // if NFree >=0; // R = Max(r,s) + 0.5 * Nfree = S; // else if r>s; // R = r; S=s+u; // else; // R = r+u; S=s; //; // Next steps:; // Determination of Event numbers R,S, nR, nS; // distribute undefined events according to nR, nS; // finally determine actual sub samples from nR and nS to be used in training / testing; //",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:47,Availability,avail,available,47,"// nomenclature r = available training; // s = available testing; // u = available undefined; // R = requested training; // S = requested testing; // nR = to be used to select training events; // nS = to be used to select test events; // we have the constraint: nR + nS < r+s+u,; // since we can not use more events than we have; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nomenclature: Thet(x) = x, if x>0 else 0; // nR = max(R,r) + 0.5 * Nfree; // nS = max(S,s) + 0.5 * Nfree; // nR +nS = R+S + u-R+r-S+s = u+r+s= ok! for R>r; // nR +nS = r+S + u-S+s = u+r+s= ok! for r>R; // three different cases might occur here; //; // Case a; // requestedTraining and requestedTesting >0; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nR = Max(R,r) + 0.5 * Nfree; // nS = Max(S,s) + 0.5 * Nfree; //; // Case b; // exactly one of requestedTraining or requestedTesting >0; // assume training R >0; // nR = max(R,r); // nS = s+u+r-nR; // and s=nS; //; // Case c; // requestedTraining=0, requestedTesting=0; // Nfree = u-|r-s|; // if NFree >=0; // R = Max(r,s) + 0.5 * Nfree = S; // else if r>s; // R = r; S=s+u; // else; // R = r+u; S=s; //; // Next steps:; // Determination of Event numbers R,S, nR, nS; // distribute undefined events according to nR, nS; // finally determine actual sub samples from nR and nS to be used in training / testing; //",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:73,Availability,avail,available,73,"// nomenclature r = available training; // s = available testing; // u = available undefined; // R = requested training; // S = requested testing; // nR = to be used to select training events; // nS = to be used to select test events; // we have the constraint: nR + nS < r+s+u,; // since we can not use more events than we have; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nomenclature: Thet(x) = x, if x>0 else 0; // nR = max(R,r) + 0.5 * Nfree; // nS = max(S,s) + 0.5 * Nfree; // nR +nS = R+S + u-R+r-S+s = u+r+s= ok! for R>r; // nR +nS = r+S + u-S+s = u+r+s= ok! for r>R; // three different cases might occur here; //; // Case a; // requestedTraining and requestedTesting >0; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nR = Max(R,r) + 0.5 * Nfree; // nS = Max(S,s) + 0.5 * Nfree; //; // Case b; // exactly one of requestedTraining or requestedTesting >0; // assume training R >0; // nR = max(R,r); // nS = s+u+r-nR; // and s=nS; //; // Case c; // requestedTraining=0, requestedTesting=0; // Nfree = u-|r-s|; // if NFree >=0; // R = Max(r,s) + 0.5 * Nfree = S; // else if r>s; // R = r; S=s+u; // else; // R = r+u; S=s; //; // Next steps:; // Determination of Event numbers R,S, nR, nS; // distribute undefined events according to nR, nS; // finally determine actual sub samples from nR and nS to be used in training / testing; //",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:57,Testability,test,testing,57,"// nomenclature r = available training; // s = available testing; // u = available undefined; // R = requested training; // S = requested testing; // nR = to be used to select training events; // nS = to be used to select test events; // we have the constraint: nR + nS < r+s+u,; // since we can not use more events than we have; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nomenclature: Thet(x) = x, if x>0 else 0; // nR = max(R,r) + 0.5 * Nfree; // nS = max(S,s) + 0.5 * Nfree; // nR +nS = R+S + u-R+r-S+s = u+r+s= ok! for R>r; // nR +nS = r+S + u-S+s = u+r+s= ok! for r>R; // three different cases might occur here; //; // Case a; // requestedTraining and requestedTesting >0; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nR = Max(R,r) + 0.5 * Nfree; // nS = Max(S,s) + 0.5 * Nfree; //; // Case b; // exactly one of requestedTraining or requestedTesting >0; // assume training R >0; // nR = max(R,r); // nS = s+u+r-nR; // and s=nS; //; // Case c; // requestedTraining=0, requestedTesting=0; // Nfree = u-|r-s|; // if NFree >=0; // R = Max(r,s) + 0.5 * Nfree = S; // else if r>s; // R = r; S=s+u; // else; // R = r+u; S=s; //; // Next steps:; // Determination of Event numbers R,S, nR, nS; // distribute undefined events according to nR, nS; // finally determine actual sub samples from nR and nS to be used in training / testing; //",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:138,Testability,test,testing,138,"// nomenclature r = available training; // s = available testing; // u = available undefined; // R = requested training; // S = requested testing; // nR = to be used to select training events; // nS = to be used to select test events; // we have the constraint: nR + nS < r+s+u,; // since we can not use more events than we have; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nomenclature: Thet(x) = x, if x>0 else 0; // nR = max(R,r) + 0.5 * Nfree; // nS = max(S,s) + 0.5 * Nfree; // nR +nS = R+S + u-R+r-S+s = u+r+s= ok! for R>r; // nR +nS = r+S + u-S+s = u+r+s= ok! for r>R; // three different cases might occur here; //; // Case a; // requestedTraining and requestedTesting >0; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nR = Max(R,r) + 0.5 * Nfree; // nS = Max(S,s) + 0.5 * Nfree; //; // Case b; // exactly one of requestedTraining or requestedTesting >0; // assume training R >0; // nR = max(R,r); // nS = s+u+r-nR; // and s=nS; //; // Case c; // requestedTraining=0, requestedTesting=0; // Nfree = u-|r-s|; // if NFree >=0; // R = Max(r,s) + 0.5 * Nfree = S; // else if r>s; // R = r; S=s+u; // else; // R = r+u; S=s; //; // Next steps:; // Determination of Event numbers R,S, nR, nS; // distribute undefined events according to nR, nS; // finally determine actual sub samples from nR and nS to be used in training / testing; //",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:222,Testability,test,test,222,"// nomenclature r = available training; // s = available testing; // u = available undefined; // R = requested training; // S = requested testing; // nR = to be used to select training events; // nS = to be used to select test events; // we have the constraint: nR + nS < r+s+u,; // since we can not use more events than we have; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nomenclature: Thet(x) = x, if x>0 else 0; // nR = max(R,r) + 0.5 * Nfree; // nS = max(S,s) + 0.5 * Nfree; // nR +nS = R+S + u-R+r-S+s = u+r+s= ok! for R>r; // nR +nS = r+S + u-S+s = u+r+s= ok! for r>R; // three different cases might occur here; //; // Case a; // requestedTraining and requestedTesting >0; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nR = Max(R,r) + 0.5 * Nfree; // nS = Max(S,s) + 0.5 * Nfree; //; // Case b; // exactly one of requestedTraining or requestedTesting >0; // assume training R >0; // nR = max(R,r); // nS = s+u+r-nR; // and s=nS; //; // Case c; // requestedTraining=0, requestedTesting=0; // Nfree = u-|r-s|; // if NFree >=0; // R = Max(r,s) + 0.5 * Nfree = S; // else if r>s; // R = r; S=s+u; // else; // R = r+u; S=s; //; // Next steps:; // Determination of Event numbers R,S, nR, nS; // distribute undefined events according to nR, nS; // finally determine actual sub samples from nR and nS to be used in training / testing; //",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:1335,Testability,test,testing,1335,"// nomenclature r = available training; // s = available testing; // u = available undefined; // R = requested training; // S = requested testing; // nR = to be used to select training events; // nS = to be used to select test events; // we have the constraint: nR + nS < r+s+u,; // since we can not use more events than we have; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nomenclature: Thet(x) = x, if x>0 else 0; // nR = max(R,r) + 0.5 * Nfree; // nS = max(S,s) + 0.5 * Nfree; // nR +nS = R+S + u-R+r-S+s = u+r+s= ok! for R>r; // nR +nS = r+S + u-S+s = u+r+s= ok! for r>R; // three different cases might occur here; //; // Case a; // requestedTraining and requestedTesting >0; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nR = Max(R,r) + 0.5 * Nfree; // nS = Max(S,s) + 0.5 * Nfree; //; // Case b; // exactly one of requestedTraining or requestedTesting >0; // assume training R >0; // nR = max(R,r); // nS = s+u+r-nR; // and s=nS; //; // Case c; // requestedTraining=0, requestedTesting=0; // Nfree = u-|r-s|; // if NFree >=0; // R = Max(r,s) + 0.5 * Nfree = S; // else if r>s; // R = r; S=s+u; // else; // R = r+u; S=s; //; // Next steps:; // Determination of Event numbers R,S, nR, nS; // distribute undefined events according to nR, nS; // finally determine actual sub samples from nR and nS to be used in training / testing; //",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:46,Testability,test,testing,46,"// Case C: balance the number of training and testing events",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:26,Availability,avail,available,26,"// enough unspecified are available to equal training and testing",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:58,Testability,test,testing,58,"// enough unspecified are available to equal training and testing",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:61,Testability,test,testing,61,"// all unspecified are assigned to the smaller of training / testing",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:29,Availability,avail,available,29,"// test if enough events are available",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:3,Testability,test,test,3,"// test if enough events are available",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:33,Testability,test,testing,33,"// sum up number of training and testing events",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:29,Testability,test,testing,29,"// --- collect all training (testing) events into the training (testing) eventvector; // create event vectors reserve enough space",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:64,Testability,test,testing,64,"// --- collect all training (testing) events into the training (testing) eventvector; // create event vectors reserve enough space",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:3,Testability,test,testing,3,"// testing vector",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:32,Testability,test,testingEventVector,32,"// if( std::distance( itTarget, testingEventVector->end()) < Int_t(cls+1) ) {",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:3,Testability,Log,Log,3,"// Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal training tree"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:3,Testability,Log,Log,3,"// Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal testing tree"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:78,Testability,test,testing,78,"// Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal testing tree"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:259,Testability,Test,Testing,259,"//changed by Helge 27.5.2013 What on earth was done here before? I still remember the idea behind this which apparently was; //NOT understood by the 'programmer' :) .. the idea was to have SAME amount of effective TRAINING data for signal and background.; // Testing events are totally irrelevant for this and might actually skew the whole normalisation!!",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:60,Testability,test,testingSizePerClass,60,"// renormFactor.at(cls) = ( (trainingSizePerClass.at(cls) + testingSizePerClass.at(cls))/; // (trainingSumWeightsPerClass.at(cls) + testingSumWeightsPerClass.at(cls)) );; //changed by Helge 27.5.2013",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:132,Testability,test,testingSumWeightsPerClass,132,"// renormFactor.at(cls) = ( (trainingSizePerClass.at(cls) + testingSizePerClass.at(cls))/; // (trainingSumWeightsPerClass.at(cls) + testingSumWeightsPerClass.at(cls)) );; //changed by Helge 27.5.2013",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:374,Testability,test,testing,374,"//changed by Helge 27.5.2013 What on earth was done here before? I still remember the idea behind this which apparently was; //NOT understood by the 'programmer' :) .. the idea was to have SAME amount of effective TRAINING data for signal and background.; //done here was something like having each data source normalized to its number of entries and this even for training+testing together.; // what should this have been good for ???",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:177,Deployability,integrat,integrated,177,"// @(#)root/tmva $Id$; // Author: Joerg Stelzer, Peter Speckmeier; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetInfo *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - DESY, Germany *; * *; * Copyright (c) 2008: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * DESY Hamburg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataSetInfo; \ingroup TMVA. Class that contains all the data information. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:177,Integrability,integrat,integrated,177,"// @(#)root/tmva $Id$; // Author: Joerg Stelzer, Peter Speckmeier; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetInfo *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - DESY, Germany *; * *; * Copyright (c) 2008: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * DESY Hamburg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataSetInfo; \ingroup TMVA. Class that contains all the data information. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:2,Testability,Log,Log,2,"//Log() << kHEADER << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:92,Modifiability,variab,variable,92,"////////////////////////////////////////////////////////////////////////////////; /// add a variable (can be a complex expression) to the set of; /// variables used in the MV analysis",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:150,Modifiability,variab,variables,150,"////////////////////////////////////////////////////////////////////////////////; /// add a variable (can be a complex expression) to the set of; /// variables used in the MV analysis",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:90,Modifiability,variab,variable,90,"////////////////////////////////////////////////////////////////////////////////; /// add variable with given VariableInfo",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:110,Modifiability,Variab,VariableInfo,110,"////////////////////////////////////////////////////////////////////////////////; /// add variable with given VariableInfo",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:102,Modifiability,variab,variables,102,"////////////////////////////////////////////////////////////////////////////////; /// add an array of variables identified by an expression corresponding to an array entry in the tree",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:41,Modifiability,variab,variable,41,"// set corresponding bit indicating is a variable from an array",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:39,Modifiability,variab,variable,39,"// move ""external"" pointer to the next variable in the array",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:92,Modifiability,variab,variable,92,"////////////////////////////////////////////////////////////////////////////////; /// add a variable (can be a complex expression) to the set of; /// variables used in the MV analysis",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:150,Modifiability,variab,variables,150,"////////////////////////////////////////////////////////////////////////////////; /// add a variable (can be a complex expression) to the set of; /// variables used in the MV analysis",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:108,Modifiability,Variab,VariableInfo,108,"////////////////////////////////////////////////////////////////////////////////; /// add target with given VariableInfo",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:156,Modifiability,variab,variables,156,"////////////////////////////////////////////////////////////////////////////////; /// add a spectator (can be a complex expression) to the set of spectator variables used in; /// the MV analysis",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:111,Modifiability,Variab,VariableInfo,111,"////////////////////////////////////////////////////////////////////////////////; /// add spectator with given VariableInfo",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:91,Modifiability,variab,variable,91,"////////////////////////////////////////////////////////////////////////////////; /// find variable by name",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:102,Modifiability,variab,variables,102,"////////////////////////////////////////////////////////////////////////////////; /// returns list of variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetManager.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetManager *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataSetManager; \ingroup TMVA. Class that contains all the data information. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetManager.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetManager.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : DataSetManager *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::DataSetManager; \ingroup TMVA. Class that contains all the data information. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DataSetManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetManager.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:232,Deployability,integrat,integrated,232,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::DecisionTree; \ingroup TMVA. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:232,Integrability,integrat,integrated,232,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::DecisionTree; \ingroup TMVA. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:1435,Modifiability,variab,variable,1435,"eas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::DecisionTree; \ingroup TMVA. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, ",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:1971,Modifiability,variab,variable,1971," <evt@uni-bonn.de> - U of Bonn, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::DecisionTree; \ingroup TMVA. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:84,Usability,simpl,simple,84,"// it is interpreted as a regression tree, where; // currently the separation type (simple least square); // cannot be chosen freely)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:70,Performance,multi-thread,multi-threading,70,"// #### need a lambda function to pass to TThreadExecutor::MapReduce (multi-threading)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:120,Safety,avoid,avoid,120,"// #### Couldn't parallelize this part (filtering events from mother node to daughter nodes); // #### ... would need to avoid the push_back or use some threadsafe mutex locked version...",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:39,Modifiability,variab,variable,39,"// initializing xmin and xmax for each variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:27,Availability,down,down,27,"//intermediate node --> go down",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:86,Usability,clear,clear,86,"////////////////////////////////////////////////////////////////////////////////; /// clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:3,Deployability,update,update,3,"// update the number of nodes after the cleaning",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:238,Modifiability,variab,variable,238,"////////////////////////////////////////////////////////////////////////////////; /// prune (get rid of internal nodes) the Decision tree to avoid overtraining; /// several different pruning methods can be applied as selected by the; /// variable ""fPruneMethod"".",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:141,Safety,avoid,avoid,141,"////////////////////////////////////////////////////////////////////////////////; /// prune (get rid of internal nodes) the Decision tree to avoid overtraining; /// several different pruning methods can be applied as selected by the; /// variable ""fPruneMethod"".",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:37,Testability,log,logfile,37,"// tool = new ExpectedErrorPruneTool(logfile);",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:3,Testability,Log,Log,3,"// Log() << kDEBUG << ""Optimal prune strength (alpha): "" << pruneStrength; // << "" has quality index "" << info->QualityIndex << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:3,Deployability,update,update,3,"// update the number of nodes after the pruning",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:169,Modifiability,variab,variables,169,"////////////////////////////////////////////////////////////////////////////////; /// run the validation sample through the (pruned) tree and fill in the nodes; /// the variables NSValidation and NBValidadtion (i.e. how many of the Signal; /// and Background events from the validation sample. This is then later used; /// when asking for the ""tree quality"" ..",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:94,Security,validat,validation,94,"////////////////////////////////////////////////////////////////////////////////; /// run the validation sample through the (pruned) tree and fill in the nodes; /// the variables NSValidation and NBValidadtion (i.e. how many of the Signal; /// and Background events from the validation sample. This is then later used; /// when asking for the ""tree quality"" ..",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:275,Security,validat,validation,275,"////////////////////////////////////////////////////////////////////////////////; /// run the validation sample through the (pruned) tree and fill in the nodes; /// the variables NSValidation and NBValidadtion (i.e. how many of the Signal; /// and Background events from the validation sample. This is then later used; /// when asking for the ""tree quality"" ..",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:175,Modifiability,variab,variable,175,"////////////////////////////////////////////////////////////////////////////////; /// return the misclassification rate of a pruned tree; /// a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at; /// any node, hence this tree quality testing will stop there, hence test; /// the pruned tree (while the full tree is still in place for normal/later use)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:254,Testability,test,testing,254,"////////////////////////////////////////////////////////////////////////////////; /// return the misclassification rate of a pruned tree; /// a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at; /// any node, hence this tree quality testing will stop there, hence test; /// the pruned tree (while the full tree is still in place for normal/later use)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:285,Testability,test,test,285,"////////////////////////////////////////////////////////////////////////////////; /// return the misclassification rate of a pruned tree; /// a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at; /// any node, hence this tree quality testing will stop there, hence test; /// the pruned tree (while the full tree is still in place for normal/later use)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:26,Availability,error,error,26,"// calculate the weighted error using the pruning validation sample",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:50,Security,validat,validation,50,"// calculate the weighted error using the pruning validation sample",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:164,Availability,down,down,164,"////////////////////////////////////////////////////////////////////////////////; /// pass a single validation event through a pruned decision tree; /// on the way down the tree, fill in all the ""intermediate"" information; /// that would normally be there from training.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:100,Security,validat,validation,100,"////////////////////////////////////////////////////////////////////////////////; /// pass a single validation event through a pruned decision tree; /// on the way down the tree, fill in all the ""intermediate"" information; /// that would normally be there from training.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:135,Security,validat,validation,135,"////////////////////////////////////////////////////////////////////////////////; /// calculate the normalization factor for a pruning validation sample",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:3,Deployability,update,update,3,"// update the stored number of nodes in the Tree",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:172,Testability,test,testing,172,"////////////////////////////////////////////////////////////////////////////////; /// prune a node temporarily (without actually deleting its descendants; /// which allows testing the pruned tree quality for many different; /// pruning stages without ""touching"" the tree.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:328,Modifiability,variab,variables,328,"//===========================================================================; // Done with TrainNodeInfo declaration; //===========================================================================; ////////////////////////////////////////////////////////////////////////////////; /// Decide how to split a node using one of the variables that gives; /// the best separation of signal/background. In order to do this, for each; /// variable a scan of the different cut values in a grid (grid = fNCuts) is; /// performed and the resulting separation gains are compared.; /// in addition to the individual variables, one can also ask for a fisher; /// discriminant being built out of (some) of the variables and used as a; /// possible multivariate split.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:431,Modifiability,variab,variable,431,"//===========================================================================; // Done with TrainNodeInfo declaration; //===========================================================================; ////////////////////////////////////////////////////////////////////////////////; /// Decide how to split a node using one of the variables that gives; /// the best separation of signal/background. In order to do this, for each; /// variable a scan of the different cut values in a grid (grid = fNCuts) is; /// performed and the resulting separation gains are compared.; /// in addition to the individual variables, one can also ask for a fisher; /// discriminant being built out of (some) of the variables and used as a; /// possible multivariate split.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:603,Modifiability,variab,variables,603,"//===========================================================================; // Done with TrainNodeInfo declaration; //===========================================================================; ////////////////////////////////////////////////////////////////////////////////; /// Decide how to split a node using one of the variables that gives; /// the best separation of signal/background. In order to do this, for each; /// variable a scan of the different cut values in a grid (grid = fNCuts) is; /// performed and the resulting separation gains are compared.; /// in addition to the individual variables, one can also ask for a fisher; /// discriminant being built out of (some) of the variables and used as a; /// possible multivariate split.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:695,Modifiability,variab,variables,695,"//===========================================================================; // Done with TrainNodeInfo declaration; //===========================================================================; ////////////////////////////////////////////////////////////////////////////////; /// Decide how to split a node using one of the variables that gives; /// the best separation of signal/background. In order to do this, for each; /// variable a scan of the different cut values in a grid (grid = fNCuts) is; /// performed and the resulting separation gains are compared.; /// in addition to the individual variables, one can also ask for a fisher; /// discriminant being built out of (some) of the variables and used as a; /// possible multivariate split.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:509,Performance,perform,performed,509,"//===========================================================================; // Done with TrainNodeInfo declaration; //===========================================================================; ////////////////////////////////////////////////////////////////////////////////; /// Decide how to split a node using one of the variables that gives; /// the best separation of signal/background. In order to do this, for each; /// variable a scan of the different cut values in a grid (grid = fNCuts) is; /// performed and the resulting separation gains are compared.; /// in addition to the individual variables, one can also ask for a fisher; /// discriminant being built out of (some) of the variables and used as a; /// possible multivariate split.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:25,Modifiability,variab,variables,25,"// ### set up some other variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:100,Modifiability,variab,variable,100,"// the +1 comes from the fact that I treat later on the Fisher output as an; // additional possible variable.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:7,Performance,perform,performance,7,"// for performance reasons instead of std::vector<Bool_t> useVariable(fNvars);",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:21,Modifiability,variab,variables,21,"// map the subset of variables used in randomised trees to the original variable number (used in the Event() )",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:72,Modifiability,variab,variable,72,"// map the subset of variables used in randomised trees to the original variable number (used in the Event() )",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:38,Modifiability,variab,variables,38,"// #### set up a map to the subset of variables using two arrays",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:53,Modifiability,variab,variables,53,"// choose for each node splitting a random subset of variables to choose from",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:13,Modifiability,variab,variable,13,"// #### last variable entry is the fisher variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:42,Modifiability,variab,variable,42,"// #### last variable entry is the fisher variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:86,Modifiability,variab,variables,86,"// that's were I store the ""fisher MVA""; //use for the Fisher discriminant ONLY those variables that show; //some reasonable linear correlation in either Signal or Background",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:7,Performance,perform,performance,7,"// for performance reasons instead of std::vector<Bool_t> useVariable(fNvars);",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:21,Modifiability,variab,variables,21,"// map the subset of variables used in randomised trees to the original variable number (used in the Event() )",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:72,Modifiability,variab,variable,72,"// map the subset of variables used in randomised trees to the original variable number (used in the Event() )",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:25,Modifiability,variab,variables,25,"// now as you know which variables you want to use, count and map them:; // such that you can use an array/matrix filled only with THOSE variables; // that you used",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:137,Modifiability,variab,variables,137,"// now as you know which variables you want to use, count and map them:; // such that you can use an array/matrix filled only with THOSE variables; // that you used",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:20,Modifiability,variab,variables,20,"//now .. pick those variables that are used in the FIsher and are also; // part of the ""allowed"" variables in case of Randomized Trees)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:97,Modifiability,variab,variables,97,"//now .. pick those variables that are used in the FIsher and are also; // part of the ""allowed"" variables in case of Randomized Trees)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:19,Modifiability,variab,variables,19,"// now exclude the variables used in the Fisher cuts, and don't; // use them anymore in the individual variable scan",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:103,Modifiability,variab,variable,103,"// now exclude the variables used in the Fisher cuts, and don't; // use them anymore in the individual variable scan",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:46,Modifiability,variab,variable,46,"// use the Fisher output simple as additional variable; // #### set up the binning info arrays; // #### each var has its own binning since some may be integers ",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:25,Usability,simpl,simple,25,"// use the Fisher output simple as additional variable; // #### set up the binning info arrays; // #### each var has its own binning since some may be integers ",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:46,Modifiability,variab,variable,46,"// ncuts means that we need n+1 bins for each variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:18,Modifiability,variab,variable,18,"// std::cout << "" variable "" << ivar << "" has no proper range in (xmax[ivar]-xmin[ivar] = "" << xmax[ivar]-xmin[ivar] << std::endl;; // std::cout << "" will set useVariable[ivar]=false""<<std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:14,Modifiability,variab,variable,14,"// the fisher variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:39,Modifiability,variab,variables,39,"//set the grid for the cut scan on the variables like this:; //; // | | | | | ... | |; // xmin xmax; //; // cut 0 1 2 3 ... fNCuts-1 (counting from zero); // bin 0 1 2 3 ..... nBins-1=fNCuts (counting from zero); // --> nBins = fNCuts+1; // (NOTE, the cuts at xmin or xmax would just give the whole sample and; // hence can be safely omitted",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:327,Safety,safe,safely,327,"//set the grid for the cut scan on the variables like this:; //; // | | | | | ... | |; // xmin xmax; //; // cut 0 1 2 3 ... fNCuts-1 (counting from zero); // bin 0 1 2 3 ..... nBins-1=fNCuts (counting from zero); // --> nBins = fNCuts+1; // (NOTE, the cuts at xmin or xmax would just give the whole sample and; // hence can be safely omitted",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:14,Modifiability,variab,variable,14,"// the fisher variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:135,Modifiability,variab,variable,135,"// #### When nbins is close to the order of the data this version of parallelization is faster; // #### Parallelize by vectorizing the variable loop",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:14,Modifiability,variab,variable,14,"// the fisher variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:46,Modifiability,variab,variable,46,"// you found the best separation cut for each variable, now compare the variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:72,Modifiability,variab,variables,72,"// you found the best separation cut for each variable, now compare the variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate Fisher coefficients (use fNvars, and set the non-used ones to zero. Might; // be even less storage space on average than storing also the mapping used otherwise; // can always be changed relatively easy",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:44,Modifiability,variab,variable,44,"// take 'fisher coeff. weighted estimate as variable importance, ""Don't fill the offset coefficient though :)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:251,Performance,perform,performance,251,"// #### Now in TrainNodeInfo, but I got a malloc segfault when I tried to destruct arrays there.; // #### So, I changed these from dynamic arrays to std::vector to fix this memory problem; // #### so no need to destruct them anymore. I didn't see any performance drop as a result.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:25,Modifiability,variab,variables,25,"// ### set up some other variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:101,Modifiability,variab,variable,101,"// the +1 comes from the fact that I treat later on the Fisher output as an ; // additional possible variable.",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:7,Performance,perform,performance,7,"// for performance reasons instead of std::vector<Bool_t> useVariable(fNvars);",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:21,Modifiability,variab,variables,21,"// map the subset of variables used in randomised trees to the original variable number (used in the Event() ) ",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:72,Modifiability,variab,variable,72,"// map the subset of variables used in randomised trees to the original variable number (used in the Event() ) ",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:38,Modifiability,variab,variables,38,"// #### set up a map to the subset of variables using two arrays",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:53,Modifiability,variab,variables,53,"// choose for each node splitting a random subset of variables to choose from",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:13,Modifiability,variab,variable,13,"// #### last variable entry is the fisher variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:42,Modifiability,variab,variable,42,"// #### last variable entry is the fisher variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:86,Modifiability,variab,variables,86,"// that's were I store the ""fisher MVA""; //use for the Fisher discriminant ONLY those variables that show; //some reasonable linear correlation in either Signal or Background",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:7,Performance,perform,performance,7,"// for performance reasons instead of std::vector<Bool_t> useVariable(fNvars);",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:21,Modifiability,variab,variables,21,"// map the subset of variables used in randomised trees to the original variable number (used in the Event() ) ",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:72,Modifiability,variab,variable,72,"// map the subset of variables used in randomised trees to the original variable number (used in the Event() ) ",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:25,Modifiability,variab,variables,25,"// now as you know which variables you want to use, count and map them:; // such that you can use an array/matrix filled only with THOSE variables; // that you used",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:137,Modifiability,variab,variables,137,"// now as you know which variables you want to use, count and map them:; // such that you can use an array/matrix filled only with THOSE variables; // that you used",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:20,Modifiability,variab,variables,20,"//now .. pick those variables that are used in the FIsher and are also; // part of the ""allowed"" variables in case of Randomized Trees)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:97,Modifiability,variab,variables,97,"//now .. pick those variables that are used in the FIsher and are also; // part of the ""allowed"" variables in case of Randomized Trees)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:18,Modifiability,variab,variables,18,"// now exclud the variables used in the Fisher cuts, and don't ; // use them anymore in the individual variable scan",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:103,Modifiability,variab,variable,103,"// now exclud the variables used in the Fisher cuts, and don't ; // use them anymore in the individual variable scan",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:46,Modifiability,variab,variable,46,"// use the Fisher output simple as additional variable; // #### OK now what's going on...; // #### looks like we are setting up histograms",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:25,Usability,simpl,simple,25,"// use the Fisher output simple as additional variable; // #### OK now what's going on...; // #### looks like we are setting up histograms",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:28,Modifiability,variab,variables,28,"// #### looping through the variables...",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:51,Modifiability,variab,variable,51,"// #### ncuts means that we need n+1 bins for each variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:32,Modifiability,variab,variable,32,"// #### xmin and xmax for earch variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:29,Modifiability,variab,variable,29,"// #### ok loop through each variable to initialize all the values",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:18,Modifiability,variab,variable,18,"// std::cout << "" variable "" << ivar << "" has no proper range in (xmax[ivar]-xmin[ivar] = "" << xmax[ivar]-xmin[ivar] << std::endl;; // std::cout << "" will set useVariable[ivar]=false""<<std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:14,Modifiability,variab,variable,14,"// the fisher variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:39,Modifiability,variab,variables,39,"//set the grid for the cut scan on the variables like this:; // ; // | | | | | ... | | ; // xmin xmax; //; // cut 0 1 2 3 ... fNCuts-1 (counting from zero); // bin 0 1 2 3 ..... nBins-1=fNCuts (counting from zero); // --> nBins = fNCuts+1; // (NOTE, the cuts at xmin or xmax would just give the whole sample and; // hence can be safely omitted",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:329,Safety,safe,safely,329,"//set the grid for the cut scan on the variables like this:; // ; // | | | | | ... | | ; // xmin xmax; //; // cut 0 1 2 3 ... fNCuts-1 (counting from zero); // bin 0 1 2 3 ..... nBins-1=fNCuts (counting from zero); // --> nBins = fNCuts+1; // (NOTE, the cuts at xmin or xmax would just give the whole sample and; // hence can be safely omitted",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:14,Modifiability,variab,variable,14,"// the fisher variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:54,Modifiability,variab,variable,54,"//now you have found the best separation cut for each variable, now compare the variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:80,Modifiability,variab,variables,80,"//now you have found the best separation cut for each variable, now compare the variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate Fisher coefficients (use fNvars, and set the non-used ones to zero. Might; // be even less storage space on average than storing also the mapping used otherwise; // can always be changed relatively easy",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:44,Modifiability,variab,variable,44,"// take 'fisher coeff. weighted estimate as variable importance, ""Don't fill the offset coefficient though :) ",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:149,Modifiability,variab,variables,149,"////////////////////////////////////////////////////////////////////////////////; /// calculate the fisher coefficients for the event sample and the variables used",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:75,Modifiability,variab,variables,75,"// initialization of global matrices and vectors; // average value of each variables for S, B, S+B",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:30,Modifiability,variab,variables,30,"//; // compute mean values of variables in each sample, and the overall means; //; // initialize internal sum-of-weights variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:121,Modifiability,variab,variables,121,"//; // compute mean values of variables in each sample, and the overall means; //; // initialize internal sum-of-weights variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:142,Testability,assert,assert,142,"// the matrix of covariance 'within class' reflects the dispersion of the; // events relative to the center of gravity of their own class; // assert required",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:49,Modifiability,variab,variables,49,"// product matrices (x-<x>)(y-<y>) where x;y are variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:27,Modifiability,variab,variables,27,"// Fisher = Sum { [coeff]*[variables] }; //; // let Xs be the array of the mean values of variables for signal evts; // let Xb be the array of the mean values of variables for backgd evts; // let InvWith be the inverse matrix of the 'within class' correlation matrix; //; // then the array of Fisher coefficients is; // [coeff] =TMath::Sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:90,Modifiability,variab,variables,90,"// Fisher = Sum { [coeff]*[variables] }; //; // let Xs be the array of the mean values of variables for signal evts; // let Xb be the array of the mean values of variables for backgd evts; // let InvWith be the inverse matrix of the 'within class' correlation matrix; //; // then the array of Fisher coefficients is; // [coeff] =TMath::Sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:162,Modifiability,variab,variables,162,"// Fisher = Sum { [coeff]*[variables] }; //; // let Xs be the array of the mean values of variables for signal evts; // let Xb be the array of the mean values of variables for backgd evts; // let InvWith be the inverse matrix of the 'within class' correlation matrix; //; // then the array of Fisher coefficients is; // [coeff] =TMath::Sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:23,Modifiability,variab,variables,23,"//as we start counting variables from ""zero"", I store the fisher offset at the END",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:146,Modifiability,variab,variable,146,"////////////////////////////////////////////////////////////////////////////////; /// train a node by finding the single optimal cut for a single variable; /// that best separates signal and background (maximizes the separation gain)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:103,Modifiability,variab,variable,103,"// List of optimal cuts, separation gains, and cut types (removed background or signal) - one for each variable; // each spot in parallel no problem",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:30,Performance,perform,performance,30,"// <----- bool is stored (for performance reasons, no std::vector<bool> has been taken)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:90,Integrability,wrap,wrappers,90,"// Initialize (un)weighted counters for signal & background; // Construct a list of event wrappers that point to the original data",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:30,Performance,perform,performance,30,"// <----- bool is stored (for performance reasons, no std::vector<bool> has been taken)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:53,Modifiability,variab,variables,53,"// choose for each node splitting a random subset of variables to choose from",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:32,Modifiability,variab,variables,32,"// loop over all discriminating variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:30,Modifiability,variab,variables,30,"// only optimze with selected variables",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:14,Modifiability,variab,variable,14,"// select the variable to sort by",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:45,Modifiability,variab,variable,45,"// Locate the optimal cut for this (ivar-th) variable",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:106,Modifiability,variab,variable,106,"////////////////////////////////////////////////////////////////////////////////; /// Return the relative variable importance, normalized to all; /// variables together having the importance 1. The importance in; /// evaluated as the total separation-gain that this variable had in; /// the decision trees (weighted by the number of events)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:150,Modifiability,variab,variables,150,"////////////////////////////////////////////////////////////////////////////////; /// Return the relative variable importance, normalized to all; /// variables together having the importance 1. The importance in; /// evaluated as the total separation-gain that this variable had in; /// the decision trees (weighted by the number of events)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:266,Modifiability,variab,variable,266,"////////////////////////////////////////////////////////////////////////////////; /// Return the relative variable importance, normalized to all; /// variables together having the importance 1. The importance in; /// evaluated as the total separation-gain that this variable had in; /// the decision trees (weighted by the number of events)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:121,Modifiability,variab,variable,121,"////////////////////////////////////////////////////////////////////////////////; /// returns the relative importance of variable ivar",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:218,Deployability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTreeNode *; * *; * *; * Description: *; * Implementation of a Decision Tree Node *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * *; * CopyRight (c) 2009: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::; \ingroup TMVA. Node for the Decision Tree. The node specifies ONE variable out of the given set of selection variable; that is used to split the sample which ""arrives"" at the node, into a left; (background-enhanced) and a right (signal-enhanced) sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:218,Integrability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTreeNode *; * *; * *; * Description: *; * Implementation of a Decision Tree Node *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * *; * CopyRight (c) 2009: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::; \ingroup TMVA. Node for the Decision Tree. The node specifies ONE variable out of the given set of selection variable; that is used to split the sample which ""arrives"" at the node, into a left; (background-enhanced) and a right (signal-enhanced) sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:1178,Modifiability,variab,variable,1178,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTreeNode *; * *; * *; * Description: *; * Implementation of a Decision Tree Node *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * *; * CopyRight (c) 2009: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::; \ingroup TMVA. Node for the Decision Tree. The node specifies ONE variable out of the given set of selection variable; that is used to split the sample which ""arrives"" at the node, into a left; (background-enhanced) and a right (signal-enhanced) sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:1221,Modifiability,variab,variable,1221,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTreeNode *; * *; * *; * Description: *; * Implementation of a Decision Tree Node *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * *; * CopyRight (c) 2009: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::; \ingroup TMVA. Node for the Decision Tree. The node specifies ONE variable out of the given set of selection variable; that is used to split the sample which ""arrives"" at the node, into a left; (background-enhanced) and a right (signal-enhanced) sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:1318,Modifiability,enhance,enhanced,1318,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTreeNode *; * *; * *; * Description: *; * Implementation of a Decision Tree Node *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * *; * CopyRight (c) 2009: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::; \ingroup TMVA. Node for the Decision Tree. The node specifies ONE variable out of the given set of selection variable; that is used to split the sample which ""arrives"" at the node, into a left; (background-enhanced) and a right (signal-enhanced) sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:1348,Modifiability,enhance,enhanced,1348,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTreeNode *; * *; * *; * Description: *; * Implementation of a Decision Tree Node *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * *; * CopyRight (c) 2009: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::; \ingroup TMVA. Node for the Decision Tree. The node specifies ONE variable out of the given set of selection variable; that is used to split the sample which ""arrives"" at the node, into a left; (background-enhanced) and a right (signal-enhanced) sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:86,Testability,test,test,86,"////////////////////////////////////////////////////////////////////////////////; /// test event if it descends the tree at this node to the right",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:86,Testability,test,test,86,"////////////////////////////////////////////////////////////////////////////////; /// test event if it descends the tree at this node to the left",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:86,Usability,clear,clear,86,"////////////////////////////////////////////////////////////////////////////////; /// clear the nodes (their S/N, Nevents etc), just keep the structure of the tree",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:195,Security,validat,validation,195,"////////////////////////////////////////////////////////////////////////////////; /// temporary stored node values (number of events, etc.) that originate; /// not from the training but from the validation data (used in pruning)",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:126,Testability,Log,Log,126,"////////////////////////////////////////////////////////////////////////////////; /// Set CC, if traininfo defined, otherwise Log Fatal",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:108,Modifiability,variab,variable,108,"////////////////////////////////////////////////////////////////////////////////; /// return the minimum of variable ivar from the training sample; /// that pass/end up in this node, if traininfo defined, otherwise Log Fatal; /// and return -9999",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:215,Testability,Log,Log,215,"////////////////////////////////////////////////////////////////////////////////; /// return the minimum of variable ivar from the training sample; /// that pass/end up in this node, if traininfo defined, otherwise Log Fatal; /// and return -9999",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:108,Modifiability,variab,variable,108,"////////////////////////////////////////////////////////////////////////////////; /// return the maximum of variable ivar from the training sample; /// that pass/end up in this node, if traininfo defined, otherwise Log Fatal and ; /// return 9999",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:215,Testability,Log,Log,215,"////////////////////////////////////////////////////////////////////////////////; /// return the maximum of variable ivar from the training sample; /// that pass/end up in this node, if traininfo defined, otherwise Log Fatal and ; /// return 9999",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:105,Modifiability,variab,variable,105,"////////////////////////////////////////////////////////////////////////////////; /// set the minimum of variable ivar from the training sample; /// that pass/end up in this node, if traininfo defined",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:105,Modifiability,variab,variable,105,"////////////////////////////////////////////////////////////////////////////////; /// set the maximum of variable ivar from the training sample; /// that pass/end up in this node, if traininfo defined",MatchSource.CODE_COMMENT,tmva/tmva/src/DecisionTreeNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:107,Availability,avail,available,107,//_______________________________________________________________________; /**; Method to see if a file is available to save results; \return Boolean with the status.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:126,Performance,perform,perform,126,//_______________________________________________________________________; /**; Method to book the machine learning method to perform the algorithm.; \param method enum TMVA::Types::EMVA with the type of the mva method; \param methodTitle String with the method title.; \param options String with the options for the method.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:107,Usability,learn,learning,107,//_______________________________________________________________________; /**; Method to book the machine learning method to perform the algorithm.; \param method enum TMVA::Types::EMVA with the type of the mva method; \param methodTitle String with the method title.; \param options String with the options for the method.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:126,Performance,perform,perform,126,//_______________________________________________________________________; /**; Method to book the machine learning method to perform the algorithm.; \param methodName String with the name of the mva method; \param methodTitle String with the method title.; \param options String with the options for the method.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:107,Usability,learn,learning,107,//_______________________________________________________________________; /**; Method to book the machine learning method to perform the algorithm.; \param methodName String with the name of the mva method; \param methodTitle String with the method title.; \param options String with the options for the method.; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:25,Usability,progress bar,progress bar,25,"// under Windows, switch progress bar and color off by default, as the typical windows shell doesn't handle these; // (would need different sequences..)",MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:103,Testability,Test,Test,103,//_______________________________________________________________________; /**; * method to save Train/Test information into the output file.; * \param fDataSetInfo TMVA::DataSetInfo object reference; * \param fAnalysisType Types::kMulticlass and Types::kRegression; */,MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:3,Performance,load,loader,3,"// loader is now in the output file, we dont need to save again",MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:99,Testability,test,test,99,"// some default transformations to evaluate; // NOTE: all transformations are destroyed after this test",MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:54,Safety,avoid,avoid,54,"// remove any trace of identity transform - if given (avoid to apply it twice)",MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:3,Testability,Log,Log,3,"// Log() << kINFO << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:33,Modifiability,variab,variables,33,"// setting a Root dir causes the variables distributions to be saved to the root file",MatchSource.CODE_COMMENT,tmva/tmva/src/Envelope.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:220,Deployability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Event *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:220,Integrability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Event *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:94,Modifiability,variab,variable,94,"////////////////////////////////////////////////////////////////////////////////; /// set the variable arrangement",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:23,Modifiability,variab,variable,23,"// mapping from global variable index (the position in the vector); // to the new index in the subset of variables used by the; // composite classifier",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:105,Modifiability,variab,variables,105,"// mapping from global variable index (the position in the vector); // to the new index in the subset of variables used by the; // composite classifier",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// copies only the variable values",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:107,Modifiability,variab,variable,107,"////////////////////////////////////////////////////////////////////////////////; /// return value of i'th variable",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:82,Modifiability,variab,variables,82,"// hmm now you have a problem, as you do not want to mess with the original event variables; // (change them permanently) ... guess the only way is to add a 'fValuesRearranged' array,; // and living with the fact that it 'doubles' the Event size :(",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:112,Modifiability,variab,variables,112,"////////////////////////////////////////////////////////////////////////////////; /// accessor to the number of variables",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:86,Security,access,accessor,86,"////////////////////////////////////////////////////////////////////////////////; /// accessor to the number of variables",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:6,Modifiability,variab,variables,6,"// if variables have to arranged (as it is the case for the; // composite classifier) the number of the variables changes",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:104,Modifiability,variab,variables,104,"// if variables have to arranged (as it is the case for the; // composite classifier) the number of the variables changes",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:86,Security,access,accessor,86,"////////////////////////////////////////////////////////////////////////////////; /// accessor to the number of targets",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:86,Security,access,accessor,86,"////////////////////////////////////////////////////////////////////////////////; /// accessor to the number of spectators",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:6,Modifiability,variab,variables,6,"// if variables have to arranged (as it is the case for the; // composite classifier) the number of the variables changes",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:104,Modifiability,variab,variables,104,"// if variables have to arranged (as it is the case for the; // composite classifier) the number of the variables changes",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:90,Modifiability,variab,variable,90,"////////////////////////////////////////////////////////////////////////////////; /// set variable ivar to val",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:112,Integrability,depend,depending,112,"////////////////////////////////////////////////////////////////////////////////; /// return the event weight - depending on whether the flag; /// *IgnoreNegWeightsInTraining* is or not. If it is set AND it is; /// used for training, then negative event weights are set to zero !; /// NOTE! For events used in Testing, the ORIGINAL possibly negative; /// event weight is used no matter what",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:310,Testability,Test,Testing,310,"////////////////////////////////////////////////////////////////////////////////; /// return the event weight - depending on whether the flag; /// *IgnoreNegWeightsInTraining* is or not. If it is set AND it is; /// used for training, then negative event weights are set to zero !; /// NOTE! For events used in Testing, the ORIGINAL possibly negative; /// event weight is used no matter what",MatchSource.CODE_COMMENT,tmva/tmva/src/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1081,Availability,error,error,1081,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1129,Availability,error,error,1129,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1281,Availability,error,error,1281,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1391,Availability,error,error,1391,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1447,Availability,error,error,1447,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1489,Availability,error,error,1489,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1512,Availability,error,error,1512,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1654,Availability,error,error,1654,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1707,Availability,error,error,1707,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::ExpectedErrorPruneTool; \ingroup TMVA. A helper class to prune a decision tree using the expected error (C4.5) method. Uses an upper limit on the error made by the classification done by each node.; If the \f$ \frac{S}{S+B} \f$ of the node is \f$ f \f$, then according to the; training sample, the error rate (fraction of misclassified events by this; node) is \f$ (1-f) \f$. Now \f$ f \f$ has a statistical error according to the; binomial distribution hence the error on \f$ f \f$ can be estimated (same error; as the binomial error for efficiency calculations; \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$. This tool prunes branches from a tree if the expected error of a node is less; than that of the sum of the error in its descendants. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:118,Testability,test,test,118,"// must have a valid decision tree to prune, and if the prune strength; // is to be chosen automatically, must have a test sample from; // which to calculate the quality of the pruned tree(s)",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:209,Integrability,depend,depends,209,"/*; dt->ApplyValidationSample(validationSample);; Double_t weights = dt->GetSumWeights(validationSample);; // set the initial prune strength; fPruneStrength = 1.0e-3; //! FIXME somehow make this automatic, it depends strongly on the tree structure; // better to set it too small, it will be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength,",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:30,Security,validat,validationSample,30,"/*; dt->ApplyValidationSample(validationSample);; Double_t weights = dt->GetSumWeights(validationSample);; // set the initial prune strength; fPruneStrength = 1.0e-3; //! FIXME somehow make this automatic, it depends strongly on the tree structure; // better to set it too small, it will be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength,",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:87,Security,validat,validationSample,87,"/*; dt->ApplyValidationSample(validationSample);; Double_t weights = dt->GetSumWeights(validationSample);; // set the initial prune strength; fPruneStrength = 1.0e-3; //! FIXME somehow make this automatic, it depends strongly on the tree structure; // better to set it too small, it will be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength,",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:647,Testability,Log,Log,647,"/*; dt->ApplyValidationSample(validationSample);; Double_t weights = dt->GetSumWeights(validationSample);; // set the initial prune strength; fPruneStrength = 1.0e-3; //! FIXME somehow make this automatic, it depends strongly on the tree structure; // better to set it too small, it will be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength,",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:905,Testability,test,test,905,"/*; dt->ApplyValidationSample(validationSample);; Double_t weights = dt->GetSumWeights(validationSample);; // set the initial prune strength; fPruneStrength = 1.0e-3; //! FIXME somehow make this automatic, it depends strongly on the tree structure; // better to set it too small, it will be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength,",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:971,Testability,Test,TestPrunedTreeQuality,971,"/*; dt->ApplyValidationSample(validationSample);; Double_t weights = dt->GetSumWeights(validationSample);; // set the initial prune strength; fPruneStrength = 1.0e-3; //! FIXME somehow make this automatic, it depends strongly on the tree structure; // better to set it too small, it will be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength,",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1195,Testability,Log,Log,1195,"l be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength, bailing out!"" << Endl;; forceStop = kTRUE;; }; // reset the tree for the next iteration; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(false);; fPruneSequence.clear();; }; // from the set of pruned trees, find the one with the optimal quality ind",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1252,Testability,Log,Log,1252,"l be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength, bailing out!"" << Endl;; forceStop = kTRUE;; }; // reset the tree for the next iteration; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(false);; fPruneSequence.clear();; }; // from the set of pruned trees, find the one with the optimal quality ind",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1328,Testability,Log,Log,1328,"l be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength, bailing out!"" << Endl;; forceStop = kTRUE;; }; // reset the tree for the next iteration; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(false);; fPruneSequence.clear();; }; // from the set of pruned trees, find the one with the optimal quality ind",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1496,Testability,Log,Log,1496,"Count = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength, bailing out!"" << Endl;; forceStop = kTRUE;; }; // reset the tree for the next iteration; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(false);; fPruneSequence.clear();; }; // from the set of pruned trees, find the one with the optimal quality index; std::multimap<Double_t,Double_t>::reverse_iterator it = fQualityMap.rend(); ++it;; fPruneStrength = it->second;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());. // adjust the step",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1735,Testability,Log,Log,1735,"-----------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength, bailing out!"" << Endl;; forceStop = kTRUE;; }; // reset the tree for the next iteration; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(false);; fPruneSequence.clear();; }; // from the set of pruned trees, find the one with the optimal quality index; std::multimap<Double_t,Double_t>::reverse_iterator it = fQualityMap.rend(); ++it;; fPruneStrength = it->second;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());. // adjust the step size for the next tree automatically; fPruneStrength = 1.0e-3;; fDeltaPruneStrength = (fPruneStrength - 1.0)/(Double_t)fQualityMap.size();. return new PruningInfo(it->first, it->second, fPruneSequence);; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1934,Testability,Log,Log,1934,"-----------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength, bailing out!"" << Endl;; forceStop = kTRUE;; }; // reset the tree for the next iteration; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(false);; fPruneSequence.clear();; }; // from the set of pruned trees, find the one with the optimal quality index; std::multimap<Double_t,Double_t>::reverse_iterator it = fQualityMap.rend(); ++it;; fPruneStrength = it->second;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());. // adjust the step size for the next tree automatically; fPruneStrength = 1.0e-3;; fDeltaPruneStrength = (fPruneStrength - 1.0)/(Double_t)fQualityMap.size();. return new PruningInfo(it->first, it->second, fPruneSequence);; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:2199,Usability,clear,clear,2199,"-----------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength, bailing out!"" << Endl;; forceStop = kTRUE;; }; // reset the tree for the next iteration; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(false);; fPruneSequence.clear();; }; // from the set of pruned trees, find the one with the optimal quality index; std::multimap<Double_t,Double_t>::reverse_iterator it = fQualityMap.rend(); ++it;; fPruneStrength = it->second;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());. // adjust the step size for the next tree automatically; fPruneStrength = 1.0e-3;; fDeltaPruneStrength = (fPruneStrength - 1.0)/(Double_t)fQualityMap.size();. return new PruningInfo(it->first, it->second, fPruneSequence);; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:132,Availability,Error,Error,132,"////////////////////////////////////////////////////////////////////////////////; /// recursive pruning of nodes using the Expected Error Pruning (EEP)",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:14,Testability,Log,Log,14,"//node->Print(Log());",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:121,Availability,error,error,121,"////////////////////////////////////////////////////////////////////////////////; /// calculate the expected statistical error on the subtree below ""node""; /// which is used in the expected error pruning",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:190,Availability,error,error,190,"////////////////////////////////////////////////////////////////////////////////; /// calculate the expected statistical error on the subtree below ""node""; /// which is used in the expected error pruning",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:118,Availability,error,error,118,"////////////////////////////////////////////////////////////////////////////////; /// Calculate an UPPER limit on the error made by the classification done; /// by this node. If the S/S+B of the node is f, then according to the; /// training sample, the error rate (fraction of misclassified events by; /// this node) is (1-f); /// Now f has a statistical error according to the binomial distribution; /// hence the error on f can be estimated (same error as the binomial error; /// for efficiency calculations; /// \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:254,Availability,error,error,254,"////////////////////////////////////////////////////////////////////////////////; /// Calculate an UPPER limit on the error made by the classification done; /// by this node. If the S/S+B of the node is f, then according to the; /// training sample, the error rate (fraction of misclassified events by; /// this node) is (1-f); /// Now f has a statistical error according to the binomial distribution; /// hence the error on f can be estimated (same error as the binomial error; /// for efficiency calculations; /// \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:356,Availability,error,error,356,"////////////////////////////////////////////////////////////////////////////////; /// Calculate an UPPER limit on the error made by the classification done; /// by this node. If the S/S+B of the node is f, then according to the; /// training sample, the error rate (fraction of misclassified events by; /// this node) is (1-f); /// Now f has a statistical error according to the binomial distribution; /// hence the error on f can be estimated (same error as the binomial error; /// for efficiency calculations; /// \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:416,Availability,error,error,416,"////////////////////////////////////////////////////////////////////////////////; /// Calculate an UPPER limit on the error made by the classification done; /// by this node. If the S/S+B of the node is f, then according to the; /// training sample, the error rate (fraction of misclassified events by; /// this node) is (1-f); /// Now f has a statistical error according to the binomial distribution; /// hence the error on f can be estimated (same error as the binomial error; /// for efficiency calculations; /// \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:450,Availability,error,error,450,"////////////////////////////////////////////////////////////////////////////////; /// Calculate an UPPER limit on the error made by the classification done; /// by this node. If the S/S+B of the node is f, then according to the; /// training sample, the error rate (fraction of misclassified events by; /// this node) is (1-f); /// Now f has a statistical error according to the binomial distribution; /// hence the error on f can be estimated (same error as the binomial error; /// for efficiency calculations; /// \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:472,Availability,error,error,472,"////////////////////////////////////////////////////////////////////////////////; /// Calculate an UPPER limit on the error made by the classification done; /// by this node. If the S/S+B of the node is f, then according to the; /// training sample, the error rate (fraction of misclassified events by; /// this node) is (1-f); /// Now f has a statistical error according to the binomial distribution; /// hence the error on f can be estimated (same error as the binomial error; /// for efficiency calculations; /// \f$ (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \f$",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:116,Availability,error,error,116,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:392,Availability,error,error,392,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:532,Availability,error,error,532,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:716,Availability,Error,Error,716,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:877,Availability,error,errorRate,877,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:953,Availability,error,error,953,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:989,Availability,error,error,989,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1111,Availability,error,errorRate,1111,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1251,Availability,error,errorRate,1251,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1360,Availability,error,errorRate,1360,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1436,Availability,error,errorRate,1436,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1452,Availability,error,errorRate,1452,"// -------------------------------------------------------------------; // standard algorithm:; // step 1: Estimate error on node using Laplace estimate; // NodeError = (N - n + k -1 ) / (N + k); // N: number of events; // k: number of event classes (2 for Signal, Background); // n: n event out of N belong to the class which has the majority in the node; // step 2: Approximate ""backed-up"" error assuming we did not prune; // (I'm never quite sure if they consider whole subtrees, or only 'next-to-leaf'; // nodes)...; // Subtree error = Sum_children ( P_i * NodeError_i); // P_i = probability of the node to make the decision, i.e. fraction of events in; // leaf node ( N_leaf / N_parent); // step 3:; // Minimum Error Pruning (MEP) according to Niblett/Bratko; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //Double_t p_apriori = 0.5, m=100;; //errorRate = (nEvts - n + (1-p_apriori) * m ) / (nEvts + m);; // Pessimistic error Pruning (proposed by Quinlan (error estimat with continuity approximation); //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (nEvts - n + 0.5) / nEvts ;; //const Double Z=.65;; //# of correctly classified events by this node:; //Double_t n=f*nEvts ;; //errorRate = (f + Z*Z/(2*nEvts ) + Z*sqrt(f/nEvts - f*f/nEvts + Z*Z/4/nEvts /nEvts ) ) / (1 + Z*Z/nEvts );; //errorRate = (n + Z*Z/2 + Z*sqrt(n - n*n/nEvts + Z*Z/4) )/ (nEvts + Z*Z);; //errorRate = 1 - errorRate;; // -------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/ExpectedErrorPruneTool.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:143,Deployability,Update,Updated,143,"// @(#)Root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Kim Albertsson; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors : *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Factory; \ingroup TMVA. This is the main MVA steering class.; It creates all MVA methods, and guides them through the training, testing and; evaluation phases.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:294,Deployability,integrat,integrated,294,"// @(#)Root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Kim Albertsson; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors : *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Factory; \ingroup TMVA. This is the main MVA steering class.; It creates all MVA methods, and guides them through the training, testing and; evaluation phases.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:294,Integrability,integrat,integrated,294,"// @(#)Root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Kim Albertsson; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors : *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Factory; \ingroup TMVA. This is the main MVA steering class.; It creates all MVA methods, and guides them through the training, testing and; evaluation phases.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:1767,Testability,test,testing,1767,"// @(#)Root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Kim Albertsson; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors : *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Factory; \ingroup TMVA. This is the main MVA steering class.; It creates all MVA methods, and guides them through the training, testing and; evaluation phases.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:1733,Usability,guid,guides,1733,"// @(#)Root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Kim Albertsson; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors : *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Factory; \ingroup TMVA. This is the main MVA steering class.; It creates all MVA methods, and guides them through the training, testing and; evaluation phases.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:243,Testability,test,test,243,"////////////////////////////////////////////////////////////////////////////////; /// Standard constructor.; ///; /// - jobname : this name will appear in all weight file names produced by the MVAs; /// - theTargetFile : output ROOT file; the test tree and all evaluation plots; /// will be stored here; /// - theOption : option string; currently: ""V"" for verbose",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:45,Modifiability,config,configurable,45,"// make sure is silent if wanted to; // init configurable",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:25,Usability,progress bar,progress bar,25,"// under Windows, switch progress bar and color off by default, as the typical windows shell doesn't handle these; // (would need different sequences..)",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:45,Modifiability,config,configurable,45,"// make sure is silent if wanted to; // init configurable",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:25,Usability,progress bar,progress bar,25,"// under Windows, switch progress bar and color off by default, as the typical windows shell doesn't handle these; // (would need different sequences..)",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:100,Integrability,message,message,100,"////////////////////////////////////////////////////////////////////////////////; /// Print welcome message.; /// Options are: kLogoWelcomeMsg, kIsometricWelcomeMsg, kLeanWelcomeMsg",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:156,Modifiability,Config,Config,156,"// problem with call of REGISTER_METHOD macro ...; // ClassifierFactory::DestroyInstance();; // Types::DestroyInstance();; // Tools::DestroyInstance();; // Config::DestroyInstance();",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:74,Performance,load,loader,74,"// << gTools().Color(""reset"")<<"" DataSet Name: ""<<gTools().Color(""bold"")<<loader->GetName()",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:31,Performance,perform,performed,31,"// check-for-unused-options is performed; may be overridden by derived classes",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:115,Deployability,configurat,configuration,115,"////////////////////////////////////////////////////////////////////////////////; /// Books MVA method. The option configuration string is custom for each MVA; /// the TString field ""theNameAppendix"" serves to define (and distinguish); /// several instances of a given MVA, eg, when one wants to compare the; /// performance of various configurations",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:336,Deployability,configurat,configurations,336,"////////////////////////////////////////////////////////////////////////////////; /// Books MVA method. The option configuration string is custom for each MVA; /// the TString field ""theNameAppendix"" serves to define (and distinguish); /// several instances of a given MVA, eg, when one wants to compare the; /// performance of various configurations",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:115,Modifiability,config,configuration,115,"////////////////////////////////////////////////////////////////////////////////; /// Books MVA method. The option configuration string is custom for each MVA; /// the TString field ""theNameAppendix"" serves to define (and distinguish); /// several instances of a given MVA, eg, when one wants to compare the; /// performance of various configurations",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:336,Modifiability,config,configurations,336,"////////////////////////////////////////////////////////////////////////////////; /// Books MVA method. The option configuration string is custom for each MVA; /// the TString field ""theNameAppendix"" serves to define (and distinguish); /// several instances of a given MVA, eg, when one wants to compare the; /// performance of various configurations",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:313,Performance,perform,performance,313,"////////////////////////////////////////////////////////////////////////////////; /// Books MVA method. The option configuration string is custom for each MVA; /// the TString field ""theNameAppendix"" serves to define (and distinguish); /// several instances of a given MVA, eg, when one wants to compare the; /// performance of various configurations",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:265,Performance,load,loading,265,"////////////////////////////////////////////////////////////////////////////////; /// Adds an already constructed method to be managed by this factory.; ///; /// \note Private.; /// \note Know what you are doing when using this method. The method that you; /// are loading could be trained already.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Performance,load,loader,3,"// loader is now in the output file, we dont need to save again",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:99,Testability,test,test,99,"// some default transformations to evaluate; // NOTE: all transformations are destroyed after this test",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:54,Safety,avoid,avoid,54,"// remove any trace of identity transform - if given (avoid to apply it twice)",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Testability,Log,Log,3,"// Log() << kINFO << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:33,Modifiability,variab,variables,33,"// setting a Root dir causes the variables distributions to be saved to the root file",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:28,Performance,optimiz,optimize,28,"// iterate over methods and optimize",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:283,Availability,error,error,283,"////////////////////////////////////////////////////////////////////////////////; /// Argument iClass specifies the class to generate the ROC curve in a; /// multiclass setting. It is ignored for binary classification.; ///; /// Returns a ROC graph for a given method, or nullptr on error.; ///; /// Note: Evaluation of the given method must have been run prior to ROC; /// generation through Factory::EvaluateAllMetods.; ///; /// NOTE: The ROC curve is 1 vs. all where the given class is considered signal; /// and the others considered background. This is ok in binary classification; /// but in in multi class classification, the ROC surface is an N dimensional; /// shape, where N is number of classes - 1.",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:283,Availability,error,error,283,"////////////////////////////////////////////////////////////////////////////////; /// Argument iClass specifies the class to generate the ROC curve in a; /// multiclass setting. It is ignored for binary classification.; ///; /// Returns a ROC graph for a given method, or nullptr on error.; ///; /// Note: Evaluation of the given method must have been run prior to ROC; /// generation through Factory::EvaluateAllMetods.; ///; /// NOTE: The ROC curve is 1 vs. all where the given class is considered signal; /// and the others considered background. This is ok in binary classification; /// but in in multi class classification, the ROC surface is an N dimensional; /// shape, where N is number of classes - 1.",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:189,Performance,perform,performance,189,"////////////////////////////////////////////////////////////////////////////////; /// Generate a collection of graphs, for all methods for a given class. Suitable; /// for comparing method performance.; ///; /// Argument iClass specifies the class to generate the ROC curve in a; /// multiclass setting. It is ignored for binary classification.; ///; /// NOTE: The ROC curve is 1 vs. all where the given class is considered signal; /// and the others considered background. This is ok in binary classification; /// but in in multi class classification, the ROC surface is an N dimensional; /// shape, where N is number of classes - 1.",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:189,Performance,perform,performance,189,"////////////////////////////////////////////////////////////////////////////////; /// Generate a collection of graphs, for all methods for a given class. Suitable; /// for comparing method performance.; ///; /// Argument iClass specifies the class to generate the ROC curve in a; /// multiclass setting. It is ignored for binary classification.; ///; /// NOTE: The ROC curve is 1 vs. all where the given class is considered signal; /// and the others considered background. This is ok in binary classification; /// but in in multi class classification, the ROC surface is an N dimensional; /// shape, where N is number of classes - 1.",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:32,Testability,Log,Log,32,"// here the training starts; // Log() << kINFO << "" "" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Modifiability,variab,variable,3,"// variable ranking; // Log() << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:24,Testability,Log,Log,24,"// variable ranking; // Log() << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:198,Testability,test,testing,198,"// delete all methods and recreate them from weight file - this ensures that the application; // of the methods (in TMVAClassificationApplication) is consistent with the results obtained; // in the testing; // Log() << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:210,Testability,Log,Log,210,"// delete all methods and recreate them from weight file - this ensures that the application; // of the methods (in TMVAClassificationApplication) is consistent with the results obtained; // in the testing; // Log() << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:122,Testability,test,testing,122,"////////////////////////////////////////////////////////////////////////////////; /// Evaluates all booked methods on the testing data and adds the output to the; /// Results in the corresponiding DataSet.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:28,Testability,test,test,28,"// iterate over methods and test",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:43,Integrability,message,messages,43,"// no classifier specified, print all help messages",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:108,Integrability,message,message,108,"////////////////////////////////////////////////////////////////////////////////; /// Print predefined help message of classifier.; /// Iterate over methods and test.",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:161,Testability,test,test,161,"////////////////////////////////////////////////////////////////////////////////; /// Print predefined help message of classifier.; /// Iterate over methods and test.",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:43,Integrability,message,messages,43,"// no classifier specified, print all help messages",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:114,Modifiability,variab,variables,114,"////////////////////////////////////////////////////////////////////////////////; /// Iterates over all MVA input variables and evaluates them.",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:313,Modifiability,variab,variables,313,"// -----------------------------------------------------------------------; // First part of evaluation process; // --> compute efficiencies, and other separation estimators; // -----------------------------------------------------------------------; // although equal, we now want to separate the output for the variables; // and the real methods",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:35,Modifiability,Variab,Variable,35,"// will be 0 for a Method; 1 for a Variable",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:15,Modifiability,Variab,Variable,15,"// 0 Method; 1 Variable",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:31,Testability,test,test,31,"// ""bias"" of the regression on test data",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:30,Testability,test,test,30,"// ""dev"" of the regression on test data",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:30,Testability,test,test,30,"// ""rms"" of the regression on test data",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:31,Testability,test,test,31,"// ""minf"" of the regression on test data",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:36,Testability,test,test,36,"// correlation of the regression on test data; // same as above but for 'truncated' quantities (computed for events within 2sigma of RMS)",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:214,Testability,Test,TestMulticlass,214,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; // Find approximate optimal working point w.r.t. signalEfficiency * signalPurity.; // theMethod->TestMulticlass(); // This is where the actual GA calc is done; // multiclass_testEff.push_back(theMethod->GetMulticlassEfficiency(multiclass_testPur));",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Performance,perform,perform,3,"// perform the evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:16,Modifiability,variab,variables,16,"// now sort the variables according to the best 'eff at Beff=0.10'",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:196,Modifiability,variab,variables,196,"// -----------------------------------------------------------------------; // Second part of evaluation process; // --> compute correlations among MVAs; // --> compute correlations between input variables and MVA (determines importance); // --> count overlaps; // -----------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:25,Testability,test,test,25,"// init...; // loop over test tree",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:11,Modifiability,variab,variables,11,"// extract variables - to MVA matrix",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:59,Testability,test,test,59,"// give notice that cut method has been excluded from this test",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Testability,Log,Log,3,"// Log() << kINFO << ""DataSet Name: MVA Method: <Bias> <Bias_T> RMS RMS_T | MutInf; // MutInf_T"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:256,Testability,Log,Log,256,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; //; // // --- Acheivable signal efficiency * signal purity; // // --------------------------------------------------------------------; // Log() << kINFO << Endl;; // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; // Log() << kINFO << hLine << Endl;; // // iterate over methods and evaluate; // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; // if (theMethod == 0) {; // continue;; // }; // TString header = ""DataSet Name MVA Method "";; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; // }; // Log() << kINFO << header << Endl;; // Log() << kINFO << hLine << Endl;; // for (Int_t i = 0; i < nmeth_used[0]; i++) {; // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; // }; // Log() << kINFO << res << Endl;; // }; // Log() << kINFO << hLine << Endl;; // Log() << kINFO << Endl;; // }; // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; // --------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:284,Testability,Log,Log,284,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; //; // // --- Acheivable signal efficiency * signal purity; // // --------------------------------------------------------------------; // Log() << kINFO << Endl;; // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; // Log() << kINFO << hLine << Endl;; // // iterate over methods and evaluate; // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; // if (theMethod == 0) {; // continue;; // }; // TString header = ""DataSet Name MVA Method "";; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; // }; // Log() << kINFO << header << Endl;; // Log() << kINFO << hLine << Endl;; // for (Int_t i = 0; i < nmeth_used[0]; i++) {; // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; // }; // Log() << kINFO << res << Endl;; // }; // Log() << kINFO << hLine << Endl;; // Log() << kINFO << Endl;; // }; // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; // --------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:390,Testability,Log,Log,390,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; //; // // --- Acheivable signal efficiency * signal purity; // // --------------------------------------------------------------------; // Log() << kINFO << Endl;; // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; // Log() << kINFO << hLine << Endl;; // // iterate over methods and evaluate; // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; // if (theMethod == 0) {; // continue;; // }; // TString header = ""DataSet Name MVA Method "";; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; // }; // Log() << kINFO << header << Endl;; // Log() << kINFO << hLine << Endl;; // for (Int_t i = 0; i < nmeth_used[0]; i++) {; // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; // }; // Log() << kINFO << res << Endl;; // }; // Log() << kINFO << hLine << Endl;; // Log() << kINFO << Endl;; // }; // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; // --------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:916,Testability,Log,Log,916,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; //; // // --- Acheivable signal efficiency * signal purity; // // --------------------------------------------------------------------; // Log() << kINFO << Endl;; // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; // Log() << kINFO << hLine << Endl;; // // iterate over methods and evaluate; // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; // if (theMethod == 0) {; // continue;; // }; // TString header = ""DataSet Name MVA Method "";; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; // }; // Log() << kINFO << header << Endl;; // Log() << kINFO << hLine << Endl;; // for (Int_t i = 0; i < nmeth_used[0]; i++) {; // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; // }; // Log() << kINFO << res << Endl;; // }; // Log() << kINFO << hLine << Endl;; // Log() << kINFO << Endl;; // }; // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; // --------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:954,Testability,Log,Log,954,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; //; // // --- Acheivable signal efficiency * signal purity; // // --------------------------------------------------------------------; // Log() << kINFO << Endl;; // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; // Log() << kINFO << hLine << Endl;; // // iterate over methods and evaluate; // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; // if (theMethod == 0) {; // continue;; // }; // TString header = ""DataSet Name MVA Method "";; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; // }; // Log() << kINFO << header << Endl;; // Log() << kINFO << hLine << Endl;; // for (Int_t i = 0; i < nmeth_used[0]; i++) {; // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; // }; // Log() << kINFO << res << Endl;; // }; // Log() << kINFO << hLine << Endl;; // Log() << kINFO << Endl;; // }; // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; // --------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:1336,Testability,Log,Log,1336,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; //; // // --- Acheivable signal efficiency * signal purity; // // --------------------------------------------------------------------; // Log() << kINFO << Endl;; // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; // Log() << kINFO << hLine << Endl;; // // iterate over methods and evaluate; // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; // if (theMethod == 0) {; // continue;; // }; // TString header = ""DataSet Name MVA Method "";; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; // }; // Log() << kINFO << header << Endl;; // Log() << kINFO << hLine << Endl;; // for (Int_t i = 0; i < nmeth_used[0]; i++) {; // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; // }; // Log() << kINFO << res << Endl;; // }; // Log() << kINFO << hLine << Endl;; // Log() << kINFO << Endl;; // }; // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; // --------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:1377,Testability,Log,Log,1377,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; //; // // --- Acheivable signal efficiency * signal purity; // // --------------------------------------------------------------------; // Log() << kINFO << Endl;; // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; // Log() << kINFO << hLine << Endl;; // // iterate over methods and evaluate; // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; // if (theMethod == 0) {; // continue;; // }; // TString header = ""DataSet Name MVA Method "";; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; // }; // Log() << kINFO << header << Endl;; // Log() << kINFO << hLine << Endl;; // for (Int_t i = 0; i < nmeth_used[0]; i++) {; // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; // }; // Log() << kINFO << res << Endl;; // }; // Log() << kINFO << hLine << Endl;; // Log() << kINFO << Endl;; // }; // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; // --------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:1414,Testability,Log,Log,1414,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; //; // // --- Acheivable signal efficiency * signal purity; // // --------------------------------------------------------------------; // Log() << kINFO << Endl;; // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; // Log() << kINFO << hLine << Endl;; // // iterate over methods and evaluate; // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; // if (theMethod == 0) {; // continue;; // }; // TString header = ""DataSet Name MVA Method "";; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; // }; // Log() << kINFO << header << Endl;; // Log() << kINFO << hLine << Endl;; // for (Int_t i = 0; i < nmeth_used[0]; i++) {; // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; // }; // Log() << kINFO << res << Endl;; // }; // Log() << kINFO << hLine << Endl;; // Log() << kINFO << Endl;; // }; // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; // --------------------------------------------------------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Testability,assert,assert,3,"// assert (classLabledWidth >= valueLabelWidth + 2); // if (...) {Log() << kWARN << ""..."" << Endl; }; // TODO: Ensure matrices are same size.",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:66,Testability,Log,Log,66,"// assert (classLabledWidth >= valueLabelWidth + 2); // if (...) {Log() << kWARN << ""..."" << Endl; }; // TODO: Ensure matrices are same size.",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:65,Availability,error,error,65,"// Log() << kDEBUG << ""DataSet MVA Signal efficiency at bkg eff.(error):; // | Sepa- Signifi- "" << Endl; Log() << kDEBUG << ""Name: Method: @B=0.01; // @B=0.10 @B=0.30 ROC-integ ROCCurve| ration: cance: "" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Testability,Log,Log,3,"// Log() << kDEBUG << ""DataSet MVA Signal efficiency at bkg eff.(error):; // | Sepa- Signifi- "" << Endl; Log() << kDEBUG << ""Name: Method: @B=0.01; // @B=0.10 @B=0.30 ROC-integ ROCCurve| ration: cance: "" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:105,Testability,Log,Log,105,"// Log() << kDEBUG << ""DataSet MVA Signal efficiency at bkg eff.(error):; // | Sepa- Signifi- "" << Endl; Log() << kDEBUG << ""Name: Method: @B=0.01; // @B=0.10 @B=0.30 ROC-integ ROCCurve| ration: cance: "" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Testability,Log,Log,3,"// Log() << kDEBUG << Form(""%-20s %-15s: %#1.3f(%02i) %#1.3f(%02i) %#1.3f(%02i); // %#1.3f %#1.3f | -- --"",; // datasetName.Data(),; // methodName.Data(),; // eff01[k][i], Int_t(1000*eff01err[k][i]),; // eff10[k][i], Int_t(1000*eff10err[k][i]),; // eff30[k][i], Int_t(1000*eff30err[k][i]),; // effArea[k][i],rocIntegral) << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Testability,Log,Log,3,"// Log() << kDEBUG << Form(""%-20s %-15s: %#1.3f(%02i) %#1.3f(%02i) %#1.3f(%02i); // %#1.3f %#1.3f | %#1.3f %#1.3f"",; // datasetName.Data(),; // methodName.Data(),; // eff01[k][i], Int_t(1000*eff01err[k][i]),; // eff10[k][i], Int_t(1000*eff10err[k][i]),; // eff30[k][i], Int_t(1000*eff30err[k][i]),; // effArea[k][i],rocIntegral,; // sep[k][i], sig[k][i]) << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:9,Testability,test,test,9,"// write test/training trees",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:95,Modifiability,Variab,Variable,95,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate Variable Importance",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:94,Modifiability,variab,variables,94,"// we need silent file here because we need fast classification results; // getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:108,Modifiability,variab,variable,108,"// we need silent file here because we need fast classification results; // getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:128,Performance,load,loader,128,"// we need silent file here because we need fast classification results; // getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:40,Availability,error,error,40,"// limit nbits to less than 30 to avoid error converting from double to uint and also cannot deal with too many combinations",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:34,Safety,avoid,avoid,34,"// limit nbits to less than 30 to avoid error converting from double to uint and also cannot deal with too many combinations",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:21,Modifiability,variab,variables,21,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:35,Modifiability,variab,variable,35,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:55,Performance,load,loader,55,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:33,Modifiability,variab,variable,33,"// data loader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:8,Performance,load,loader,8,"// data loader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:55,Performance,load,loader,55,"// data loader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:10,Modifiability,variab,variables,10,"// adding variables from seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:9,Testability,Test,Test,9,"// Train/Test/Evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:21,Modifiability,variab,variable,21,"// need at least one variable; // NOTE: if sub-seed is zero then is the special case; // that count in xbitset is 1",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:21,Modifiability,variab,variables,21,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:35,Modifiability,variab,variable,35,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:55,Performance,load,loader,55,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:33,Modifiability,variab,variable,33,"// data loader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:8,Performance,load,loader,8,"// data loader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:55,Performance,load,loader,55,"// data loader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:10,Modifiability,variab,variables,10,"// adding variables from seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Performance,Load,Loading,3,"// Loading Dataset",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:9,Testability,Test,Test,9,"// Train/Test/Evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:21,Modifiability,variab,variable,21,"// need at least one variable; // NOTE: if sub-seed is zero then is the special case; // that count in xbitset is 1",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:12,Performance,load,loader,12,"// creating loader for sub-seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:10,Modifiability,variab,variables,10,"// adding variables from sub-seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Performance,Load,Loading,3,"// Loading Dataset",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:9,Testability,Test,Test,9,"// Train/Test/Evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:21,Modifiability,variab,variables,21,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:35,Modifiability,variab,variable,35,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:55,Performance,load,loader,55,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:33,Modifiability,variab,variable,33,"// data loader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:8,Performance,load,loader,8,"// data loader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:55,Performance,load,loader,55,"// data loader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:10,Modifiability,variab,variables,10,"// adding variables from seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Performance,Load,Loading,3,"// Loading Dataset",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:9,Testability,Test,Test,9,"// Train/Test/Evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:21,Modifiability,variab,variable,21,"// need at least one variable; // NOTE: if sub-seed is zero then is the special case; // that count in xbitset is 1",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:12,Performance,load,loader,12,"// creating loader for sub-seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:10,Modifiability,variab,variables,10,"// adding variables from sub-seed",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Performance,Load,Loading,3,"// Loading Dataset",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:9,Testability,Test,Test,9,"// Train/Test/Evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/FitterBase.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : FitterBase *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::FitterBase; \ingroup TMVA. Base class for TMVA fitters. Also defines generalised fitting interface. */",MatchSource.CODE_COMMENT,tmva/tmva/src/FitterBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/FitterBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/FitterBase.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : FitterBase *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::FitterBase; \ingroup TMVA. Base class for TMVA fitters. Also defines generalised fitting interface. */",MatchSource.CODE_COMMENT,tmva/tmva/src/FitterBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/FitterBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/FitterBase.cxx:1098,Integrability,interface,interface,1098,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : FitterBase *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::FitterBase; \ingroup TMVA. Base class for TMVA fitters. Also defines generalised fitting interface. */",MatchSource.CODE_COMMENT,tmva/tmva/src/FitterBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/FitterBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/FitterBase.cxx:105,Integrability,interface,interface,105,"////////////////////////////////////////////////////////////////////////////////; /// estimator function interface for fitting",MatchSource.CODE_COMMENT,tmva/tmva/src/FitterBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/FitterBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/FitterBase.cxx:105,Integrability,interface,interface,105,"////////////////////////////////////////////////////////////////////////////////; /// estimator function interface for fitting",MatchSource.CODE_COMMENT,tmva/tmva/src/FitterBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/FitterBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GeneticAlgorithm *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GeneticAlgorithm; \ingroup TMVA. Base definition for genetic algorithm. */",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticAlgorithm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GeneticAlgorithm *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GeneticAlgorithm; \ingroup TMVA. Base definition for genetic algorithm. */",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticAlgorithm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:444,Modifiability,variab,variable,444,"////////////////////////////////////////////////////////////////////////////////; /// Constructor; ///; /// Parameters:; ///; /// - int populationSize : defines the number of ""Individuals"" which are created and tested; /// within one Generation (Iteration of the Evolution); /// - std::vector<TMVA::Interval*> ranges : Interval holds the information of an interval, where the GetMin; /// gets the low and GetMax gets the high constraint of the variable; /// the size of ""ranges"" is the number of coefficients which are optimised; /// Purpose:; ///; /// Creates a random population with individuals of the size ranges.size()",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticAlgorithm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:211,Testability,test,tested,211,"////////////////////////////////////////////////////////////////////////////////; /// Constructor; ///; /// Parameters:; ///; /// - int populationSize : defines the number of ""Individuals"" which are created and tested; /// within one Generation (Iteration of the Evolution); /// - std::vector<TMVA::Interval*> ranges : Interval holds the information of an interval, where the GetMin; /// gets the low and GetMax gets the high constraint of the variable; /// the size of ""ranges"" is the number of coefficients which are optimised; /// Purpose:; ///; /// Creates a random population with individuals of the size ranges.size()",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticAlgorithm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:515,Usability,simpl,simply,515,"////////////////////////////////////////////////////////////////////////////////; /// if the ""fitnessFunction"" is called multiple times for one set of; /// factors (because i.e. each event of a TTree has to be assessed with; /// each set of Factors proposed by the Genetic Algorithm) the value; /// of the current calculation has to be added(? or else) to the value; /// obtained up to now.; /// example: some chi-square is calculated for every event,; /// after every event the new chi-square (newValue) has to be simply; /// added to the oldValue.; ///; /// this function has to be overridden eventually; /// it might contain only the following return statement.; /// return oldValue + newValue;",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticAlgorithm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:756,Energy Efficiency,reduce,reduce,756,"////////////////////////////////////////////////////////////////////////////////; /// this function provides the ability to change the stepSize of a mutation according to; /// the success of the last generations.; ///; /// Parameters:; ///; /// - int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); /// - int successSteps : >sucessSteps Generations could improve the result; /// - double factor : than multiply the stepSize ( spread ) by this factor; ///; /// (if ofSteps == successSteps nothing is changed, if ofSteps < successSteps, the spread; /// is divided by the factor); ///; /// using this function one can increase the stepSize of the mutation when we have; /// good success (to pass fast through the easy phase-space) and reduce the stepSize; /// if we are in a difficult ""territory"" of the phase-space.",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticAlgorithm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:303,Modifiability,variab,variable,303,"////////////////////////////////////////////////////////////////////////////////; /// this function provides the ability to change the stepSize of a mutation according to; /// the success of the last generations.; ///; /// Parameters:; ///; /// - int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); /// - int successSteps : >sucessSteps Generations could improve the result; /// - double factor : than multiply the stepSize ( spread ) by this factor; ///; /// (if ofSteps == successSteps nothing is changed, if ofSteps < successSteps, the spread; /// is divided by the factor); ///; /// using this function one can increase the stepSize of the mutation when we have; /// good success (to pass fast through the easy phase-space) and reduce the stepSize; /// if we are in a difficult ""territory"" of the phase-space.",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticAlgorithm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:248,Usability,simpl,simple,248,"////////////////////////////////////////////////////////////////////////////////; /// gives back true if the last ""steps"" steps have lead to an improvement of the; /// ""fitness"" of the ""individuals"" of at least ""improvement""; ///; /// this gives a simple measure of if the fitness of the individuals is; /// converging and no major improvement is to be expected soon.",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticAlgorithm.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticFitter *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GeneticFitter; \ingroup TMVA. Fitter using a Genetic Algorithm. */",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : GeneticFitter *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GeneticFitter; \ingroup TMVA. Fitter using a Genetic Algorithm. */",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx:93,Deployability,configurat,configuration,93,"////////////////////////////////////////////////////////////////////////////////; /// set GA configuration parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx:93,Modifiability,config,configuration,93,"////////////////////////////////////////////////////////////////////////////////; /// set GA configuration parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx:61,Energy Efficiency,reduce,reduces,61,"// gstore.SetMakeCopies(kTRUE); // commented out, because it reduces speed; // timing of GA",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx:97,Modifiability,variab,variables,97,"// ---- perform series of fits to achieve best convergence; // ""m_ga_spread"" times the number of variables",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx:8,Performance,perform,perform,8,"// ---- perform series of fits to achieve best convergence; // ""m_ga_spread"" times the number of variables",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx:57,Energy Efficiency,reduce,reduces,57,"// ga.SetMakeCopies(kTRUE); // commented out, because it reduces speed",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx:3,Energy Efficiency,monitor,monitor,3,"// monitor progrss",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticGenes.cxx:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GeneticGenes *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticGenes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticGenes.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticGenes.cxx:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GeneticGenes *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticGenes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticGenes.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticGenes.cxx:63,Integrability,interface,interface,63,/*! \class TMVA::GeneticGenes; \ingroup TMVA. Cut optimisation interface class for genetic algorithm. */,MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticGenes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticGenes.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GeneticPopulation *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GeneticPopulation; \ingroup TMVA. Population definition for genetic algorithm. */",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticPopulation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GeneticPopulation *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GeneticPopulation; \ingroup TMVA. Population definition for genetic algorithm. */",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticPopulation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx:119,Safety,safe,safe,119,"//#ifdef _GLIBCXX_PARALLEL; // #pragma omp parallel; // #pragma omp for; //#endif; // The range methods are not thread safe!",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticPopulation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx:114,Modifiability,variab,variables,114,"////////////////////////////////////////////////////////////////////////////////; /// add an individual (a set of variables) to the population; /// if there is a set of variables which is known to perform good, they can be given as a hint to the population",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticPopulation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx:169,Modifiability,variab,variables,169,"////////////////////////////////////////////////////////////////////////////////; /// add an individual (a set of variables) to the population; /// if there is a set of variables which is known to perform good, they can be given as a hint to the population",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticPopulation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx:197,Performance,perform,perform,197,"////////////////////////////////////////////////////////////////////////////////; /// add an individual (a set of variables) to the population; /// if there is a set of variables which is known to perform good, they can be given as a hint to the population",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticPopulation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticPopulation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticRange.cxx:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GeneticRange *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; * File and Version Information: *; **********************************************************************************/; /*! \class TMVA::GeneticRange; \ingroup TMVA. Range definition for genetic algorithm. */",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticRange.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticRange.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticRange.cxx:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GeneticRange *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; * File and Version Information: *; **********************************************************************************/; /*! \class TMVA::GeneticRange; \ingroup TMVA. Range definition for genetic algorithm. */",MatchSource.CODE_COMMENT,tmva/tmva/src/GeneticRange.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticRange.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndex.cxx:843,Availability,down,down,843,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GiniIndex *; * *; * *; * Description: Implementation of the GiniIndex as separation criterion *; * Large Gini Indices (maximum 0.5) mean , that the sample is well *; * mixed (same amount of signal and bkg) *; * bkg. Small Indices mean, well separated. *; * general definition: *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * for just Signal and Background classes this boils down to: *; * Gini(Sample) = 2s*b/(s+b)^2 *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GiniIndex; \ingroup TMVA. Implementation of the GiniIndex as separation criterion. Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same; amount of signal and bkg) bkg. Small Indices mean, well separated. #### General definition:. \f[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \f]. Where:. \f$ M \f$ is a sample of whatever \f$ N \f$ elements (events) that belong; to \f$ K \f$ different classes. \f$ c(k) \f$ is the number of elem",MatchSource.CODE_COMMENT,tmva/tmva/src/GiniIndex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndex.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndex.cxx:2088,Availability,down,down,2088,"*************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GiniIndex *; * *; * *; * Description: Implementation of the GiniIndex as separation criterion *; * Large Gini Indices (maximum 0.5) mean , that the sample is well *; * mixed (same amount of signal and bkg) *; * bkg. Small Indices mean, well separated. *; * general definition: *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * for just Signal and Background classes this boils down to: *; * Gini(Sample) = 2s*b/(s+b)^2 *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GiniIndex; \ingroup TMVA. Implementation of the GiniIndex as separation criterion. Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same; amount of signal and bkg) bkg. Small Indices mean, well separated. #### General definition:. \f[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \f]. Where:. \f$ M \f$ is a sample of whatever \f$ N \f$ elements (events) that belong; to \f$ K \f$ different classes. \f$ c(k) \f$ is the number of elements that belong to class \f$ k \f$ for just; Signal and Background classes this boils down to:. \f[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \f]; */",MatchSource.CODE_COMMENT,tmva/tmva/src/GiniIndex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndex.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndex.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GiniIndex *; * *; * *; * Description: Implementation of the GiniIndex as separation criterion *; * Large Gini Indices (maximum 0.5) mean , that the sample is well *; * mixed (same amount of signal and bkg) *; * bkg. Small Indices mean, well separated. *; * general definition: *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * for just Signal and Background classes this boils down to: *; * Gini(Sample) = 2s*b/(s+b)^2 *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GiniIndex; \ingroup TMVA. Implementation of the GiniIndex as separation criterion. Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same; amount of signal and bkg) bkg. Small Indices mean, well separated. #### General definition:. \f[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \f]. Where:. \f$ M \f$ is a sample of whatever \f$ N \f$ elements (events) that belong; to \f$ K \f$ different classes. \f$ c(k) \f$ is the number of elem",MatchSource.CODE_COMMENT,tmva/tmva/src/GiniIndex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndex.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndex.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GiniIndex *; * *; * *; * Description: Implementation of the GiniIndex as separation criterion *; * Large Gini Indices (maximum 0.5) mean , that the sample is well *; * mixed (same amount of signal and bkg) *; * bkg. Small Indices mean, well separated. *; * general definition: *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * for just Signal and Background classes this boils down to: *; * Gini(Sample) = 2s*b/(s+b)^2 *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GiniIndex; \ingroup TMVA. Implementation of the GiniIndex as separation criterion. Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same; amount of signal and bkg) bkg. Small Indices mean, well separated. #### General definition:. \f[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \f]. Where:. \f$ M \f$ is a sample of whatever \f$ N \f$ elements (events) that belong; to \f$ K \f$ different classes. \f$ c(k) \f$ is the number of elem",MatchSource.CODE_COMMENT,tmva/tmva/src/GiniIndex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndex.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx:760,Availability,down,down,760,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GiniIndex *; * *; * *; * Description: Implementation of the GiniIndex With Laplace correction *; * as separation criterion *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * Laplace's correction to the prob.density c/N --> (c+1)/(N+2) *; * for just Signal and Background classes this then boils down to: *; * Gini(Sample) = 2(s*b+s+b+1)/(s+b+2)^2 *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GiniIndexWithLaplace; \ingroup TMVA. Implementation of the GiniIndex With Laplace correction as separation criterion. Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same; amount of signal and bkg) bkg. Small Indices mean, well separated. #### General definition:. \f[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \f]. Where:. \f$ M \f$ is a sample of whatever \f$ N \f$ elements (events) that belong; to \f$ K \f$ different classes. \f$ c(k) \f$ is the number of elements that belong to class \f$ k \f$ fo",MatchSource.CODE_COMMENT,tmva/tmva/src/GiniIndexWithLaplace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx:2050,Availability,down,down,2050,"ce correction *; * as separation criterion *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * Laplace's correction to the prob.density c/N --> (c+1)/(N+2) *; * for just Signal and Background classes this then boils down to: *; * Gini(Sample) = 2(s*b+s+b+1)/(s+b+2)^2 *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GiniIndexWithLaplace; \ingroup TMVA. Implementation of the GiniIndex With Laplace correction as separation criterion. Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same; amount of signal and bkg) bkg. Small Indices mean, well separated. #### General definition:. \f[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \f]. Where:. \f$ M \f$ is a sample of whatever \f$ N \f$ elements (events) that belong; to \f$ K \f$ different classes. \f$ c(k) \f$ is the number of elements that belong to class \f$ k \f$ for just; Signal and Background classes this boils down to:. The Laplace's correction to the probability distribution would turn the; \f$ \frac{c(1)}{N} \f$ into \f$ \frac{(c(1)+1)}{(N+2)} \f$ using this the; simple Gini Index for two classes. \f[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \f]. turns into. \f[; GiniLaplace(Sample) = \frac{2(sb+s+b+1)}{(s+b+2)^2}; \f]; */",MatchSource.CODE_COMMENT,tmva/tmva/src/GiniIndexWithLaplace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GiniIndex *; * *; * *; * Description: Implementation of the GiniIndex With Laplace correction *; * as separation criterion *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * Laplace's correction to the prob.density c/N --> (c+1)/(N+2) *; * for just Signal and Background classes this then boils down to: *; * Gini(Sample) = 2(s*b+s+b+1)/(s+b+2)^2 *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GiniIndexWithLaplace; \ingroup TMVA. Implementation of the GiniIndex With Laplace correction as separation criterion. Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same; amount of signal and bkg) bkg. Small Indices mean, well separated. #### General definition:. \f[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \f]. Where:. \f$ M \f$ is a sample of whatever \f$ N \f$ elements (events) that belong; to \f$ K \f$ different classes. \f$ c(k) \f$ is the number of elements that belong to class \f$ k \f$ fo",MatchSource.CODE_COMMENT,tmva/tmva/src/GiniIndexWithLaplace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::GiniIndex *; * *; * *; * Description: Implementation of the GiniIndex With Laplace correction *; * as separation criterion *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * Laplace's correction to the prob.density c/N --> (c+1)/(N+2) *; * for just Signal and Background classes this then boils down to: *; * Gini(Sample) = 2(s*b+s+b+1)/(s+b+2)^2 *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GiniIndexWithLaplace; \ingroup TMVA. Implementation of the GiniIndex With Laplace correction as separation criterion. Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same; amount of signal and bkg) bkg. Small Indices mean, well separated. #### General definition:. \f[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \f]. Where:. \f$ M \f$ is a sample of whatever \f$ N \f$ elements (events) that belong; to \f$ K \f$ different classes. \f$ c(k) \f$ is the number of elements that belong to class \f$ k \f$ fo",MatchSource.CODE_COMMENT,tmva/tmva/src/GiniIndexWithLaplace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx:2208,Usability,simpl,simple,2208,"ce correction *; * as separation criterion *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * Laplace's correction to the prob.density c/N --> (c+1)/(N+2) *; * for just Signal and Background classes this then boils down to: *; * Gini(Sample) = 2(s*b+s+b+1)/(s+b+2)^2 *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GiniIndexWithLaplace; \ingroup TMVA. Implementation of the GiniIndex With Laplace correction as separation criterion. Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same; amount of signal and bkg) bkg. Small Indices mean, well separated. #### General definition:. \f[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \f]. Where:. \f$ M \f$ is a sample of whatever \f$ N \f$ elements (events) that belong; to \f$ K \f$ different classes. \f$ c(k) \f$ is the number of elements that belong to class \f$ k \f$ for just; Signal and Background classes this boils down to:. The Laplace's correction to the probability distribution would turn the; \f$ \frac{c(1)}{N} \f$ into \f$ \frac{(c(1)+1)}{(N+2)} \f$ using this the; simple Gini Index for two classes. \f[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \f]. turns into. \f[; GiniLaplace(Sample) = \frac{2(sb+s+b+1)}{(s+b+2)^2}; \f]; */",MatchSource.CODE_COMMENT,tmva/tmva/src/GiniIndexWithLaplace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/IFitterTarget.cxx:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : IFitterTarget *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::IFitterTarget; \ingroup TMVA. Interface for a fitter 'target'. Defines interface to the estimator function. */",MatchSource.CODE_COMMENT,tmva/tmva/src/IFitterTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/IFitterTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/IFitterTarget.cxx:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : IFitterTarget *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::IFitterTarget; \ingroup TMVA. Interface for a fitter 'target'. Defines interface to the estimator function. */",MatchSource.CODE_COMMENT,tmva/tmva/src/IFitterTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/IFitterTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/IFitterTarget.cxx:887,Integrability,Interface,Interface,887,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : IFitterTarget *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::IFitterTarget; \ingroup TMVA. Interface for a fitter 'target'. Defines interface to the estimator function. */",MatchSource.CODE_COMMENT,tmva/tmva/src/IFitterTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/IFitterTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/IFitterTarget.cxx:928,Integrability,interface,interface,928,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : IFitterTarget *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::IFitterTarget; \ingroup TMVA. Interface for a fitter 'target'. Defines interface to the estimator function. */",MatchSource.CODE_COMMENT,tmva/tmva/src/IFitterTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/IFitterTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/IMethod.cxx:41,Integrability,Interface,Interface,41,/*! \class TMVA::IMethod; \ingroup TMVA. Interface for all concrete MVA method implementations. */,MatchSource.CODE_COMMENT,tmva/tmva/src/IMethod.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/IMethod.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::Interval *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; * File and Version Information: *; **********************************************************************************/; /*! \class TMVA::Interval; \ingroup TMVA. The TMVA::Interval Class. Interval definition, continuous and discrete. - Interval(min,max) : a continous interval [min,max]; - Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; min, min+step, min+2*step,...., min+(n-1)*step, min+n*step=max. e.g.:. - Interval(1,5,5) = 1,2,3,4,5; - Interval(.5,1.,6) = .5, .6., .7, .8, .9, 1.0. Note: **bin** counting starts from ZERO unlike in ROOT histograms. - Interval definition, continuous and discrete. - Interval(min,max) : a continous interval [min,max]; - Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. min, min+step, min+2*step,...., min+(n-1)*step=max. e.g.:. - Interval(1,5,5)=1,2,3,4,5 <br>; - Interval(.5,1.,6)= .5, .6., .7, .8, .9, 1.0 <br>. ~~~ {.cpp}; Example: Interval(.5,1.,6). [ min max ]; -----------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0. bin 0 1 2 3 4 5; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Interval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx:916,Deployability,continuous,continuous,916,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::Interval *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; * File and Version Information: *; **********************************************************************************/; /*! \class TMVA::Interval; \ingroup TMVA. The TMVA::Interval Class. Interval definition, continuous and discrete. - Interval(min,max) : a continous interval [min,max]; - Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; min, min+step, min+2*step,...., min+(n-1)*step, min+n*step=max. e.g.:. - Interval(1,5,5) = 1,2,3,4,5; - Interval(.5,1.,6) = .5, .6., .7, .8, .9, 1.0. Note: **bin** counting starts from ZERO unlike in ROOT histograms. - Interval definition, continuous and discrete. - Interval(min,max) : a continous interval [min,max]; - Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. min, min+step, min+2*step,...., min+(n-1)*step=max. e.g.:. - Interval(1,5,5)=1,2,3,4,5 <br>; - Interval(.5,1.,6)= .5, .6., .7, .8, .9, 1.0 <br>. ~~~ {.cpp}; Example: Interval(.5,1.,6). [ min max ]; -----------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0. bin 0 1 2 3 4 5; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Interval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx:1311,Deployability,continuous,continuous,1311,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::Interval *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; * File and Version Information: *; **********************************************************************************/; /*! \class TMVA::Interval; \ingroup TMVA. The TMVA::Interval Class. Interval definition, continuous and discrete. - Interval(min,max) : a continous interval [min,max]; - Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; min, min+step, min+2*step,...., min+(n-1)*step, min+n*step=max. e.g.:. - Interval(1,5,5) = 1,2,3,4,5; - Interval(.5,1.,6) = .5, .6., .7, .8, .9, 1.0. Note: **bin** counting starts from ZERO unlike in ROOT histograms. - Interval definition, continuous and discrete. - Interval(min,max) : a continous interval [min,max]; - Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. min, min+step, min+2*step,...., min+(n-1)*step=max. e.g.:. - Interval(1,5,5)=1,2,3,4,5 <br>; - Interval(.5,1.,6)= .5, .6., .7, .8, .9, 1.0 <br>. ~~~ {.cpp}; Example: Interval(.5,1.,6). [ min max ]; -----------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0. bin 0 1 2 3 4 5; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Interval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::Interval *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; * File and Version Information: *; **********************************************************************************/; /*! \class TMVA::Interval; \ingroup TMVA. The TMVA::Interval Class. Interval definition, continuous and discrete. - Interval(min,max) : a continous interval [min,max]; - Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; min, min+step, min+2*step,...., min+(n-1)*step, min+n*step=max. e.g.:. - Interval(1,5,5) = 1,2,3,4,5; - Interval(.5,1.,6) = .5, .6., .7, .8, .9, 1.0. Note: **bin** counting starts from ZERO unlike in ROOT histograms. - Interval definition, continuous and discrete. - Interval(min,max) : a continous interval [min,max]; - Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. min, min+step, min+2*step,...., min+(n-1)*step=max. e.g.:. - Interval(1,5,5)=1,2,3,4,5 <br>; - Interval(.5,1.,6)= .5, .6., .7, .8, .9, 1.0 <br>. ~~~ {.cpp}; Example: Interval(.5,1.,6). [ min max ]; -----------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0. bin 0 1 2 3 4 5; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Interval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx:3,Integrability,message,message,3,"// message logger",MatchSource.CODE_COMMENT,tmva/tmva/src/Interval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx:11,Testability,log,logger,11,"// message logger",MatchSource.CODE_COMMENT,tmva/tmva/src/Interval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:159,Deployability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Asen Christov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::KDEKernel *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Asen Christov <christov@physik.uni-freiburg.de> - Freiburg U., Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * Freiburg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::KDEKernel; \ingroup TMVA. KDE Kernel for ""smoothing"" the PDFs. */",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:159,Integrability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Asen Christov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::KDEKernel *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Asen Christov <christov@physik.uni-freiburg.de> - Freiburg U., Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * Freiburg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::KDEKernel; \ingroup TMVA. KDE Kernel for ""smoothing"" the PDFs. */",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:103,Safety,sanity check,sanity check,103,"////////////////////////////////////////////////////////////////////////////////; /// constructor; /// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:139,Energy Efficiency,adapt,adaptive,139,"////////////////////////////////////////////////////////////////////////////////; /// fIter == 1 ---> nonadaptive KDE; /// fIter == 2 ---> adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:139,Modifiability,adapt,adaptive,139,"////////////////////////////////////////////////////////////////////////////////; /// fIter == 1 ---> nonadaptive KDE; /// fIter == 2 ---> adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:84,Energy Efficiency,adapt,adaptive,84,"// i.e. gauss kernel; //; // this is going to be done for both (nonadaptive KDE and adaptive KDE); // for nonadaptive KDE this is the only = final thing to do; // for adaptive KDE this is going to be used in the first (hidden) iteration",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:167,Energy Efficiency,adapt,adaptive,167,"// i.e. gauss kernel; //; // this is going to be done for both (nonadaptive KDE and adaptive KDE); // for nonadaptive KDE this is the only = final thing to do; // for adaptive KDE this is going to be used in the first (hidden) iteration",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:84,Modifiability,adapt,adaptive,84,"// i.e. gauss kernel; //; // this is going to be done for both (nonadaptive KDE and adaptive KDE); // for nonadaptive KDE this is the only = final thing to do; // for adaptive KDE this is going to be used in the first (hidden) iteration",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:167,Modifiability,adapt,adaptive,167,"// i.e. gauss kernel; //; // this is going to be done for both (nonadaptive KDE and adaptive KDE); // for nonadaptive KDE this is the only = final thing to do; // for adaptive KDE this is going to be used in the first (hidden) iteration",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:25,Energy Efficiency,adapt,adaptive,25,"// this is done only for adaptive KDE; // fill a temporary histo using nonadaptive KDE; // this histo is identical with the final output when using only nonadaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:25,Modifiability,adapt,adaptive,25,"// this is done only for adaptive KDE; // fill a temporary histo using nonadaptive KDE; // this histo is identical with the final output when using only nonadaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:88,Deployability,integrat,integration,88,"//set the number of entries to be the same as the original histo; // do ""function like"" integration = sum of (bin_width*bin_content):",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:88,Integrability,integrat,integration,88,"//set the number of entries to be the same as the original histo; // do ""function like"" integration = sum of (bin_width*bin_content):",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:96,Energy Efficiency,adapt,adaptive,96,"// OK, now we have the first iteration,; // next: calculate the Sigmas (Widths) for the second (adaptive) iteration; // based on the output of the first iteration; // these Sigmas will be stored in histo called fSigmaHist",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:96,Modifiability,adapt,adaptive,96,"// OK, now we have the first iteration,; // next: calculate the Sigmas (Widths) for the second (adaptive) iteration; // based on the output of the first iteration; // these Sigmas will be stored in histo called fSigmaHist",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:7,Energy Efficiency,adapt,adaptive,7,"// non adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:7,Modifiability,adapt,adaptive,7,"// non adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:3,Energy Efficiency,adapt,adaptive,3,"// adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:3,Modifiability,adapt,adaptive,3,"// adaptive KDE",MatchSource.CODE_COMMENT,tmva/tmva/src/KDEKernel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LDA.cxx:119,Deployability,integrat,integrated,119,"// $Id$; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : LDA *; * *; * *; * Description: *; * Local LDA method used by MethodKNN to compute MVA value. *; * This is experimental code under development. This class computes *; * parameters of signal and background PDFs using Gaussian approximation. *; * *; * Author: *; * John Alison John.Alison@cern.ch - University of Pennsylvania, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * University of Pennsylvania, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LDA; \ingroup TMVA. */; // Local",MatchSource.CODE_COMMENT,tmva/tmva/src/LDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LDA.cxx:119,Integrability,integrat,integrated,119,"// $Id$; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : LDA *; * *; * *; * Description: *; * Local LDA method used by MethodKNN to compute MVA value. *; * This is experimental code under development. This class computes *; * parameters of signal and background PDFs using Gaussian approximation. *; * *; * Author: *; * John Alison John.Alison@cern.ch - University of Pennsylvania, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * University of Pennsylvania, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LDA; \ingroup TMVA. */; // Local",MatchSource.CODE_COMMENT,tmva/tmva/src/LDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LDA.cxx:91,Testability,Log,Log,91,"////////////////////////////////////////////////////////////////////////////////; ///; /// Log likelihood function with Gaussian approximation; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/LDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:844,Deployability,continuous,continuous,844,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:264,Testability,log,logarithmic,264,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:764,Testability,Log,LogInterval,764,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:820,Testability,Log,LogInterval,820,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:871,Testability,Log,LogInterval,871,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:928,Testability,Log,LogInterval,928,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:1085,Testability,Log,LogInterval,1085,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:1304,Testability,Log,LogInterval,1304,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:1507,Testability,Log,LogInterval,1507,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:143,Testability,Log,LogInterval,143,"////////////////////////////////////////////////////////////////////////////////; /// returns the step size between the numbers of a ""discrete LogInterval""",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:3,Integrability,message,message,3,"// message logger",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:11,Testability,log,logger,11,"// message logger",MatchSource.CODE_COMMENT,tmva/tmva/src/LogInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:220,Deployability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : LossFunction *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::HuberLossFunction; \ingroup TMVA. Huber Loss Function. */",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:220,Integrability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : LossFunction *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::HuberLossFunction; \ingroup TMVA. Huber Loss Function. */",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:213,Safety,predict,predicted,213,"//std::cout << ""The residual transition point for the Huber loss function corresponding to quantile, "" << fQuantile << "", is zero.""; //<< "" This implies that all of the residuals are zero and the events have been predicted perfectly. Perhaps the regression is too complex""; //<< "" for the amount of data."" << std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:101,Integrability,depend,depends,101,"// Initialize the Huber Loss Function so that we can calculate the loss.; // The loss for each event depends on the other events in the group; // that define the cutoff quantile (fTransitionPoint).",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:101,Integrability,depend,depends,101,"// Initialize the Huber Loss Function so that we can calculate the loss.; // The loss for each event depends on the other events in the group; // that define the cutoff quantile (fTransitionPoint).",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:57,Safety,predict,prediction,57,"// Run this once before building the forest. Set initial prediction to weightedMedian.",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:19,Safety,predict,prediction,19,"// set the initial prediction for all events to the median",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:57,Safety,predict,prediction,57,"// Run this once before building the forest. Set initial prediction to the weightedMean",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:11,Safety,predict,prediction,11,"// Initial prediction for least squares is the weighted mean",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:19,Safety,predict,prediction,19,"// set the initial prediction for all events to the median",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:57,Safety,predict,prediction,57,"// Run this once before building the forest. Set initial prediction to weightedMedian.",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:19,Safety,predict,prediction,19,"// set the initial prediction for all events to the median",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:31,Security,access,access,31,"// prevent uncontrolled memory access in return value calculation; // return the median residual",MatchSource.CODE_COMMENT,tmva/tmva/src/LossFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::MCFitter *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MCFitter; \ingroup TMVA. Fitter using Monte Carlo sampling of parameters. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MCFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::MCFitter *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MCFitter; \ingroup TMVA. Fitter using Monte Carlo sampling of parameters. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MCFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx:100,Deployability,configurat,configuration,100,"////////////////////////////////////////////////////////////////////////////////; /// set MC fitter configuration parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/MCFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx:100,Modifiability,config,configuration,100,"////////////////////////////////////////////////////////////////////////////////; /// set MC fitter configuration parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/MCFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MCFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx:3,Testability,test,test,3,"// test the estimator value for the parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/MCFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:224,Deployability,integrat,integrated,224,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Matt Jachowski, Jan Therhaag, Jiahang Zhong; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodANNBase *; * *; * *; * Description: *; * Artificial neural network base class for the discrimination of signal *; * from background. *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Jiahang Zhong <Jiahang.Zhong@cern.ch> - Academia Sinica, Taipei *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodANNBase; \ingroup TMVA. Base class for all TMVA methods using artificial neural networks. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:224,Integrability,integrat,integrated,224,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Matt Jachowski, Jan Therhaag, Jiahang Zhong; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodANNBase *; * *; * *; * Description: *; * Artificial neural network base class for the discrimination of signal *; * from background. *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Jiahang Zhong <Jiahang.Zhong@cern.ch> - Academia Sinica, Taipei *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodANNBase; \ingroup TMVA. Base class for all TMVA methods using artificial neural networks. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:303,Safety,ABORT,ABORT,303,"////////////////////////////////////////////////////////////////////////////////; /// standard constructor; /// Note: Right now it is an option to choose the neuron input function,; /// but only the input function ""sum"" leads to weight convergence --; /// otherwise the weights go to nan and lead to an ABORT.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:352,Modifiability,variab,variables,352,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// here the options valid for ALL MVA methods are declared.; ///; /// know options:; ///; /// - NCycles=xx :the number of training cycles; /// - Normalize=kTRUE,kFALSe :if normalised in put variables should be used; /// - HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; /// - NeuronType=sigmoid,tanh,radial,linar : the type of activation function; /// used at the neuron",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:440,Modifiability,layers,layers,440,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// here the options valid for ALL MVA methods are declared.; ///; /// know options:; ///; /// - NCycles=xx :the number of training cycles; /// - Normalize=kTRUE,kFALSe :if normalised in put variables should be used; /// - HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; /// - NeuronType=sigmoid,tanh,radial,linar : the type of activation function; /// used at the neuron",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:9,Energy Efficiency,monitor,monitoring,9,"// reset monitoring histogram vectors",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:93,Usability,clear,clear,93,"////////////////////////////////////////////////////////////////////////////////; /// delete/clear network",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:3,Performance,cache,cache,3,"// cache input layer and output neuron for fast access",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:48,Security,access,access,48,"// cache input layer and output neuron for fast access",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:104,Modifiability,layers,layers,104,"////////////////////////////////////////////////////////////////////////////////; /// build the network layers",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:3,Performance,cache,cache,3,"// cache pointers to synapses for fast access, the order matters",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:39,Security,access,access,39,"// cache pointers to synapses for fast access, the order matters",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:10,Modifiability,layers,layers,10,"// hidden layers",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:92,Integrability,message,messages,92,"////////////////////////////////////////////////////////////////////////////////; /// print messages, turn off printing by setting verbose and debug flag appropriately",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:3,Modifiability,layers,layers,3,"// layers",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:2,Testability,Log,Log,2,"//Log() << kWARNING << neuron << "" "" << weight << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:22,Availability,avail,available,22,"// no inverse hessian available",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:94,Usability,clear,clear,94,"////////////////////////////////////////////////////////////////////////////////; /// destroy/clear the network then read it back in from the weights file",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:111,Modifiability,variab,variables,111,"////////////////////////////////////////////////////////////////////////////////; /// compute ranking of input variables by summing function of weights",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:49,Modifiability,variab,variable,49,"// fix this line; // figure out average value of variable i",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:31,Energy Efficiency,monitor,monitoring,31,"// now save all the epoch-wise monitoring information",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodANNBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:250,Deployability,integrat,integrated,250,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBase *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodBase; \ingroup TMVA. Virtual base Class for all MVA method. MethodBase hosts several specific evaluation methods. The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:. - The _signal efficiency_ at three representative background efficiencies; (which is 1 &minus; rejection).; - The _significance_ of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:250,Integrability,integrat,integrated,250,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBase *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodBase; \ingroup TMVA. Virtual base Class for all MVA method. MethodBase hosts several specific evaluation methods. The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:. - The _signal efficiency_ at three representative background efficiencies; (which is 1 &minus; rejection).; - The _significance_ of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:1525,Integrability,depend,depends,1525,", Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodBase; \ingroup TMVA. Virtual base Class for all MVA method. MethodBase hosts several specific evaluation methods. The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:. - The _signal efficiency_ at three representative background efficiencies; (which is 1 &minus; rejection).; - The _significance_ of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; - The _separation_ of an MVA _x_, defined by the integral; \f[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \f]; where; \f$ S(x) \f$ and \f$ B(x) \f$ are the signal and background distributions,; respectively. The separation is zero for identical signal and background MVA; shapes, and it is one for disjunctive shapes.; - The average, \f$ \int x \mu (S(x)) dx \f$, of the signal \f$ \mu_{transform} \f$.; The \f$ \mu_{transform} \f$ of an MVA denotes the transfo",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3014,Modifiability,variab,variables,3014,"and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodBase; \ingroup TMVA. Virtual base Class for all MVA method. MethodBase hosts several specific evaluation methods. The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:. - The _signal efficiency_ at three representative background efficiencies; (which is 1 &minus; rejection).; - The _significance_ of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; - The _separation_ of an MVA _x_, defined by the integral; \f[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \f]; where; \f$ S(x) \f$ and \f$ B(x) \f$ are the signal and background distributions,; respectively. The separation is zero for identical signal and background MVA; shapes, and it is one for disjunctive shapes.; - The average, \f$ \int x \mu (S(x)) dx \f$, of the signal \f$ \mu_{transform} \f$.; The \f$ \mu_{transform} \f$ of an MVA denotes the transformation that yields; a uniform background distribution. In this way, the signal distributions; \f$ S(x) \f$ can be directly compared among the various MVAs. The stronger; \f$ S(x) \f$ peaks towards one, the better is the discrimination of the MVA.; The \f$ \mu_{transform} \f$ is; [documented here](http://tel.ccsd.cnrs.fr/documents/archives0/00/00/29/91/index_fr.html). The MVA standard output also prints the linear correlation coefficients between; signal and background, which can be useful to eliminate variables that exhibit too; strong correlations.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:1488,Performance,perform,performance,1488,", Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodBase; \ingroup TMVA. Virtual base Class for all MVA method. MethodBase hosts several specific evaluation methods. The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:. - The _signal efficiency_ at three representative background efficiencies; (which is 1 &minus; rejection).; - The _significance_ of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; - The _separation_ of an MVA _x_, defined by the integral; \f[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \f]; where; \f$ S(x) \f$ and \f$ B(x) \f$ are the signal and background distributions,; respectively. The separation is zero for identical signal and background MVA; shapes, and it is one for disjunctive shapes.; - The average, \f$ \int x \mu (S(x)) dx \f$, of the signal \f$ \mu_{transform} \f$.; The \f$ \mu_{transform} \f$ of an MVA denotes the transfo",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:1660,Performance,perform,performance,1660,"tzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodBase; \ingroup TMVA. Virtual base Class for all MVA method. MethodBase hosts several specific evaluation methods. The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:. - The _signal efficiency_ at three representative background efficiencies; (which is 1 &minus; rejection).; - The _significance_ of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; - The _separation_ of an MVA _x_, defined by the integral; \f[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \f]; where; \f$ S(x) \f$ and \f$ B(x) \f$ are the signal and background distributions,; respectively. The separation is zero for identical signal and background MVA; shapes, and it is one for disjunctive shapes.; - The average, \f$ \int x \mu (S(x)) dx \f$, of the signal \f$ \mu_{transform} \f$.; The \f$ \mu_{transform} \f$ of an MVA denotes the transformation that yields; a uniform background distribution. In this way, the signal distributions; \f$ S(x) \f$ can be directly compared among",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:1619,Testability,benchmark,benchmark,1619,"tzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodBase; \ingroup TMVA. Virtual base Class for all MVA method. MethodBase hosts several specific evaluation methods. The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:. - The _signal efficiency_ at three representative background efficiencies; (which is 1 &minus; rejection).; - The _significance_ of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; - The _separation_ of an MVA _x_, defined by the integral; \f[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \f]; where; \f$ S(x) \f$ and \f$ B(x) \f$ are the signal and background distributions,; respectively. The separation is zero for identical signal and background MVA; shapes, and it is one for disjunctive shapes.; - The average, \f$ \int x \mu (S(x)) dx \f$, of the signal \f$ \mu_{transform} \f$.; The \f$ \mu_{transform} \f$ of an MVA denotes the transformation that yields; a uniform background distribution. In this way, the signal distributions; \f$ S(x) \f$ can be directly compared among",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:1712,Testability,test,test,1712,"tzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodBase; \ingroup TMVA. Virtual base Class for all MVA method. MethodBase hosts several specific evaluation methods. The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:. - The _signal efficiency_ at three representative background efficiencies; (which is 1 &minus; rejection).; - The _significance_ of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; - The _separation_ of an MVA _x_, defined by the integral; \f[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \f]; where; \f$ S(x) \f$ and \f$ B(x) \f$ are the signal and background distributions,; respectively. The separation is zero for identical signal and background MVA; shapes, and it is one for disjunctive shapes.; - The average, \f$ \int x \mu (S(x)) dx \f$, of the signal \f$ \mu_{transform} \f$.; The \f$ \mu_{transform} \f$ of an MVA denotes the transformation that yields; a uniform background distribution. In this way, the signal distributions; \f$ S(x) \f$ can be directly compared among",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:107,Testability,Test,Testing,107,"////////////////////////////////////////////////////////////////////////////////; /// constructor used for Testing + Application of the MVA,; /// only (no training), using given WeightFiles",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:27,Testability,Test,Testing,27,"// // constructor used for Testing + Application of the MVA,; // // only (no training), using given WeightFiles",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:850,Integrability,message,message,850,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// here the options valid for ALL MVA methods are declared.; ///; /// know options:; ///; /// - VariableTransform=None,Decorrelated,PCA to use transformed variables; /// instead of the original ones; /// - VariableTransformType=Signal,Background which decorrelation matrix to use; /// in the method. Only the Likelihood; /// Method can make proper use of independent; /// transformations of signal and background; /// - fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; /// - fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; /// - fHasMVAPdfs create PDFs for the MVA outputs; /// - V for Verbose output (!V) for non verbos; /// - H for Help message",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:258,Modifiability,Variab,VariableTransform,258,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// here the options valid for ALL MVA methods are declared.; ///; /// know options:; ///; /// - VariableTransform=None,Decorrelated,PCA to use transformed variables; /// instead of the original ones; /// - VariableTransformType=Signal,Background which decorrelation matrix to use; /// in the method. Only the Likelihood; /// Method can make proper use of independent; /// transformations of signal and background; /// - fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; /// - fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; /// - fHasMVAPdfs create PDFs for the MVA outputs; /// - V for Verbose output (!V) for non verbos; /// - H for Help message",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:317,Modifiability,variab,variables,317,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// here the options valid for ALL MVA methods are declared.; ///; /// know options:; ///; /// - VariableTransform=None,Decorrelated,PCA to use transformed variables; /// instead of the original ones; /// - VariableTransformType=Signal,Background which decorrelation matrix to use; /// in the method. Only the Likelihood; /// Method can make proper use of independent; /// transformations of signal and background; /// - fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; /// - fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; /// - fHasMVAPdfs create PDFs for the MVA outputs; /// - V for Verbose output (!V) for non verbos; /// - H for Help message",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:368,Modifiability,Variab,VariableTransformType,368,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// here the options valid for ALL MVA methods are declared.; ///; /// know options:; ///; /// - VariableTransform=None,Decorrelated,PCA to use transformed variables; /// instead of the original ones; /// - VariableTransformType=Signal,Background which decorrelation matrix to use; /// in the method. Only the Likelihood; /// Method can make proper use of independent; /// transformations of signal and background; /// - fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; /// - fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; /// - fHasMVAPdfs create PDFs for the MVA outputs; /// - V for Verbose output (!V) for non verbos; /// - H for Help message",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:124,Availability,avail,available,124,"// If True (default): write all training results (weights) as text files only;; // if False: write also in ROOT format (not available for all methods - will abort if not",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:157,Safety,abort,abort,157,"// If True (default): write all training results (weights) as text files only;; // if False: write also in ROOT format (not available for all methods - will abort if not",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:120,Availability,avail,available,120,"////////////////////////////////////////////////////////////////////////////////; /// the option string is decoded, for available options see ""DeclareOptions""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:107,Testability,log,logger,107,"// setting the default bin num... maybe should be static ? ==> Please no static (JS); // You can't use the logger in the constructor!!! Log() << kINFO << ""Create PDFs"" << Endl;; // reading every PDF's definition and passing the option string to the next one to be read and marked",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:136,Testability,Log,Log,136,"// setting the default bin num... maybe should be static ? ==> Please no static (JS); // You can't use the logger in the constructor!!! Log() << kINFO << ""Create PDFs"" << Endl;; // reading every PDF's definition and passing the option string to the next one to be read and marked",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:470,Availability,Error,Error,470,"// Why on earth ?? was this here? Was the verbosity level option meant to 'disappear? Not a good idea i think..; // DeclareOptionRef( fVerbosityLevelString=""Default"", ""VerboseLevel"", ""Verbosity level"" );; // AddPreDefVal( TString(""Default"") ); // uses default defined in MsgLogger header; // AddPreDefVal( TString(""Debug"") );; // AddPreDefVal( TString(""Verbose"") );; // AddPreDefVal( TString(""Info"") );; // AddPreDefVal( TString(""Warning"") );; // AddPreDefVal( TString(""Error"") );; // AddPreDefVal( TString(""Fatal"") );",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:95,Performance,Optimiz,Optimizer,95,"////////////////////////////////////////////////////////////////////////////////; /// call the Optimizer with the set of parameters and ranges that; /// are meant to be tuned.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:169,Performance,tune,tuned,169,"////////////////////////////////////////////////////////////////////////////////; /// call the Optimizer with the set of parameters and ranges that; /// are meant to be tuned.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:137,Deployability,configurat,configuration,137,"// this is just a dummy... needs to be implemented for each method; // individually (as long as we don't have it automatized via the; // configuration string",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:137,Modifiability,config,configuration,137,"// this is just a dummy... needs to be implemented for each method; // individually (as long as we don't have it automatized via the; // configuration string",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Performance,tune,tuneParameters,3,/* tuneParameters */,MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:20,Energy Efficiency,monitor,monitoring,20,"// write additional monitoring histograms to main target file (not the weight file); // again, make sure the histograms go into the method's subdirectory",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:139,Modifiability,variab,variable,139,"////////////////////////////////////////////////////////////////////////////////; /// prepare tree branch with the method's discriminating variable",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:15,Usability,progress bar,progress bar,15,"// Drawing the progress bar every event was causing a huge slowdown in the evaluation time; // So we set some parameters to draw the progress bar a total of totalProgressDraws, i.e. only draw every 1 in 100",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:133,Usability,progress bar,progress bar,133,"// Drawing the progress bar every event was causing a huge slowdown in the evaluation time; // So we set some parameters to draw the progress bar a total of totalProgressDraws, i.e. only draw every 1 in 100",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:28,Deployability,update,update,28,"// total number of times to update the progress bar",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:39,Usability,progress bar,progress bar,39,"// total number of times to update the progress bar",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:17,Usability,progress bar,progress bar,17,"// Only draw the progress bar once in a while, doing this every event causes the evaluation to be ridiculously slow",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:23,Testability,test,testing,23,"// store time used for testing",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:139,Modifiability,variab,variable,139,"////////////////////////////////////////////////////////////////////////////////; /// prepare tree branch with the method's discriminating variable",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:23,Testability,test,testing,23,"// store time used for testing",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:139,Modifiability,variab,variable,139,"////////////////////////////////////////////////////////////////////////////////; /// prepare tree branch with the method's discriminating variable",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:23,Testability,test,testing,23,"// store time used for testing",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Performance,load,load,3,"// load mva values and type to results object",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:146,Security,access,access,146,"// note we do not need the trasformed event to get the signal/background information; // by calling Data()->GetEvent instead of this->GetEvent we access the untransformed one",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Testability,log,log,3,"// log in case of looping on all the events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:139,Modifiability,variab,variable,139,"////////////////////////////////////////////////////////////////////////////////; /// prepare tree branch with the method's discriminating variable",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:169,Testability,test,test,169,"////////////////////////////////////////////////////////////////////////////////; /// calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample; ///; /// - bias = average deviation; /// - dev = average absolute deviation; /// - rms = rms of deviation",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:86,Testability,test,test,86,"////////////////////////////////////////////////////////////////////////////////; /// test multiclass classification",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:80,Testability,Log,Log,80,"// GA evaluation of best cut for sig eff * sig pur. Slow, disabled for now.; // Log() << kINFO <<Form(""Dataset[%s] : "",DataInfo().GetName())<< ""Determine optimal multiclass cuts for test; // data..."" << Endl; for (UInt_t icls = 0; icls<DataInfo().GetNClasses(); ++icls) {; // resMulticlass->GetBestMultiClassCuts(icls);; // }; // Create histograms for use in TMVA GUI",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:182,Testability,test,test,182,"// GA evaluation of best cut for sig eff * sig pur. Slow, disabled for now.; // Log() << kINFO <<Form(""Dataset[%s] : "",DataInfo().GetName())<< ""Determine optimal multiclass cuts for test; // data..."" << Endl; for (UInt_t icls = 0; icls<DataInfo().GetNClasses(); ++icls) {; // resMulticlass->GetBestMultiClassCuts(icls);; // }; // Create histograms for use in TMVA GUI",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks: tree must exist, and theVar must be in tree",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:93,Safety,avoid,avoid,93,"//std::vector<Bool_t>* mvaResTypes = mvaRes->GetValueVectorTypes();; //LM: this is needed to avoid crashes in ROOCCURVE",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:168,Modifiability,variab,variables,168,"////////////////////////////////////////////////////////////////////////////////; /// general method used in writing the header of the weight files where; /// the used variables, variable transformation type etc. is specified",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:179,Modifiability,variab,variable,179,"////////////////////////////////////////////////////////////////////////////////; /// general method used in writing the header of the weight files where; /// the used variables, variable transformation type etc. is specified",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:16,Modifiability,variab,variable,16,"// Second write variable info",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:168,Modifiability,variab,variables,168,"////////////////////////////////////////////////////////////////////////////////; /// general method used in writing the header of the weight files where; /// the used variables, variable transformation type etc. is specified",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:179,Modifiability,variab,variable,179,"////////////////////////////////////////////////////////////////////////////////; /// general method used in writing the header of the weight files where; /// the used variables, variable transformation type etc. is specified",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:9,Modifiability,variab,variable,9,"// write variable info",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:13,Modifiability,variab,variable,13,"// write MVA variable distributions",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:8,Safety,avoid,avoids,8,"// this avoids the binding of the hists in PDF to the current ROOT file",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:167,Deployability,configurat,configuration,167,"////////////////////////////////////////////////////////////////////////////////; /// write options and weights to file; /// note that each one text file for the main configuration information; /// and one ROOT file for ROOT objects are created",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:167,Modifiability,config,configuration,167,"////////////////////////////////////////////////////////////////////////////////; /// write options and weights to file; /// note that each one text file for the main configuration information; /// and one ROOT file for ROOT objects are created",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:22,Availability,Error,Error,22,"// file not found --> Error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Deployability,update,update,3,"// update logger",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:10,Testability,log,logger,10,"// update logger",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:38,Testability,test,testvar,38,"// after the method name is read, the testvar can be set",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Deployability,update,update,3,"// update transformation handler",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Deployability,update,update,3,"// update logger",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:10,Testability,log,logger,10,"// update logger",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:43,Modifiability,variab,variables,43,"// now the question is whether to read the variables first or the options (well, of course the order; // of writing them needs to agree); //; // the option ""Decorrelation"" is needed to decide if the variables we; // read are decorrelated or not; //; // the variables are needed by some methods (TMLP) to build the NN; // which is done in ProcessOptions so for the time being we first Read and Parse the options then; // we read the variables, and then we process the options; // now read all options",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:199,Modifiability,variab,variables,199,"// now the question is whether to read the variables first or the options (well, of course the order; // of writing them needs to agree); //; // the option ""Decorrelation"" is needed to decide if the variables we; // read are decorrelated or not; //; // the variables are needed by some methods (TMLP) to build the NN; // which is done in ProcessOptions so for the time being we first Read and Parse the options then; // we read the variables, and then we process the options; // now read all options",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:257,Modifiability,variab,variables,257,"// now the question is whether to read the variables first or the options (well, of course the order; // of writing them needs to agree); //; // the option ""Decorrelation"" is needed to decide if the variables we; // read are decorrelated or not; //; // the variables are needed by some methods (TMLP) to build the NN; // which is done in ProcessOptions so for the time being we first Read and Parse the options then; // we read the variables, and then we process the options; // now read all options",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:432,Modifiability,variab,variables,432,"// now the question is whether to read the variables first or the options (well, of course the order; // of writing them needs to agree); //; // the option ""Decorrelation"" is needed to decide if the variables we; // read are decorrelated or not; //; // the variables are needed by some methods (TMLP) to build the NN; // which is done in ProcessOptions so for the time being we first Read and Parse the options then; // we read the variables, and then we process the options; // now read all options",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:12,Modifiability,variab,variable,12,"// Now read variable info",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:36,Availability,avail,available,36,"// Now read decorrelation matrix if available",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Deployability,update,update,3,"// update transformation handler",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:104,Modifiability,variab,variables,104,"////////////////////////////////////////////////////////////////////////////////; /// write the list of variables (name, min, max) for a given data; /// transformation method to the stream",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:95,Modifiability,variab,variables,95,"////////////////////////////////////////////////////////////////////////////////; /// Read the variables (name, min, max) for a given data; /// transformation method from the stream. In the stream we only; /// expect the limits which will be set",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:28,Modifiability,variab,variables,28,"// we want to make sure all variables are read in the order they are defined",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:92,Modifiability,variab,variable,92,"////////////////////////////////////////////////////////////////////////////////; /// write variable info to XML",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:91,Modifiability,variab,variable,91,"////////////////////////////////////////////////////////////////////////////////; /// read variable info from XML",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:28,Modifiability,variab,variables,28,"// we want to make sure all variables are read in the order they are defined",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:28,Modifiability,variab,variables,28,"// we want to make sure all variables are read in the order they are defined",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:24,Modifiability,variab,variables,24,"// skipping plotting of variables if too many (default is 200)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:100,Energy Efficiency,monitor,monitoring,100,"////////////////////////////////////////////////////////////////////////////////; /// write special monitoring histograms to file; /// dummy implementation here -----------------",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:116,Modifiability,variab,variables,116,"////////////////////////////////////////////////////////////////////////////////; /// Create PDFs of the MVA output variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:32,Energy Efficiency,adapt,adapt,32,"// TODO: this is an ugly hack.. adapt this to new framework",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:32,Modifiability,adapt,adapt,32,"// TODO: this is an ugly hack.. adapt this to new framework",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:7,Usability,simpl,simple,7,"// the simple one, automatically calculates the mvaVal and uses the; // SAME sig/bkg ratio as given in the training sample (typically 50/50; // .. (NormMode=EqualNumEvents) but can be different)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:20,Integrability,depend,depending,20,"// select histogram depending on if sig or bgd",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:54,Deployability,update,update,54,"// find cut that corresponds to signal efficiency and update signal-like criterion",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:41,Testability,test,test,41,"// classifier response distributions for test sample",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:777,Testability,test,testing,777,"////////////////////////////////////////////////////////////////////////////////; /// Construct a confusion matrix for a multiclass classifier. The confusion; /// matrix compares, in turn, each class agaist all other classes in a pair-wise; /// fashion. In rows with index \f$ k_r = 0 ... K \f$, \f$ k_r \f$ is; /// considered signal for the sake of comparison and for each column; /// \f$ k_c = 0 ... K \f$ the corresponding class is considered background.; ///; /// Note that the diagonal elements will be returned as NaN since this will; /// compare a class against itself.; ///; /// \see TMVA::ResultsMulticlass::GetConfusionMatrix; ///; /// \param[in] effB The background efficiency for which to evaluate.; /// \param[in] type The data set on which to evaluate (training, testing ...).; ///; /// \return A matrix containing signal efficiencies for the given background; /// efficiency. The diagonal elements are NaN since this measure is; /// meaningless (comparing a class against itself).; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:54,Safety,sanity check,sanity check,54,"// note, if zero pointers given, use internal pdf; // sanity check first",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:54,Safety,sanity check,sanity check,54,"// note, if zero pointers given, use internal pdf; // sanity check first",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:54,Safety,sanity check,sanity check,54,"// note, if zero pointers given, use internal pdf; // sanity check first",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:131,Modifiability,variab,variable,131,"////////////////////////////////////////////////////////////////////////////////; /// calculates rms,mean, xmin, xmax of the event variable; /// this can be either done for the variables as they are or for; /// normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:177,Modifiability,variab,variables,177,"////////////////////////////////////////////////////////////////////////////////; /// calculates rms,mean, xmin, xmax of the event variable; /// this can be either done for the variables as they are or for; /// normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:222,Modifiability,variab,variables,222,"////////////////////////////////////////////////////////////////////////////////; /// calculates rms,mean, xmin, xmax of the event variable; /// this can be either done for the variables as they are or for; /// normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:23,Modifiability,variab,variable,23,"// index of the wanted variable",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:32,Availability,Error,Error,32,"// file could not be opened --> Error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:33,Deployability,configurat,configuration,33,"// print general information and configuration state",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:33,Modifiability,config,configuration,33,"// print general information and configuration state",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:32,Availability,Error,Error,32,"// file could not be opened --> Error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:30,Integrability,message,message,30,"// print method-specific help message",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:258,Availability,avail,available,258,"// caution: here we take some ""forbidden"" action to hide a problem:; // in some cases, in particular for likelihood, the binned efficiency distributions; // do not equal 1, at xmin, and 0 at xmax; of course, in principle we have the; // unbinned information available in the trees, but the unbinned minimization is; // too slow, and we don't need to do a precision measurement here. Hence, we force; // this property.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:182,Modifiability,Variab,Variable,182,"////////////////////////////////////////////////////////////////////////////////; /// returns the event collection (i.e. the dataset) TRANSFORMED using the; /// classifiers specific Variable Transformation (e.g. Decorr or Decorr:Gauss:Decorr)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:17,Modifiability,variab,variable,17,"// if there's no variable transformation for this classifier, just hand back the; // event collection of the data set",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:28,Testability,Test,Testing,28,"//index indicating Training,Testing,... events/datasets",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx:157,Deployability,integrat,integrated,157,"// @(#)root/tmva $Id$; // Author: Marcin ....; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBayesClassifier *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Abhishek Narain, <narainabhi@gmail.com> - University of Houston *; * *; * Copyright (c) 2005-2006: *; * University of Houston, *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBayesClassifier; \ingroup TMVA. Description of bayesian classifiers. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBayesClassifier.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx:157,Integrability,integrat,integrated,157,"// @(#)root/tmva $Id$; // Author: Marcin ....; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBayesClassifier *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Abhishek Narain, <narainabhi@gmail.com> - University of Houston *; * *; * Copyright (c) 2005-2006: *; * University of Houston, *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBayesClassifier; \ingroup TMVA. Description of bayesian classifiers. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBayesClassifier.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx:86,Modifiability,Variab,Variable,86,"////////////////////////////////////////////////////////////////////////////////; /// Variable can handle classification with 2 classes",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBayesClassifier.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx:120,Availability,avail,available,120,"////////////////////////////////////////////////////////////////////////////////; /// the option string is decoded, for available options see ""DeclareOptions""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBayesClassifier.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBayesClassifier.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBayesClassifier.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBayesClassifier.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3722,Availability,error,error,3722,"ed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. ### Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Random Trees:. Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it; uses the bagging algorithm together and bases the determination of the; best node-split during the training on a random subset of variables only; which is individually chosen for each split. ### Analysis:. Applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classi",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:208,Deployability,integrat,integrated,208,"// Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard v. Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBDT (BDT = Boosted Decision Trees) *; * *; * *; * Description: *; * Analysis of Boosted Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * Jan Therhaag <jan.therhaag@cern.ch> - U. of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBDT; \ingroup TMVA. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. ### Decision trees:. Successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" ",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:1357,Energy Efficiency,Energy,Energy,1357,"Boosted Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * Jan Therhaag <jan.therhaag@cern.ch> - U. of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBDT; \ingroup TMVA. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. ### Decision trees:. Successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample a",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3094,Energy Efficiency,adapt,adaptive,3094,"e training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. ### Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Random Trees:. Similar to the ""R",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:208,Integrability,integrat,integrated,208,"// Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard v. Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodBDT (BDT = Boosted Decision Trees) *; * *; * *; * Description: *; * Analysis of Boosted Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * Jan Therhaag <jan.therhaag@cern.ch> - U. of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBDT; \ingroup TMVA. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. ### Decision trees:. Successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" ",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:4692,Integrability,depend,depending,4692,"ckground events from the training sample. ### Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Random Trees:. Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it; uses the bagging algorithm together and bases the determination of the; best node-split during the training on a random subset of variables only; which is individually chosen for each split. ### Analysis:. Applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:1855,Modifiability,variab,variable,1855,"ictoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBDT; \ingroup TMVA. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. ### Decision trees:. Successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, ",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:2391,Modifiability,variab,variable,2391,"riment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. ### Decision trees:. Successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. ### Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boost",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3094,Modifiability,adapt,adaptive,3094,"e training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. ### Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Random Trees:. Similar to the ""R",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:4372,Modifiability,variab,variables,4372,"ckground events from the training sample. ### Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Random Trees:. Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it; uses the bagging algorithm together and bases the determination of the; best node-split during the training on a random subset of variables only; which is individually chosen for each split. ### Analysis:. Applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3747,Testability,log,log,3747,"ed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. ### Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Random Trees:. Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it; uses the bagging algorithm together and bases the determination of the; best node-split during the training on a random subset of variables only; which is individually chosen for each split. ### Analysis:. Applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classi",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:4490,Testability,test,test,4490,"ckground events from the training sample. ### Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Random Trees:. Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it; uses the bagging algorithm together and bases the determination of the; best node-split during the training on a random subset of variables only; which is individually chosen for each split. ### Analysis:. Applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:4083,Usability,simpl,simple,4083,"ckground events from the training sample. ### Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Random Trees:. Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it; uses the bagging algorithm together and bases the determination of the; best node-split during the training on a random subset of variables only; which is individually chosen for each split. ### Analysis:. Applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:193,Modifiability,variab,variables,193,"// constructor for calculating BDT-MVA using previously generated decision trees; // the result of the previous training (the decision trees) are read in via the; // weight file. Make sure the variables correspond to the ones used in; // creating the ""weight""-file",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:1505,Availability,error,error,1505,"s:; ///; /// - nTrees number of trees in the forest to be created; /// - BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..).; /// Known:; /// - AdaBoost; /// - AdaBoostR2 (Adaboost for regression); /// - Bagging; /// - GradBoost; /// - AdaBoostBeta the boosting parameter, beta, for AdaBoost; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; /// - SeparationType the separation criterion applied in the node splitting.; /// Known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseFisherCuts: use multivariate splits using the Fisher criterion; /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method.; /// Known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; /// - PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); /// - NegWeightTreatment; /// - IgnoreNegWeightsInTraining Ignore negative weight events in the training.; /// - DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; /// - PairNegWeightsGlobal Pair ev. with neg. and pos. weights in trai",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:571,Modifiability,variab,variables,571,"////////////////////////////////////////////////////////////////////////////////; /// Define the options (their key words). That can be set in the option string.; ///; /// know options:; ///; /// - nTrees number of trees in the forest to be created; /// - BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..).; /// Known:; /// - AdaBoost; /// - AdaBoostR2 (Adaboost for regression); /// - Bagging; /// - GradBoost; /// - AdaBoostBeta the boosting parameter, beta, for AdaBoost; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; /// - SeparationType the separation criterion applied in the node splitting.; /// Known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseFisherCuts: use multivariate splits using the Fisher criterion; /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method.; /// Known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; /// - PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); /// - NegWeightTreatment; /// - IgnoreNegWeightsInTraining Ignore negative weight events i",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:610,Modifiability,variab,variables,610,"////////////////////////////////////////////////////////////////////////////////; /// Define the options (their key words). That can be set in the option string.; ///; /// know options:; ///; /// - nTrees number of trees in the forest to be created; /// - BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..).; /// Known:; /// - AdaBoost; /// - AdaBoostR2 (Adaboost for regression); /// - Bagging; /// - GradBoost; /// - AdaBoostBeta the boosting parameter, beta, for AdaBoost; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; /// - SeparationType the separation criterion applied in the node splitting.; /// Known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseFisherCuts: use multivariate splits using the Fisher criterion; /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method.; /// Known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; /// - PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); /// - NegWeightTreatment; /// - IgnoreNegWeightsInTraining Ignore negative weight events i",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:1839,Performance,optimiz,optimizing,1839,"he boosting parameter, beta, for AdaBoost; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; /// - SeparationType the separation criterion applied in the node splitting.; /// Known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseFisherCuts: use multivariate splits using the Fisher criterion; /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method.; /// Known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; /// - PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); /// - NegWeightTreatment; /// - IgnoreNegWeightsInTraining Ignore negative weight events in the training.; /// - DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; /// - PairNegWeightsGlobal Pair ev. with neg. and pos. weights in training sample and ""annihilate"" them; /// - MaxDepth maximum depth of the decision tree allowed before further splitting is stopped; /// - SkipNormalization Skip normalization at initialization, to keep expectation value of BDT output; /// according to the fraction of events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:1776,Safety,avoid,avoided,1776,"he boosting parameter, beta, for AdaBoost; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; /// - SeparationType the separation criterion applied in the node splitting.; /// Known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseFisherCuts: use multivariate splits using the Fisher criterion; /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method.; /// Known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; /// - PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); /// - NegWeightTreatment; /// - IgnoreNegWeightsInTraining Ignore negative weight events in the training.; /// - DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; /// - PairNegWeightsGlobal Pair ev. with neg. and pos. weights in training sample and ""annihilate"" them; /// - MaxDepth maximum depth of the decision tree allowed before further splitting is stopped; /// - SkipNormalization Skip normalization at initialization, to keep expectation value of BDT output; /// according to the fraction of events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:1283,Usability,simpl,simply,1283,"s:; ///; /// - nTrees number of trees in the forest to be created; /// - BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..).; /// Known:; /// - AdaBoost; /// - AdaBoostR2 (Adaboost for regression); /// - Bagging; /// - GradBoost; /// - AdaBoostBeta the boosting parameter, beta, for AdaBoost; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; /// - SeparationType the separation criterion applied in the node splitting.; /// Known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseFisherCuts: use multivariate splits using the Fisher criterion; /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method.; /// Known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; /// - PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); /// - NegWeightTreatment; /// - IgnoreNegWeightsInTraining Ignore negative weight events in the training.; /// - DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; /// - PairNegWeightsGlobal Pair ev. with neg. and pos. weights in trai",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:120,Availability,avail,available,120,"////////////////////////////////////////////////////////////////////////////////; /// The option string is decoded, for available options see ""DeclareOptions"".",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:32,Testability,Log,Log,32,"//I will switch o "" << Endl;; //Log() << ""--> I switch do default nCuts = 20 and use standard node splitting WITH possible Fisher criteria""<<Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:38,Security,Validat,Validation,38,"// I keep the BDT EventSample and its Validation sample (eventually they should all; // disappear and just use the DataSet samples ..; // remove all the trees",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:133,Security,Validat,ValidationSample,133,"////////////////////////////////////////////////////////////////////////////////; /// Destructor.; ///; /// - Note: fEventSample and ValidationSample are already deleted at the end of TRAIN; /// When they are not used anymore",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:57,Performance,optimiz,optimize,57,"// if fAutomatic == true you need a validation sample to optimize pruning",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:36,Security,validat,validation,36,"// if fAutomatic == true you need a validation sample to optimize pruning",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:260,Testability,Log,Log,260,"//just for debug purposes..; /*; sumSigW=0;; sumBkgW=0;; for (UInt_t ievt=0; ievt<fEventSample.size(); ievt++) {; if ((DataInfo().IsSignal(fEventSample[ievt])) ) sumSigW += fEventSample[ievt]->GetWeight();; else sumBkgW += fEventSample[ievt]->GetWeight();; }; Log() << kWARNING << ""sigSumW=""<<sumSigW<<""bkgSumW=""<<sumBkgW<< Endl;; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:151,Integrability,rout,routine,151,"////////////////////////////////////////////////////////////////////////////////; /// O.k. you know there are events with negative event weights. This routine will remove; /// them by pairing them with the closest event(s) of the same event class with positive; /// weights; /// A first attempt is ""brute force"", I dont' try to be clever using search trees etc,; /// just quick and dirty to see if the result is any good",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:95,Performance,Optimiz,Optimizer,95,"////////////////////////////////////////////////////////////////////////////////; /// Call the Optimizer with the set of parameters and ranges that; /// are meant to be tuned.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:169,Performance,tune,tuned,169,"////////////////////////////////////////////////////////////////////////////////; /// Call the Optimizer with the set of parameters and ranges that; /// are meant to be tuned.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:49,Performance,optimiz,optimized,49,"// fill all the tuning parameters that should be optimized into a map:",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:6,Performance,tune,tuneParameters,6,"//; //tuneParameters.insert(std::pair<TString,Interval*>(""NodePurityLimit"",new Interval(.4,.6,3))); // stepsize .1; //tuneParameters.insert(std::pair<TString,Interval*>(""BaggedSampleFraction"",new Interval(.4,.9,6))); // stepsize .1; // method-specific parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:118,Performance,tune,tuneParameters,118,"//; //tuneParameters.insert(std::pair<TString,Interval*>(""NodePurityLimit"",new Interval(.4,.6,3))); // stepsize .1; //tuneParameters.insert(std::pair<TString,Interval*>(""BaggedSampleFraction"",new Interval(.4,.9,6))); // stepsize .1; // method-specific parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:96,Modifiability,variab,variables,96,"// HHV (it's been here since looong but I really don't know why we cannot handle; // normalized variables in BDTs... todo",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:8,Energy Efficiency,monitor,monitoring,8,"// book monitoring histograms (for AdaBost only)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3,Energy Efficiency,Monitor,Monitor,3,"// Monitor the performance (on TEST sample) versus number of trees",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:15,Performance,perform,performance,15,"// Monitor the performance (on TEST sample) versus number of trees",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:31,Testability,TEST,TEST,31,"// Monitor the performance (on TEST sample) versus number of trees",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3,Availability,error,error,3,"// error fraction vs tree number",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:46,Modifiability,variab,variables,46,"// the minimum linear correlation between two variables demanded for use in fisher criterion in node splitting",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:135,Usability,simpl,simply,135,"// if fAutomatic == true, pruneStrength will be the optimal pruning strength; // determined by the pruning algorithm; otherwise, it is simply the strength parameter; // set by the user",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:83,Deployability,update,update,83,"//; // This is the multi-threaded multiclass version; //; // Note: we only need to update the predicted probabilities every; // `nClasses` tree. Let's call a set of `nClasses` trees a ""round"". Thus; // the algortihm is split in two parts `update_residuals` and; // `update_residuals_last` where the latter is inteded to be run instead; // of the former for the last tree in a ""round"".; //",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:19,Performance,multi-thread,multi-threaded,19,"//; // This is the multi-threaded multiclass version; //; // Note: we only need to update the predicted probabilities every; // `nClasses` tree. Let's call a set of `nClasses` trees a ""round"". Thus; // the algortihm is split in two parts `update_residuals` and; // `update_residuals_last` where the latter is inteded to be run instead; // of the former for the last tree in a ""round"".; //",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:94,Safety,predict,predicted,94,"//; // This is the multi-threaded multiclass version; //; // Note: we only need to update the predicted probabilities every; // `nClasses` tree. Let's call a set of `nClasses` trees a ""round"". Thus; // the algortihm is split in two parts `update_residuals` and; // `update_residuals_last` where the latter is inteded to be run instead; // of the former for the last tree in a ""round"".; //",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:132,Deployability,update,update,132,"////////////////////////////////////////////////////////////////////////////////; /// \brief Calculate residuals for all events and update targets for next iter.; ///; /// \param[in] eventSample The collection of events currently under training.; /// \param[in] first Should be true when called before the first boosting; /// iteration has been run; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:7,Deployability,Update,UpdateTargets,7,"//call UpdateTargets before next tree is grown",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test the tree quality.. in terms of Misclassification.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:145,Energy Efficiency,monitor,monitoring,145,"////////////////////////////////////////////////////////////////////////////////; /// Fills the ROCIntegral vs Itree from the testSample for the monitoring plots; /// during the training .. but using the testing events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:126,Testability,test,testSample,126,"////////////////////////////////////////////////////////////////////////////////; /// Fills the ROCIntegral vs Itree from the testSample for the monitoring plots; /// during the training .. but using the testing events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:204,Testability,test,testing,204,"////////////////////////////////////////////////////////////////////////////////; /// Fills the ROCIntegral vs Itree from the testSample for the monitoring plots; /// during the training .. but using the testing events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:197,Availability,error,error,197,"// sanity check ... should never happen as otherwise there is apparently; // something odd with the assignment of the leaf nodes (rem: you use the training; // events for this determination of the error rate)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3,Safety,sanity check,sanity check,3,"// sanity check ... should never happen as otherwise there is apparently; // something odd with the assignment of the leaf nodes (rem: you use the training; // events for this determination of the error rate)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:524,Availability,error,error,524,"////////////////////////////////////////////////////////////////////////////////; /// The AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for; /// all events... later could be modified to use individual cost matrices for each; /// events as in the original paper...; ///; /// true_signal true_bkg; /// ----------------------------------; /// sel_signal | Css Ctb_ss Cxx.. in the range [0,1]; /// sel_bkg | Cts_sb Cbb; ///; /// and takes this into account when calculating the mis class. cost (former: error fraction):; ///; /// err = sum_events ( weight* y_true*y_sel * beta(event)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:125,Usability,simpl,simple,125,"////////////////////////////////////////////////////////////////////////////////; /// The AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for; /// all events... later could be modified to use individual cost matrices for each; /// events as in the original paper...; ///; /// true_signal true_bkg; /// ----------------------------------; /// sel_signal | Css Ctb_ss Cxx.. in the range [0,1]; /// sel_bkg | Cts_sb Cbb; ///; /// and takes this into account when calculating the mis class. cost (former: error fraction):; ///; /// err = sum_events ( weight* y_true*y_sel * beta(event)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3,Testability,Log,Log,3,"// Log() << kDEBUG << ""BDT AdaBoos wrong/all: "" << sumGlobalCost << ""/"" << sumGlobalWeights << Endl;; // Log() << kWARNING << ""BDT AdaBoos wrong/all: "" << sumGlobalCost << ""/"" << sumGlobalWeights << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:105,Testability,Log,Log,105,"// Log() << kDEBUG << ""BDT AdaBoos wrong/all: "" << sumGlobalCost << ""/"" << sumGlobalWeights << Endl;; // Log() << kWARNING << ""BDT AdaBoos wrong/all: "" << sumGlobalCost << ""/"" << sumGlobalWeights << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3,Testability,Log,Log,3,"// Log() << kWARNING << ""BDT AdaBoos wrong/all: "" << sumGlobalCost << ""/"" << sumGlobalWeights << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:79,Usability,clear,clear,79,/*; UInt_t nevents = fEventSample.size();. if (!fSubSample.empty()) fSubSample.clear();; TRandom3 *trandom = new TRandom3(fForest.size()+1);. for (UInt_t ievt=0; ievt<nevents; ievt++) { // recreate new random subsample; if(trandom->Rndm()<fBaggedSampleFraction); fSubSample.push_back(fEventSample[ievt]);; }; delete trandom;; */,MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:86,Energy Efficiency,Adapt,Adaption,86,"////////////////////////////////////////////////////////////////////////////////; /// Adaption of the AdaBoost to regression problems (see H.Drucker 1997).",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:86,Modifiability,Adapt,Adaption,86,"////////////////////////////////////////////////////////////////////////////////; /// Adaption of the AdaBoost to regression problems (see H.Drucker 1997).",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:197,Availability,error,error,197,"// sanity check ... should never happen as otherwise there is apparently; // something odd with the assignment of the leaf nodes (rem: you use the training; // events for this determination of the error rate)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3,Safety,sanity check,sanity check,3,"// sanity check ... should never happen as otherwise there is apparently; // something odd with the assignment of the leaf nodes (rem: you use the training; // events for this determination of the error rate)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:190,Safety,predict,prediction,190,"// rather than using the weighted average of the tree respones in the forest; // H.Decker(1997) proposed to use the ""weighted median""; // sort all individual tree responses according to the prediction value; // (keep the association to their tree weight); // the sum up all the associated weights (starting from the one whose tree; // yielded the smalles response) up to the tree ""t"" at which you've; // added enough tree weights to have more than half of the sum of all tree weights.; // choose as response of the forest that one which belongs to this ""t""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:106,Modifiability,variab,variable,106,"////////////////////////////////////////////////////////////////////////////////; /// Return the relative variable importance, normalized to all; /// variables together having the importance 1. The importance in; /// evaluated as the total separation-gain that this variable had in; /// the decision trees (weighted by the number of events)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:150,Modifiability,variab,variables,150,"////////////////////////////////////////////////////////////////////////////////; /// Return the relative variable importance, normalized to all; /// variables together having the importance 1. The importance in; /// evaluated as the total separation-gain that this variable had in; /// the decision trees (weighted by the number of events)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:266,Modifiability,variab,variable,266,"////////////////////////////////////////////////////////////////////////////////; /// Return the relative variable importance, normalized to all; /// variables together having the importance 1. The importance in; /// evaluated as the total separation-gain that this variable had in; /// the decision trees (weighted by the number of events)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:114,Modifiability,variab,variable,114,"////////////////////////////////////////////////////////////////////////////////; /// Returns the measure for the variable importance of variable ""ivar""; /// which is later used in GetVariableImportance() to calculate the; /// relative variable importances.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:137,Modifiability,variab,variable,137,"////////////////////////////////////////////////////////////////////////////////; /// Returns the measure for the variable importance of variable ""ivar""; /// which is later used in GetVariableImportance() to calculate the; /// relative variable importances.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:236,Modifiability,variab,variable,236,"////////////////////////////////////////////////////////////////////////////////; /// Returns the measure for the variable importance of variable ""ivar""; /// which is later used in GetVariableImportance() to calculate the; /// relative variable importances.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:111,Modifiability,variab,variables,111,"////////////////////////////////////////////////////////////////////////////////; /// Compute ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// Get help message text.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:17,Integrability,depend,depends,17,"// NN definition depends on individual methods. Important to have NO #ifndef if several BDT methods compile together; //fout << ""#endif"" << std::endl; commented out on purpose see previous line",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:151,Integrability,wrap,wrappers,151,"// <-- | -------------- in var is blg (accept all blow cut); // Initialize (un)weighted counters for signal & background; // Construct a list of event wrappers that point to the original data",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:32,Modifiability,variab,variables,32,"// loop over all discriminating variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:14,Modifiability,variab,variable,14,"// select the variable to sort by",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:2,Modifiability,variab,variable,2,"//variable that determines how ""exact"" you cut on the preselection found in the training data. Here I chose; //1% of the variable range...",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:121,Modifiability,variab,variable,121,"//variable that determines how ""exact"" you cut on the preselection found in the training data. Here I chose; //1% of the variable range...",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:45,Modifiability,variab,variable,45,"// Locate the optimal cut for this (ivar-th) variable",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:26,Energy Efficiency,efficient,efficient,26,"// you look for some 100% efficient pre-selection cut to remove background.. i.e. nSelS=0 && nSelB>5%nTotB or ( nSelB=0 nSelS>5%nTotS)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:32,Modifiability,variab,variables,32,"// loop over all discriminating variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:32,Modifiability,variab,variables,32,"// loop over all discriminating variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:241,Deployability,integrat,integrated,241,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBoost; \ingroup TMVA. Class for boosting a TMVA method. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Every time the weights of the; events are modified according to how well the classifier performed; on the test sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:241,Integrability,integrat,integrated,241,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBoost; \ingroup TMVA. Class for boosting a TMVA method. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Every time the weights of the; events are modified according to how well the classifier performed; on the test sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:1514,Performance,perform,performed,1514,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBoost; \ingroup TMVA. Class for boosting a TMVA method. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Every time the weights of the; events are modified according to how well the classifier performed; on the test sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:1532,Testability,test,test,1532,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBoost; \ingroup TMVA. Class for boosting a TMVA method. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Every time the weights of the; events are modified according to how well the classifier performed; on the test sample. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:110,Modifiability,variab,variable,110,"// if (opts.Contains(""vartransform"")) Log() << kFATAL << ""It is not possible to use boost in conjunction with variable transform. Please remove either Boost_Num or VarTransform from the option string""<< methodTitle<<Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:38,Testability,Log,Log,38,"// if (opts.Contains(""vartransform"")) Log() << kFATAL << ""It is not possible to use boost in conjunction with variable transform. Please remove either Boost_Num or VarTransform from the option string""<< methodTitle<<Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:101,Integrability,rout,routine,101,"////////////////////////////////////////////////////////////////////////////////; /// initialisation routine",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:14,Testability,Log,Logger,14,"//suppressing Logger outside the method",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:145,Energy Efficiency,monitor,monitoring,145,"// get ROC integral and overlap integral for single method on; // training sample if fMethodWeightType == ""ByROC"" or the user; // wants detailed monitoring; // boosting (reweight training sample)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:32,Availability,error,error,32,"// stop boosting if needed when error has reached 0.5; // thought of counting a few steps, but it doesn't seem to be necessary",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:3,Performance,perform,performing,3,"// performing post-boosting actions",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:78,Safety,avoid,avoids,78,"// Ensure that in case of only 1 boost the method weight equals; // 1.0. This avoids unexpected behaviour in case of very bad; // classifiers which have fBoostWeight=1 or fMethodError=0.5,; // because their weight would be set to zero. This behaviour is; // not ok if one boosts just one time.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:49,Testability,test,test,49,"//running over all the events and populating the test MVA histograms",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:45,Availability,error,error,45,"// creating a fine histograms containing the error rate",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:31,Usability,simpl,simple,31,"// the RealAdaBoost does use a simple ""yes (signal)"" or ""no (background)""; // answer from your single MVA, but a ""signal probability"" instead (in the BDT case,; // that would be the 'purity' in the leaf node. For some MLP parameter, the MVA output; // can also interpreted as a probability, but here I try a general approach to get this; // probability from the MVA distributions...",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:138,Availability,error,error,138,"// std::cout << ""boostweight = "" << boostWeight << std::endl;; // ADA boosting, rescaling the weight of the wrong events according to the error level; // over the entire test sample rescaling all the weights to have the same sum, but without; // touching the original weights (changing only the boosted weight of all the events); // first reweight",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:170,Testability,test,test,170,"// std::cout << ""boostweight = "" << boostWeight << std::endl;; // ADA boosting, rescaling the weight of the wrong events according to the error level; // over the entire test sample rescaling all the weights to have the same sum, but without; // touching the original weights (changing only the boosted weight of all the events); // first reweight",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:21,Energy Efficiency,monitor,monitoring,21,"// used ONLY for the monitoring tree",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:21,Energy Efficiency,monitor,monitoring,21,"// used ONLY for the monitoring tree",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// Get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:206,Testability,test,testing,206,"////////////////////////////////////////////////////////////////////////////////; /// Calculate the ROC integral of a single classifier or even the; /// whole boosted classifier. The tree type (training or testing; /// sample) is specified by 'eTT'.; ///; /// If tree type kTraining is set, the original training sample is; /// used to compute the ROC integral (original weights).; ///; /// - singleMethod - if kTRUE, return ROC integral of single (last; /// trained) classifier; if kFALSE, return ROC; /// integral of full classifier; ///; /// - eTT - tree type (Types::kTraining / Types::kTesting); ///; /// - CalcOverlapIntergral - if kTRUE, the overlap integral of the; /// signal/background MVA distributions; /// is calculated and stored in; /// 'fOverlap_integral'",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:30,Testability,test,testing,30,"// set data sample training / testing",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:99,Energy Efficiency,monitor,monitoring,99,"////////////////////////////////////////////////////////////////////////////////; /// fill various monitoring histograms from information of the individual classifiers that; /// have been boosted.; /// of course.... this depends very much on the individual classifiers, and so far, only for; /// Decision Trees, this monitoring is actually implemented",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:317,Energy Efficiency,monitor,monitoring,317,"////////////////////////////////////////////////////////////////////////////////; /// fill various monitoring histograms from information of the individual classifiers that; /// have been boosted.; /// of course.... this depends very much on the individual classifiers, and so far, only for; /// Decision Trees, this monitoring is actually implemented",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:221,Integrability,depend,depends,221,"////////////////////////////////////////////////////////////////////////////////; /// fill various monitoring histograms from information of the individual classifiers that; /// have been boosted.; /// of course.... this depends very much on the individual classifiers, and so far, only for; /// Decision Trees, this monitoring is actually implemented",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodBoost.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Nadim Sah <Nadim.Sah@cern.ch> - Berlin, Germany *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU East Lansing, USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MSU East Lansing, USA *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCategory; \ingroup TMVA. Class for categorizing the phase space. This class is meant to allow categorisation of the data. For different; categories, different classifiers may be booked and different variables; may be considered. The aim is to account for the difference that; is due to different locations/angles.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Nadim Sah <Nadim.Sah@cern.ch> - Berlin, Germany *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU East Lansing, USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MSU East Lansing, USA *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCategory; \ingroup TMVA. Class for categorizing the phase space. This class is meant to allow categorisation of the data. For different; categories, different classifiers may be booked and different variables; may be considered. The aim is to account for the difference that; is due to different locations/angles.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:1489,Modifiability,variab,variables,1489,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Nadim Sah <Nadim.Sah@cern.ch> - Berlin, Germany *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU East Lansing, USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MSU East Lansing, USA *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCategory; \ingroup TMVA. Class for categorizing the phase space. This class is meant to allow categorisation of the data. For different; categories, different classifiers may be booked and different variables; may be considered. The aim is to account for the difference that; is due to different locations/angles.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:121,Performance,perform,performed,121,"// method->SetBaseDir(eigenes base dir, gucken ob Fisher dir existiert, sonst erzeugen ); // check-for-unused-options is performed; may be overridden by derived; // classes",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:25,Modifiability,variab,variable,25,"// store method, cut and variable names and create cut formula",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:34,Modifiability,variab,variables,34,"// split string that contains the variables into tiny little pieces",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:11,Modifiability,variab,variables,11,"// add the variables that were specified in theVariables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:20,Modifiability,variab,variables,20,"// iterate over all variables in 'variables' and add them",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:34,Modifiability,variab,variables,34,"// iterate over all variables in 'variables' and add them",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:13,Modifiability,variab,variables,13,"// check the variables of the old dsi for the variable that we want to add",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:46,Modifiability,variab,variable,46,"// check the variables of the old dsi for the variable that we want to add",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:218,Modifiability,variab,variables,218,"// || (*itrVariables==itrVarInfo->GetExpression())) {; // don't compare the expression, since the user might take two times the same expression, but with different labels; // and apply different transformations to the variables.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:47,Modifiability,variab,variable,47,"// check the spectators of the old dsi for the variable that we want to add",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:218,Modifiability,variab,variables,218,"// || (*itrVariables==itrVarInfo->GetExpression())) {; // don't compare the expression, since the user might take two times the same expression, but with different labels; // and apply different transformations to the variables.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:10,Modifiability,variab,variable,10,"// if the variable is neither in the variables nor in the spectators, we abort",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:37,Modifiability,variab,variables,37,"// if the variable is neither in the variables nor in the spectators, we abort",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:73,Safety,abort,abort,73,"// if the variable is neither in the variables nor in the spectators, we abort",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:23,Modifiability,variab,variables,23,"// in the case that no variables are specified, add the default-variables from the original dsi",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:64,Modifiability,variab,variables,64,"// in the case that no variables are specified, add the default-variables from the original dsi",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:11,Modifiability,variab,variable,11,"// add the variable map 'varMap' to the vector of varMaps",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:3,Modifiability,variab,variable,3,"// variable ranking",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// Get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:36,Modifiability,variab,variable,36,"// if it's not a simple 'spectator' variable (0 or 1) that the categories are defined by; // (but rather some 'formula' (i.e. eta>0), then this formulas are stored in fCatTree and that; // one will be evaluated.. (the formulae return 'true' or 'false'",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:17,Usability,simpl,simple,17,"// if it's not a simple 'spectator' variable (0 or 1) that the categories are defined by; // (but rather some 'formula' (i.e. eta>0), then this formulas are stored in fCatTree and that; // one will be evaluated.. (the formulae return 'true' or 'false'",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:34,Modifiability,variab,variable,34,"// otherwise, it simply looks if ""variable == true"" (""greater 0.5 to be ""sure"" )",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:17,Usability,simpl,simply,17,"// otherwise, it simply looks if ""variable == true"" (""greater 0.5 to be ""sure"" )",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:15,Modifiability,variab,variable,15,"// need to set variable map",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:9,Modifiability,variab,variable,9,"// reset variable map which was set it before",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input t",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:2384,Energy Efficiency,power,power,2384,"-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. The learning method used by the CFMlpANN is only stochastic.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input t",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:1113,Integrability,Interface,Interface,1113,"*******************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (d",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:1430,Modifiability,variab,variables,1430,"Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant ana",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:1574,Modifiability,layers,layers,1574,"-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. The learning method used by the CFMlpANN is only stochastic.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:1587,Modifiability,variab,variable,1587,"-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. The learning method used by the CFMlpANN is only stochastic.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:1623,Modifiability,layers,layers,1623,"-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. The learning method used by the CFMlpANN is only stochastic.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:1711,Modifiability,layers,layers,1711,"-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. The learning method used by the CFMlpANN is only stochastic.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:1760,Modifiability,layers,layers,1760,"-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. The learning method used by the CFMlpANN is only stochastic.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:1774,Modifiability,config,configured,1774,"-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. The learning method used by the CFMlpANN is only stochastic.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:2029,Performance,perform,performed,2029,"-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. The learning method used by the CFMlpANN is only stochastic.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:2519,Usability,learn,learning,2519,"-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN; \ingroup TMVA. Interface to Clermond-Ferrand artificial neural network. The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. \image html tmva_mlp.png Schema for artificial neural network. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of <i>k</i> hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.). As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. The learning method used by the CFMlpANN is only stochastic.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:921,Energy Efficiency,efficient,efficiently,921,"////////////////////////////////////////////////////////////////////////////////; /// standard constructor; ///; /// option string: ""n_training_cycles:n_hidden_layers""; ///; /// default is: n_training_cycles = 5000, n_layers = 4; ///; /// * note that the number of hidden layers in the NN is:; /// n_hidden_layers = n_layers - 2; ///; /// * since there is one input and one output layer. The number of; /// nodes (neurons) is predefined to be:; ///; /// n_nodes[i] = nvars + 1 - i (where i=1..n_layers); ///; /// with nvars being the number of variables used in the NN.; ///; /// Hence, the default case is:; ///; /// n_neurons(layer 1 (input)) : nvars; /// n_neurons(layer 2 (hidden)): nvars-1; /// n_neurons(layer 3 (hidden)): nvars-1; /// n_neurons(layer 4 (out)) : 2; ///; /// This artificial neural network usually needs a relatively large; /// number of cycles to converge (8000 and more). Overtraining can; /// be efficiently tested by comparing the signal and background; /// output of the NN for the events that were used for training and; /// an independent data sample (with equal properties). If the separation; /// performance is significantly better for the training sample, the; /// NN interprets statistical effects, and is hence overtrained. In; /// this case, the number of cycles should be reduced, or the size; /// of the training sample increased.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:1309,Energy Efficiency,reduce,reduced,1309,"////////////////////////////////////////////////////////////////////////////////; /// standard constructor; ///; /// option string: ""n_training_cycles:n_hidden_layers""; ///; /// default is: n_training_cycles = 5000, n_layers = 4; ///; /// * note that the number of hidden layers in the NN is:; /// n_hidden_layers = n_layers - 2; ///; /// * since there is one input and one output layer. The number of; /// nodes (neurons) is predefined to be:; ///; /// n_nodes[i] = nvars + 1 - i (where i=1..n_layers); ///; /// with nvars being the number of variables used in the NN.; ///; /// Hence, the default case is:; ///; /// n_neurons(layer 1 (input)) : nvars; /// n_neurons(layer 2 (hidden)): nvars-1; /// n_neurons(layer 3 (hidden)): nvars-1; /// n_neurons(layer 4 (out)) : 2; ///; /// This artificial neural network usually needs a relatively large; /// number of cycles to converge (8000 and more). Overtraining can; /// be efficiently tested by comparing the signal and background; /// output of the NN for the events that were used for training and; /// an independent data sample (with equal properties). If the separation; /// performance is significantly better for the training sample, the; /// NN interprets statistical effects, and is hence overtrained. In; /// this case, the number of cycles should be reduced, or the size; /// of the training sample increased.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:272,Modifiability,layers,layers,272,"////////////////////////////////////////////////////////////////////////////////; /// standard constructor; ///; /// option string: ""n_training_cycles:n_hidden_layers""; ///; /// default is: n_training_cycles = 5000, n_layers = 4; ///; /// * note that the number of hidden layers in the NN is:; /// n_hidden_layers = n_layers - 2; ///; /// * since there is one input and one output layer. The number of; /// nodes (neurons) is predefined to be:; ///; /// n_nodes[i] = nvars + 1 - i (where i=1..n_layers); ///; /// with nvars being the number of variables used in the NN.; ///; /// Hence, the default case is:; ///; /// n_neurons(layer 1 (input)) : nvars; /// n_neurons(layer 2 (hidden)): nvars-1; /// n_neurons(layer 3 (hidden)): nvars-1; /// n_neurons(layer 4 (out)) : 2; ///; /// This artificial neural network usually needs a relatively large; /// number of cycles to converge (8000 and more). Overtraining can; /// be efficiently tested by comparing the signal and background; /// output of the NN for the events that were used for training and; /// an independent data sample (with equal properties). If the separation; /// performance is significantly better for the training sample, the; /// NN interprets statistical effects, and is hence overtrained. In; /// this case, the number of cycles should be reduced, or the size; /// of the training sample increased.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:544,Modifiability,variab,variables,544,"////////////////////////////////////////////////////////////////////////////////; /// standard constructor; ///; /// option string: ""n_training_cycles:n_hidden_layers""; ///; /// default is: n_training_cycles = 5000, n_layers = 4; ///; /// * note that the number of hidden layers in the NN is:; /// n_hidden_layers = n_layers - 2; ///; /// * since there is one input and one output layer. The number of; /// nodes (neurons) is predefined to be:; ///; /// n_nodes[i] = nvars + 1 - i (where i=1..n_layers); ///; /// with nvars being the number of variables used in the NN.; ///; /// Hence, the default case is:; ///; /// n_neurons(layer 1 (input)) : nvars; /// n_neurons(layer 2 (hidden)): nvars-1; /// n_neurons(layer 3 (hidden)): nvars-1; /// n_neurons(layer 4 (out)) : 2; ///; /// This artificial neural network usually needs a relatively large; /// number of cycles to converge (8000 and more). Overtraining can; /// be efficiently tested by comparing the signal and background; /// output of the NN for the events that were used for training and; /// an independent data sample (with equal properties). If the separation; /// performance is significantly better for the training sample, the; /// NN interprets statistical effects, and is hence overtrained. In; /// this case, the number of cycles should be reduced, or the size; /// of the training sample increased.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:1128,Performance,perform,performance,1128,"////////////////////////////////////////////////////////////////////////////////; /// standard constructor; ///; /// option string: ""n_training_cycles:n_hidden_layers""; ///; /// default is: n_training_cycles = 5000, n_layers = 4; ///; /// * note that the number of hidden layers in the NN is:; /// n_hidden_layers = n_layers - 2; ///; /// * since there is one input and one output layer. The number of; /// nodes (neurons) is predefined to be:; ///; /// n_nodes[i] = nvars + 1 - i (where i=1..n_layers); ///; /// with nvars being the number of variables used in the NN.; ///; /// Hence, the default case is:; ///; /// n_neurons(layer 1 (input)) : nvars; /// n_neurons(layer 2 (hidden)): nvars-1; /// n_neurons(layer 3 (hidden)): nvars-1; /// n_neurons(layer 4 (out)) : 2; ///; /// This artificial neural network usually needs a relatively large; /// number of cycles to converge (8000 and more). Overtraining can; /// be efficiently tested by comparing the signal and background; /// output of the NN for the events that were used for training and; /// an independent data sample (with equal properties). If the separation; /// performance is significantly better for the training sample, the; /// NN interprets statistical effects, and is hence overtrained. In; /// this case, the number of cycles should be reduced, or the size; /// of the training sample increased.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:933,Testability,test,tested,933,"////////////////////////////////////////////////////////////////////////////////; /// standard constructor; ///; /// option string: ""n_training_cycles:n_hidden_layers""; ///; /// default is: n_training_cycles = 5000, n_layers = 4; ///; /// * note that the number of hidden layers in the NN is:; /// n_hidden_layers = n_layers - 2; ///; /// * since there is one input and one output layer. The number of; /// nodes (neurons) is predefined to be:; ///; /// n_nodes[i] = nvars + 1 - i (where i=1..n_layers); ///; /// with nvars being the number of variables used in the NN.; ///; /// Hence, the default case is:; ///; /// n_neurons(layer 1 (input)) : nvars; /// n_neurons(layer 2 (hidden)): nvars-1; /// n_neurons(layer 3 (hidden)): nvars-1; /// n_neurons(layer 4 (out)) : 2; ///; /// This artificial neural network usually needs a relatively large; /// number of cycles to converge (8000 and more). Overtraining can; /// be efficiently tested by comparing the signal and background; /// output of the NN for the events that were used for training and; /// an independent data sample (with equal properties). If the separation; /// performance is significantly better for the training sample, the; /// NN interprets statistical effects, and is hence overtrained. In; /// this case, the number of cycles should be reduced, or the size; /// of the training sample increased.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:282,Modifiability,layers,layers,282,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// know options: NCycles=xx :the number of training cycles; /// HiddenLayser=""N-1,N-2"" :the specification of the hidden layers",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:41,Modifiability,layers,layers,41,"// number of nodes per layer (maximum 20 layers)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:17,Modifiability,variab,variable,17,"// note that one variable is type",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:2,Testability,Log,Log,2,"//Log() << kVERBOSE << Data()->GetNEvtSigTrain() << "" Signal and ""; // << Data()->GetNEvtBkgdTrain() << "" background"" << "" events in trainingTree"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:37,Modifiability,variab,variables,37,"// CFMlpANN prefers normalised input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:17,Modifiability,variab,variables,17,"// copy of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:126,Modifiability,variab,variables,126,"////////////////////////////////////////////////////////////////////////////////; /// evaluates NN value as function of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:59,Deployability,update,update,59,"// hardcopy of input variables (necessary because they are update later)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:21,Modifiability,variab,variables,21,"// hardcopy of input variables (necessary because they are update later)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:18,Modifiability,variab,variables,18,"// read number of variables and classes",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:25,Modifiability,variab,variables,25,"// read extrema of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:18,Modifiability,layers,layers,18,"// read number of layers (sum of: input + output + hidden)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:91,Integrability,interface,interface,91,"////////////////////////////////////////////////////////////////////////////////; /// data interface function",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:8,Modifiability,variab,variables,8,"// fill variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:19,Modifiability,variab,variables,19,"// write number of variables and classes",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:26,Modifiability,variab,variables,26,"// write extrema of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:19,Modifiability,layers,layers,19,"// write number of layers (sum of: input + output + hidden)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * *; * Modifications by present authors: *; * use dynamical data tables (not for all of them, but for the big ones) *; * *; * Description: *; * Utility routine translated from original mlpl3.F FORTRAN routine *; * *; * MultiLayerPerceptron : Training code *; * *; * NTRAIN: Nb of events used during the learning *; * NTEST: Nb of events used for the test *; * TIN: Input variables *; * TOUT: type of the event *; * *; * ---------------------------------------------------------------------------- *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN_Utils; \ingroup TMVA. Implementation of Clermond-Ferrand artificial neural network. Reference for the original FORTRAN version ""mlpl3.F"":; - Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand; Team m",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * *; * Modifications by present authors: *; * use dynamical data tables (not for all of them, but for the big ones) *; * *; * Description: *; * Utility routine translated from original mlpl3.F FORTRAN routine *; * *; * MultiLayerPerceptron : Training code *; * *; * NTRAIN: Nb of events used during the learning *; * NTEST: Nb of events used for the test *; * TIN: Input variables *; * TOUT: type of the event *; * *; * ---------------------------------------------------------------------------- *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN_Utils; \ingroup TMVA. Implementation of Clermond-Ferrand artificial neural network. Reference for the original FORTRAN version ""mlpl3.F"":; - Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand; Team m",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:717,Integrability,rout,routine,717,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * *; * Modifications by present authors: *; * use dynamical data tables (not for all of them, but for the big ones) *; * *; * Description: *; * Utility routine translated from original mlpl3.F FORTRAN routine *; * *; * MultiLayerPerceptron : Training code *; * *; * NTRAIN: Nb of events used during the learning *; * NTEST: Nb of events used for the test *; * TIN: Input variables *; * TOUT: type of the event *; * *; * ---------------------------------------------------------------------------- *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN_Utils; \ingroup TMVA. Implementation of Clermond-Ferrand artificial neural network. Reference for the original FORTRAN version ""mlpl3.F"":; - Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand; Team m",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:766,Integrability,rout,routine,766,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * *; * Modifications by present authors: *; * use dynamical data tables (not for all of them, but for the big ones) *; * *; * Description: *; * Utility routine translated from original mlpl3.F FORTRAN routine *; * *; * MultiLayerPerceptron : Training code *; * *; * NTRAIN: Nb of events used during the learning *; * NTEST: Nb of events used for the test *; * TIN: Input variables *; * TOUT: type of the event *; * *; * ---------------------------------------------------------------------------- *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN_Utils; \ingroup TMVA. Implementation of Clermond-Ferrand artificial neural network. Reference for the original FORTRAN version ""mlpl3.F"":; - Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand; Team m",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:936,Modifiability,variab,variables,936,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * *; * Modifications by present authors: *; * use dynamical data tables (not for all of them, but for the big ones) *; * *; * Description: *; * Utility routine translated from original mlpl3.F FORTRAN routine *; * *; * MultiLayerPerceptron : Training code *; * *; * NTRAIN: Nb of events used during the learning *; * NTEST: Nb of events used for the test *; * TIN: Input variables *; * TOUT: type of the event *; * *; * ---------------------------------------------------------------------------- *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN_Utils; \ingroup TMVA. Implementation of Clermond-Ferrand artificial neural network. Reference for the original FORTRAN version ""mlpl3.F"":; - Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand; Team m",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:915,Testability,test,test,915,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * *; * Modifications by present authors: *; * use dynamical data tables (not for all of them, but for the big ones) *; * *; * Description: *; * Utility routine translated from original mlpl3.F FORTRAN routine *; * *; * MultiLayerPerceptron : Training code *; * *; * NTRAIN: Nb of events used during the learning *; * NTEST: Nb of events used for the test *; * TIN: Input variables *; * TOUT: type of the event *; * *; * ---------------------------------------------------------------------------- *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN_Utils; \ingroup TMVA. Implementation of Clermond-Ferrand artificial neural network. Reference for the original FORTRAN version ""mlpl3.F"":; - Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand; Team m",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:868,Usability,learn,learning,868,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * *; * Modifications by present authors: *; * use dynamical data tables (not for all of them, but for the big ones) *; * *; * Description: *; * Utility routine translated from original mlpl3.F FORTRAN routine *; * *; * MultiLayerPerceptron : Training code *; * *; * NTRAIN: Nb of events used during the learning *; * NTEST: Nb of events used for the test *; * TIN: Input variables *; * TOUT: type of the event *; * *; * ---------------------------------------------------------------------------- *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN_Utils; \ingroup TMVA. Implementation of Clermond-Ferrand artificial neural network. Reference for the original FORTRAN version ""mlpl3.F"":; - Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand; Team m",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:12,Integrability,interface,interface,12,"// training interface - called from MethodCFMlpANN class object; // sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:68,Safety,sanity check,sanity checks,68,"// training interface - called from MethodCFMlpANN class object; // sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:112,Modifiability,variab,variables,112,/* NTRAIN: Nb of events used during the learning */; /* NTEST: Nb of events used for the test */; /* TIN: Input variables */; /* TOUT: type of the event */,MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:89,Testability,test,test,89,/* NTRAIN: Nb of events used during the learning */; /* NTEST: Nb of events used for the test */; /* TIN: Input variables */; /* TOUT: type of the event */,MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:40,Usability,learn,learning,40,/* NTRAIN: Nb of events used during the learning */; /* NTEST: Nb of events used for the test */; /* TIN: Input variables */; /* TOUT: type of the event */,MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:17,Energy Efficiency,power,power,17,"// Computing 2nd power",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:17,Energy Efficiency,power,power,17,/* Computing 2nd power */,MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:112,Modifiability,variab,variables,112,/* NTRAIN: Nb of events used during the learning */; /* NTEST: Nb of events used for the test */; /* TIN: Input variables */; /* TOUT: type of the event */,MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:89,Testability,test,test,89,/* NTRAIN: Nb of events used during the learning */; /* NTEST: Nb of events used for the test */; /* TIN: Input variables */; /* TOUT: type of the event */,MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:40,Usability,learn,learning,40,/* NTRAIN: Nb of events used during the learning */; /* NTEST: Nb of events used for the test */; /* TIN: Input variables */; /* TOUT: type of the event */,MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:9,Availability,error,error,9,"// fatal error occurred: stop execution",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx:202,Deployability,integrat,integrated,202,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen; /*****************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU, USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Or Cohen <orcohenor@gmail.com> - Weizmann Inst., Israel *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; *****************************************************************************/; /*! \class TMVA::MethodCompositeBase; \ingroup TMVA. Virtual base class for combining several TMVA method. This class is virtual class meant to combine more than one classifier; together. The training of the classifiers is done by classes that are; derived from this one, while the saving and loading of weights file; and the evaluation is done here.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCompositeBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx:202,Integrability,integrat,integrated,202,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen; /*****************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU, USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Or Cohen <orcohenor@gmail.com> - Weizmann Inst., Israel *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; *****************************************************************************/; /*! \class TMVA::MethodCompositeBase; \ingroup TMVA. Virtual base class for combining several TMVA method. This class is virtual class meant to combine more than one classifier; together. The training of the classifiers is done by classes that are; derived from this one, while the saving and loading of weights file; and the evaluation is done here.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCompositeBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx:1406,Performance,load,loading,1406,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen; /*****************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU, USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Or Cohen <orcohenor@gmail.com> - Weizmann Inst., Israel *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; *****************************************************************************/; /*! \class TMVA::MethodCompositeBase; \ingroup TMVA. Virtual base class for combining several TMVA method. This class is virtual class meant to combine more than one classifier; together. The training of the classifiers is done by classes that are; derived from this one, while the saving and loading of weights file; and the evaluation is done here.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCompositeBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx:2,Testability,Log,Log,2,"//Log() << kINFO << ""Reading methods from XML done "" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCompositeBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCompositeBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx:120,Availability,avail,available,120,"////////////////////////////////////////////////////////////////////////////////; /// The option string is decoded, for available options see ""DeclareOptions"".",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx:95,Performance,Optimiz,Optimizer,95,"////////////////////////////////////////////////////////////////////////////////; /// Call the Optimizer with the set of parameters and ranges that; /// are meant to be tuned.; // std::map<TString,Double_t> TMVA::MethodCrossValidation::OptimizeTuningParameters(TString fomType, TString fitType); // {; // }; ////////////////////////////////////////////////////////////////////////////////; /// Set the tuning parameters according to the argument.; // void TMVA::MethodCrossValidation::SetTuneParameters(std::map<TString,Double_t> tuneParameters); // {; // }; ////////////////////////////////////////////////////////////////////////////////; /// training.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx:169,Performance,tune,tuned,169,"////////////////////////////////////////////////////////////////////////////////; /// Call the Optimizer with the set of parameters and ranges that; /// are meant to be tuned.; // std::map<TString,Double_t> TMVA::MethodCrossValidation::OptimizeTuningParameters(TString fomType, TString fitType); // {; // }; ////////////////////////////////////////////////////////////////////////////////; /// Set the tuning parameters according to the argument.; // void TMVA::MethodCrossValidation::SetTuneParameters(std::map<TString,Double_t> tuneParameters); // {; // }; ////////////////////////////////////////////////////////////////////////////////; /// training.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx:236,Performance,Optimiz,OptimizeTuningParameters,236,"////////////////////////////////////////////////////////////////////////////////; /// Call the Optimizer with the set of parameters and ranges that; /// are meant to be tuned.; // std::map<TString,Double_t> TMVA::MethodCrossValidation::OptimizeTuningParameters(TString fomType, TString fitType); // {; // }; ////////////////////////////////////////////////////////////////////////////////; /// Set the tuning parameters according to the argument.; // void TMVA::MethodCrossValidation::SetTuneParameters(std::map<TString,Double_t> tuneParameters); // {; // }; ////////////////////////////////////////////////////////////////////////////////; /// training.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx:530,Performance,tune,tuneParameters,530,"////////////////////////////////////////////////////////////////////////////////; /// Call the Optimizer with the set of parameters and ranges that; /// are meant to be tuned.; // std::map<TString,Double_t> TMVA::MethodCrossValidation::OptimizeTuningParameters(TString fomType, TString fitType); // {; // }; ////////////////////////////////////////////////////////////////////////////////; /// Set the tuning parameters according to the argument.; // void TMVA::MethodCrossValidation::SetTuneParameters(std::map<TString,Double_t> tuneParameters); // {; // }; ////////////////////////////////////////////////////////////////////////////////; /// training.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx:21,Testability,test,testvarName,21,"// m->SetTestvarName(testvarName);",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx:82,Testability,Log,Log,82,"// // Used for evaluation, which is outside the life time of MethodCrossEval.; // Log() << kFATAL << ""Method CrossValidation should not be created manually,""; // "" only as part of using TMVA::Reader."" << Endl;; // return;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCrossValidation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:237,Deployability,integrat,integrated,237,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Eckhard von Toerne, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodCuts *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCuts; \ingroup TMVA. Multivariate optimisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in gen",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:237,Integrability,integrat,integrated,237,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Eckhard von Toerne, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodCuts *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCuts; \ingroup TMVA. Multivariate optimisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in gen",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:2334,Integrability,depend,depending,2334,"timisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges. 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima. The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway. **Decorrelated (or ""diagonalized"") Cuts**. See class description for Method Likelihood for a detailed explanation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:1556,Modifiability,variab,variables,1556,"tt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodCuts; \ingroup TMVA. Multivariate optimisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut valu",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:2162,Modifiability,variab,variable,2162,"*****************************************/; /*! \class TMVA::MethodCuts; \ingroup TMVA. Multivariate optimisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges. 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima. The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway. **Decorrelated (",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:2561,Modifiability,variab,variable,2561,"timisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges. 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima. The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway. **Decorrelated (or ""diagonalized"") Cuts**. See class description for Method Likelihood for a detailed explanation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:2666,Modifiability,config,configurable,2666,"timisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges. 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima. The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway. **Decorrelated (or ""diagonalized"") Cuts**. See class description for Method Likelihood for a detailed explanation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:2767,Modifiability,variab,variables,2767,"timisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges. 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima. The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway. **Decorrelated (or ""diagonalized"") Cuts**. See class description for Method Likelihood for a detailed explanation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:2180,Performance,perform,performed,2180,"*****************************************/; /*! \class TMVA::MethodCuts; \ingroup TMVA. Multivariate optimisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges. 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima. The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway. **Decorrelated (",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3001,Performance,perform,performed,3001,"timisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges. 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima. The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway. **Decorrelated (or ""diagonalized"") Cuts**. See class description for Method Likelihood for a detailed explanation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:2987,Testability,test,tests,2987,"timisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges. 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima. The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway. **Decorrelated (or ""diagonalized"") Cuts**. See class description for Method Likelihood for a detailed explanation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:2869,Usability,Simpl,Simplex,2869,"timisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges. 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima. The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway. **Decorrelated (or ""diagonalized"") Cuts**. See class description for Method Likelihood for a detailed explanation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:11,Modifiability,variab,variable,11,"// get the variable specific options, first initialize default",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:231,Availability,Avail,Available,231,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - Method `<string>` Minimisation method. Available values are:; /// - MC Monte Carlo `<default>`; /// - GA Genetic Algorithm; /// - SA Simulated annealing; ///; /// - EffMethod `<string>` Efficiency selection method. Available values are:; /// - EffSel `<default>`; /// - EffPDF; ///; /// - VarProp `<string>` Property of variable 1 for the MC method (taking precedence over the; /// globale setting. The same values as for the global option are available. Variables 1..10 can be; /// set this way; ///; /// - CutRangeMin/Max `<float>` user-defined ranges in which cuts are varied",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:407,Availability,Avail,Available,407,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - Method `<string>` Minimisation method. Available values are:; /// - MC Monte Carlo `<default>`; /// - GA Genetic Algorithm; /// - SA Simulated annealing; ///; /// - EffMethod `<string>` Efficiency selection method. Available values are:; /// - EffSel `<default>`; /// - EffPDF; ///; /// - VarProp `<string>` Property of variable 1 for the MC method (taking precedence over the; /// globale setting. The same values as for the global option are available. Variables 1..10 can be; /// set this way; ///; /// - CutRangeMin/Max `<float>` user-defined ranges in which cuts are varied",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:636,Availability,avail,available,636,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - Method `<string>` Minimisation method. Available values are:; /// - MC Monte Carlo `<default>`; /// - GA Genetic Algorithm; /// - SA Simulated annealing; ///; /// - EffMethod `<string>` Efficiency selection method. Available values are:; /// - EffSel `<default>`; /// - EffPDF; ///; /// - VarProp `<string>` Property of variable 1 for the MC method (taking precedence over the; /// globale setting. The same values as for the global option are available. Variables 1..10 can be; /// set this way; ///; /// - CutRangeMin/Max `<float>` user-defined ranges in which cuts are varied",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:512,Modifiability,variab,variable,512,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - Method `<string>` Minimisation method. Available values are:; /// - MC Monte Carlo `<default>`; /// - GA Genetic Algorithm; /// - SA Simulated annealing; ///; /// - EffMethod `<string>` Efficiency selection method. Available values are:; /// - EffSel `<default>`; /// - EffPDF; ///; /// - VarProp `<string>` Property of variable 1 for the MC method (taking precedence over the; /// globale setting. The same values as for the global option are available. Variables 1..10 can be; /// set this way; ///; /// - CutRangeMin/Max `<float>` user-defined ranges in which cuts are varied",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:647,Modifiability,Variab,Variables,647,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - Method `<string>` Minimisation method. Available values are:; /// - MC Monte Carlo `<default>`; /// - GA Genetic Algorithm; /// - SA Simulated annealing; ///; /// - EffMethod `<string>` Efficiency selection method. Available values are:; /// - EffSel `<default>`; /// - EffPDF; ///; /// - VarProp `<string>` Property of variable 1 for the MC method (taking precedence over the; /// globale setting. The same values as for the global option are available. Variables 1..10 can be; /// set this way; ///; /// - CutRangeMin/Max `<float>` user-defined ranges in which cuts are varied",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:155,Modifiability,variab,variables,155,"////////////////////////////////////////////////////////////////////////////////; /// process user options.; ///; /// sanity check, do not allow the input variables to be normalised, because this; /// only creates problems when interpreting the cuts",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:118,Safety,sanity check,sanity check,118,"////////////////////////////////////////////////////////////////////////////////; /// process user options.; ///; /// sanity check, do not allow the input variables to be normalised, because this; /// only creates problems when interpreting the cuts",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:12,Modifiability,variab,variable,12,"// retrieve variable expressions (could be transformations)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:49,Modifiability,variab,variables,49,"// no transformation applied, replace by current variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:43,Modifiability,variab,variables,43,"// replace transformation print by current variables and indicated incompleteness",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:19,Modifiability,variab,variables,19,"// create PDFs for variables; // create binary trees (global member variables) for signal and background",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:68,Modifiability,variab,variables,68,"// create PDFs for variables; // create binary trees (global member variables) for signal and background",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:7,Modifiability,variab,variables,7,"// the variables may be transformed by a transformation method: to coherently; // treat signal and background one must decide which transformation type shall; // be used: our default is signal-type",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,Deployability,update,update,3,"// update interval ?",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,Performance,perform,perform,3,"// perform the fit",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:44,Modifiability,variab,variable,44,"// generate minimum and delta cuts for this variable; // retrieve signal events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// nothing to test",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:39,Performance,optimiz,optimizes,39,"// test for a estimator function which optimizes on the whole background-rejection signal-efficiency plot; // get the backg-reject. and sig-eff for the parameters given to this function; // effS, effB; // get best background rejection for given signal efficiency",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,Testability,test,test,3,"// test for a estimator function which optimizes on the whole background-rejection signal-efficiency plot; // get the backg-reject. and sig-eff for the parameters given to this function; // effS, effB; // get best background rejection for given signal efficiency",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:205,Modifiability,variab,variables,205,"// caution (!) this value is not good for a decision for MC, .. it is designed for GA; // but .. it doesn't matter, as MC samplings are independent from the former ones; // and the replacement of the best variables by better ones is done about 10 lines above.; // ( if (effBH < 0 || effBH > effB) { .... )",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:37,Safety,avoid,avoid,37,"// add penalty for effS=0 bin; // to avoid that the minimizer gets stuck in the zero-bin; // force it towards higher efficiency",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:124,Energy Efficiency,monitor,monitoring,124,"////////////////////////////////////////////////////////////////////////////////; /// write histograms and PDFs to file for monitoring purposes",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:7,Modifiability,variab,variables,7,"// the variables may be transformed by a transformation method: to coherently; // treat signal and background one must decide which transformation type shall; // be used: our default is signal-type",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodCuts.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:220,Deployability,integrat,integrated,220,"// @(#)root/tmva/tmva/cnn:$Id$Ndl; // Authors: Vladimir Ilievski, Lorenzo Moneta, Saurav Shekhar, Ravi Kiran; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDL *; * *; * *; * Description: *; * Deep Neural Network Method *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * Saurav Shekhar <sauravshekhar01@gmail.com> - ETH Zurich, Switzerland *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:220,Integrability,integrat,integrated,220,"// @(#)root/tmva/tmva/cnn:$Id$Ndl; // Authors: Vladimir Ilievski, Lorenzo Moneta, Saurav Shekhar, Ravi Kiran; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDL *; * *; * *; * Description: *; * Deep Neural Network Method *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * Saurav Shekhar <sauravshekhar01@gmail.com> - ETH Zurich, Switzerland *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:46,Availability,avail,available,46,"// not needed (by default GPU is now CUDNN if available); // define training strategy separated by a separator ""|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:22,Performance,optimiz,optimizer,22,"// check for specific optimizer parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:12,Performance,optimiz,optimizer,12,"// check if optimizer has default values for this specific parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:37,Performance,optimiz,optimizer,37,"// create entry in settings for this optimizer parameter",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:72,Modifiability,layers,layers,72,"//std::cout << ""Create Deepnet - layout string "" << layoutString << ""\t layers : "" << deepNet.GetLayers().size() << std::endl;; // Split layers",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:137,Modifiability,layers,layers,137,"//std::cout << ""Create Deepnet - layout string "" << layoutString << ""\t layers : "" << deepNet.GetLayers().size() << std::endl;; // Split layers",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:68,Integrability,interface,interface,68,"// no type of layer specified - assume is dense layer as in old DNN interface",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:31,Modifiability,variab,variables,31,"// this return number of input variables for the method; // it can be used to deduce width of dense layer if specified as N+10; // where N is the number of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:162,Modifiability,variab,variables,162,"// this return number of input variables for the method; // it can be used to deduce width of dense layer if specified as N+10; // where N is the number of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:99,Modifiability,variab,variable,99,"// no match found try to parse as text showing the width; // support for input a formula where the variable 'x' is 'N' in the string; // use TFormula for the evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:3,Safety,avoid,avoid,3,"// avoid zero width. assume is last layer and give width = output width; // Determine the number of outputs",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:86,Security,Validat,Validation,86,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:104,Security,Validat,ValidationSize,104,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:228,Security,validat,validation,228,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:282,Security,validat,validation,282,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:338,Security,validat,validation,338,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:13,Security,Validat,Validation,13,"// Parsing + Validation; // --------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:9,Security,validat,validation,9,"// Value validation; // ----------------",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:39,Security,validat,validation,39,"///split training data in training and validation data; // and determine the number of training and testing examples",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:100,Testability,test,testing,100,"///split training data in training and validation data; // and determine the number of training and testing examples",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:65,Performance,multi-thread,multi-threading,65,"// FIXME threads are hard coded to 1, no use of slave threads or multi-threading; // After the processing of the options, initialize the master deep net",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:23,Modifiability,layers,layers,23,"// Add all appropriate layers to deepNet and (if fBuildNet is true) also to fNet",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:121,Modifiability,layers,layers,121,"//int n1 = batchHeight;; //int n2 = batchWidth;; // treat case where batchHeight is the batchSize in case of first Dense layers (then we need to set to fNet batch size); //if (batchDepth == 1 && GetInputHeight() == 1 && GetInputDepth() == 1) n1 = fNet->GetBatchSize();; //fXInput = TensorImpl_t(1,n1,n2);",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:48,Safety,predict,predictions,48,"// create pointer to output matrix used for the predictions",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:3,Performance,Load,Loading,3,"// Loading the training and validation datasets",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:28,Security,validat,validation,28,"// Loading the training and validation datasets",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:67,Availability,error,error,67,"// do an evaluation of the network to compute initial minimum test error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:62,Testability,test,test,62,"// do an evaluation of the network to compute initial minimum test error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:33,Performance,optimiz,optimizer,33,"// function building string with optimizer parameters values for logging",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:65,Testability,log,logging,65,"// function building string with optimizer parameters values for logging",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:34,Testability,test,test,34,"// compute loss in training or at test time",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:13,Performance,load,load,13,"// Clean and load new batches, one batch for one slave net; //batches.clear();; //batches.reserve(nThreads);; //for (size_t j = 0; j < nThreads; j++) {; // batches.push_back(trainingData.GetTensorBatch());; //}",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:70,Usability,clear,clear,70,"// Clean and load new batches, one batch for one slave net; //batches.clear();; //batches.reserve(nThreads);; //for (size_t j = 0; j < nThreads; j++) {; // batches.push_back(trainingData.GetTensorBatch());; //}",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:13,Performance,optimiz,optimizer,13,"// increment optimizer step that is used in some algorithms (e.g. ADAM)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:22,Availability,error,error,22,"// Compute validation error.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:11,Security,validat,validation,11,"// Compute validation error.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:2,Testability,Log,Log,2,"//Log the loss value",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:45,Availability,error,error,45,"// copy configuration when reached a minimum error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:8,Deployability,configurat,configuration,8,"// copy configuration when reached a minimum error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:8,Modifiability,config,configuration,8,"// copy configuration when reached a minimum error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:20,Availability,error,error,20,"// Compute training error.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:2,Testability,Log,Log,2,"//Log the loss value",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:21,Performance,throughput,throughput,21,"// Compute numerical throughput.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:93,Availability,error,errors,93,"// std::chrono::duration<double> elapsed2 = t2-tstart;; // time to compute training and test errors",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:88,Testability,test,test,88,"// std::chrono::duration<double> elapsed2 = t2-tstart;; // time to compute training and test errors",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:38,Testability,test,testInterval,38,"// double nGFlops = (double)(settings.testInterval * batchesInEpoch * settings.batchSize)*1.E-9;; // nGFlops *= deepnet.GetNFlops() * 1e-9;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:55,Safety,predict,prediction,55,"// using for training same scalar type defined for the prediction",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:88,Integrability,depend,depending,88,"// fill the input tensor fXInput from the current Event data; // with the correct shape depending on the model used; // The input tensor is used for network prediction after training ; // using a single event. The network batch size must be equal to 1. ; // The architecture specified at compile time in ArchitectureImpl_t; // is used. This should be the CPU architecture",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:157,Safety,predict,prediction,157,"// fill the input tensor fXInput from the current Event data; // with the correct shape depending on the model used; // The input tensor is used for network prediction after training ; // using a single event. The network batch size must be equal to 1. ; // The architecture specified at compile time in ArchitectureImpl_t; // is used. This should be the CPU architecture",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:3,Performance,perform,perform,3,"// perform the prediction",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:15,Safety,predict,prediction,15,"// perform the prediction",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:72,Modifiability,layers,layers,72,"// treat case where batchHeight is the batchSize in case of first Dense layers (then we need to set to fNet batch size)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:147,Safety,predict,predictions,147,"// Tensor_t xInput;; // for (size_t i = 0; i < n0; ++i); // xInput.emplace_back(Matrix_t(n1,n2));; // create pointer to output matrix used for the predictions",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:17,Safety,predict,prediction,17,"// case of batch prediction for",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:12,Safety,predict,prediction,12,"// make the prediction",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:37,Safety,predict,prediction,37,"// case of remaining events: compute prediction by single event !",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:3,Performance,perform,perform,3,"// perform the network prediction",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:23,Safety,predict,prediction,23,"// perform the network prediction",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:19,Performance,cache,cache,19,"// N.B. one should cache here temporary event class",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:55,Safety,predict,prediction,55,"// using for training same scalar type defined for the prediction",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:166,Modifiability,layers,layers,166,"// create now the input and output matrices; //int n1 = batchHeight;; //int n2 = batchWidth;; // treat case where batchHeight is the batchSize in case of first Dense layers (then we need to set to fNet batch size); //if (fXInput.size() > 0) fXInput.clear();; //fXInput.emplace_back(MatrixImpl_t(n1,n2));",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:249,Usability,clear,clear,249,"// create now the input and output matrices; //int n1 = batchHeight;; //int n2 = batchWidth;; // treat case where batchHeight is the batchSize in case of first Dense layers (then we need to set to fNet batch size); //if (fXInput.size() > 0) fXInput.clear();; //fXInput.emplace_back(MatrixImpl_t(n1,n2));",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:48,Safety,predict,predictions,48,"// create pointer to output matrix used for the predictions",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDNN *; * *; * *; * Description: *; * A neural network implementation *; * *; * Authors (alphabetical): *; * Simon Pfreundschuh <s.pfreundschuh@gmail.com> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@gmx.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodDNN; \ingroup TMVA; Deep Neural Network Implementation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDNN *; * *; * *; * Description: *; * A neural network implementation *; * *; * Authors (alphabetical): *; * Simon Pfreundschuh <s.pfreundschuh@gmail.com> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@gmx.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodDNN; \ingroup TMVA; Deep Neural Network Implementation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:295,Availability,error,error,295,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:280,Security,validat,validation,280,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:376,Security,Validat,ValidationSize,376,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:427,Security,validat,validation,427,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:255,Testability,Test,TestRate,255,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:138,Usability,Learn,LearningRate,138,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:163,Usability,learn,learning,163,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:228,Usability,learn,learning,228,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:40,Security,validat,validation,40,"//; // Training settings.; //; // Force validation of the ValidationSize option",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:58,Security,Validat,ValidationSize,58,"//; // Training settings.; //; // Force validation of the ValidationSize option",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:86,Security,Validat,Validation,86,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:104,Security,Validat,ValidationSize,104,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:228,Security,validat,validation,228,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:282,Security,validat,validation,282,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:338,Security,validat,validation,338,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:13,Security,Validat,Validation,13,"// Parsing + Validation; // --------------------",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:9,Security,validat,validation,9,"// Value validation; // ----------------",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:9,Usability,progress bar,progress bar,9,"// JsMVA progress bar maximum (100%)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:41,Security,validat,validation,41,"// Split training data into training and validation set",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:3,Performance,Perform,Perform,3,"// Perform minimization steps for a full epoch.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:16,Availability,error,error,16,"// Compute test error.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:11,Testability,test,test,11,"// Compute test error.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:2,Testability,Log,Log,2,"//Log the loss value",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:20,Availability,error,error,20,"// Compute training error.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:2,Testability,Log,Log,2,"//Log the loss value",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:21,Performance,throughput,throughput,21,"// Compute numerical throughput.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:41,Security,validat,validation,41,"// Split training data into training and validation set",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:3,Performance,Perform,Perform,3,"// Perform minimization steps for a full epoch.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:16,Availability,error,error,16,"// Compute test error.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:11,Testability,test,test,11,"// Compute test error.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:2,Testability,Log,Log,2,"//Log the loss value",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:20,Availability,error,error,20,"// Compute training error.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:2,Testability,Log,Log,2,"//Log the loss value",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:21,Performance,throughput,throughput,21,"// Compute numerical throughput.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:12,Integrability,message,message,12,"// get help message text; //; // typical length of text line:; // ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDT (DT = Decision Trees) *; * *; * *; * Description: *; * Analysis of Boosted Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Or Cohen <orcohenor@gmail.com> - Weizmann Inst., Israel *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodDT; \ingroup TMVA. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. ### Decision trees:. successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut cri",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:1093,Energy Efficiency,Energy,Energy,1093,"***********************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDT (DT = Decision Trees) *; * *; * *; * Description: *; * Analysis of Boosted Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Or Cohen <orcohenor@gmail.com> - Weizmann Inst., Israel *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodDT; \ingroup TMVA. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. ### Decision trees:. successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample a",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodDT (DT = Decision Trees) *; * *; * *; * Description: *; * Analysis of Boosted Decision Trees *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Or Cohen <orcohenor@gmail.com> - Weizmann Inst., Israel *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodDT; \ingroup TMVA. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. ### Decision trees:. successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut cri",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:3731,Integrability,depend,depending,3731,"e. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. ### Boosting:. the idea behind the boosting is, that signal events from the training; sample, that *end up in a background node (and vice versa) are given a; larger weight than events that are in the correct leave node. This; results in a re-weighed training event sample, with which then a new; decision tree can be developed. The boosting can be applied several; times (typically 100-500 times) and one ends up with a set of decision; trees (a forest). ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Analysis:. applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:1591,Modifiability,variab,variable,1591,"opyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodDT; \ingroup TMVA. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. ### Decision trees:. successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, ",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:2127,Modifiability,variab,variable,2127,"riment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. ### Decision trees:. successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. ### Boosting:. the idea behind the boosting is, that signal events from the training; sample, that *end up in a background node (and vice versa) are given a; larger weight than events that are in the correct leave node. This; results in a re-weighed training event sample, with which then a new; decision tree can be developed. The boosting can be appli",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:3529,Testability,test,test,3529,"e. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. ### Boosting:. the idea behind the boosting is, that signal events from the training; sample, that *end up in a background node (and vice versa) are given a; larger weight than events that are in the correct leave node. This; results in a re-weighed training event sample, with which then a new; decision tree can be developed. The boosting can be applied several; times (typically 100-500 times) and one ends up with a set of decision; trees (a forest). ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Analysis:. applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:3403,Usability,simpl,simple,3403,"e. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. ### Boosting:. the idea behind the boosting is, that signal events from the training; sample, that *end up in a background node (and vice versa) are given a; larger weight than events that are in the correct leave node. This; results in a re-weighed training event sample, with which then a new; decision tree can be developed. The boosting can be applied several; times (typically 100-500 times) and one ends up with a set of decision; trees (a forest). ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Analysis:. applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:989,Availability,error,error,989,"////////////////////////////////////////////////////////////////////////////////; /// Define the options (their key words) that can be set in the option string.; ///; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - SeparationType the separation criterion applied in the node splitting.; /// known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - nEventsMin: the minimum number of events in a node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method:; /// known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided"");",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:238,Modifiability,variab,variables,238,"////////////////////////////////////////////////////////////////////////////////; /// Define the options (their key words) that can be set in the option string.; ///; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - SeparationType the separation criterion applied in the node splitting.; /// known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - nEventsMin: the minimum number of events in a node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method:; /// known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided"");",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:277,Modifiability,variab,variables,277,"////////////////////////////////////////////////////////////////////////////////; /// Define the options (their key words) that can be set in the option string.; ///; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - SeparationType the separation criterion applied in the node splitting.; /// known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - nEventsMin: the minimum number of events in a node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method:; /// known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided"");",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:1260,Safety,avoid,avoided,1260,"////////////////////////////////////////////////////////////////////////////////; /// Define the options (their key words) that can be set in the option string.; ///; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - SeparationType the separation criterion applied in the node splitting.; /// known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - nEventsMin: the minimum number of events in a node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method:; /// known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided"");",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:767,Usability,simpl,simply,767,"////////////////////////////////////////////////////////////////////////////////; /// Define the options (their key words) that can be set in the option string.; ///; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - SeparationType the separation criterion applied in the node splitting.; /// known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - nEventsMin: the minimum number of events in a node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method:; /// known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided"");",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:120,Availability,avail,available,120,"////////////////////////////////////////////////////////////////////////////////; /// the option string is decoded, for available options see ""DeclareOptions""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:66,Security,validat,validation,66,"// -1 means automatic determination of the prune strength using a validation sample",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:48,Energy Efficiency,monitor,monitoring,48,"// remember the number of nodes beforehand (for monitoring purposes)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:1976,Safety,abort,abort,1976,"es=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same strength as for previous tree:""; << fPruneStrength << Endl;; }; }; if (fgDebugLevel==1) Log() << kINFO << ""Pruneed with (""<<alpha; << "") give quality: "" << q.back(); << "" and #nodes: "" << nnodes; << Endl;; delete dcopy;; }; if (!forceStop) {; multimap<Double_t,Double_t>::reverse_iterator it=quality.rend();; it++;; fPruneStrength = it->second;; // adjust the step size for the next tree.. think that 20 steps are sort of; // fine enough.. could become a tunable option later..; fDeltaPruneStrength *= Double_t(q.size())/20.;; }. fTree->SetPruneStrength(fPruneStrength);; fTree->PruneTree();; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:495,Testability,Test,TestTreeQuality,495,"/*. Double_t alpha = 0;; Double_t delta = fDeltaPruneStrength;. DecisionTree* dcopy;; std::vector<Double_t> q;; multimap<Double_t,Double_t> quality;; Int_t nnodes=fTree->GetNNodes();. // find the maximum prune strength that still leaves some nodes; Bool_t forceStop = kFALSE;; Int_t troubleCount=0, previousNnodes=nnodes;. nnodes=fTree->GetNNodes();; while (nnodes > 3 && !forceStop) {; dcopy = new DecisionTree(*fTree);; dcopy->SetPruneStrength(alpha+=delta);; dcopy->PruneTree();; q.push_back(TestTreeQuality(dcopy));; quality.insert(std::pair<const Double_t,Double_t>(q.back(),alpha));; nnodes=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same st",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:933,Testability,Log,Log,933," = 0;; Double_t delta = fDeltaPruneStrength;. DecisionTree* dcopy;; std::vector<Double_t> q;; multimap<Double_t,Double_t> quality;; Int_t nnodes=fTree->GetNNodes();. // find the maximum prune strength that still leaves some nodes; Bool_t forceStop = kFALSE;; Int_t troubleCount=0, previousNnodes=nnodes;. nnodes=fTree->GetNNodes();; while (nnodes > 3 && !forceStop) {; dcopy = new DecisionTree(*fTree);; dcopy->SetPruneStrength(alpha+=delta);; dcopy->PruneTree();; q.push_back(TestTreeQuality(dcopy));; quality.insert(std::pair<const Double_t,Double_t>(q.back(),alpha));; nnodes=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same strength as for pre",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:1394,Testability,Log,Log,1394,"(*fTree);; dcopy->SetPruneStrength(alpha+=delta);; dcopy->PruneTree();; q.push_back(TestTreeQuality(dcopy));; quality.insert(std::pair<const Double_t,Double_t>(q.back(),alpha));; nnodes=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same strength as for previous tree:""; << fPruneStrength << Endl;; }; }; if (fgDebugLevel==1) Log() << kINFO << ""Pruneed with (""<<alpha; << "") give quality: "" << q.back(); << "" and #nodes: "" << nnodes; << Endl;; delete dcopy;; }; if (!forceStop) {; multimap<Double_t,Double_t>::reverse_iterator it=quality.rend();; it++;; fPruneStrength = it->second;; // adjust the step size for the next tree.. think that 20 steps ar",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:1818,Testability,Log,Log,1818,"es=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same strength as for previous tree:""; << fPruneStrength << Endl;; }; }; if (fgDebugLevel==1) Log() << kINFO << ""Pruneed with (""<<alpha; << "") give quality: "" << q.back(); << "" and #nodes: "" << nnodes; << Endl;; delete dcopy;; }; if (!forceStop) {; multimap<Double_t,Double_t>::reverse_iterator it=quality.rend();; it++;; fPruneStrength = it->second;; // adjust the step size for the next tree.. think that 20 steps are sort of; // fine enough.. could become a tunable option later..; fDeltaPruneStrength *= Double_t(q.size())/20.;; }. fTree->SetPruneStrength(fPruneStrength);; fTree->PruneTree();; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:1933,Testability,test,tested,1933,"es=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same strength as for previous tree:""; << fPruneStrength << Endl;; }; }; if (fgDebugLevel==1) Log() << kINFO << ""Pruneed with (""<<alpha; << "") give quality: "" << q.back(); << "" and #nodes: "" << nnodes; << Endl;; delete dcopy;; }; if (!forceStop) {; multimap<Double_t,Double_t>::reverse_iterator it=quality.rend();; it++;; fPruneStrength = it->second;; // adjust the step size for the next tree.. think that 20 steps are sort of; // fine enough.. could become a tunable option later..; fDeltaPruneStrength *= Double_t(q.size())/20.;; }. fTree->SetPruneStrength(fPruneStrength);; fTree->PruneTree();; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:2087,Testability,Log,Log,2087,"es=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same strength as for previous tree:""; << fPruneStrength << Endl;; }; }; if (fgDebugLevel==1) Log() << kINFO << ""Pruneed with (""<<alpha; << "") give quality: "" << q.back(); << "" and #nodes: "" << nnodes; << Endl;; delete dcopy;; }; if (!forceStop) {; multimap<Double_t,Double_t>::reverse_iterator it=quality.rend();; it++;; fPruneStrength = it->second;; // adjust the step size for the next tree.. think that 20 steps are sort of; // fine enough.. could become a tunable option later..; fDeltaPruneStrength *= Double_t(q.size())/20.;; }. fTree->SetPruneStrength(fPruneStrength);; fTree->PruneTree();; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:3,Testability,test,test,3,"// test the tree quality.. in terms of Misclassification",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:2,Testability,Log,Log,2,"//Log() << kFATAL << ""Please implement writing of weights as XML"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:194,Deployability,integrat,integrated,194,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFDA *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * *; * Copyright (c) 2005-2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFDA; \ingroup TMVA. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:1114,Deployability,configurat,configuration,1114,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFDA *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * *; * Copyright (c) 2005-2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFDA; \ingroup TMVA. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:194,Integrability,integrat,integrated,194,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFDA *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * *; * Copyright (c) 2005-2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFDA; \ingroup TMVA. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:1114,Modifiability,config,configuration,1114,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFDA *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * *; * Copyright (c) 2005-2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFDA; \ingroup TMVA. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:1052,Usability,simpl,simple,1052,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodFDA *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * *; * Copyright (c) 2005-2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFDA; \ingroup TMVA. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:294,Modifiability,variab,variables,294,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// format of function string:; ///; /// ""x0*(0)+((1)/x1)**(2)...""; ///; /// where ""[i]"" are the parameters, and ""xi"" the input variables; ///; /// format of parameter string:; ///; /// ""(-1.2,3.4);(-2.3,4.55);...""; ///; /// where the numbers in ""(a,b)"" correspond to the a=min, b=max parameter ranges;; /// each parameter defined in the function string must have a corresponding range",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:3,Safety,sanity check,sanity check,3,"// sanity check, there should be no ""(i)"", with 'i' a number anymore",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:13,Modifiability,variab,variables,13,"// write the variables ""xi"" as additional parameters ""[npar+i]""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:3,Safety,sanity check,sanity check,3,"// sanity check, there should be no ""xi"", with 'i' a number anymore",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:9,Safety,sanity check,sanity checks,9,"// other sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:120,Availability,avail,available,120,"////////////////////////////////////////////////////////////////////////////////; /// the option string is decoded, for available options see ""DeclareOptions""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:97,Usability,clear,clear,97,"////////////////////////////////////////////////////////////////////////////////; /// delete and clear all class members",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:3,Performance,cache,cache,3,"// cache training events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:138,Modifiability,variab,variable,138,"////////////////////////////////////////////////////////////////////////////////; /// display fit parameters; /// check maximum length of variable name",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:17,Modifiability,variab,variables,17,"// replace input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFDA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:214,Deployability,integrat,integrated,214,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : MethodFisher *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Original author of this Fisher-Discriminant implementation: *; * Andre Gaidot, CEA-France; *; * (Translation from FORTRAN) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFisher; \ingroup TMVA. Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis). In the method of Fisher discriminants event selection is performed; in a transformed variable space with zero linear correlations, by; distinguishing the mean values of the signal and background; distributions. The linear discriminant analysis determines an axis in the (correlated); hyperspace of the input variables; such that, when projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of ",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3639,Energy Efficiency,power,power,3639,"ollowing characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar. \f[; \lambda = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} F_i (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. The corresponding numbers are printed on standard output.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3752,Energy Efficiency,power,power,3752,"ollowing characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar. \f[; \lambda = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} F_i (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. The corresponding numbers are printed on standard output.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3833,Energy Efficiency,power,power,3833,"ollowing characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar. \f[; \lambda = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} F_i (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. The corresponding numbers are printed on standard output.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3873,Energy Efficiency,power,power,3873,"ollowing characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar. \f[; \lambda = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} F_i (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. The corresponding numbers are printed on standard output.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:214,Integrability,integrat,integrated,214,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : MethodFisher *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Original author of this Fisher-Discriminant implementation: *; * Andre Gaidot, CEA-France; *; * (Translation from FORTRAN) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFisher; \ingroup TMVA. Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis). In the method of Fisher discriminants event selection is performed; in a transformed variable space with zero linear correlations, by; distinguishing the mean values of the signal and background; distributions. The linear discriminant analysis determines an axis in the (correlated); hyperspace of the input variables; such that, when projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of ",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:1406,Modifiability,variab,variable,1406,"r-Discriminant implementation: *; * Andre Gaidot, CEA-France; *; * (Translation from FORTRAN) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFisher; \ingroup TMVA. Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis). In the method of Fisher discriminants event selection is performed; in a transformed variable space with zero linear correlations, by; distinguishing the mean values of the signal and background; distributions. The linear discriminant analysis determines an axis in the (correlated); hyperspace of the input variables; such that, when projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space. The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:1629,Modifiability,variab,variables,1629,"Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFisher; \ingroup TMVA. Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis). In the method of Fisher discriminants event selection is performed; in a transformed variable space with zero linear correlations, by; distinguishing the mean values of the signal and background; distributions. The linear discriminant analysis determines an axis in the (correlated); hyperspace of the input variables; such that, when projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space. The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:2018,Modifiability,variab,variable,2018,"; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFisher; \ingroup TMVA. Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis). In the method of Fisher discriminants event selection is performed; in a transformed variable space with zero linear correlations, by; distinguishing the mean values of the signal and background; distributions. The linear discriminant analysis determines an axis in the (correlated); hyperspace of the input variables; such that, when projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space. The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then re",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:2200,Modifiability,variab,variable,2200,"******************************/; /*! \class TMVA::MethodFisher; \ingroup TMVA. Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis). In the method of Fisher discriminants event selection is performed; in a transformed variable space with zero linear correlations, by; distinguishing the mean values of the signal and background; distributions. The linear discriminant analysis determines an axis in the (correlated); hyperspace of the input variables; such that, when projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space. The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficient",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3437,Modifiability,variab,variables,3437,"ollowing characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar. \f[; \lambda = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} F_i (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. The corresponding numbers are printed on standard output.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3650,Modifiability,variab,variable,3650,"ollowing characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar. \f[; \lambda = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} F_i (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. The corresponding numbers are printed on standard output.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3844,Modifiability,variab,variable,3844,"ollowing characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar. \f[; \lambda = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} F_i (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. The corresponding numbers are printed on standard output.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3896,Modifiability,variab,variables,3896,"ollowing characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar. \f[; \lambda = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} F_i (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. The corresponding numbers are printed on standard output.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:1378,Performance,perform,performed,1378,"r-Discriminant implementation: *; * Andre Gaidot, CEA-France; *; * (Translation from FORTRAN) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodFisher; \ingroup TMVA. Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis). In the method of Fisher discriminants event selection is performed; in a transformed variable space with zero linear correlations, by; distinguishing the mean values of the signal and background; distributions. The linear discriminant analysis determines an axis in the (correlated); hyperspace of the input variables; such that, when projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space. The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3460,Testability,test,test,3460,"ollowing characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar. \f[; \lambda = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} F_i (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. The corresponding numbers are printed on standard output.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:2874,Usability,simpl,simplifies,2874,"he linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space. The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variab",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate Fisher coefficients",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:26,Modifiability,variab,variables,26,"// get mean value of each variables for signal, backgd and signal+backgd",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:26,Energy Efficiency,power,power,26,"// get the discriminating power of each variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:40,Modifiability,variab,variables,40,"// get the discriminating power of each variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:25,Modifiability,variab,variables,25,"// average value of each variables for S, B, S+B",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:18,Energy Efficiency,power,power,18,"// discriminating power",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:109,Modifiability,variab,variables,109,"////////////////////////////////////////////////////////////////////////////////; /// compute mean values of variables in each sample, and the overall means",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:38,Modifiability,variab,variables,38,"// initialize internal sum-of-weights variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3,Testability,assert,assert,3,"// assert required",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:49,Modifiability,variab,variables,49,"// product matrices (x-<x>)(y-<y>) where x;y are variables; // init",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:365,Usability,clear,clear,365,"//(*fWith)(x, y) = (sumSig[k] + sumBgd[k])/(fSumOfWeightsS + fSumOfWeightsB);; // HHV: I am still convinced that THIS is how it should be (below) However, while; // the old version corresponded so nicely with LD, the FIXED version does not, unless; // we agree to change LD. For LD, it is not ""defined"" to my knowledge how the weights; // are weighted, while it is clear how the ""Within"" matrix for Fisher should be calculated; // (i.e. as seen below). In order to agree with the Fisher classifier, one would have to; // weigh signal and background such that they correspond to the same number of effective; // (weighted) events.; // THAT is NOT done currently, but just ""event weights"" are used.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3,Testability,assert,assert,3,"// assert required",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:110,Modifiability,variab,variables,110,"////////////////////////////////////////////////////////////////////////////////; /// Fisher = Sum { [coeff]*[variables] }; ///; /// let Xs be the array of the mean values of variables for signal evts; /// let Xb be the array of the mean values of variables for backgd evts; /// let InvWith be the inverse matrix of the 'within class' correlation matrix; ///; /// then the array of Fisher coefficients is; /// [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:175,Modifiability,variab,variables,175,"////////////////////////////////////////////////////////////////////////////////; /// Fisher = Sum { [coeff]*[variables] }; ///; /// let Xs be the array of the mean values of variables for signal evts; /// let Xb be the array of the mean values of variables for backgd evts; /// let InvWith be the inverse matrix of the 'within class' correlation matrix; ///; /// then the array of Fisher coefficients is; /// [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:248,Modifiability,variab,variables,248,"////////////////////////////////////////////////////////////////////////////////; /// Fisher = Sum { [coeff]*[variables] }; ///; /// let Xs be the array of the mean values of variables for signal evts; /// let Xb be the array of the mean values of variables for backgd evts; /// let InvWith be the inverse matrix of the 'within class' correlation matrix; ///; /// then the array of Fisher coefficients is; /// [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3,Testability,assert,assert,3,"// assert required",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:116,Energy Efficiency,power,power,116,"////////////////////////////////////////////////////////////////////////////////; /// computation of discrimination power indicator for each variable; /// small values of ""fWith"" indicates little compactness of sig & of backgd; /// big values of ""fBetw"" indicates large separation between sig & backgd; ///; /// we want signal & backgd classes as compact and separated as possible; /// the discriminating power is then defined as the ration ""fBetw/fWith""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:405,Energy Efficiency,power,power,405,"////////////////////////////////////////////////////////////////////////////////; /// computation of discrimination power indicator for each variable; /// small values of ""fWith"" indicates little compactness of sig & of backgd; /// big values of ""fBetw"" indicates large separation between sig & backgd; ///; /// we want signal & backgd classes as compact and separated as possible; /// the discriminating power is then defined as the ration ""fBetw/fWith""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:141,Modifiability,variab,variable,141,"////////////////////////////////////////////////////////////////////////////////; /// computation of discrimination power indicator for each variable; /// small values of ""fWith"" indicates little compactness of sig & of backgd; /// big values of ""fBetw"" indicates large separation between sig & backgd; ///; /// we want signal & backgd classes as compact and separated as possible; /// the discriminating power is then defined as the ration ""fBetw/fWith""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:112,Modifiability,variab,variables,112,"////////////////////////////////////////////////////////////////////////////////; /// computes ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:133,Energy Efficiency,power,power,133,"////////////////////////////////////////////////////////////////////////////////; /// display Fisher coefficients and discriminating power for each variable; /// check maximum length of variable name",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:148,Modifiability,variab,variable,148,"////////////////////////////////////////////////////////////////////////////////; /// display Fisher coefficients and discriminating power for each variable; /// check maximum length of variable name",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:186,Modifiability,variab,variable,186,"////////////////////////////////////////////////////////////////////////////////; /// display Fisher coefficients and discriminating power for each variable; /// check maximum length of variable name",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodFisher.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodHMatrix *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodHMatrix *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:225,Modifiability,variab,variables,225,"/*! \class TMVA::MethodHMatrix; \ingroup TMVA. H-Matrix method, which is implemented as a simple comparison of; chi-squared estimators for signal and background, taking into; account the linear correlations between the input variables. This MVA approach is used by the \f$D\emptyset \f$ collaboration (FNAL) for the; purpose of electron identification (see, eg.,; [hep-ex/9507007](http://arxiv.org/abs/hep-ex/9507007)).; As it is implemented in TMVA, it is usually equivalent or worse than; the Fisher-Mahalanobis discriminant, and it has only been added for; the purpose of completeness.; Two chi^2 estimators are computed for an event, each one; for signal and background, using the estimates for the means and; covariance matrices obtained from the training sample:<br>. \f[; \chi^2_\eta = (x_\eta(i) - \bar{x}_\eta)^T C_\eta^{-1} (x_\eta(i) - \bar{x}_\eta), \eta = S,B; \f]. TMVA then uses as normalised analyser for event \f$ (i) \f$ the ratio:; \f[; \frac{(chi_S(i)^2 - chi_B^2(i))}{(chi_S^2(i) + chi_B^2(i))}; \f]; */; ////////////////////////////////////////////////////////////////////////////////; /// standard constructor for the H-Matrix method",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:90,Usability,simpl,simple,90,"/*! \class TMVA::MethodHMatrix; \ingroup TMVA. H-Matrix method, which is implemented as a simple comparison of; chi-squared estimators for signal and background, taking into; account the linear correlations between the input variables. This MVA approach is used by the \f$D\emptyset \f$ collaboration (FNAL) for the; purpose of electron identification (see, eg.,; [hep-ex/9507007](http://arxiv.org/abs/hep-ex/9507007)).; As it is implemented in TMVA, it is usually equivalent or worse than; the Fisher-Mahalanobis discriminant, and it has only been added for; the purpose of completeness.; Two chi^2 estimators are computed for an event, each one; for signal and background, using the estimates for the means and; covariance matrices obtained from the training sample:<br>. \f[; \chi^2_\eta = (x_\eta(i) - \bar{x}_\eta)^T C_\eta^{-1} (x_\eta(i) - \bar{x}_\eta), \eta = S,B; \f]. TMVA then uses as normalised analyser for event \f$ (i) \f$ the ratio:; \f[; \frac{(chi_S(i)^2 - chi_B^2(i))}{(chi_S^2(i) + chi_B^2(i))}; \f]; */; ////////////////////////////////////////////////////////////////////////////////; /// standard constructor for the H-Matrix method",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:38,Modifiability,variab,variables,38,"// initialize internal sum-of-weights variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:3,Performance,perform,perform,3,"// perform event loop",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:13,Modifiability,variab,variables,13,"// loop over variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:91,Modifiability,variab,variable,91,"////////////////////////////////////////////////////////////////////////////////; /// read variable names and min/max; /// NOTE: the latter values are mandatory for the normalisation; /// in the reader application !!!",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodHMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodKNN *; * *; * *; * Description: *; * Implementation *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodKNN; \ingroup TMVA. Analysis of k-nearest neighbor. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodKNN *; * *; * *; * Description: *; * Implementation *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodKNN; \ingroup TMVA. Analysis of k-nearest neighbor. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:306,Modifiability,variab,variable,306,"////////////////////////////////////////////////////////////////////////////////; /// MethodKNN options; ///; /// - fnkNN = 20; // number of k-nearest neighbors; /// - fBalanceDepth = 6; // number of binary tree levels used for tree balancing; /// - fScaleFrac = 0.8; // fraction of events used to compute variable width; /// - fSigmaFact = 1.0; // scale factor for Gaussian sigma; /// - fKernel = use polynomial (1-x^3)^3 or Gaussian kernel; /// - fTrim = false; // use equal number of signal and background events; /// - fUseKernel = false; // use polynomial kernel weight function; /// - fUseWeight = true; // count events using weights; /// - fUseLDA = false",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:45,Modifiability,variab,variables,45,"// fScaleFrac <= 0.0 then do not scale input variables; // fScaleFrac >= 1.0 then use all event coordinates to scale input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:123,Modifiability,variab,variables,123,"// fScaleFrac <= 0.0 then do not scale input variables; // fScaleFrac >= 1.0 then use all event coordinates to scale input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:43,Modifiability,variab,variables,43,"//; // Create event and add classification variables, weight, type and regression variables; //",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:82,Modifiability,variab,variables,82,"//; // Create event and add classification variables, weight, type and regression variables; //",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:20,Modifiability,variab,variables,20,"//; // Define local variables; //",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:68,Safety,avoid,avoid,68,"// search for fnkNN+2 nearest neighbors, pad with two; // events to avoid Monte-Carlo events with zero distance; // most of CPU time is spent in this recursive function",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:22,Modifiability,variab,variable,22,"//; // Compute RMS of variable differences for Gaussian sigma; //",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:101,Usability,learn,learning,101,"// Warn about Monte-Carlo event with zero distance; // this happens when this query event is also in learning sample",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:20,Modifiability,variab,variables,20,"//; // Define local variables; //",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:68,Safety,avoid,avoid,68,"// search for fnkNN+2 nearest neighbors, pad with two; // events to avoid Monte-Carlo events with zero distance; // most of CPU time is spent in this recursive function",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:97,Availability,avail,available,97,"////////////////////////////////////////////////////////////////////////////////; /// no ranking available",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodKNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx:212,Deployability,integrat,integrated,212,"// @(#)root/tmva $Id$; // Author: Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodLD *; * *; * *; * Description: *; * Linear Discriminant - Simple Linear Regression and Classification *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * Jan Therhaag <therhaag@physik.uni-bonn.de> - Uni Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * PAN, Poland *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodLD; \ingroup TMVA; Linear Discriminant. Can compute multidimensional output for regression; (although it computes every dimension separately); */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx:212,Integrability,integrat,integrated,212,"// @(#)root/tmva $Id$; // Author: Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodLD *; * *; * *; * Description: *; * Linear Discriminant - Simple Linear Regression and Classification *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * Jan Therhaag <therhaag@physik.uni-bonn.de> - Uni Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * PAN, Poland *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodLD; \ingroup TMVA; Linear Discriminant. Can compute multidimensional output for regression; (although it computes every dimension separately); */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx:358,Usability,Simpl,Simple,358,"// @(#)root/tmva $Id$; // Author: Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodLD *; * *; * *; * Description: *; * Linear Discriminant - Simple Linear Regression and Classification *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * Jan Therhaag <therhaag@physik.uni-bonn.de> - Uni Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * PAN, Poland *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodLD; \ingroup TMVA; Linear Discriminant. Can compute multidimensional output for regression; (although it computes every dimension separately); */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx:3,Performance,perform,perform,3,"// perform inverse transformation",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx:112,Modifiability,variab,variables,112,"////////////////////////////////////////////////////////////////////////////////; /// computes ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx:146,Modifiability,variab,variable,146,"////////////////////////////////////////////////////////////////////////////////; /// Display the classification/regression coefficients for each variable",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLD.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:3838,Availability,recover,recovered,3838,"f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We compute the; square-root matrix (SQM) by means of diagonalising (\f$ D \f$) the; covariance matrix:. \f[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \f]. and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples. The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:232,Deployability,integrat,integrated,232,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodLikelihood *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U. of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodLikelihood; \ingroup TMVA. Likelihood analysis (""non-parametric approach""). Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, \f$ R_L \f$, for event; \f$ i \f$, by:. \f[; R_L(i) = \frac{L_S(i)}{L_B(i) + L_B(i)}; \f]. Here the signal and background likelihoods, \f$ L_S \f$,; \f$ L_B \f$, are products of the corresponding probability; densities, \f$ p_S \f$, \f$ p_B \f$, of the; \f$ N_{var} \f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \pr",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:232,Integrability,integrat,integrated,232,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodLikelihood *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U. of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodLikelihood; \ingroup TMVA. Likelihood analysis (""non-parametric approach""). Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, \f$ R_L \f$, for event; \f$ i \f$, by:. \f[; R_L(i) = \frac{L_S(i)}{L_B(i) + L_B(i)}; \f]. Here the signal and background likelihoods, \f$ L_S \f$,; \f$ L_B \f$, are products of the corresponding probability; densities, \f$ p_S \f$, \f$ p_B \f$, of the; \f$ N_{var} \f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \pr",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:1422,Modifiability,variab,variables,1422,"see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U. of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodLikelihood; \ingroup TMVA. Likelihood analysis (""non-parametric approach""). Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, \f$ R_L \f$, for event; \f$ i \f$, by:. \f[; R_L(i) = \frac{L_S(i)}{L_B(i) + L_B(i)}; \f]. Here the signal and background likelihoods, \f$ L_S \f$,; \f$ L_B \f$, are products of the corresponding probability; densities, \f$ p_S \f$, \f$ p_B \f$, of the; \f$ N_{var} \f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurre",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:1956,Modifiability,variab,variables,1956,"ermany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodLikelihood; \ingroup TMVA. Likelihood analysis (""non-parametric approach""). Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, \f$ R_L \f$, for event; \f$ i \f$, by:. \f[; R_L(i) = \frac{L_S(i)}{L_B(i) + L_B(i)}; \f]. Here the signal and background likelihoods, \f$ L_S \f$,; \f$ L_B \f$, are products of the corresponding probability; densities, \f$ p_S \f$, \f$ p_B \f$, of the; \f$ N_{var} \f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:2215,Modifiability,variab,variables,2215,"*********************/; /*! \class TMVA::MethodLikelihood; \ingroup TMVA. Likelihood analysis (""non-parametric approach""). Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, \f$ R_L \f$, for event; \f$ i \f$, by:. \f[; R_L(i) = \frac{L_S(i)}{L_B(i) + L_B(i)}; \f]. Here the signal and background likelihoods, \f$ L_S \f$,; \f$ L_B \f$, are products of the corresponding probability; densities, \f$ p_S \f$, \f$ p_B \f$, of the; \f$ N_{var} \f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We comp",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:2568,Modifiability,variab,variables,2568," is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, \f$ R_L \f$, for event; \f$ i \f$, by:. \f[; R_L(i) = \frac{L_S(i)}{L_B(i) + L_B(i)}; \f]. Here the signal and background likelihoods, \f$ L_S \f$,; \f$ L_B \f$, are products of the corresponding probability; densities, \f$ p_S \f$, \f$ p_B \f$, of the; \f$ N_{var} \f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We compute the; square-root matrix (SQM) by means of diagonalising (\f$ D \f$) the; covariance matrix:. \f[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \f]. and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both sig",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:3376,Modifiability,variab,variables,3376,"f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We compute the; square-root matrix (SQM) by means of diagonalising (\f$ D \f$) the; covariance matrix:. \f[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \f]. and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples. The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:3435,Modifiability,variab,variable,3435,"f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We compute the; square-root matrix (SQM) by means of diagonalising (\f$ D \f$) the; covariance matrix:. \f[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \f]. and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples. The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:3719,Modifiability,variab,variables,3719,"f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We compute the; square-root matrix (SQM) by means of diagonalising (\f$ D \f$) the; covariance matrix:. \f[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \f]. and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples. The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:3514,Performance,perform,performed,3514,"f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We compute the; square-root matrix (SQM) by means of diagonalising (\f$ D \f$) the; covariance matrix:. \f[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \f]. and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples. The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:2369,Safety,avoid,avoid,2369,"ansforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, \f$ R_L \f$, for event; \f$ i \f$, by:. \f[; R_L(i) = \frac{L_S(i)}{L_B(i) + L_B(i)}; \f]. Here the signal and background likelihoods, \f$ L_S \f$,; \f$ L_B \f$, are products of the corresponding probability; densities, \f$ p_S \f$, \f$ p_B \f$, of the; \f$ N_{var} \f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We compute the; square-root matrix (SQM) by means of diagonalising (\f$ D \f$) the; covariance matrix:. \f[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \f]. and the linear transformation of the linearly correlated into the; uncorrelated variables space i",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:3838,Safety,recover,recovered,3838,"f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We compute the; square-root matrix (SQM) by means of diagonalising (\f$ D \f$) the; covariance matrix:. \f[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \f]. and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples. The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:14,Testability,test,test,14,"// no ranking test",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:255,Modifiability,variab,variables,255,"// the reference histograms require the correct boundaries. Since in Likelihood classification; // the transformations are applied using both classes, also the corresponding boundaries; // need to take this into account; // special treatment for discrete variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:33,Modifiability,variab,variables,33,"// special treatment for integer variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:8,Modifiability,variab,variable,8,"// fill variable vector",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:173,Testability,test,testTree,173,"////////////////////////////////////////////////////////////////////////////////; /// returns the likelihood estimator for signal; /// fill a new Likelihood branch into the testTree",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:12,Modifiability,variab,variables,12,"// retrieve variables, and transform, if required",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:56,Modifiability,variab,variable,56,"// need to distinguish signal and background in case of variable transformation; // signal first",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:12,Modifiability,variab,variable,12,"// drop one variable (this is ONLY used for internal variable ranking !)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:53,Modifiability,variab,variable,53,"// drop one variable (this is ONLY used for internal variable ranking !)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:37,Performance,cache,cached,37,"// find corresponding histogram from cached indices",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:82,Modifiability,variab,variables,82,"// interpolate linearly between adjacent bins; // this is not useful for discrete variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:30,Safety,sanity check,sanity check,30,"// inverse Fermi function; // sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:112,Modifiability,variab,variables,112,"////////////////////////////////////////////////////////////////////////////////; /// computes ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:8,Modifiability,variab,variable,8,"// this variable should not be used",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:8,Safety,avoid,avoids,8,"// this avoids the binding of the hists in TMVA::PDF to the current ROOT file",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:8,Safety,avoid,avoids,8,"// this avoids the binding of the hists in TMVA::PDF to the current ROOT file",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:8,Safety,avoid,avoids,8,"// this avoids the binding of the hists in TMVA::PDF to the current ROOT file",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:124,Energy Efficiency,monitor,monitoring,124,"////////////////////////////////////////////////////////////////////////////////; /// write histograms and PDFs to file for monitoring purposes",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:3,Safety,sanity check,sanity check,3,"// sanity check (for previous code lines)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodLikelihood.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:312,Deployability,integrat,integrated,312,"// @(#)root/tmva $Id$; // Author: Krzysztof Danielowski, Andreas Hoecker, Matt Jachowski, Kamil Kraszewski, Maciej Kruk, Peter Speckmayer, Joerg Stelzer, Eckhard v. Toerne, Jan Therhaag, Jiahang Zhong; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodMLP *; * *; * *; * Description: *; * ANN Multilayer Perceptron class for the discrimination of signal *; * from background. BFGS implementation based on TMultiLayerPerceptron *; * class from ROOT (http://root.cern.ch). *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Jiahang Zhong <Jiahang.Zhong@cern.ch> - Academia Sinica, Taipei *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodMLP; \ingroup TMVA. Multilayer Perceptron class built off of MethodANNBase. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:312,Integrability,integrat,integrated,312,"// @(#)root/tmva $Id$; // Author: Krzysztof Danielowski, Andreas Hoecker, Matt Jachowski, Kamil Kraszewski, Maciej Kruk, Peter Speckmayer, Joerg Stelzer, Eckhard v. Toerne, Jan Therhaag, Jiahang Zhong; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodMLP *; * *; * *; * Description: *; * ANN Multilayer Perceptron class for the discrimination of signal *; * from background. BFGS implementation based on TMultiLayerPerceptron *; * class from ROOT (http://root.cern.ch). *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Jiahang Zhong <Jiahang.Zhong@cern.ch> - Academia Sinica, Taipei *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodMLP; \ingroup TMVA. Multilayer Perceptron class built off of MethodANNBase. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:243,Availability,avail,available,243,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:617,Availability,avail,available,617,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:521,Performance,perform,performed,521,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:482,Testability,Test,TestRate,482,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:499,Testability,Test,Test,499,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:364,Usability,Learn,LearningRate,364,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:390,Usability,learn,learning,390,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:456,Usability,learn,learning,456,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:598,Usability,learn,learning,598,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:97,Usability,learn,learning,97,"////////////////////////////////////////////////////////////////////////////////; /// initialize learning rates of synapses, used only by back propagation",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:60,Availability,avail,available,60,"// if epochs are counted create monitoring histograms (only available for classification)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:32,Energy Efficiency,monitor,monitoring,32,"// if epochs are counted create monitoring histograms (only available for classification)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:8,Energy Efficiency,monitor,monitoring,8,"// fill monitoring histograms",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:22,Energy Efficiency,monitor,monitoring,22,"// provide epoch-wise monitoring",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:2,Testability,Log,Log,2,"//Log() << kERROR <<""ANN Network is not initialized, doing it now!""<< Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:17,Testability,test,test,17,"// estimator for test sample //zjh",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:38,Energy Efficiency,monitor,monitoring,38,"// create histograms for overtraining monitoring",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:11,Energy Efficiency,monitor,monitor,11,"//zjh-; // monitor convergence of training and control sample",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:127,Testability,test,testE,127,"//trainE = CalculateEstimator( Types::kTraining, i ) - fPrior/Float_t(GetNEvents()); // estimator for training sample //zjh; //testE = CalculateEstimator( Types::kTesting, i ) - fPrior/Float_t(GetNEvents()); // estimator for test sample //zjh",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:225,Testability,test,test,225,"//trainE = CalculateEstimator( Types::kTraining, i ) - fPrior/Float_t(GetNEvents()); // estimator for training sample //zjh; //testE = CalculateEstimator( Types::kTesting, i ) - fPrior/Float_t(GetNEvents()); // estimator for test sample //zjh",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:17,Testability,test,test,17,"// estimator for test sample //zjh",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:78,Integrability,message,message,78,"// leaving these lines uncommented is a heavy price to pay for only a warning message; // (which shouldn't appear anyway); // --> about 15% of time is spent in the final GetError().; //",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:38,Energy Efficiency,monitor,monitoring,38,"// create histograms for overtraining monitoring",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:3,Energy Efficiency,monitor,monitor,3,"// monitor convergence of training and control sample",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:17,Testability,test,test,17,"// estimator for test sample",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:8,Usability,progress bar,progress bar,8,"// draw progress bar (add convergence value)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:138,Usability,learn,learning,138,"////////////////////////////////////////////////////////////////////////////////; /// decay synapse weights; /// in last 10 epochs, lower learning rate even more to find a good minimum",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:25,Usability,learn,learning,25,"// In order to lower the learning rate even more, we need to apply sqrt instead of square.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:137,Usability,learn,learning,137,"// as soon as we know how to get event weights, get that here; // note: the normalization of event weights will affect the choice; // of learning rate, one will have to experiment to get the right value.; // in general, if the ""average"" event weight is 1, the learning rate; // should be good if set around 0.02 (a good value if all event weights are 1)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:260,Usability,learn,learning,260,"// as soon as we know how to get event weights, get that here; // note: the normalization of event weights will affect the choice; // of learning rate, one will have to experiment to get the right value.; // in general, if the ""average"" event weight is 1, the learning rate; // should be good if set around 0.02 (a good value if all event weights are 1)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:74,Usability,learn,learning,74,"// note: the normalization of event weights will affect the choice; // of learning rate, one will have to experiment to get the right value.; // in general, if the ""average"" event weight is 1, the learning rate; // should be good if set around 0.02 (a good value if all event weights are 1)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:197,Usability,learn,learning,197,"// note: the normalization of event weights will affect the choice; // of learning rate, one will have to experiment to get the right value.; // in general, if the ""average"" event weight is 1, the learning rate; // should be good if set around 0.02 (a good value if all event weights are 1)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:86,Deployability,update,update,86,"////////////////////////////////////////////////////////////////////////////////; /// update the network based on how closely; /// the output matched the desired output",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:86,Deployability,update,update,86,"////////////////////////////////////////////////////////////////////////////////; /// update the network based on how closely; /// the output matched the desired output",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:86,Integrability,interface,interface,86,"////////////////////////////////////////////////////////////////////////////////; /// interface to the estimate",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:131,Performance,optimiz,optimization,131,"////////////////////////////////////////////////////////////////////////////////; /// this function is called by GeneticANN for GA optimization",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// update synapse error fields and adjust the weights (if in sequential mode)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:86,Deployability,update,update,86,"////////////////////////////////////////////////////////////////////////////////; /// update synapse error fields and adjust the weights (if in sequential mode)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:2,Testability,Log,Log,2,"//Log() << kDEBUG << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:17,Testability,test,test,17,"// estimator for test sample //zjh",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:5,Safety,avoid,avoid,5,"//to avoid precision problem that will destroy the pos-def",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:70,Availability,error,error,70,"// contains back propagation; // no hessian (old training file) or no error requested",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:183,Modifiability,variab,variable,183,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate the minimisation function; ///; /// Input parameters:; /// - npars: number of currently variable parameters; /// CAUTION: this is not (necessarily) the dimension of the fitPars vector !; /// - fitPars: array of (constant and variable) parameters; /// - iflag: indicates what is to be calculated (see example below); /// - grad: array of gradients; ///; /// Output parameters:; /// - f: the calculated function value.; /// - grad: the (optional) vector of first derivatives).",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:320,Modifiability,variab,variable,320,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate the minimisation function; ///; /// Input parameters:; /// - npars: number of currently variable parameters; /// CAUTION: this is not (necessarily) the dimension of the fitPars vector !; /// - fitPars: array of (constant and variable) parameters; /// - iflag: indicates what is to be calculated (see example below); /// - grad: array of gradients; ///; /// Output parameters:; /// - f: the calculated function value.; /// - grad: the (optional) vector of first derivatives).",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:9,Deployability,update,update,9,"// first update the weights",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodMLP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : MethodPDEFoam *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Original author of the TFoam implementation: *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodPDEFoam; \ingroup TMVA. The PDEFoam method is an extension of the PDERS method, which; divides the multi-dimensional phase space in a finite number of; hyper-rectangles (cells) of constant event density. This ""foam"" of; cells is filled with averaged probability-density information; sampled from a training event sample. For a given number of cells, the binning algorithm adjusts the size; and position of the cells inside the multidimensional phase space; based on a binary-split algorithm, minimizing the variance of the; event density in the cell.; The binned event density information of the final foam is stored in; binary trees, allowing for a fast and memory-efficient; classification of events. The implementation of PDEFoam is based on the Monte-Carlo; integration package TFoam included in the analysis package ROOT.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:1828,Deployability,integrat,integration,1828,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : MethodPDEFoam *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Original author of the TFoam implementation: *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodPDEFoam; \ingroup TMVA. The PDEFoam method is an extension of the PDERS method, which; divides the multi-dimensional phase space in a finite number of; hyper-rectangles (cells) of constant event density. This ""foam"" of; cells is filled with averaged probability-density information; sampled from a training event sample. For a given number of cells, the binning algorithm adjusts the size; and position of the cells inside the multidimensional phase space; based on a binary-split algorithm, minimizing the variance of the; event density in the cell.; The binned event density information of the final foam is stored in; binary trees, allowing for a fast and memory-efficient; classification of events. The implementation of PDEFoam is based on the Monte-Carlo; integration package TFoam included in the analysis package ROOT.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:1732,Energy Efficiency,efficient,efficient,1732,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : MethodPDEFoam *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Original author of the TFoam implementation: *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodPDEFoam; \ingroup TMVA. The PDEFoam method is an extension of the PDERS method, which; divides the multi-dimensional phase space in a finite number of; hyper-rectangles (cells) of constant event density. This ""foam"" of; cells is filled with averaged probability-density information; sampled from a training event sample. For a given number of cells, the binning algorithm adjusts the size; and position of the cells inside the multidimensional phase space; based on a binary-split algorithm, minimizing the variance of the; event density in the cell.; The binned event density information of the final foam is stored in; binary trees, allowing for a fast and memory-efficient; classification of events. The implementation of PDEFoam is based on the Monte-Carlo; integration package TFoam included in the analysis package ROOT.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : MethodPDEFoam *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Original author of the TFoam implementation: *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodPDEFoam; \ingroup TMVA. The PDEFoam method is an extension of the PDERS method, which; divides the multi-dimensional phase space in a finite number of; hyper-rectangles (cells) of constant event density. This ""foam"" of; cells is filled with averaged probability-density information; sampled from a training event sample. For a given number of cells, the binning algorithm adjusts the size; and position of the cells inside the multidimensional phase space; based on a binary-split algorithm, minimizing the variance of the; event density in the cell.; The binned event density information of the final foam is stored in; binary trees, allowing for a fast and memory-efficient; classification of events. The implementation of PDEFoam is based on the Monte-Carlo; integration package TFoam included in the analysis package ROOT.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:1828,Integrability,integrat,integration,1828,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : MethodPDEFoam *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Original author of the TFoam implementation: *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodPDEFoam; \ingroup TMVA. The PDEFoam method is an extension of the PDERS method, which; divides the multi-dimensional phase space in a finite number of; hyper-rectangles (cells) of constant event density. This ""foam"" of; cells is filled with averaged probability-density information; sampled from a training event sample. For a given number of cells, the binning algorithm adjusts the size; and position of the cells inside the multidimensional phase space; based on a binary-split algorithm, minimizing the variance of the; event density in the cell.; The binned event density information of the final foam is stored in; binary trees, allowing for a fast and memory-efficient; classification of events. The implementation of PDEFoam is based on the Monte-Carlo; integration package TFoam included in the analysis package ROOT.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:24,Availability,error,error,24,"// cut on discriminator error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:6,Testability,log,logic,6,"// DT logic is only applicable if a single foam is trained",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:3,Safety,sanity check,sanity check,3,"// sanity check: number of targets > 1 and MultiTargetRegression=F; // makes no sense --> set MultiTargetRegression=T",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:123,Modifiability,variab,variable,123,"// number of bins in histos; // loop over all testing signal and BG events and clac minimal and; // maximal value of every variable",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:46,Testability,test,testing,46,"// number of bins in histos; // loop over all testing signal and BG events and clac minimal and; // maximal value of every variable",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:3,Modifiability,variab,variables,3,"// variables loop",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:12,Testability,test,testing,12,"// fill all testing events into histos",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:116,Modifiability,variab,variable,116,"// now xmin[] and xmax[] contain upper/lower limits for every dimension; // copy xmin[], xmax[] values to the class variable",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:101,Integrability,depend,depending,101,"////////////////////////////////////////////////////////////////////////////////; /// Train PDE-Foam depending on the set options",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:32,Availability,error,error,32,"// calc discriminator (and it's error) for each cell",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:32,Availability,error,error,32,"// calc discriminator (and it's error) for each cell",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:247,Modifiability,variab,variables,247,"////////////////////////////////////////////////////////////////////////////////; /// Training one (mono target regression) foam, whose cells contain; /// the average 0th target. The dimension of the foam = number of; /// non-targets (= number of variables).",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:25,Availability,error,error,25,"// calc weight (and it's error) for each cell",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:65,Modifiability,variab,variables,65,"// since in multi-target regression targets are handled like; // variables --> remove targets and add them to the event variabels",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:120,Modifiability,variab,variabels,120,"// since in multi-target regression targets are handled like; // variables --> remove targets and add them to the event variabels",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:65,Modifiability,variab,variables,65,"// since in multi-target regression targets are handled like; // variables --> remove targets and add them to the event variabels",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:120,Modifiability,variab,variabels,120,"// since in multi-target regression targets are handled like; // variables --> remove targets and add them to the event variabels",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:689,Availability,error,error,689,"////////////////////////////////////////////////////////////////////////////////; /// Return Mva-Value.; ///; /// In case of `fSigBgSeparated==false` (one unified PDEFoam was; /// trained) the function returns the content of the cell, which; /// corresponds to the current TMVA::Event, i.e. D =; /// N_sig/(N_bg+N_sig).; ///; /// In case of `fSigBgSeparated==true` (two separate PDEFoams were; /// trained) the function returns; ///; /// D = Density_sig/(Density_sig+Density_bg); ///; /// where 'Density_sig' is the content of the cell in the signal; /// PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; /// in the background PDEFoam (fFoam[1]).; ///; /// In both cases the error on the discriminant is stored in 'err'; /// and 'errUpper'. (Of course err and errUpper must be non-zero; /// and point to valid address to make this work.)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:101,Availability,error,error,101,"// assume 50% signal probability, if no events found (bad assumption, but can be overruled by cut on error)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:17,Availability,error,error,17,"// calculate the error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:100,Availability,error,error,100,"////////////////////////////////////////////////////////////////////////////////; /// Calculate the error on the Mva value; ///; /// If `fSigBgSeparated == true` the error is calculated from the; /// number of events in the signal and background PDEFoam cells.; ///; /// If `fSigBgSeparated == false`, the error is taken directly from; /// the PDEFoam cell.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:166,Availability,error,error,166,"////////////////////////////////////////////////////////////////////////////////; /// Calculate the error on the Mva value; ///; /// If `fSigBgSeparated == true` the error is calculated from the; /// number of events in the signal and background PDEFoam cells.; ///; /// If `fSigBgSeparated == false`, the error is taken directly from; /// the PDEFoam cell.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:306,Availability,error,error,306,"////////////////////////////////////////////////////////////////////////////////; /// Calculate the error on the Mva value; ///; /// If `fSigBgSeparated == true` the error is calculated from the; /// number of events in the signal and background PDEFoam cells.; ///; /// If `fSigBgSeparated == false`, the error is taken directly from; /// the PDEFoam cell.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:7,Availability,error,error,7,"// the error on the Mva value",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:29,Availability,error,error,29,"// estimation of statistical error on counted signal/background events",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:53,Availability,error,error,53,"// Signal and Bg not separated; // get discriminator error direct from the foam",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:111,Modifiability,variab,variables,111,"////////////////////////////////////////////////////////////////////////////////; /// Compute ranking of input variables from the number of cuts made; /// in each PDEFoam dimension. The PDEFoam dimension (the variable); /// for which the most cuts were done is ranked highest.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:209,Modifiability,variab,variable,209,"////////////////////////////////////////////////////////////////////////////////; /// Compute ranking of input variables from the number of cuts made; /// in each PDEFoam dimension. The PDEFoam dimension (the variable); /// for which the most cuts were done is ranked highest.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:13,Modifiability,variab,variable,13,"// determine variable importances",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:24,Modifiability,variab,variable,24,"// normalization of the variable importances of this foam: the; // sum of all variable importances equals 1 for this foam",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:78,Modifiability,variab,variable,78,"// normalization of the variable importances of this foam: the; // sum of all variable importances equals 1 for this foam",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:15,Modifiability,variab,variable,15,"// the overall variable importance is the average over all foams",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:722,Integrability,depend,depends,722,"////////////////////////////////////////////////////////////////////////////////; /// Create a new PDEFoam, set the PDEFoam options (nCells, nBin,; /// Xmin, Xmax, etc.) and initialize the PDEFoam by calling; /// pdefoam->Initialize().; ///; /// Parameters:; ///; /// - foamcaption - name of PDEFoam object; ///; /// - ft - type of PDEFoam; ///; /// Candidates are:; /// - kSeparate - creates TMVA::PDEFoamEvent; /// - kDiscr - creates TMVA::PDEFoamDiscriminant; /// - kMonoTarget - creates TMVA::PDEFoamTarget; /// - kMultiTarget - creates TMVA::MultiTarget; /// - kMultiClass - creates TMVA::PDEFoamDiscriminant; ///; /// If 'fDTSeparation != kFoam' then a TMVA::PDEFoamDecisionTree; /// is created (the separation type depends on fDTSeparation).; ///; /// - cls - marked event class (optional, default value = 0)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:22,Modifiability,variab,variables,22,"// get array of event variables (non-targets)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:30,Modifiability,variab,variables,30,"// create std::map from event variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:121,Integrability,depend,depending,121,"////////////////////////////////////////////////////////////////////////////////; /// create a pdefoam kernel estimator, depending on the current; /// value of fKernel",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:122,Modifiability,variab,variables,122,"////////////////////////////////////////////////////////////////////////////////; /// create XML output of PDEFoam method variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:8,Modifiability,variab,variable,8,"// fill variable names into foam",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:23,Availability,error,error,23,"// cut on discriminant error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:45,Usability,clear,clear,45,"// return -1 or 1 for bg or signal event; // clear old range and prepare new range",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:99,Modifiability,variab,variables,99,"////////////////////////////////////////////////////////////////////////////////; /// read PDEFoam variables from xml weight file",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:3,Usability,clear,clear,3,"// clear old range [Xmin, Xmax] and prepare new range for reading",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:359,Performance,load,load,359,"////////////////////////////////////////////////////////////////////////////////; /// Reads a foam with name 'foamname' from file, and returns a clone; /// of the foam. The given ROOT file must be open. (The ROOT file; /// will not be closed in this function.); ///; /// Parameters:; ///; /// - file - an open ROOT file; ///; /// - foamname - name of foam to load from the file; ///; /// Returns:; ///; /// If a foam with name 'foamname' exists in the file, then it is; /// read from the file, cloned and returned. If a foam with name; /// 'foamname' does not exist in the file or the clone operation; /// does not succeed, then NULL is returned.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:10,Performance,load,load,10,"// try to load the foam from the file",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:10,Performance,load,load,10,"// try to load discriminator foam",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:3,Performance,load,load,3,"// load multiclass foams",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:96,Modifiability,variab,variable,96,"////////////////////////////////////////////////////////////////////////////////; /// store the variable names in all foams",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:99,Integrability,message,message,99,"////////////////////////////////////////////////////////////////////////////////; /// provide help message",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:215,Deployability,integrat,integrated,215,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss; /***********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPDERS *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * Yair Mahalalel <Yair.Mahalalel@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of ",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:2173,Energy Efficiency,reduce,reduce,2173,"ight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A [search method based on binary-trees](http://arxiv.org/abs/hep-ex/0211019); is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional:. - *MinMax:* the volume is defined in each dimension with respect; to the full variable range found in the training sample.; - *RMS:* the volume is defined in each dimensions with respect; to the RMS estimated from the training sample.; - *Adaptive:* a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:2512,Energy Efficiency,Adapt,Adaptive,2512,"ight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A [search method based on binary-trees](http://arxiv.org/abs/hep-ex/0211019); is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional:. - *MinMax:* the volume is defined in each dimension with respect; to the full variable range found in the training sample.; - *RMS:* the volume is defined in each dimensions with respect; to the RMS estimated from the training sample.; - *Adaptive:* a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:2802,Energy Efficiency,adapt,adaptive,2802,"ight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A [search method based on binary-trees](http://arxiv.org/abs/hep-ex/0211019); is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional:. - *MinMax:* the volume is defined in each dimension with respect; to the full variable range found in the training sample.; - *RMS:* the volume is defined in each dimensions with respect; to the RMS estimated from the training sample.; - *Adaptive:* a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:215,Integrability,integrat,integrated,215,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss; /***********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPDERS *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * Yair Mahalalel <Yair.Mahalalel@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of ",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:1391,Modifiability,variab,variables,1391,"*; * Implementation *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Poland *; * Yair Mahalalel <Yair.Mahalalel@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A [search method based on binary-trees](http://arxiv.org/abs/hep-ex/0211019); is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional:. - *MinMax:* the volume is defined in each dimension with respect",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:2351,Modifiability,variab,variable,2351,"ight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A [search method based on binary-trees](http://arxiv.org/abs/hep-ex/0211019); is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional:. - *MinMax:* the volume is defined in each dimension with respect; to the full variable range found in the training sample.; - *RMS:* the volume is defined in each dimensions with respect; to the RMS estimated from the training sample.; - *Adaptive:* a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:2512,Modifiability,Adapt,Adaptive,2512,"ight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A [search method based on binary-trees](http://arxiv.org/abs/hep-ex/0211019); is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional:. - *MinMax:* the volume is defined in each dimension with respect; to the full variable range found in the training sample.; - *RMS:* the volume is defined in each dimensions with respect; to the RMS estimated from the training sample.; - *Adaptive:* a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:2802,Modifiability,adapt,adaptive,2802,"ight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A [search method based on binary-trees](http://arxiv.org/abs/hep-ex/0211019); is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional:. - *MinMax:* the volume is defined in each dimension with respect; to the full variable range found in the training sample.; - *RMS:* the volume is defined in each dimensions with respect; to the RMS estimated from the training sample.; - *Adaptive:* a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:1863,Testability,test,test,1863,"ight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A [search method based on binary-trees](http://arxiv.org/abs/hep-ex/0211019); is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional:. - *MinMax:* the volume is defined in each dimension with respect; to the full variable range found in the training sample.; - *RMS:* the volume is defined in each dimensions with respect; to the RMS estimated from the training sample.; - *Adaptive:* a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:2005,Testability,test,test,2005,"ight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A [search method based on binary-trees](http://arxiv.org/abs/hep-ex/0211019); is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional:. - *MinMax:* the volume is defined in each dimension with respect; to the full variable range found in the training sample.; - *RMS:* the volume is defined in each dimensions with respect; to the RMS estimated from the training sample.; - *Adaptive:* a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:1721,Usability,simpl,simple,1721," Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; ***********************************************************************************/; /*! \class TMVA::MethodPDERS; \ingroup TMVA. This is a generalization of the above Likelihood methods to \f$ N_{var} \f$; dimensions, where \f$ N_{var} \f$ is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. A very simple probability density estimator (PDE) has been suggested; in [hep-ex/0211019](http://arxiv.org/abs/hep-ex/0211019). The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A [search method based on binary-trees](http://arxiv.org/abs/hep-ex/0211019); is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional:. - *MinMax:* the volume is defined in each dimension with respect; to the full variable range found in the training sample.; - *RMS:* the volume is defined in each dimensions with respect; to the RMS estimated from the training sample.; - *Adaptive:* a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume ",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:109,Integrability,rout,routine,109,"////////////////////////////////////////////////////////////////////////////////; /// default initialisation routine called by all constructors",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:23,Energy Efficiency,Adapt,Adaptive,23,"// special options for Adaptive mode",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:23,Modifiability,Adapt,Adaptive,23,"// special options for Adaptive mode",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:257,Availability,avail,available,257,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:430,Availability,avail,available,430,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:338,Energy Efficiency,Adapt,Adaptive,338,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:810,Energy Efficiency,adapt,adaptive,810,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:887,Energy Efficiency,adapt,adaptive,887,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:972,Energy Efficiency,adapt,adaptive,972,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:1042,Energy Efficiency,adapt,adaptive,1042,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:338,Modifiability,Adapt,Adaptive,338,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:810,Modifiability,adapt,adaptive,810,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:887,Modifiability,adapt,adaptive,887,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:972,Modifiability,adapt,adaptive,972,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:1042,Modifiability,adapt,adaptive,1042,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string.; ///; /// know options:; /// - VolumeRangeMode `<string>` Method to determine volume range; /// available values are:; /// - MinMax; /// - Unscaled; /// - RMS; /// - kNN; /// - Adaptive `<default>`; ///; /// - KernelEstimator `<string>` Kernel estimation function; /// available values are:; /// - Box `<default>`; /// - Sphere; /// - Teepee; /// - Gauss; /// - Sinc3; /// - Sinc5; /// - Sinc7; /// - Sinc9; /// - Sinc11; /// - Lanczos2; /// - Lanczos3; /// - Lanczos5; /// - Lanczos8; /// - Trim; ///; /// - DeltaFrac `<float>` Ratio of #%EventsMin/#%EventsMax for MinMax and RMS volume range; /// - NEventsMin `<int>` Minimum number of events for adaptive volume range; /// - NEventsMax `<int>` Maximum number of events for adaptive volume range; /// - MaxVIterations `<int>` Maximum number of iterations for adaptive volume range; /// - InitialScale `<float>` Initial scale for adaptive volume range; /// - GaussSigma `<float>` Width with respect to the volume size of Gaussian kernel estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:23,Security,validat,validation,23,"// TODO: Add parameter validation",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:318,Testability,test,test,318,"////////////////////////////////////////////////////////////////////////////////; /// this is a dummy training: the preparation work to do is the construction; /// of the binary tree as a pointer chain. It is easier to directly save the; /// trainingTree in the weight file, and to rebuild the binary tree in the; /// test phase from scratch",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:131,Energy Efficiency,adapt,adaptive,131,"////////////////////////////////////////////////////////////////////////////////; /// compute also average RMS values required for adaptive Gaussian",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:131,Modifiability,adapt,adaptive,131,"////////////////////////////////////////////////////////////////////////////////; /// compute also average RMS values required for adaptive Gaussian",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:29,Testability,test,test,29,"// volume is centered around test value",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface to RootFinder",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:90,Testability,test,test,90,"// -------------------------------------------------------------------------; //; // ==== test of volume search =====; //; // #define TMVA::MethodPDERS__countByHand__Debug__",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:3,Energy Efficiency,adapt,adaptive,3,"// adaptive volume; // -----------------------------------------------------------------------; // TODO: optimize, perhaps multi stage with broadening limits,; // or a different root finding method entirely,",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:3,Modifiability,adapt,adaptive,3,"// adaptive volume; // -----------------------------------------------------------------------; // TODO: optimize, perhaps multi stage with broadening limits,; // or a different root finding method entirely,",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:105,Performance,optimiz,optimize,105,"// adaptive volume; // -----------------------------------------------------------------------; // TODO: optimize, perhaps multi stage with broadening limits,; // or a different root finding method entirely,",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:13,Deployability,update,update,13,"// necessary update of static pointer",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:8,Safety,sanity check,sanity check,8,"// last sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:10,Energy Efficiency,adapt,adaptive,10,"// end of adaptive method",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:10,Modifiability,adapt,adaptive,10,"// end of adaptive method",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:19,Availability,error,errors,19,"// TODO: propagate errors from here",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:142,Energy Efficiency,efficient,efficient,142,"////////////////////////////////////////////////////////////////////////////////; /// We use Euclidian metric here. Might not be best or most efficient.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:98,Availability,error,error,98,"////////////////////////////////////////////////////////////////////////////////; /// statistical error estimate for RS estimator",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:3,Availability,Error,Error,3,"// Error is zero because of B = S = 0",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:3,Availability,Error,Error,3,"// Error is zero because of B or S = 0",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:2,Testability,Log,Log,2,"//Log() << kFATAL << ""Please implement writing of weights as XML"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:86,Deployability,update,update,86,"////////////////////////////////////////////////////////////////////////////////; /// update static this pointer",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPDERS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodPlugins *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Daniel Martscheit <martschei@ekp.uni-karlsruhe.de> -KIT Karlsruhe, Ger. *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CreateMethodPlugins; \ingroup TMVA. Plugins analysis. The MethodPlugins is actually not a real method, but it is just a wrapper to call; the TPluginsManager of ROOT and find a external method which can be used to extend; TMVA by another classifier. The only methods which are actually really implemented; are the constructors which fulfill the plugins handling. The others will produce; FATAL warnings and stop TMVA execution. Right after the constructor, the additional method 'getPlugedinMethod()' is called,; which returns the method loaded by the plugin manager, and the MethodPlugins object; is already deleted. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodPlugins *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Daniel Martscheit <martschei@ekp.uni-karlsruhe.de> -KIT Karlsruhe, Ger. *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CreateMethodPlugins; \ingroup TMVA. Plugins analysis. The MethodPlugins is actually not a real method, but it is just a wrapper to call; the TPluginsManager of ROOT and find a external method which can be used to extend; TMVA by another classifier. The only methods which are actually really implemented; are the constructors which fulfill the plugins handling. The others will produce; FATAL warnings and stop TMVA execution. Right after the constructor, the additional method 'getPlugedinMethod()' is called,; which returns the method loaded by the plugin manager, and the MethodPlugins object; is already deleted. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:1411,Integrability,wrap,wrapper,1411,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodPlugins *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Daniel Martscheit <martschei@ekp.uni-karlsruhe.de> -KIT Karlsruhe, Ger. *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CreateMethodPlugins; \ingroup TMVA. Plugins analysis. The MethodPlugins is actually not a real method, but it is just a wrapper to call; the TPluginsManager of ROOT and find a external method which can be used to extend; TMVA by another classifier. The only methods which are actually really implemented; are the constructors which fulfill the plugins handling. The others will produce; FATAL warnings and stop TMVA execution. Right after the constructor, the additional method 'getPlugedinMethod()' is called,; which returns the method loaded by the plugin manager, and the MethodPlugins object; is already deleted. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:1327,Modifiability,Plugin,Plugins,1327,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodPlugins *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Daniel Martscheit <martschei@ekp.uni-karlsruhe.de> -KIT Karlsruhe, Ger. *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CreateMethodPlugins; \ingroup TMVA. Plugins analysis. The MethodPlugins is actually not a real method, but it is just a wrapper to call; the TPluginsManager of ROOT and find a external method which can be used to extend; TMVA by another classifier. The only methods which are actually really implemented; are the constructors which fulfill the plugins handling. The others will produce; FATAL warnings and stop TMVA execution. Right after the constructor, the additional method 'getPlugedinMethod()' is called,; which returns the method loaded by the plugin manager, and the MethodPlugins object; is already deleted. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:1504,Modifiability,extend,extend,1504,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodPlugins *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Daniel Martscheit <martschei@ekp.uni-karlsruhe.de> -KIT Karlsruhe, Ger. *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CreateMethodPlugins; \ingroup TMVA. Plugins analysis. The MethodPlugins is actually not a real method, but it is just a wrapper to call; the TPluginsManager of ROOT and find a external method which can be used to extend; TMVA by another classifier. The only methods which are actually really implemented; are the constructors which fulfill the plugins handling. The others will produce; FATAL warnings and stop TMVA execution. Right after the constructor, the additional method 'getPlugedinMethod()' is called,; which returns the method loaded by the plugin manager, and the MethodPlugins object; is already deleted. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:1635,Modifiability,plugin,plugins,1635,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodPlugins *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Daniel Martscheit <martschei@ekp.uni-karlsruhe.de> -KIT Karlsruhe, Ger. *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CreateMethodPlugins; \ingroup TMVA. Plugins analysis. The MethodPlugins is actually not a real method, but it is just a wrapper to call; the TPluginsManager of ROOT and find a external method which can be used to extend; TMVA by another classifier. The only methods which are actually really implemented; are the constructors which fulfill the plugins handling. The others will produce; FATAL warnings and stop TMVA execution. Right after the constructor, the additional method 'getPlugedinMethod()' is called,; which returns the method loaded by the plugin manager, and the MethodPlugins object; is already deleted. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:1842,Modifiability,plugin,plugin,1842,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodPlugins *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Daniel Martscheit <martschei@ekp.uni-karlsruhe.de> -KIT Karlsruhe, Ger. *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CreateMethodPlugins; \ingroup TMVA. Plugins analysis. The MethodPlugins is actually not a real method, but it is just a wrapper to call; the TPluginsManager of ROOT and find a external method which can be used to extend; TMVA by another classifier. The only methods which are actually really implemented; are the constructors which fulfill the plugins handling. The others will produce; FATAL warnings and stop TMVA execution. Right after the constructor, the additional method 'getPlugedinMethod()' is called,; which returns the method loaded by the plugin manager, and the MethodPlugins object; is already deleted. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:1828,Performance,load,loaded,1828,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : TMVA::MethodPlugins *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Daniel Martscheit <martschei@ekp.uni-karlsruhe.de> -KIT Karlsruhe, Ger. *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CreateMethodPlugins; \ingroup TMVA. Plugins analysis. The MethodPlugins is actually not a real method, but it is just a wrapper to call; the TPluginsManager of ROOT and find a external method which can be used to extend; TMVA by another classifier. The only methods which are actually really implemented; are the constructors which fulfill the plugins handling. The others will produce; FATAL warnings and stop TMVA execution. Right after the constructor, the additional method 'getPlugedinMethod()' is called,; which returns the method loaded by the plugin manager, and the MethodPlugins object; is already deleted. */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:44,Modifiability,Plugin,PluginHandler,44,"//An empty methodTitle is a Problem for the PluginHandler, so we need to fiddle it out of the weightsfilename",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:16,Modifiability,plugin,pluginHandler,16,"//std::cout << ""pluginHandler found myMethodTitle="" << myMethodTitle<<std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:58,Modifiability,plugin,pluginHandler,58,"//std::cout << ""Calling TeacherPlugin "" << std::endl;; // pluginHandler->Print(""a"");",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx:16,Modifiability,plugin,plugin,16,"//std::cout << ""plugin done"" << std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodPlugins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPlugins.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:164,Deployability,integrat,integrated,164,"// @(#)root/tmva $Id$; // Author: Fredrik Tegenfeldt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodRuleFit *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodRuleFit; \ingroup TMVA; J Friedman's RuleFit method; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:164,Integrability,integrat,integrated,164,"// @(#)root/tmva $Id$; // Author: Fredrik Tegenfeldt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodRuleFit *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodRuleFit; \ingroup TMVA; J Friedman's RuleFit method; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:244,Availability,avail,available,244,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// know options.; ///; /// #### general; ///; /// - RuleFitModule `<string>`; /// available values are:; /// - RFTMVA - use TMVA implementation; /// - RFFriedman - use Friedmans original implementation; ///; /// #### Path search (fitting); ///; /// - GDTau `<float>` gradient-directed path: fit threshold, default; /// - GDTauPrec `<float>` gradient-directed path: precision of estimated tau; /// - GDStep `<float>` gradient-directed path: step size; /// - GDNSteps `<float>` gradient-directed path: number of steps; /// - GDErrScale `<float>` stop scan when error>scale*errmin; ///; /// #### Tree generation; ///; /// - fEventsMin `<float>` minimum fraction of events in a splittable node; /// - fEventsMax `<float>` maximum fraction of events in a splittable node; /// - nTrees `<float>` number of trees in forest.; /// - ForestType `<string>`; /// available values are:; /// - Random - create forest using random subsample and only random variables subset at each node; /// - AdaBoost - create forest with boosted events; ///; /// #### Model creation; ///; /// - RuleMinDist `<float>` min distance allowed between rules; /// - MinImp `<float>` minimum rule importance accepted; /// - Model `<string>` model to be used; /// available values are:; /// - ModRuleLinear `<default>`; /// - ModRule; /// - ModLinear; ///; /// #### Friedmans module; ///; /// - RFWorkDir `<string>` directory where Friedmans module (rf_go.exe) is installed; /// - RFNrules `<int>` maximum number of rules allowed; /// - RFNendnodes `<int>` average number of end nodes in the forest of trees",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:721,Availability,error,error,721,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// know options.; ///; /// #### general; ///; /// - RuleFitModule `<string>`; /// available values are:; /// - RFTMVA - use TMVA implementation; /// - RFFriedman - use Friedmans original implementation; ///; /// #### Path search (fitting); ///; /// - GDTau `<float>` gradient-directed path: fit threshold, default; /// - GDTauPrec `<float>` gradient-directed path: precision of estimated tau; /// - GDStep `<float>` gradient-directed path: step size; /// - GDNSteps `<float>` gradient-directed path: number of steps; /// - GDErrScale `<float>` stop scan when error>scale*errmin; ///; /// #### Tree generation; ///; /// - fEventsMin `<float>` minimum fraction of events in a splittable node; /// - fEventsMax `<float>` maximum fraction of events in a splittable node; /// - nTrees `<float>` number of trees in forest.; /// - ForestType `<string>`; /// available values are:; /// - Random - create forest using random subsample and only random variables subset at each node; /// - AdaBoost - create forest with boosted events; ///; /// #### Model creation; ///; /// - RuleMinDist `<float>` min distance allowed between rules; /// - MinImp `<float>` minimum rule importance accepted; /// - Model `<string>` model to be used; /// available values are:; /// - ModRuleLinear `<default>`; /// - ModRule; /// - ModLinear; ///; /// #### Friedmans module; ///; /// - RFWorkDir `<string>` directory where Friedmans module (rf_go.exe) is installed; /// - RFNrules `<int>` maximum number of rules allowed; /// - RFNendnodes `<int>` average number of end nodes in the forest of trees",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:1013,Availability,avail,available,1013,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// know options.; ///; /// #### general; ///; /// - RuleFitModule `<string>`; /// available values are:; /// - RFTMVA - use TMVA implementation; /// - RFFriedman - use Friedmans original implementation; ///; /// #### Path search (fitting); ///; /// - GDTau `<float>` gradient-directed path: fit threshold, default; /// - GDTauPrec `<float>` gradient-directed path: precision of estimated tau; /// - GDStep `<float>` gradient-directed path: step size; /// - GDNSteps `<float>` gradient-directed path: number of steps; /// - GDErrScale `<float>` stop scan when error>scale*errmin; ///; /// #### Tree generation; ///; /// - fEventsMin `<float>` minimum fraction of events in a splittable node; /// - fEventsMax `<float>` maximum fraction of events in a splittable node; /// - nTrees `<float>` number of trees in forest.; /// - ForestType `<string>`; /// available values are:; /// - Random - create forest using random subsample and only random variables subset at each node; /// - AdaBoost - create forest with boosted events; ///; /// #### Model creation; ///; /// - RuleMinDist `<float>` min distance allowed between rules; /// - MinImp `<float>` minimum rule importance accepted; /// - Model `<string>` model to be used; /// available values are:; /// - ModRuleLinear `<default>`; /// - ModRule; /// - ModLinear; ///; /// #### Friedmans module; ///; /// - RFWorkDir `<string>` directory where Friedmans module (rf_go.exe) is installed; /// - RFNrules `<int>` maximum number of rules allowed; /// - RFNendnodes `<int>` average number of end nodes in the forest of trees",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:1388,Availability,avail,available,1388,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// know options.; ///; /// #### general; ///; /// - RuleFitModule `<string>`; /// available values are:; /// - RFTMVA - use TMVA implementation; /// - RFFriedman - use Friedmans original implementation; ///; /// #### Path search (fitting); ///; /// - GDTau `<float>` gradient-directed path: fit threshold, default; /// - GDTauPrec `<float>` gradient-directed path: precision of estimated tau; /// - GDStep `<float>` gradient-directed path: step size; /// - GDNSteps `<float>` gradient-directed path: number of steps; /// - GDErrScale `<float>` stop scan when error>scale*errmin; ///; /// #### Tree generation; ///; /// - fEventsMin `<float>` minimum fraction of events in a splittable node; /// - fEventsMax `<float>` maximum fraction of events in a splittable node; /// - nTrees `<float>` number of trees in forest.; /// - ForestType `<string>`; /// available values are:; /// - Random - create forest using random subsample and only random variables subset at each node; /// - AdaBoost - create forest with boosted events; ///; /// #### Model creation; ///; /// - RuleMinDist `<float>` min distance allowed between rules; /// - MinImp `<float>` minimum rule importance accepted; /// - Model `<string>` model to be used; /// available values are:; /// - ModRuleLinear `<default>`; /// - ModRule; /// - ModLinear; ///; /// #### Friedmans module; ///; /// - RFWorkDir `<string>` directory where Friedmans module (rf_go.exe) is installed; /// - RFNrules `<int>` maximum number of rules allowed; /// - RFNendnodes `<int>` average number of end nodes in the forest of trees",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:1588,Deployability,install,installed,1588,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// know options.; ///; /// #### general; ///; /// - RuleFitModule `<string>`; /// available values are:; /// - RFTMVA - use TMVA implementation; /// - RFFriedman - use Friedmans original implementation; ///; /// #### Path search (fitting); ///; /// - GDTau `<float>` gradient-directed path: fit threshold, default; /// - GDTauPrec `<float>` gradient-directed path: precision of estimated tau; /// - GDStep `<float>` gradient-directed path: step size; /// - GDNSteps `<float>` gradient-directed path: number of steps; /// - GDErrScale `<float>` stop scan when error>scale*errmin; ///; /// #### Tree generation; ///; /// - fEventsMin `<float>` minimum fraction of events in a splittable node; /// - fEventsMax `<float>` maximum fraction of events in a splittable node; /// - nTrees `<float>` number of trees in forest.; /// - ForestType `<string>`; /// available values are:; /// - Random - create forest using random subsample and only random variables subset at each node; /// - AdaBoost - create forest with boosted events; ///; /// #### Model creation; ///; /// - RuleMinDist `<float>` min distance allowed between rules; /// - MinImp `<float>` minimum rule importance accepted; /// - Model `<string>` model to be used; /// available values are:; /// - ModRuleLinear `<default>`; /// - ModRule; /// - ModLinear; ///; /// #### Friedmans module; ///; /// - RFWorkDir `<string>` directory where Friedmans module (rf_go.exe) is installed; /// - RFNrules `<int>` maximum number of rules allowed; /// - RFNendnodes `<int>` average number of end nodes in the forest of trees",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:1104,Modifiability,variab,variables,1104,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; /// know options.; ///; /// #### general; ///; /// - RuleFitModule `<string>`; /// available values are:; /// - RFTMVA - use TMVA implementation; /// - RFFriedman - use Friedmans original implementation; ///; /// #### Path search (fitting); ///; /// - GDTau `<float>` gradient-directed path: fit threshold, default; /// - GDTauPrec `<float>` gradient-directed path: precision of estimated tau; /// - GDStep `<float>` gradient-directed path: step size; /// - GDNSteps `<float>` gradient-directed path: number of steps; /// - GDErrScale `<float>` stop scan when error>scale*errmin; ///; /// #### Tree generation; ///; /// - fEventsMin `<float>` minimum fraction of events in a splittable node; /// - fEventsMax `<float>` maximum fraction of events in a splittable node; /// - nTrees `<float>` number of trees in forest.; /// - ForestType `<string>`; /// available values are:; /// - Random - create forest using random subsample and only random variables subset at each node; /// - AdaBoost - create forest with boosted events; ///; /// #### Model creation; ///; /// - RuleMinDist `<float>` min distance allowed between rules; /// - MinImp `<float>` minimum rule importance accepted; /// - Model `<string>` model to be used; /// available values are:; /// - ModRuleLinear `<default>`; /// - ModRule; /// - ModLinear; ///; /// #### Friedmans module; ///; /// - RFWorkDir `<string>` directory where Friedmans module (rf_go.exe) is installed; /// - RFNrules `<int>` maximum number of rules allowed; /// - RFNendnodes `<int>` average number of end nodes in the forest of trees",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:50,Integrability,message,message,50,"// check if Friedmans module is used.; // print a message concerning the options.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:101,Energy Efficiency,monitor,monitoring,101,"////////////////////////////////////////////////////////////////////////////////; /// initialize the monitoring ntuple",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:7,Modifiability,variab,variables,7,"// set variables that used to be options; // any modifications are then made in ProcessOptions()",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:52,Integrability,rout,routine,52,"// test tree nmin cut -> for debug purposes; // the routine will generate trees with stopping cut on N(eve) given by; // a fraction between [20,N(eve)-1].; //; // MakeForestRnd();; // exit(1);; //; // Init RuleFit object and create rule ensemble; // + make forest & rules",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:3,Testability,test,test,3,"// test tree nmin cut -> for debug purposes; // the routine will generate trees with stopping cut on N(eve) given by; // a fraction between [20,N(eve)-1].; //; // MakeForestRnd();; // exit(1);; //; // Init RuleFit object and create rule ensemble; // + make forest & rules",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:27,Energy Efficiency,monitor,monitor,27,"// Output results and fill monitor ntuple",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:27,Energy Efficiency,monitor,monitor,27,"// Output results and fill monitor ntuple",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:112,Modifiability,variab,variables,112,"////////////////////////////////////////////////////////////////////////////////; /// computes ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:100,Energy Efficiency,monitor,monitoring,100,"////////////////////////////////////////////////////////////////////////////////; /// write special monitoring histograms to file (here ntuple)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodRuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:174,Deployability,integrat,integrated,174,"// @(#)root/tmva $Id$; // Author: Marcin Wolter, Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodSVM *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Introduction of regression by: *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Krakow, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Krakow, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Krakow, Poland *; * *; * Introduction of kernel parameter optimisation *; * and additional kernel functions by: *; * Adrian Bevan <adrian.bevan@cern.ch> - Queen Mary *; * University of London, UK *; * Tom Stevenson <thomas.james.stevenson@cern.ch> - Queen Mary *; * University of London, UK *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodSVM; \ingroup TMVA; SMO Platt's SVM classifier with Keerthi & Shavade improvements; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:174,Integrability,integrat,integrated,174,"// @(#)root/tmva $Id$; // Author: Marcin Wolter, Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodSVM *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Introduction of regression by: *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ PAN & AGH, Krakow, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ PAN & UJ, Krakow, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ PAN & AGH, Krakow, Poland *; * *; * Introduction of kernel parameter optimisation *; * and additional kernel functions by: *; * Adrian Bevan <adrian.bevan@cern.ch> - Queen Mary *; * University of London, UK *; * Tom Stevenson <thomas.james.stevenson@cern.ch> - Queen Mary *; * University of London, UK *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodSVM; \ingroup TMVA; SMO Platt's SVM classifier with Keerthi & Shavade improvements; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:36,Modifiability,variab,variables,36,"// SVM always uses normalised input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:102,Availability,avail,available,102,"////////////////////////////////////////////////////////////////////////////////; /// declare options available for this method",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:92,Deployability,configurat,configuration,92,"////////////////////////////////////////////////////////////////////////////////; /// write configuration to xml file",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:92,Modifiability,config,configuration,92,"////////////////////////////////////////////////////////////////////////////////; /// write configuration to xml file",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:8,Deployability,configurat,configuration,8,"// read configuration from input stream",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:8,Modifiability,config,configuration,8,"// read configuration from input stream",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:9,Safety,avoid,avoid,9,"// TODO: avoid creation of a new SVEvent every time (Joerg)",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:86,Performance,Optimiz,Optimize,86,"////////////////////////////////////////////////////////////////////////////////; /// Optimize Tuning Parameters; /// This is used to optimise the kernel function parameters and cost. All kernel parameters; /// are optimised by default with default ranges, however the parameters to be optimised can; /// be set when booking the method with the option Tune.; ///; /// Example:; ///; /// ""Tune=Gamma[0.01;1.0;100]"" would only tune the RBF Gamma between 0.01 and 1.0; /// with 100 steps.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:352,Performance,Tune,Tune,352,"////////////////////////////////////////////////////////////////////////////////; /// Optimize Tuning Parameters; /// This is used to optimise the kernel function parameters and cost. All kernel parameters; /// are optimised by default with default ranges, however the parameters to be optimised can; /// be set when booking the method with the option Tune.; ///; /// Example:; ///; /// ""Tune=Gamma[0.01;1.0;100]"" would only tune the RBF Gamma between 0.01 and 1.0; /// with 100 steps.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:388,Performance,Tune,Tune,388,"////////////////////////////////////////////////////////////////////////////////; /// Optimize Tuning Parameters; /// This is used to optimise the kernel function parameters and cost. All kernel parameters; /// are optimised by default with default ranges, however the parameters to be optimised can; /// be set when booking the method with the option Tune.; ///; /// Example:; ///; /// ""Tune=Gamma[0.01;1.0;100]"" would only tune the RBF Gamma between 0.01 and 1.0; /// with 100 steps.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:425,Performance,tune,tune,425,"////////////////////////////////////////////////////////////////////////////////; /// Optimize Tuning Parameters; /// This is used to optimise the kernel function parameters and cost. All kernel parameters; /// are optimised by default with default ranges, however the parameters to be optimised can; /// be set when booking the method with the option Tune.; ///; /// Example:; ///; /// ""Tune=Gamma[0.01;1.0;100]"" would only tune the RBF Gamma between 0.01 and 1.0; /// with 100 steps.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:12,Performance,Optimiz,Optimizer,12,"// Call the Optimizer with the set of kernel parameters and ranges that are meant to be tuned.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:88,Performance,tune,tuned,88,"// Call the Optimizer with the set of kernel parameters and ranges that are meant to be tuned.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:49,Performance,optimiz,optimized,49,"// Fill all the tuning parameters that should be optimized into a map",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:334,Modifiability,variab,variables,334,"////////////////////////////////////////////////////////////////////////////////; /// Takes as input a string of values for multigaussian gammas and splits it, filling the; /// gamma vector required by the SVKernelFunction. Example: ""GammaList=0.1,0.2,0.3"" would; /// make a vector with Gammas of 0.1,0.2 & 0.3 corresponding to input variables 1,2 & 3; /// respectively.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:469,Performance,Tune,Tune,469,"////////////////////////////////////////////////////////////////////////////////; /// GetTuningOptions; /// Function to allow for ranges and number of steps (for scan) when optimising kernel; /// function parameters. Specified when booking the method after the parameter to be; /// optimised between square brackets with each value separated by ;, the first value; /// is the lower limit, the second the upper limit and the third is the number of steps.; /// Example: ""Tune=Gamma[0.01;1.0;100]"" would only tune the RBF Gamma between 0.01 and; /// 100 steps.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:506,Performance,tune,tune,506,"////////////////////////////////////////////////////////////////////////////////; /// GetTuningOptions; /// Function to allow for ranges and number of steps (for scan) when optimising kernel; /// function parameters. Specified when booking the method after the parameter to be; /// optimised between square brackets with each value separated by ;, the first value; /// is the lower limit, the second the upper limit and the third is the number of steps.; /// Example: ""Tune=Gamma[0.01;1.0;100]"" would only tune the RBF Gamma between 0.01 and; /// 100 steps.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:119,Testability,test,testing,119,"////////////////////////////////////////////////////////////////////////////////; /// getLoss; /// Calculates loss for testing dataset. The loss function can be specified when; /// booking the method, otherwise defaults to hinge loss. Currently not used however; /// is accesible if required.",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodSVM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:1185,Availability,Avail,Available,1185,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodTMlpANN; \ingroup TMVA. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework. Available learning methods:<br>. - Stochastic; - Batch; - SteepestDescent; - RibierePolak; - FletcherReeves; - BFGS. See the TMultiLayerPerceptron class description; for details on this ANN.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:218,Deployability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodTMlpANN; \ingroup TMVA. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework. Available learning methods:<br>. - Stochastic; - Batch; - SteepestDescent; - RibierePolak; - FletcherReeves; - BFGS. See the TMultiLayerPerceptron class description; for details on this ANN.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:218,Integrability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodTMlpANN; \ingroup TMVA. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework. Available learning methods:<br>. - Stochastic; - Batch; - SteepestDescent; - RibierePolak; - FletcherReeves; - BFGS. See the TMultiLayerPerceptron class description; for details on this ANN.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:1079,Integrability,interface,interface,1079,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodTMlpANN; \ingroup TMVA. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework. Available learning methods:<br>. - Stochastic; - Batch; - SteepestDescent; - RibierePolak; - FletcherReeves; - BFGS. See the TMultiLayerPerceptron class description; for details on this ANN.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:1126,Testability,test,testing,1126,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodTMlpANN; \ingroup TMVA. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework. Available learning methods:<br>. - Stochastic; - Batch; - SteepestDescent; - RibierePolak; - FletcherReeves; - BFGS. See the TMultiLayerPerceptron class description; for details on this ANN.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:1195,Usability,learn,learning,1195,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodTMlpANN; \ingroup TMVA. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework. Available learning methods:<br>. - Stochastic; - Batch; - SteepestDescent; - RibierePolak; - FletcherReeves; - BFGS. See the TMultiLayerPerceptron class description; for details on this ANN.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:340,Modifiability,layers,layers,340,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - NCycles `<integer>` Number of training cycles (too many cycles could overtrain the network); /// - HiddenLayers `<string>` Layout of the hidden layers (nodes per layer); /// * specifications for each hidden layer are separated by comma; /// * for each layer the number of nodes can be either absolut (simply a number); /// or relative to the number of input nodes to the neural net (N); /// * there is always a single node in the output layer; ///; /// example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; /// layers 1,2,3,4, respectively",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:740,Modifiability,layers,layers,740,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - NCycles `<integer>` Number of training cycles (too many cycles could overtrain the network); /// - HiddenLayers `<string>` Layout of the hidden layers (nodes per layer); /// * specifications for each hidden layer are separated by comma; /// * for each layer the number of nodes can be either absolut (simply a number); /// or relative to the number of input nodes to the neural net (N); /// * there is always a single node in the output layer; ///; /// example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; /// layers 1,2,3,4, respectively",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:497,Usability,simpl,simply,497,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - NCycles `<integer>` Number of training cycles (too many cycles could overtrain the network); /// - HiddenLayers `<string>` Layout of the hidden layers (nodes per layer); /// * specifications for each hidden layer are separated by comma; /// * for each layer the number of nodes can be either absolut (simply a number); /// or relative to the number of input nodes to the neural net (N); /// * there is always a single node in the output layer; ///; /// example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; /// layers 1,2,3,4, respectively",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:20,Availability,error,error,20,"// cannot determine error",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:117,Availability,avail,available,117,"////////////////////////////////////////////////////////////////////////////////; /// performs TMlpANN training; /// available learning methods:; ///; /// - TMultiLayerPerceptron::kStochastic; /// - TMultiLayerPerceptron::kBatch; /// - TMultiLayerPerceptron::kSteepestDescent; /// - TMultiLayerPerceptron::kRibierePolak; /// - TMultiLayerPerceptron::kFletcherReeves; /// - TMultiLayerPerceptron::kBFGS; ///; /// TMultiLayerPerceptron wants test and training tree at once; /// so merge the training and testing trees from the MVA factory first:",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:86,Performance,perform,performs,86,"////////////////////////////////////////////////////////////////////////////////; /// performs TMlpANN training; /// available learning methods:; ///; /// - TMultiLayerPerceptron::kStochastic; /// - TMultiLayerPerceptron::kBatch; /// - TMultiLayerPerceptron::kSteepestDescent; /// - TMultiLayerPerceptron::kRibierePolak; /// - TMultiLayerPerceptron::kFletcherReeves; /// - TMultiLayerPerceptron::kBFGS; ///; /// TMultiLayerPerceptron wants test and training tree at once; /// so merge the training and testing trees from the MVA factory first:",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:440,Testability,test,test,440,"////////////////////////////////////////////////////////////////////////////////; /// performs TMlpANN training; /// available learning methods:; ///; /// - TMultiLayerPerceptron::kStochastic; /// - TMultiLayerPerceptron::kBatch; /// - TMultiLayerPerceptron::kSteepestDescent; /// - TMultiLayerPerceptron::kRibierePolak; /// - TMultiLayerPerceptron::kFletcherReeves; /// - TMultiLayerPerceptron::kBFGS; ///; /// TMultiLayerPerceptron wants test and training tree at once; /// so merge the training and testing trees from the MVA factory first:",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:502,Testability,test,testing,502,"////////////////////////////////////////////////////////////////////////////////; /// performs TMlpANN training; /// available learning methods:; ///; /// - TMultiLayerPerceptron::kStochastic; /// - TMultiLayerPerceptron::kBatch; /// - TMultiLayerPerceptron::kSteepestDescent; /// - TMultiLayerPerceptron::kRibierePolak; /// - TMultiLayerPerceptron::kFletcherReeves; /// - TMultiLayerPerceptron::kBFGS; ///; /// TMultiLayerPerceptron wants test and training tree at once; /// so merge the training and testing trees from the MVA factory first:",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:127,Usability,learn,learning,127,"////////////////////////////////////////////////////////////////////////////////; /// performs TMlpANN training; /// available learning methods:; ///; /// - TMultiLayerPerceptron::kStochastic; /// - TMultiLayerPerceptron::kBatch; /// - TMultiLayerPerceptron::kSteepestDescent; /// - TMultiLayerPerceptron::kRibierePolak; /// - TMultiLayerPerceptron::kFletcherReeves; /// - TMultiLayerPerceptron::kBFGS; ///; /// TMultiLayerPerceptron wants test and training tree at once; /// so merge the training and testing trees from the MVA factory first:",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:141,Security,validat,validation,141,"// These are the event lists for the mlp train method; // first events in the tree are for training; // the rest for internal testing (cross validation)...; // NOTE: the training events are ordered: first part is signal, second part background",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:126,Testability,test,testing,126,"// These are the event lists for the mlp train method; // first events in the tree are for training; // the rest for internal testing (cross validation)...; // NOTE: the training events are ordered: first part is signal, second part background",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:7,Usability,learn,learning,7,"// set learning method",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:8,Deployability,update,update,8,"//""text,update=50"" );; // write weights to File;; // this is not nice, but fMLP gets deleted at the end of Train()",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:137,Performance,load,load,137,"////////////////////////////////////////////////////////////////////////////////; /// rebuild temporary textfile from xml weightfile and load this; /// file into MLP",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:83,Testability,test,testing,83,"// Here we create a dummy tree necessary to create a minimal NN; // to be used for testing, evaluation and application",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:8,Performance,load,load,8,"// 2nd: load the weights from the temporary file into the MLP; // the MLP is already build",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,tmva/tmva/src/MethodTMlpANN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:161,Deployability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Andraes Hoecker; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MinuitFitter *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MinuitFitter; \ingroup TMVA; /Fitter using MINUIT; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:161,Integrability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Andraes Hoecker; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MinuitFitter *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MinuitFitter; \ingroup TMVA; /Fitter using MINUIT; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:26,Usability,clear,clear,26,"// set fitter object, and clear",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:3,Availability,error,error,3,"// error level: 1 (2*log(L) fit",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:21,Testability,log,log,21,"// error level: 1 (2*log(L) fit",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:86,Performance,perform,performs,86,"////////////////////////////////////////////////////////////////////////////////; /// performs the fit",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:86,Performance,perform,performs,86,"////////////////////////////////////////////////////////////////////////////////; /// performs the fit by calling Run(pars)",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx:162,Deployability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MinuitWrapper *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MinuitWrapper; \ingroup TMVA; Wrapper around MINUIT; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx:162,Integrability,integrat,integrated,162,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MinuitWrapper *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MinuitWrapper; \ingroup TMVA; Wrapper around MINUIT; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx:807,Integrability,Wrap,Wrapper,807,"// @(#)root/tmva $Id$; // Author: Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MinuitWrapper *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MinuitWrapper; \ingroup TMVA; Wrapper around MINUIT; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx:221,Modifiability,variab,variable,221,"////////////////////////////////////////////////////////////////////////////////; /// return global fit parameters; /// - amin : chisquare; /// - edm : estimated distance to minimum; /// - errdef; /// - nvpar : number of variable parameters; /// - nparx : total number of parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx:101,Availability,error,errors,101,"////////////////////////////////////////////////////////////////////////////////; /// return current errors for a parameter; /// - ipar : parameter number; /// - eplus : upper error; /// - eminus : lower error; /// - eparab : parabolic error; /// - globcc : global correlation coefficient",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx:176,Availability,error,error,176,"////////////////////////////////////////////////////////////////////////////////; /// return current errors for a parameter; /// - ipar : parameter number; /// - eplus : upper error; /// - eminus : lower error; /// - eparab : parabolic error; /// - globcc : global correlation coefficient",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx:204,Availability,error,error,204,"////////////////////////////////////////////////////////////////////////////////; /// return current errors for a parameter; /// - ipar : parameter number; /// - eplus : upper error; /// - eminus : lower error; /// - eparab : parabolic error; /// - globcc : global correlation coefficient",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx:236,Availability,error,error,236,"////////////////////////////////////////////////////////////////////////////////; /// return current errors for a parameter; /// - ipar : parameter number; /// - eplus : upper error; /// - eminus : lower error; /// - eparab : parabolic error; /// - globcc : global correlation coefficient",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx:245,Availability,error,error,245,"////////////////////////////////////////////////////////////////////////////////; /// set initial values for a parameter; /// - ipar : parameter number; /// - parname : parameter name; /// - value : initial parameter value; /// - verr : initial error for this parameter; /// - vlow : lower value for the parameter; /// - vhigh : upper value for the parameter",MatchSource.CODE_COMMENT,tmva/tmva/src/MinuitWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MisClassificationError.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MisClassificationError *; * *; * *; * Description: Implementation of the MisClassificationError as separation *; * criterion: 1-max(p, 1-p) as; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MisClassificationError; \ingroup TMVA; Implementation of the MisClassificationError as separation criterion; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MisClassificationError.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MisClassificationError.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MisClassificationError.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MisClassificationError *; * *; * *; * Description: Implementation of the MisClassificationError as separation *; * criterion: 1-max(p, 1-p) as; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MisClassificationError; \ingroup TMVA; Implementation of the MisClassificationError as separation criterion; */",MatchSource.CODE_COMMENT,tmva/tmva/src/MisClassificationError.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MisClassificationError.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MisClassificationError.cxx:104,Availability,error,error,104,"////////////////////////////////////////////////////////////////////////////////; /// Misclassification error criterion: 1-max(p, 1-p) (p: purity= s/(s+b))",MatchSource.CODE_COMMENT,tmva/tmva/src/MisClassificationError.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MisClassificationError.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ModulekNN *; * *; * *; * Description: *; * Implementation *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::kNN; \ingroup TMVA; kNN::Event describes point in input variable vector-space, with; additional functionality like distance between points; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ModulekNN *; * *; * *; * Description: *; * Implementation *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::kNN; \ingroup TMVA; kNN::Event describes point in input variable vector-space, with; additional functionality like distance between points; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:841,Modifiability,variab,variable,841,"// @(#)root/tmva $Id$; // Author: Rustem Ospanov; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ModulekNN *; * *; * *; * Description: *; * Implementation *; * *; * Author: *; * Rustem Ospanov <rustem@fnal.gov> - U. of Texas at Austin, USA *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::kNN; \ingroup TMVA; kNN::Event describes point in input variable vector-space, with; additional functionality like distance between points; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:3,Usability,clear,clear,3,"// clear event count",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:13,Modifiability,variab,variable,13,"// sort each variable for all events - needs this before Optimize() and ComputeMetric()",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:57,Performance,Optimiz,Optimize,57,"// sort each variable for all events - needs this before Optimize() and ComputeMetric()",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:19,Modifiability,variab,variable,19,"// sort again each variable for all events - needs this before Optimize(); // rescaling has changed variable values",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:100,Modifiability,variab,variable,100,"// sort again each variable for all events - needs this before Optimize(); // rescaling has changed variable values",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:63,Performance,Optimiz,Optimize,63,"// sort again each variable for all events - needs this before Optimize(); // rescaling has changed variable values",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:90,Modifiability,variab,variable,90,"// If odepth > 0 then fill first odepth levels; // with empty nodes that split separating variable in half for; // all child nodes. If odepth = 0 then split variable 0; // at the median (in half) and return it as root node",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:157,Modifiability,variab,variable,157,"// If odepth > 0 then fill first odepth levels; // with empty nodes that split separating variable in half for; // all child nodes. If odepth = 0 then split variable 0; // at the median (in half) and return it as root node",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:226,Modifiability,variab,variables,226,"////////////////////////////////////////////////////////////////////////////////; /// find in tree; /// if tree has been filled then search for nfind closest events; /// if metic (fVarScale map) is computed then rescale event variables; /// using previously computed width of variable distribution",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:276,Modifiability,variab,variable,276,"////////////////////////////////////////////////////////////////////////////////; /// find in tree; /// if tree has been filled then search for nfind closest events; /// if metic (fVarScale map) is computed then rescale event variables; /// using previously computed width of variable distribution",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:6,Modifiability,variab,variable,6,"// if variable widths are computed then rescale variable in this event; // to same widths as events in stored kd-tree",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:48,Modifiability,variab,variable,48,"// if variable widths are computed then rescale variable in this event; // to same widths as events in stored kd-tree",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:196,Modifiability,variab,variables,196,"////////////////////////////////////////////////////////////////////////////////; /// Optimize() balances binary tree for first odepth levels; /// for each depth we split sorted depth % dimension variables; /// into \f$ 2^{odepth} \f$ parts",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:86,Performance,Optimiz,Optimize,86,"////////////////////////////////////////////////////////////////////////////////; /// Optimize() balances binary tree for first odepth levels; /// for each depth we split sorted depth % dimension variables; /// into \f$ 2^{odepth} \f$ parts",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:116,Modifiability,variab,variable,116,"////////////////////////////////////////////////////////////////////////////////; /// compute scale factor for each variable (dimension) so that; /// distance is computed uniformly along each dimension; /// compute width of interval that includes (100 - 2*ifrac)% of events; /// below, assume that in fVar each vector of values is sorted",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:115,Modifiability,Variab,Variable,115,"// Rustem: please find a solution that does not use distance (it does not exist on solaris); // Log() << kINFO << ""Variable "" << vit->first; // << "" included "" << distance(beg_it, end_it) + 1; // << "" events: width = "" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << rpos - lpos; // << "", (min, max) = ("" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << lpos; // << "", "" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << rpos << "")"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:96,Testability,Log,Log,96,"// Rustem: please find a solution that does not use distance (it does not exist on solaris); // Log() << kINFO << ""Variable "" << vit->first; // << "" included "" << distance(beg_it, end_it) + 1; // << "" events: width = "" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << rpos - lpos; // << "", (min, max) = ("" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << lpos; // << "", "" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << rpos << "")"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:103,Modifiability,variab,variable,103,"////////////////////////////////////////////////////////////////////////////////; /// scale each event variable so that rms of variables is approximately 1.0; /// this allows comparisons of variables with distinct scales and units",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:127,Modifiability,variab,variables,127,"////////////////////////////////////////////////////////////////////////////////; /// scale each event variable so that rms of variables is approximately 1.0; /// this allows comparisons of variables with distinct scales and units",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:190,Modifiability,variab,variables,190,"////////////////////////////////////////////////////////////////////////////////; /// scale each event variable so that rms of variables is approximately 1.0; /// this allows comparisons of variables with distinct scales and units",MatchSource.CODE_COMMENT,tmva/tmva/src/ModulekNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:218,Deployability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MsgLogger *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Author: *; * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MsgLogger; \ingroup TMVA; ostringstream derivative to redirect and format output; */; // Local include(s):",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:218,Integrability,integrat,integrated,218,"// @(#)root/tmva $Id$; // Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MsgLogger *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Author: *; * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MsgLogger; \ingroup TMVA; ostringstream derivative to redirect and format output; */; // Local include(s):",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:25,Modifiability,variab,variables,25,"// declaration of global variables; // this is the hard-coded maximum length of the source names",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:95,Testability,log,logger,95,"////////////////////////////////////////////////////////////////////////////////; /// the full logger prefix",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:100,Testability,log,logger,100,"////////////////////////////////////////////////////////////////////////////////; /// activates the logger writer",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:13,Integrability,message,message,13,"// slice the message into lines:",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:19,Integrability,message,messages,19,"// To always print messages that have no level specified...",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:117,Integrability,message,message,117,"////////////////////////////////////////////////////////////////////////////////; /// putting the output string, the message type, and the color; /// switcher together into a single string",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:34,Availability,error,error,34,"// take decision to stop if fatal error",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:19,Testability,assert,assert,19,"//std::exit(1);; //assert(false);",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:97,Integrability,message,message,97,"////////////////////////////////////////////////////////////////////////////////; /// Create the message type and color maps",MatchSource.CODE_COMMENT,tmva/tmva/src/MsgLogger.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:70,Deployability,update,update,70,/** \brief action to be done when the training cycle is started (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:82,Energy Efficiency,monitor,monitoring,82,/** \brief action to be done when the training cycle is started (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:68,Deployability,update,update,68,/** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:80,Energy Efficiency,monitor,monitoring,80,/** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:2,Availability,error,error,2,/*error*/,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:74,Deployability,update,update,74,/** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:86,Energy Efficiency,monitor,monitoring,86,/** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:56,Testability,test,test,56,/** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:2,Availability,error,error,2,/*error*/,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:66,Deployability,update,update,66,/** \brief action to be done when the test cycle is started (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:78,Energy Efficiency,monitor,monitoring,78,/** \brief action to be done when the test cycle is started (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:38,Testability,test,test,38,/** \brief action to be done when the test cycle is started (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:68,Deployability,update,update,68,/** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:80,Energy Efficiency,monitor,monitoring,80,/** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:79,Testability,test,testError,79,"// std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; // << "" current convergence count "" << m_convergenceCount << std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:65,Energy Efficiency,monitor,monitoring,65,/** \brief set the weight sums to be scaled to (preparations for monitoring output); *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:27,Energy Efficiency,monitor,monitoring,27,/** \brief preparation for monitoring output; *; */,MatchSource.CODE_COMMENT,tmva/tmva/src/NeuralNet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Node.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Classes: Node *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * CopyRight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Node; \ingroup TMVA; Node for the BinarySearch or Decision Trees. For the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. In case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Node.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Node.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Node.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Classes: Node *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * CopyRight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Node; \ingroup TMVA; Node for the BinarySearch or Decision Trees. For the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. In case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Node.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Node.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Node.cxx:1244,Modifiability,variab,variable,1244,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Classes: Node *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * CopyRight (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Node; \ingroup TMVA; Node for the BinarySearch or Decision Trees. For the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. In case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Node.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Node.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : OptimizeConfigParameters *; * *; * *; * Description: The OptimizeConfigParameters takes care of ""scanning/fitting"" *; * different tuning parameters in order to find the best set of *; * tuning paraemters which will be used in the end *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/; /*! \class TMVA::OptimizeConfigParameters; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : OptimizeConfigParameters *; * *; * *; * Description: The OptimizeConfigParameters takes care of ""scanning/fitting"" *; * different tuning parameters in order to find the best set of *; * tuning paraemters which will be used in the end *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/; /*! \class TMVA::OptimizeConfigParameters; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:192,Performance,Optimiz,OptimizeConfigParameters,192,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : OptimizeConfigParameters *; * *; * *; * Description: The OptimizeConfigParameters takes care of ""scanning/fitting"" *; * different tuning parameters in order to find the best set of *; * tuning paraemters which will be used in the end *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/; /*! \class TMVA::OptimizeConfigParameters; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:249,Performance,Optimiz,OptimizeConfigParameters,249,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : OptimizeConfigParameters *; * *; * *; * Description: The OptimizeConfigParameters takes care of ""scanning/fitting"" *; * different tuning parameters in order to find the best set of *; * tuning paraemters which will be used in the end *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/; /*! \class TMVA::OptimizeConfigParameters; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:909,Performance,Optimiz,OptimizeConfigParameters,909,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : OptimizeConfigParameters *; * *; * *; * Description: The OptimizeConfigParameters takes care of ""scanning/fitting"" *; * different tuning parameters in order to find the best set of *; * tuning paraemters which will be used in the end *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://ttmva.sourceforge.net/LICENSE) *; **********************************************************************************/; /*! \class TMVA::OptimizeConfigParameters; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:113,Performance,Optimiz,OptimizeConfigParameters,113,"////////////////////////////////////////////////////////////////////////////////; /// the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it)",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:100,Performance,optimiz,optimization,100,"////////////////////////////////////////////////////////////////////////////////; /// do the actual optimization using a simple scan method,; /// i.e. calculate the FOM for; /// different tuning paraemters and remember which one is; /// gave the best FOM",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:121,Usability,simpl,simple,121,"////////////////////////////////////////////////////////////////////////////////; /// do the actual optimization using a simple scan method,; /// i.e. calculate the FOM for; /// different tuning paraemters and remember which one is; /// gave the best FOM",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:158,Performance,tune,tune,158,"// now loop over all the parameters and get for each combination the figure of merit; // in order to loop over all the parameters, I first create an ""array"" (tune parameters); // of arrays (the different values of the tune parameter)",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:218,Performance,tune,tune,218,"// now loop over all the parameters and get for each combination the figure of merit; // in order to loop over all the parameters, I first create an ""array"" (tune parameters); // of arrays (the different values of the tune parameter)",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:132,Performance,tune,tuneParameters,132,"// like this the order is ""right"". Always keep the; // order in the vector ""pars"" the same as the iterator; // iterates through the tuneParameters !!!!",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:46,Modifiability,variab,variables,46,"// added to allow for transformation on input variables i.e. norm",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:3,Performance,perform,perform,3,"// perform the fit",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:142,Integrability,interface,interface,142,"////////////////////////////////////////////////////////////////////////////////; /// return the estimator (from current FOM) for the fitting interface",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:28,Performance,Tune,Tuneparameter,28,"// map ""pars"" to the map of Tuneparameter, make sure; // you never screw up this order!!",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:146,Performance,optimiz,optimization,146,"////////////////////////////////////////////////////////////////////////////////; /// Return the Figure of Merit (FOM) used in the parameter; /// optimization process",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:74,Testability,log,log,74,"// std::cout << ""fom=""<<fom<<std::endl; // should write that into a debug log (as option)",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:190,Testability,Test,TestClassifier,190,"// maybe later on this should be done a bit more clever (time consuming) by; // first determining proper ranges, removing outliers, as we do in the; // MVA output calculation in MethodBase::TestClassifier...; // --> then it might be possible also to use the splined PDF's which currently; // doesn't seem to work",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:268,Availability,reliab,reliably,268,"////////////////////////////////////////////////////////////////////////////////; /// calculate the area (integral) under the ROC curve as a; /// overall quality measure of the classification; ///; /// making pdfs out of the MVA-output distributions doesn't work; /// reliably for cases where the MVA-output isn't a smooth distribution.; /// this happens ""frequently"" in BDTs for example when the number of; /// trees is small resulting in only some discrete possible MVA output values.; /// (I still leave the code here, but use this with care!!! The default; /// however is to use the distributions!!!",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:137,Modifiability,variab,variable,137,"// get the true signal integral (ComputeIntegral just return 1 as they; // automatically normalize. IN ADDITION, they do not account for variable; // bin sizes (which you might perhaps use later on for the fMvaSig/Bkg histograms)",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:59,Modifiability,variab,variable,59,"//gTools().NormHist( fMvaSigFineBin ); // also doesn't use variable bin width. And calls TH1::Scale, which oddly enough does not change the SumOfWeights !!!",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:162,Energy Efficiency,adapt,adapted,162,"////////////////////////////////////////////////////////////////////////////////; /// calculate the background efficiency for a given signal efficiency; ///; /// adapted by marc-olivier.bettler@cern.ch",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:162,Modifiability,adapt,adapted,162,"////////////////////////////////////////////////////////////////////////////////; /// calculate the background efficiency for a given signal efficiency; ///; /// adapted by marc-olivier.bettler@cern.ch",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:161,Energy Efficiency,adapt,adapted,161,"////////////////////////////////////////////////////////////////////////////////; /// calculate the background rejection for a given signal efficiency; ///; /// adapted by marc-olivier.bettler@cern.ch",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:161,Modifiability,adapt,adapted,161,"////////////////////////////////////////////////////////////////////////////////; /// calculate the background rejection for a given signal efficiency; ///; /// adapted by marc-olivier.bettler@cern.ch",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/OptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Option.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Option *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::OptionBase; \ingroup TMVA; Class for TMVA-option handling; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Option.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Option.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Option.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Option *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::OptionBase; \ingroup TMVA; Class for TMVA-option handling; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Option.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Option.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Option.cxx:3,Integrability,message,message,3,"// message logger",MatchSource.CODE_COMMENT,tmva/tmva/src/Option.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Option.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Option.cxx:11,Testability,log,logger,11,"// message logger",MatchSource.CODE_COMMENT,tmva/tmva/src/Option.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Option.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:205,Deployability,integrat,integrated,205,"// @(#)root/tmva $Id$; // Author: S.Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoam *; * *; * *; * Description: *; * Implementations *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoam; \ingroup TMVA. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estima",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:1630,Deployability,integrat,integration,1630,"Implementations *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoam; \ingroup TMVA. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:1106,Energy Efficiency,adapt,adapting,1106,"*******************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoam *; * *; * *; * Description: *; * Implementations *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoam; \ingroup TMVA. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order ",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:1530,Energy Efficiency,efficient,efficient,1530,"Implementations *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoam; \ingroup TMVA. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:205,Integrability,integrat,integrated,205,"// @(#)root/tmva $Id$; // Author: S.Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoam *; * *; * *; * Description: *; * Implementations *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoam; \ingroup TMVA. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estima",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:1630,Integrability,integrat,integration,1630,"Implementations *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoam; \ingroup TMVA. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:1739,Integrability,interface,interface,1739,"Implementations *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoam; \ingroup TMVA. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:1106,Modifiability,adapt,adapting,1106,"*******************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoam *; * *; * *; * Description: *; * Implementations *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoam; \ingroup TMVA. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order ",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:340,Modifiability,variab,variables,340,"////////////////////////////////////////////////////////////////////////////////; /// Basic initialization of FOAM invoked by the user.; /// IMPORTANT: Random number generator and the distribution object has to be; /// provided using SetPseRan and SetRho prior to invoking this initializator!; ///; /// After the foam is grown, space for 2 variables is reserved in; /// every cell. They are used for filling the foam cells.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:78,Energy Efficiency,ALLOCATE,ALLOCATE,78,"/////////////////////////////////////////////////////////////////////////; // ALLOCATE SMALL LISTS //; // it is done globally, not for each cell, to save on allocation time //; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:45,Usability,simpl,simplex,45,"// sum<1 for internal parametrization of the simplex",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:17,Availability,mask,mask,17,"//====== Dynamic mask used in Explore for edge determination",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate BIG list of cells",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:176,Energy Efficiency,allocate,allocated,176,"//InitCells; ////////////////////////////////////////////////////////////////////////////////; /// Internal subprogram used by Create.; /// It initializes content of the newly allocated active cell.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:662,Deployability,update,updated,662,"////////////////////////////////////////////////////////////////////////////////; /// Internal subprogram used by Create.; /// It explores newly defined cell with help of special short MC sampling.; /// As a result, estimates of kTRUE and drive volume is defined/determined; /// Average and dispersion of the weight distribution will is found along; /// each edge and the best edge (minimum dispersion, best maximum weight); /// is memorized for future use.; /// The optimal division point for eventual future cell division is; /// determined/recorded. Recorded are also minimum and maximum weight etc.; /// The volume estimate in all (inactive) parent cells is updated.; /// Note that links to parents and initial volume = 1/2 parent has to be; /// already defined prior to calling this routine.; ///; /// If fNmin > 0 then the total number of (training) events found in; /// the cell during the exploration is stored in the cell. This; /// information is used within PeekMax() to avoid splitting cells; /// which contain less than fNmin events.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:788,Integrability,rout,routine,788,"////////////////////////////////////////////////////////////////////////////////; /// Internal subprogram used by Create.; /// It explores newly defined cell with help of special short MC sampling.; /// As a result, estimates of kTRUE and drive volume is defined/determined; /// Average and dispersion of the weight distribution will is found along; /// each edge and the best edge (minimum dispersion, best maximum weight); /// is memorized for future use.; /// The optimal division point for eventual future cell division is; /// determined/recorded. Recorded are also minimum and maximum weight etc.; /// The volume estimate in all (inactive) parent cells is updated.; /// Note that links to parents and initial volume = 1/2 parent has to be; /// already defined prior to calling this routine.; ///; /// If fNmin > 0 then the total number of (training) events found in; /// the cell during the exploration is stored in the cell. This; /// information is used within PeekMax() to avoid splitting cells; /// which contain less than fNmin events.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:982,Safety,avoid,avoid,982,"////////////////////////////////////////////////////////////////////////////////; /// Internal subprogram used by Create.; /// It explores newly defined cell with help of special short MC sampling.; /// As a result, estimates of kTRUE and drive volume is defined/determined; /// Average and dispersion of the weight distribution will is found along; /// each edge and the best edge (minimum dispersion, best maximum weight); /// is memorized for future use.; /// The optimal division point for eventual future cell division is; /// determined/recorded. Recorded are also minimum and maximum weight etc.; /// The volume estimate in all (inactive) parent cells is updated.; /// Note that links to parents and initial volume = 1/2 parent has to be; /// already defined prior to calling this routine.; ///; /// If fNmin > 0 then the total number of (training) events found in; /// the cell during the exploration is stored in the cell. This; /// information is used within PeekMax() to avoid splitting cells; /// which contain less than fNmin events.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:22,Testability,test,test,22,"// maximum weight; // test MC loop exit condition",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:86,Testability,log,logics,86,"//------------------------------------------------------------------; //--- predefine logics of searching for the best division edge ---",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:11,Deployability,update,update,11,"// correct/update integrals in all parent cells to the top of the tree",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:23,Performance,load,load,23,"// simply generate and load kDim uniform random numbers",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:3,Usability,simpl,simply,3,"// simply generate and load kDim uniform random numbers",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:41,Safety,avoid,avoids,41,"// only split cells if gain>0 (this also avoids splitting at cell boundary)",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:359,Deployability,update,updated,359,"////////////////////////////////////////////////////////////////////////////////; /// Internal subprogram used by Create.; /// It divides cell iCell into two daughter cells.; /// The iCell is retained and tagged as inactive, daughter cells are appended; /// at the end of the buffer.; /// New vertex is added to list of vertices.; /// List of active cells is updated, iCell removed, two daughters added; /// and their properties set with help of MC sampling (PDEFoam_Explore); /// Returns Code RC=-1 of buffer limit is reached, fLastCe=fnBuf.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:13,Modifiability,variab,variable,13,"// Transform variable xRand, since Foam boundaries are [0,1] and; // fDistr is filled with events which range in [fXmin,fXmax]; //; // Transformation: [0, 1] --> [xmin, xmax]",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:170,Modifiability,variab,variables,170,"// Grow; ////////////////////////////////////////////////////////////////////////////////; /// This can be called before Create, after setting kDim; /// It defines which variables are excluded in the process of the cell division.; /// For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:297,Modifiability,variab,variable,297,"// Grow; ////////////////////////////////////////////////////////////////////////////////; /// This can be called before Create, after setting kDim; /// It defines which variables are excluded in the process of the cell division.; /// For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:245,Availability,failure,failures,245,"//SetInhiDiv; ////////////////////////////////////////////////////////////////////////////////; /// User utility, miscellaneous and debug.; /// Checks all pointers in the tree of cells. This is useful auto-diagnostic.; /// level=0, no printout, failures causes STOP; /// level=1, printout, failures lead to WARNINGS only",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:290,Availability,failure,failures,290,"//SetInhiDiv; ////////////////////////////////////////////////////////////////////////////////; /// User utility, miscellaneous and debug.; /// Checks all pointers in the tree of cells. This is useful auto-diagnostic.; /// level=0, no printout, failures causes STOP; /// level=1, printout, failures lead to WARNINGS only",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:350,Modifiability,variab,variables,350,"////////////////////////////////////////////////////////////////////////////////; /// This function finds the cell, which corresponds to the given; /// untransformed event vector 'xvec' and return its value, which is; /// given by the parameter 'cv'. If kernel != NULL, then; /// PDEFoamKernelBase::Estimate() is called on the transformed event; /// variables.; ///; /// Parameters:; ///; /// - xvec - event vector (untransformed, [fXmin,fXmax]); ///; /// - cv - the cell value to return; ///; /// - kernel - PDEFoam kernel estimator. If NULL is given, than the; /// pure cell value is returned; ///; /// Return:; ///; /// The cell value, corresponding to 'xvec', estimated by the given; /// kernel.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:5,Availability,down,down,5,"//go down binary tree until cell is found",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:5,Availability,down,down,5,"//go down binary tree until cell is found",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:339,Modifiability,variab,variables,339,"////////////////////////////////////////////////////////////////////////////////; /// Find all cells, that contain txvec. This function can be used,; /// when the dimension of the foam is greater than the dimension of; /// txvec. E.g. this is the case for multi-target regression.; ///; /// Parameters:; ///; /// - txvec - event vector of variables, transformed into foam; /// coordinates [0,1]. The size of txvec can be smaller than the; /// dimension of the foam.; ///; /// Return value:; ///; /// - vector of cells, that fit txvec",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:3,Safety,avoid,avoid,3,"// avoid plotting of wrong dimensions",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:99,Modifiability,variab,variable,99,"////////////////////////////////////////////////////////////////////////////////; /// Project foam variable idim1 and variable idim2 to histogram.; ///; /// Parameters:; ///; /// - idim1, idim2 - dimensions to project to; ///; /// - cell_value - the cell value to draw; ///; /// - kernel - a PDEFoam kernel (optional). If NULL is given, the; /// kernel is ignored and the pure cell values are; /// plotted.; ///; /// - nbin - number of bins in x and y direction of result histogram; /// (optional, default is 50).; ///; /// Returns:; /// a 2-dimensional histogram",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:118,Modifiability,variab,variable,118,"////////////////////////////////////////////////////////////////////////////////; /// Project foam variable idim1 and variable idim2 to histogram.; ///; /// Parameters:; ///; /// - idim1, idim2 - dimensions to project to; ///; /// - cell_value - the cell value to draw; ///; /// - kernel - a PDEFoam kernel (optional). If NULL is given, the; /// kernel is ignored and the pure cell values are; /// plotted.; ///; /// - nbin - number of bins in x and y direction of result histogram; /// (optional, default is 50).; ///; /// Returns:; /// a 2-dimensional histogram",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:3,Safety,avoid,avoid,3,"// avoid plotting of wrong dimensions",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:25,Integrability,depend,depending,25,"// calculate cell value (depending on the given option 'cv')",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:120,Safety,avoid,avoid,120,"////////////////////////////////////////////////////////////////////////////////; /// Overridden function of PDEFoam to avoid native foam output.; /// Draw TMVA-process bar instead.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:1025,Performance,load,load,1025,"////////////////////////////////////////////////////////////////////////////////; /// Debugging tool which plots the cells of a 2-dimensional PDEFoam; /// as rectangles in C++ format readable for ROOT.; ///; /// Parameters:; /// - filename - filename of output root macro; ///; /// - opt - cell_value, rms, rms_ov_mean; /// If cell_value is set, the following values will be filled into; /// the result histogram:; /// - number of events - in case of classification with 2 separate; /// foams or multi-target regression; /// - discriminator - in case of classification with one; /// unified foam; /// - target - in case of mono-target regression; /// If none of {cell_value, rms, rms_ov_mean} is given, the cells; /// will not be filled.; /// If 'opt' contains the string 'cellnumber', the index of; /// each cell is draw in addition.; ///; /// - createCanvas - whether to create a new canvas or not; ///; /// - colors - whether to fill cells with colors or shades of grey; ///; /// Example:; ///; /// The following commands load a mono-target regression foam from; /// file 'foam.root' and create a ROOT macro 'output.C', which; /// draws all PDEFoam cells with little boxes. The latter are; /// filled with colors according to the target value stored in the; /// cell. Also the cell number is drawn.; ///; /// TFile file(""foam.root"");; /// TMVA::PDEFoam *foam = (TMVA::PDEFoam*) gDirectory->Get(""MonoTargetRegressionFoam"");; /// foam->RootPlot2dim(""output.C"",""cell_value,cellnumber"");; /// gROOT->Macro(""output.C"");",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamCell.cxx:205,Deployability,integrat,integrated,205,"// @(#)root/tmva $Id$; // Author: S.Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamCell *; * *; * *; * Description: *; * Objects of this class are hyperrectangular cells organized in *; * the binary tree. Special algoritm for encoding relative *; * positioning of the cells saves total memory allocation needed *; * for the system of cells. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamCell; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamCell.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamCell.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamCell.cxx:205,Integrability,integrat,integrated,205,"// @(#)root/tmva $Id$; // Author: S.Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamCell *; * *; * *; * Description: *; * Objects of this class are hyperrectangular cells organized in *; * the binary tree. Special algoritm for encoding relative *; * positioning of the cells saves total memory allocation needed *; * for the system of cells. *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamCell; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamCell.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamCell.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamCell.cxx:119,Energy Efficiency,allocate,allocated,119,"////////////////////////////////////////////////////////////////////////////////; /// Fills in certain data into newly allocated cell",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamCell.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamCell.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamCell.cxx:3,Performance,load,load,3,"// load all components",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamCell.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamCell.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamCell.cxx:3,Performance,load,load,3,"// load all components",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamCell.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamCell.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx:1182,Availability,error,error,1182,"// @(#)root/tmva $Id$; // Author: Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDecisionTree *; * *; * *; * Description: *; * Implementation of decision tree like PDEFoam *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDecisionTree; \ingroup TMVA. This PDEFoam variant acts like a decision tree and stores in every; cell the discriminant. D = #events with given class / total number of events. as well as the statistical error on the discriminant. It therefore; acts as a discriminant estimator. The decision tree-like behaviour; is achieved by overriding PDEFoamDiscriminant::Explore() to use a; decision tree-like cell splitting algorithm (given a separation; type). This PDEFoam variant should be booked together with the; PDEFoamDecisionTreeDensity density estimator, which returns the; events in a cell without sampling.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx:161,Deployability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDecisionTree *; * *; * *; * Description: *; * Implementation of decision tree like PDEFoam *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDecisionTree; \ingroup TMVA. This PDEFoam variant acts like a decision tree and stores in every; cell the discriminant. D = #events with given class / total number of events. as well as the statistical error on the discriminant. It therefore; acts as a discriminant estimator. The decision tree-like behaviour; is achieved by overriding PDEFoamDiscriminant::Explore() to use a; decision tree-like cell splitting algorithm (given a separation; type). This PDEFoam variant should be booked together with the; PDEFoamDecisionTreeDensity density estimator, which returns the; events in a cell without sampling.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx:161,Integrability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDecisionTree *; * *; * *; * Description: *; * Implementation of decision tree like PDEFoam *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDecisionTree; \ingroup TMVA. This PDEFoam variant acts like a decision tree and stores in every; cell the discriminant. D = #events with given class / total number of events. as well as the statistical error on the discriminant. It therefore; acts as a discriminant estimator. The decision tree-like behaviour; is achieved by overriding PDEFoamDiscriminant::Explore() to use a; decision tree-like cell splitting algorithm (given a separation; type). This PDEFoam variant should be booked together with the; PDEFoamDecisionTreeDensity density estimator, which returns the; events in a cell without sampling.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx:487,Integrability,rout,routine,487,"////////////////////////////////////////////////////////////////////////////////; /// Internal subprogram used by Create. It explores newly defined; /// cell with according to the decision tree logic. The separation; /// set via the 'sepType' option in the constructor.; ///; /// The optimal division point for eventual future cell division is; /// determined/recorded. Note that links to parents and initial; /// volume = 1/2 parent has to be already defined prior to calling; /// this routine.; ///; /// Note, that according to the decision tree logic, a cell is only; /// split, if the number of (unweighted) events in each daughter; /// cell is greater than fNmin.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx:194,Testability,log,logic,194,"////////////////////////////////////////////////////////////////////////////////; /// Internal subprogram used by Create. It explores newly defined; /// cell with according to the decision tree logic. The separation; /// set via the 'sepType' option in the constructor.; ///; /// The optimal division point for eventual future cell division is; /// determined/recorded. Note that links to parents and initial; /// volume = 1/2 parent has to be already defined prior to calling; /// this routine.; ///; /// Note, that according to the decision tree logic, a cell is only; /// split, if the number of (unweighted) events in each daughter; /// cell is greater than fNmin.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx:548,Testability,log,logic,548,"////////////////////////////////////////////////////////////////////////////////; /// Internal subprogram used by Create. It explores newly defined; /// cell with according to the decision tree logic. The separation; /// set via the 'sepType' option in the constructor.; ///; /// The optimal division point for eventual future cell division is; /// determined/recorded. Note that links to parents and initial; /// volume = 1/2 parent has to be already defined prior to calling; /// this routine.; ///; /// Note, that according to the decision tree logic, a cell is only; /// split, if the number of (unweighted) events in each daughter; /// cell is greater than fNmin.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDecisionTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx:161,Deployability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDecisionTreeDensity *; * *; * *; * Description: *; * This class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamDecisionTreeDensity::Density() *; * does this job. It uses a binary search tree, filled with training *; * events, in order to provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDecisionTreeDensity; \ingroup TMVA. This is a concrete implementation of PDEFoam. The Density(...); function returns allways 0. The function FillHistograms() is; added, which returns all events in a given TMVA::Volume.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx:161,Integrability,integrat,integrated,161,"// @(#)root/tmva $Id$; // Author: Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDecisionTreeDensity *; * *; * *; * Description: *; * This class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamDecisionTreeDensity::Density() *; * does this job. It uses a binary search tree, filled with training *; * events, in order to provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDecisionTreeDensity; \ingroup TMVA. This is a concrete implementation of PDEFoam. The Density(...); function returns allways 0. The function FillHistograms() is; added, which returns all events in a given TMVA::Volume.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx:327,Integrability,interface,interface,327,"// @(#)root/tmva $Id$; // Author: Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDecisionTreeDensity *; * *; * *; * Description: *; * This class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamDecisionTreeDensity::Density() *; * does this job. It uses a binary search tree, filled with training *; * events, in order to provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDecisionTreeDensity; \ingroup TMVA. This is a concrete implementation of PDEFoam. The Density(...); function returns allways 0. The function FillHistograms() is; added, which returns all events in a given TMVA::Volume.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDensityBase *; * *; * *; * Description: *; * This class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamDensityBase::Density() does this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDensityBase; \ingroup TMVA. This is an abstract class, which provides an interface for a; PDEFoam density estimator. Derived classes have to implement the; Density(...) function, which returns the density of a certain; quantity at a given phase-space point during the foam build-up. Variants of PDEFoamDensityBase are:. - PDEFoamEventDensity; - PDEFoamDiscriminantDensity; - PDEFoamTargetDensity; - PDEFoamDecisionTreeDensity. Usage:. The user has to instantiate a child class of PDEFoamDensityBase and; set the pointer to the owner, which is a PDEFoam object:. PDEFoamDensityBase *dens = new MyDensity();; pdefoam->SetDensity(dens);. Aft",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDensityBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDensityBase *; * *; * *; * Description: *; * This class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamDensityBase::Density() does this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDensityBase; \ingroup TMVA. This is an abstract class, which provides an interface for a; PDEFoam density estimator. Derived classes have to implement the; Density(...) function, which returns the density of a certain; quantity at a given phase-space point during the foam build-up. Variants of PDEFoamDensityBase are:. - PDEFoamEventDensity; - PDEFoamDiscriminantDensity; - PDEFoamTargetDensity; - PDEFoamDecisionTreeDensity. Usage:. The user has to instantiate a child class of PDEFoamDensityBase and; set the pointer to the owner, which is a PDEFoam object:. PDEFoamDensityBase *dens = new MyDensity();; pdefoam->SetDensity(dens);. Aft",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDensityBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx:353,Integrability,interface,interface,353,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDensityBase *; * *; * *; * Description: *; * This class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamDensityBase::Density() does this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDensityBase; \ingroup TMVA. This is an abstract class, which provides an interface for a; PDEFoam density estimator. Derived classes have to implement the; Density(...) function, which returns the density of a certain; quantity at a given phase-space point during the foam build-up. Variants of PDEFoamDensityBase are:. - PDEFoamEventDensity; - PDEFoamDiscriminantDensity; - PDEFoamTargetDensity; - PDEFoamDecisionTreeDensity. Usage:. The user has to instantiate a child class of PDEFoamDensityBase and; set the pointer to the owner, which is a PDEFoam object:. PDEFoamDensityBase *dens = new MyDensity();; pdefoam->SetDensity(dens);. Aft",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDensityBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx:1436,Integrability,interface,interface,1436,"; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDensityBase *; * *; * *; * Description: *; * This class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamDensityBase::Density() does this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDensityBase; \ingroup TMVA. This is an abstract class, which provides an interface for a; PDEFoam density estimator. Derived classes have to implement the; Density(...) function, which returns the density of a certain; quantity at a given phase-space point during the foam build-up. Variants of PDEFoamDensityBase are:. - PDEFoamEventDensity; - PDEFoamDiscriminantDensity; - PDEFoamTargetDensity; - PDEFoamDecisionTreeDensity. Usage:. The user has to instantiate a child class of PDEFoamDensityBase and; set the pointer to the owner, which is a PDEFoam object:. PDEFoamDensityBase *dens = new MyDensity();; pdefoam->SetDensity(dens);. Afterwards the binary search tree should be filled with TMVA; events, by either using:. pdefoam->FillBinarySearchTree(event);. or:. dens->FillBinarySearchTree(event);; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDensityBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx:26,Modifiability,variab,variables,26,"// set periode (number of variables) of binary search tree",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDensityBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:1162,Availability,error,error,1162,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminant *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDiscriminant; \ingroup TMVA. This PDEFoam variant stores in every cell the discriminant. D = #events with given class / total number of events. as well as the statistical error on the discriminant. It therefore; acts as a discriminant estimator. It should be booked together; with the PDEFoamDiscriminantDensity density estimator, which; returns the discriminant density at a given phase space point; during the foam build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminant.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminant *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDiscriminant; \ingroup TMVA. This PDEFoam variant stores in every cell the discriminant. D = #events with given class / total number of events. as well as the statistical error on the discriminant. It therefore; acts as a discriminant estimator. It should be booked together; with the PDEFoamDiscriminantDensity density estimator, which; returns the discriminant density at a given phase space point; during the foam build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminant.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminant *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDiscriminant; \ingroup TMVA. This PDEFoam variant stores in every cell the discriminant. D = #events with given class / total number of events. as well as the statistical error on the discriminant. It therefore; acts as a discriminant estimator. It should be booked together; with the PDEFoamDiscriminantDensity density estimator, which; returns the discriminant density at a given phase space point; during the foam build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminant.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:113,Availability,error,error,113,"////////////////////////////////////////////////////////////////////////////////; /// Calc discriminator and its error for every cell and save it to; /// the cell.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminant.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:16,Availability,error,error,16,"// discriminant error",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminant.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:21,Availability,error,error,21,"// set discriminator error",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminant.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:99,Modifiability,variab,variable,99,"////////////////////////////////////////////////////////////////////////////////; /// Project foam variable idim1 and variable idim2 to histogram.; /// The projection algorithm is modified such that the z axis range; /// of the returned histogram is [0, 1], as necessary for the; /// interpretation as a discriminator. This is done by weighting; /// the cell values (in case of cell_value = kValue) by the cell; /// volume in all dimensions, excluding 'idim1' and 'idim2'.; ///; /// Parameters:; ///; /// - idim1, idim2 - dimensions to project to; ///; /// - cell_value - the cell value to draw; ///; /// - kernel - a PDEFoam kernel (optional). If NULL is given, the; /// kernel is ignored and the pure cell values are; /// plotted.; ///; /// - nbin - number of bins in x and y direction of result histogram; /// (optional, default is 50).; ///; /// Returns:; /// a 2-dimensional histogram",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminant.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:118,Modifiability,variab,variable,118,"////////////////////////////////////////////////////////////////////////////////; /// Project foam variable idim1 and variable idim2 to histogram.; /// The projection algorithm is modified such that the z axis range; /// of the returned histogram is [0, 1], as necessary for the; /// interpretation as a discriminator. This is done by weighting; /// the cell values (in case of cell_value = kValue) by the cell; /// volume in all dimensions, excluding 'idim1' and 'idim2'.; ///; /// Parameters:; ///; /// - idim1, idim2 - dimensions to project to; ///; /// - cell_value - the cell value to draw; ///; /// - kernel - a PDEFoam kernel (optional). If NULL is given, the; /// kernel is ignored and the pure cell values are; /// plotted.; ///; /// - nbin - number of bins in x and y direction of result histogram; /// (optional, default is 50).; ///; /// Returns:; /// a 2-dimensional histogram",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminant.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:3,Safety,avoid,avoid,3,"// avoid plotting of wrong dimensions",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminant.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminantDensity.cxx:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminantDensity *; * *; * *; * Description: *; * The TFDSITR class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamDiscriminantDensity::Density() does this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDiscriminantDensity; \ingroup TMVA. This is a concrete implementation of PDEFoam. Density(...); estimates the discriminant density at a given phase-space point; using range-searching. The discriminant D is defined as. D = #events with given class / total number of events; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminantDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminantDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminantDensity.cxx:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminantDensity *; * *; * *; * Description: *; * The TFDSITR class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamDiscriminantDensity::Density() does this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDiscriminantDensity; \ingroup TMVA. This is a concrete implementation of PDEFoam. Density(...); estimates the discriminant density at a given phase-space point; using range-searching. The discriminant D is defined as. D = #events with given class / total number of events; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminantDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminantDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminantDensity.cxx:368,Integrability,interface,interface,368,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamDiscriminantDensity *; * *; * *; * Description: *; * The TFDSITR class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamDiscriminantDensity::Density() does this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamDiscriminantDensity; \ingroup TMVA. This is a concrete implementation of PDEFoam. Density(...); estimates the discriminant density at a given phase-space point; using range-searching. The discriminant D is defined as. D = #events with given class / total number of events; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamDiscriminantDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminantDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamEvent.cxx:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamEvent *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamEvent; \ingroup TMVA; This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. It therefore acts as; event density estimator. It should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamEvent.cxx:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamEvent *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamEvent; \ingroup TMVA; This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. It therefore acts as; event density estimator. It should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamEventDensity.cxx:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamEventDensity *; * *; * *; * Description: *; * The TFDSITR class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamEventDensity::Density() does *; * this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamEventDensity; \ingroup TMVA; This is a concrete implementation of PDEFoam. Density(...); estimates the event (weight) density at a given phase-space point; using range-searching.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamEventDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamEventDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamEventDensity.cxx:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamEventDensity *; * *; * *; * Description: *; * The TFDSITR class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamEventDensity::Density() does *; * this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamEventDensity; \ingroup TMVA; This is a concrete implementation of PDEFoam. Density(...); estimates the event (weight) density at a given phase-space point; using range-searching.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamEventDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamEventDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamEventDensity.cxx:361,Integrability,interface,interface,361,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamEventDensity *; * *; * *; * Description: *; * The TFDSITR class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamEventDensity::Density() does *; * this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamEventDensity; \ingroup TMVA; This is a concrete implementation of PDEFoam. Density(...); estimates the event (weight) density at a given phase-space point; using range-searching.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamEventDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamEventDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelBase.cxx:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelBase *; * *; * *; * Description: *; * Implementation of PDEFoam kernel interface *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamKernelBase; \ingroup TMVA; This class is the abstract kernel interface for PDEFoam. The; kernel can be used for manipulating (smearing) the cell values of a; PDEFoam, by passing it as an argument to; PDEFoam::GetCellValue(...). Derived classes must implement the Estimate() function to provide a; specific kernel behaviour.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelBase.cxx:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelBase *; * *; * *; * Description: *; * Implementation of PDEFoam kernel interface *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamKernelBase; \ingroup TMVA; This class is the abstract kernel interface for PDEFoam. The; kernel can be used for manipulating (smearing) the cell values of a; PDEFoam, by passing it as an argument to; PDEFoam::GetCellValue(...). Derived classes must implement the Estimate() function to provide a; specific kernel behaviour.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelBase.cxx:346,Integrability,interface,interface,346,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelBase *; * *; * *; * Description: *; * Implementation of PDEFoam kernel interface *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamKernelBase; \ingroup TMVA; This class is the abstract kernel interface for PDEFoam. The; kernel can be used for manipulating (smearing) the cell values of a; PDEFoam, by passing it as an argument to; PDEFoam::GetCellValue(...). Derived classes must implement the Estimate() function to provide a; specific kernel behaviour.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelBase.cxx:1013,Integrability,interface,interface,1013,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelBase *; * *; * *; * Description: *; * Implementation of PDEFoam kernel interface *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamKernelBase; \ingroup TMVA; This class is the abstract kernel interface for PDEFoam. The; kernel can be used for manipulating (smearing) the cell values of a; PDEFoam, by passing it as an argument to; PDEFoam::GetCellValue(...). Derived classes must implement the Estimate() function to provide a; specific kernel behaviour.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelGauss.cxx:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelGauss *; * *; * *; * Description: *; * Implementation of gauss PDEFoam kernel *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamKernelGauss; \ingroup TMVA; This PDEFoam kernel estimates a cell value for a given event by; weighting all cell values with a gauss function.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelGauss.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelGauss.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelGauss.cxx:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelGauss *; * *; * *; * Description: *; * Implementation of gauss PDEFoam kernel *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamKernelGauss; \ingroup TMVA; This PDEFoam kernel estimates a cell value for a given event by; weighting all cell values with a gauss function.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelGauss.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelGauss.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelGauss.cxx:249,Modifiability,variab,variables,249,"////////////////////////////////////////////////////////////////////////////////; /// Returns the gauss weight between the 'cell' and a given coordinate 'txvec'.; ///; /// Parameters:; /// - cell - the cell; ///; /// - txvec - the transformed event variables (in [0,1]) (coordinates <0 are; /// set to 0, >1 are set to 1); ///; /// Returns:; ///; /// \f[; /// e^(\frac{-(\frac{d}{\sigma})^2}{2}); /// \f]; ///; /// where:; /// - d - is the euclidean distance between 'txvec' and the point of the 'cell'; /// which is most close to 'txvec' (in order to avoid artefacts because of the; /// form of the cells).; /// - \f$ sigma = \frac{1}{VolFrac} \f$",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelGauss.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelGauss.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelGauss.cxx:552,Safety,avoid,avoid,552,"////////////////////////////////////////////////////////////////////////////////; /// Returns the gauss weight between the 'cell' and a given coordinate 'txvec'.; ///; /// Parameters:; /// - cell - the cell; ///; /// - txvec - the transformed event variables (in [0,1]) (coordinates <0 are; /// set to 0, >1 are set to 1); ///; /// Returns:; ///; /// \f[; /// e^(\frac{-(\frac{d}{\sigma})^2}{2}); /// \f]; ///; /// where:; /// - d - is the euclidean distance between 'txvec' and the point of the 'cell'; /// which is most close to 'txvec' (in order to avoid artefacts because of the; /// form of the cells).; /// - \f$ sigma = \frac{1}{VolFrac} \f$",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelGauss.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelGauss.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelLinN.cxx:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelLinN *; * *; * *; * Description: *; * Implementation of linear neighbors PDEFoam kernel *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamKernelLinN; \ingroup TMVA; This PDEFoam kernel estimates a cell value for a given event by; weighting with cell values of the nearest neighbor cells.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelLinN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelLinN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelLinN.cxx:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelLinN *; * *; * *; * Description: *; * Implementation of linear neighbors PDEFoam kernel *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamKernelLinN; \ingroup TMVA; This PDEFoam kernel estimates a cell value for a given event by; weighting with cell values of the nearest neighbor cells.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelLinN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelLinN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelTrivial.cxx:179,Deployability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelTrivial *; * *; * *; * Description: *; * Implementation of trivial PDEFoam kernel *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamKernelTrivial; \ingroup TMVA; This class is a trivial PDEFoam kernel estimator. The Estimate(); function returns the cell value, given an event 'txvec'.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelTrivial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelTrivial.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelTrivial.cxx:179,Integrability,integrat,integrated,179,"// @(#)root/tmva $Id$; // Author: Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamKernelTrivial *; * *; * *; * Description: *; * Implementation of trivial PDEFoam kernel *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamKernelTrivial; \ingroup TMVA; This class is a trivial PDEFoam kernel estimator. The Estimate(); function returns the cell value, given an event 'txvec'.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelTrivial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelTrivial.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelTrivial.cxx:86,Usability,Simpl,Simple,86,"////////////////////////////////////////////////////////////////////////////////; /// Simple kernel estimator. It returns the cell value 'cv',; /// corresponding to the event vector 'txvec' (in foam coordinates).; ///; /// Parameters:; ///; /// - foam - the pdefoam to search in; ///; /// - txvec - event vector in foam coordinates [0,1]; ///; /// - cv - cell value to estimate",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamKernelTrivial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelTrivial.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamMultiTarget *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamMultiTarget; \ingroup TMVA; This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamMultiTarget *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamMultiTarget; \ingroup TMVA; This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:1565,Integrability,depend,depending,1565,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamMultiTarget *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamMultiTarget; \ingroup TMVA; This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:1171,Modifiability,variab,variables,1171,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamMultiTarget *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamMultiTarget; \ingroup TMVA; This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:1362,Modifiability,variab,variables,1362,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamMultiTarget *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamMultiTarget; \ingroup TMVA; This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:1405,Modifiability,variab,variables,1405,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamMultiTarget *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamMultiTarget; \ingroup TMVA; This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:497,Modifiability,variab,variable,497,"////////////////////////////////////////////////////////////////////////////////; /// User constructor; ///; /// Parameters:; ///; /// - name - name of PDEFoam object; ///; /// - ts - target selection method used in; /// GetCellValue(const std::map<Int_t, Float_t>& xvec, ECellValue); /// Candidates are: TMVA::kMean, TMVA::kMpv; ///; /// - TMVA::kMean - The function GetCellValue() finds all cells; /// which contain a given event vector 'xvec' and returns the; /// mean target (for every target variable in the foam).; ///; /// - TMVA::kMpv - The function GetCellValue() finds all cells; /// which contain a given event vector 'xvec' and returns the; /// most probable target (for every target variable in the; /// foam), that is the target value which corresponds to the; /// cell with the largest event density.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:696,Modifiability,variab,variable,696,"////////////////////////////////////////////////////////////////////////////////; /// User constructor; ///; /// Parameters:; ///; /// - name - name of PDEFoam object; ///; /// - ts - target selection method used in; /// GetCellValue(const std::map<Int_t, Float_t>& xvec, ECellValue); /// Candidates are: TMVA::kMean, TMVA::kMpv; ///; /// - TMVA::kMean - The function GetCellValue() finds all cells; /// which contain a given event vector 'xvec' and returns the; /// mean target (for every target variable in the foam).; ///; /// - TMVA::kMpv - The function GetCellValue() finds all cells; /// which contain a given event vector 'xvec' and returns the; /// most probable target (for every target variable in the; /// foam), that is the target value which corresponds to the; /// cell with the largest event density.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:366,Modifiability,variab,variables,366,"////////////////////////////////////////////////////////////////////////////////; /// This function is overridden from PDFEFoam. It returns all; /// regression targets (in order), given an untransformed event; /// vector 'xvec'. The key of 'xvec' is the dimension and the value; /// (Float_t) is the coordinate.; ///; /// Note: number of foam dimensions = number of variables + number; /// of targets; ///; /// Parameters:; /// - xvec - map of event variables (no targets!); /// - cv - cell value to return (ignored!); ///; /// Return:; /// Targets, ordered by missing dimensions in 'xvec'.; /// The size of the returned vector = foam dimension - size of xvec.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:450,Modifiability,variab,variables,450,"////////////////////////////////////////////////////////////////////////////////; /// This function is overridden from PDFEFoam. It returns all; /// regression targets (in order), given an untransformed event; /// vector 'xvec'. The key of 'xvec' is the dimension and the value; /// (Float_t) is the coordinate.; ///; /// Note: number of foam dimensions = number of variables + number; /// of targets; ///; /// Parameters:; /// - xvec - map of event variables (no targets!); /// - cv - cell value to return (ignored!); ///; /// Return:; /// Targets, ordered by missing dimensions in 'xvec'.; /// The size of the returned vector = foam dimension - size of xvec.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:72,Modifiability,variab,variables,72,"// return empty target vector (size = dimension of foam -; // number of variables)",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamMultiTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx:1127,Availability,error,error,1127,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTarget *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamTarget; \ingroup TMVA; This PDEFoam variant stores in every cell the average target; fTarget (see the Constructor) as well as the statistical error on; the target fTarget. It therefore acts as a target estimator. It; should be booked together with the PDEFoamTargetDensity density; estimator, which returns the target fTarget density at a given; phase space point during the foam build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTarget *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamTarget; \ingroup TMVA; This PDEFoam variant stores in every cell the average target; fTarget (see the Constructor) as well as the statistical error on; the target fTarget. It therefore acts as a target estimator. It; should be booked together with the PDEFoamTargetDensity density; estimator, which returns the target fTarget density at a given; phase space point during the foam build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTarget *; * *; * *; * Description: *; * Implementation. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamTarget; \ingroup TMVA; This PDEFoam variant stores in every cell the average target; fTarget (see the Constructor) as well as the statistical error on; the target fTarget. It therefore acts as a target estimator. It; should be booked together with the PDEFoamTargetDensity density; estimator, which returns the target fTarget density at a given; phase space point during the foam build-up.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx:250,Availability,error,error,250,"////////////////////////////////////////////////////////////////////////////////; /// Calculate average cell target in every cell and save them to the; /// cell. Cell element 0 will contain the average target and cell; /// element 1 will contain the error on the target.",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx:7,Availability,error,error,7,"// set error on average target",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx:19,Availability,error,error,19,"// set mean target error",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx:114,Availability,error,error,114,"////////////////////////////////////////////////////////////////////////////////; /// Returns true, if the target error equals -1, as set in; /// Finalize() in case of no events in the cell",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamTarget.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTargetDensity.cxx:195,Deployability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTargetDensity *; * *; * *; * Description: *; * The TFDSITR class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamTargetDensity::Density() does this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamTargetDensity; \ingroup TMVA; This is a concrete implementation of PDEFoam. Density(...); estimates the target density (target number: fTarget) at a given; phase-space point using range-searching.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamTargetDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTargetDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTargetDensity.cxx:195,Integrability,integrat,integrated,195,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTargetDensity *; * *; * *; * Description: *; * The TFDSITR class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamTargetDensity::Density() does this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamTargetDensity; \ingroup TMVA; This is a concrete implementation of PDEFoam. Density(...); estimates the target density (target number: fTarget) at a given; phase-space point using range-searching.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamTargetDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTargetDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTargetDensity.cxx:362,Integrability,interface,interface,362,"// @(#)root/tmva $Id$; // Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamTargetDensity *; * *; * *; * Description: *; * The TFDSITR class provides an interface between the Binary search tree *; * and the PDEFoam object. In order to build-up the foam one needs to *; * calculate the density of events at a given point (sampling during *; * Foam build-up). The function PDEFoamTargetDensity::Density() does this job. It *; * uses a binary search tree, filled with training events, in order to *; * provide this density. *; * *; * Authors (alphabetical): *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Alexander Voigt - TU Dresden, Germany *; * Peter Speckmayer - CERN, Switzerland *; * *; * Copyright (c) 2008, 2010: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamTargetDensity; \ingroup TMVA; This is a concrete implementation of PDEFoam. Density(...); estimates the target density (target number: fTarget) at a given; phase-space point using range-searching.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamTargetDensity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTargetDensity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamVect.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamVect *; * *; * *; * Description: *; * Auxiliary class PDEFoamVect of n-dimensional vector, with dynamic *; * allocation used for the cartesian geometry of the PDEFoam cells *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamVect; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamVect.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamVect.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamVect.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Classes: PDEFoamVect *; * *; * *; * Description: *; * Auxiliary class PDEFoamVect of n-dimensional vector, with dynamic *; * allocation used for the cartesian geometry of the PDEFoam cells *; * *; * Authors (alphabetical): *; * S. Jadach - Institute of Nuclear Physics, Cracow, Poland *; * Tancredi Carli - CERN, Switzerland *; * Dominik Dannheim - CERN, Switzerland *; * Alexander Voigt - TU Dresden, Germany *; * *; * Copyright (c) 2008: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDEFoamVect; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamVect.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamVect.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamVect.cxx:96,Security,access,access,96,"////////////////////////////////////////////////////////////////////////////////; /// [] is for access to elements as in ordinary matrix like a[j]=b[j]; /// (Perhaps against some strict rules but rather practical.); /// Range protection is built in, consequently for substitution; /// one should use rather use a=b than explicit loop!",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamVect.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamVect.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamVect.cxx:86,Performance,Load,Loading,86,"////////////////////////////////////////////////////////////////////////////////; /// Loading in ordinary double prec. vector, sometimes can be useful",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamVect.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamVect.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamVect.cxx:86,Performance,Load,Loading,86,"////////////////////////////////////////////////////////////////////////////////; /// Loading in double prec. number, sometimes can be useful",MatchSource.CODE_COMMENT,tmva/tmva/src/PDEFoamVect.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamVect.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:247,Deployability,integrat,integrated,247,"// @(#)root/tmva $Id$; // Author: Asen Christov, Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : PDF *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Asen Christov <christov@physik.uni-freiburg.de> - Freiburg U., Germany *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * Freiburg U., Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDF; \ingroup TMVA; PDF wrapper for histograms; uses user-defined spline interpolation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:247,Integrability,integrat,integrated,247,"// @(#)root/tmva $Id$; // Author: Asen Christov, Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : PDF *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Asen Christov <christov@physik.uni-freiburg.de> - Freiburg U., Germany *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * Freiburg U., Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDF; \ingroup TMVA; PDF wrapper for histograms; uses user-defined spline interpolation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:1317,Integrability,wrap,wrapper,1317,"// @(#)root/tmva $Id$; // Author: Asen Christov, Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : PDF *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Asen Christov <christov@physik.uni-freiburg.de> - Freiburg U., Germany *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard von Toerne <evt@physik.uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * Freiburg U., Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::PDF; \ingroup TMVA; PDF wrapper for histograms; uses user-defined spline interpolation.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:10,Deployability,configurat,configuration,10,"// static configuration settings",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:10,Modifiability,config,configuration,10,"// static configuration settings",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:11,Safety,sanity check,sanity check,11,"// another sanity check (nsmooth<0 indicated build with KDE)",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:76,Modifiability,variab,variables,76,"// use original histogram as reference; // this is useful, eg, for discrete variables",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:40,Availability,error,errors,40,"//calculating Mean, RMS of the relative errors and using them to set; //the boundaries of the linear transformation",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:86,Usability,Simpl,Simple,86,"////////////////////////////////////////////////////////////////////////////////; /// Simple conversion",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:86,Safety,sanity check,sanity check,86,"////////////////////////////////////////////////////////////////////////////////; /// sanity check: compare PDF with original histogram",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:9,Availability,error,errors,9,"// treat errors properly",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:14,Security,validat,validation,14,"// ---- first validation: simple(st) possible chi2 test; // count number of empty bins",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:51,Testability,test,test,51,"// ---- first validation: simple(st) possible chi2 test; // count number of empty bins",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:26,Usability,simpl,simple,26,"// ---- first validation: simple(st) possible chi2 test; // count number of empty bins",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:18,Testability,test,test,18,"// comparison for test purposes; // std::cout << ""lb "" << lowerBin << "" hb "" << higherBin << "" lbv "" << lowerBinValue << "" hbv "" << higherBinValue << "" frac "" << fraction << std::endl;; // std::cout << ""y "" << y << "" inv x "" << x << "" straight y "" << GetVal(x) << std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:971,Energy Efficiency,adapt,adaptive,971,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// PDFInterpol[ivar] `<string>` Spline0, Spline1, Spline2 `<default>`, Spline3, Spline5, KDE used to interpolate reference histograms; /// if no variable index is given, it is valid for ALL the variables; ///; /// - NSmooth `<int>` how often the input histos are smoothed; /// - MinNSmooth `<int>` min number of smoothing iterations, for bins with most data; /// - MaxNSmooth `<int>` max number of smoothing iterations, for bins with least data; /// - NAvEvtPerBin `<int>` minimum average number of events per PDF bin; /// - TransformOutput `<bool>` transform (often strongly peaked) likelihood output through sigmoid inversion; /// - fKDEtype `<KernelType>` type of the Kernel to use (1 is Gaussian); /// - fKDEiter `<KerneIter>` number of iterations (1 --> ""static KDE"", 2 --> ""adaptive KDE""); /// - fBorderMethod `<KernelBorder>` the method to take care about ""border"" effects (1=no treatment , 2=kernel renormalization, 3=sample mirroring)",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:336,Modifiability,variab,variable,336,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// PDFInterpol[ivar] `<string>` Spline0, Spline1, Spline2 `<default>`, Spline3, Spline5, KDE used to interpolate reference histograms; /// if no variable index is given, it is valid for ALL the variables; ///; /// - NSmooth `<int>` how often the input histos are smoothed; /// - MinNSmooth `<int>` min number of smoothing iterations, for bins with most data; /// - MaxNSmooth `<int>` max number of smoothing iterations, for bins with least data; /// - NAvEvtPerBin `<int>` minimum average number of events per PDF bin; /// - TransformOutput `<bool>` transform (often strongly peaked) likelihood output through sigmoid inversion; /// - fKDEtype `<KernelType>` type of the Kernel to use (1 is Gaussian); /// - fKDEiter `<KerneIter>` number of iterations (1 --> ""static KDE"", 2 --> ""adaptive KDE""); /// - fBorderMethod `<KernelBorder>` the method to take care about ""border"" effects (1=no treatment , 2=kernel renormalization, 3=sample mirroring)",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:385,Modifiability,variab,variables,385,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// PDFInterpol[ivar] `<string>` Spline0, Spline1, Spline2 `<default>`, Spline3, Spline5, KDE used to interpolate reference histograms; /// if no variable index is given, it is valid for ALL the variables; ///; /// - NSmooth `<int>` how often the input histos are smoothed; /// - MinNSmooth `<int>` min number of smoothing iterations, for bins with most data; /// - MaxNSmooth `<int>` max number of smoothing iterations, for bins with least data; /// - NAvEvtPerBin `<int>` minimum average number of events per PDF bin; /// - TransformOutput `<bool>` transform (often strongly peaked) likelihood output through sigmoid inversion; /// - fKDEtype `<KernelType>` type of the Kernel to use (1 is Gaussian); /// - fKDEiter `<KerneIter>` number of iterations (1 --> ""static KDE"", 2 --> ""adaptive KDE""); /// - fBorderMethod `<KernelBorder>` the method to take care about ""border"" effects (1=no treatment , 2=kernel renormalization, 3=sample mirroring)",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:971,Modifiability,adapt,adaptive,971,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// PDFInterpol[ivar] `<string>` Spline0, Spline1, Spline2 `<default>`, Spline3, Spline5, KDE used to interpolate reference histograms; /// if no variable index is given, it is valid for ALL the variables; ///; /// - NSmooth `<int>` how often the input histos are smoothed; /// - MinNSmooth `<int>` min number of smoothing iterations, for bins with most data; /// - MaxNSmooth `<int>` max number of smoothing iterations, for bins with least data; /// - NAvEvtPerBin `<int>` minimum average number of events per PDF bin; /// - TransformOutput `<bool>` transform (often strongly peaked) likelihood output through sigmoid inversion; /// - fKDEtype `<KernelType>` type of the Kernel to use (1 is Gaussian); /// - fKDEiter `<KerneIter>` number of iterations (1 --> ""static KDE"", 2 --> ""adaptive KDE""); /// - fBorderMethod `<KernelBorder>` the method to take care about ""border"" effects (1=no treatment , 2=kernel renormalization, 3=sample mirroring)",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:17,Modifiability,variab,variable,17,"// use ""Nsmooth"" variable",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/PDF.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/QuickMVAProbEstimator.cxx:100,Usability,simpl,simple,100,"// Well.. if it's fast is actually another question all together, merely; // it's a quick and dirty simple kNN approach to the 1-Dim signal/backgr. MVA; // distributions.",MatchSource.CODE_COMMENT,tmva/tmva/src/QuickMVAProbEstimator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/QuickMVAProbEstimator.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Ranking.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : Ranking *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Ranking; \ingroup TMVA; Ranking for variables in method (implementation); */",MatchSource.CODE_COMMENT,tmva/tmva/src/Ranking.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Ranking.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Ranking.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : Ranking *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Ranking; \ingroup TMVA; Ranking for variables in method (implementation); */",MatchSource.CODE_COMMENT,tmva/tmva/src/Ranking.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Ranking.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Ranking.cxx:997,Modifiability,variab,variables,997,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; * Package: TMVA *; * Class : Ranking *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Ranking; \ingroup TMVA; Ranking for variables in method (implementation); */",MatchSource.CODE_COMMENT,tmva/tmva/src/Ranking.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Ranking.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Ranking.cxx:108,Modifiability,variab,variable,108,"////////////////////////////////////////////////////////////////////////////////; /// get maximum length of variable names",MatchSource.CODE_COMMENT,tmva/tmva/src/Ranking.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Ranking.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RBDT.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: ROOT - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * *; * *; * Description: *; * *; * Authors: *; * Jonas Rembser (jonas.rembser@cern.ch) *; * *; * Copyright (c) 2024: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/RBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RBDT.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: ROOT - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * *; * *; * Description: *; * *; * Authors: *; * Jonas Rembser (jonas.rembser@cern.ch) *; * *; * Copyright (c) 2024: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/RBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RBDT.cxx:18,Safety,predict,prediction,18,"/// Compute model prediction on input RTensor",MatchSource.CODE_COMMENT,tmva/tmva/src/RBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RBDT.cxx:21,Energy Efficiency,efficient,efficient,21,"/// RBDT uses a more efficient representation of the BDT in flat arrays. This; /// function translates the indices to the RBDT indices. In RBDT, leaf nodes; /// are stored in separate arrays. To encode this, the sign of the index is; /// flipped.",MatchSource.CODE_COMMENT,tmva/tmva/src/RBDT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RBDT.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:222,Deployability,integrat,integrated,222,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Reader *; * *; * *; * Description: *; * Reader class to be used in the user application to interpret the trained *; * MVAs in an analysis context *; * *; * Authors (alphabetical order): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Reader; \ingroup TMVA. The Reader class serves to use the MVAs in a specific analysis context.; Within an event loop, a vector is filled that corresponds to the variables; that were used to train the MVA(s) during the training stage. This vector; is transfered to the Reader, who takes care of interpreting the weight; file of the MVA of choice, and to return the MVA's output. This is then; used by the user for further analysis. Usage:. ~~~ {.cpp}; // ------ before starting the event loop (eg, in the initialisation step). //; // create TMVA::Reader object; //; TMVA::Reader *reader = new TMVA::Reader();. // create a set of variables an",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:222,Integrability,integrat,integrated,222,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Reader *; * *; * *; * Description: *; * Reader class to be used in the user application to interpret the trained *; * MVAs in an analysis context *; * *; * Authors (alphabetical order): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Reader; \ingroup TMVA. The Reader class serves to use the MVAs in a specific analysis context.; Within an event loop, a vector is filled that corresponds to the variables; that were used to train the MVA(s) during the training stage. This vector; is transfered to the Reader, who takes care of interpreting the weight; file of the MVA of choice, and to return the MVA's output. This is then; used by the user for further analysis. Usage:. ~~~ {.cpp}; // ------ before starting the event loop (eg, in the initialisation step). //; // create TMVA::Reader object; //; TMVA::Reader *reader = new TMVA::Reader();. // create a set of variables an",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:1522,Modifiability,variab,variables,1522,"er@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Reader; \ingroup TMVA. The Reader class serves to use the MVAs in a specific analysis context.; Within an event loop, a vector is filled that corresponds to the variables; that were used to train the MVA(s) during the training stage. This vector; is transfered to the Reader, who takes care of interpreting the weight; file of the MVA of choice, and to return the MVA's output. This is then; used by the user for further analysis. Usage:. ~~~ {.cpp}; // ------ before starting the event loop (eg, in the initialisation step). //; // create TMVA::Reader object; //; TMVA::Reader *reader = new TMVA::Reader();. // create a set of variables and declare them to the reader; // - the variable names must corresponds in name and type to; // those given in the weight file(s) that you use; Float_t var1, var2, var3, var4;; reader->AddVariable( ""var1"", &var1 );; reader->AddVariable( ""var2"", &var2 );; reader->AddVariable( ""var3"", &var3 );; reader->AddVariable( ""var4"", &var4 );. // book the MVA of your choice (prior training of these methods, ie,; // existence of the weight files is required); reader->BookMVA( ""Fisher method"", ""weights/Fisher.weights.txt"" );; reader->",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:1989,Modifiability,variab,variables,1989,"* Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Reader; \ingroup TMVA. The Reader class serves to use the MVAs in a specific analysis context.; Within an event loop, a vector is filled that corresponds to the variables; that were used to train the MVA(s) during the training stage. This vector; is transfered to the Reader, who takes care of interpreting the weight; file of the MVA of choice, and to return the MVA's output. This is then; used by the user for further analysis. Usage:. ~~~ {.cpp}; // ------ before starting the event loop (eg, in the initialisation step). //; // create TMVA::Reader object; //; TMVA::Reader *reader = new TMVA::Reader();. // create a set of variables and declare them to the reader; // - the variable names must corresponds in name and type to; // those given in the weight file(s) that you use; Float_t var1, var2, var3, var4;; reader->AddVariable( ""var1"", &var1 );; reader->AddVariable( ""var2"", &var2 );; reader->AddVariable( ""var3"", &var3 );; reader->AddVariable( ""var4"", &var4 );. // book the MVA of your choice (prior training of these methods, ie,; // existence of the weight files is required); reader->BookMVA( ""Fisher method"", ""weights/Fisher.weights.txt"" );; reader->BookMVA( ""MLP method"", ""weights/MLP.weights.txt"" );; // ... etc. // ------- start your event loop. for (Long64_t ievt=0; ievt<myTree->GetEntries();ievt++) {. // fill vector with values of variables computed from those in the tree; var1 = myvar1;; var2 = myvar2;; var3 = myvar3;; var4 = myvar4;. // retrieve the corresponding MVA output; double mvaFi = reader->EvaluateMVA( ""Fisher method"" );; double mvaNN = reader->EvaluateMVA( ""MLP method"" );. // do something with these ...., e.g., fill them into your ntuple. } // end of event loop. delete reader;; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:2040,Modifiability,variab,variable,2040,"* Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Reader; \ingroup TMVA. The Reader class serves to use the MVAs in a specific analysis context.; Within an event loop, a vector is filled that corresponds to the variables; that were used to train the MVA(s) during the training stage. This vector; is transfered to the Reader, who takes care of interpreting the weight; file of the MVA of choice, and to return the MVA's output. This is then; used by the user for further analysis. Usage:. ~~~ {.cpp}; // ------ before starting the event loop (eg, in the initialisation step). //; // create TMVA::Reader object; //; TMVA::Reader *reader = new TMVA::Reader();. // create a set of variables and declare them to the reader; // - the variable names must corresponds in name and type to; // those given in the weight file(s) that you use; Float_t var1, var2, var3, var4;; reader->AddVariable( ""var1"", &var1 );; reader->AddVariable( ""var2"", &var2 );; reader->AddVariable( ""var3"", &var3 );; reader->AddVariable( ""var4"", &var4 );. // book the MVA of your choice (prior training of these methods, ie,; // existence of the weight files is required); reader->BookMVA( ""Fisher method"", ""weights/Fisher.weights.txt"" );; reader->BookMVA( ""MLP method"", ""weights/MLP.weights.txt"" );; // ... etc. // ------- start your event loop. for (Long64_t ievt=0; ievt<myTree->GetEntries();ievt++) {. // fill vector with values of variables computed from those in the tree; var1 = myvar1;; var2 = myvar2;; var3 = myvar3;; var4 = myvar4;. // retrieve the corresponding MVA output; double mvaFi = reader->EvaluateMVA( ""Fisher method"" );; double mvaNN = reader->EvaluateMVA( ""MLP method"" );. // do something with these ...., e.g., fill them into your ntuple. } // end of event loop. delete reader;; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:2713,Modifiability,variab,variables,2713,"* Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Reader; \ingroup TMVA. The Reader class serves to use the MVAs in a specific analysis context.; Within an event loop, a vector is filled that corresponds to the variables; that were used to train the MVA(s) during the training stage. This vector; is transfered to the Reader, who takes care of interpreting the weight; file of the MVA of choice, and to return the MVA's output. This is then; used by the user for further analysis. Usage:. ~~~ {.cpp}; // ------ before starting the event loop (eg, in the initialisation step). //; // create TMVA::Reader object; //; TMVA::Reader *reader = new TMVA::Reader();. // create a set of variables and declare them to the reader; // - the variable names must corresponds in name and type to; // those given in the weight file(s) that you use; Float_t var1, var2, var3, var4;; reader->AddVariable( ""var1"", &var1 );; reader->AddVariable( ""var2"", &var2 );; reader->AddVariable( ""var3"", &var3 );; reader->AddVariable( ""var4"", &var4 );. // book the MVA of your choice (prior training of these methods, ie,; // existence of the weight files is required); reader->BookMVA( ""Fisher method"", ""weights/Fisher.weights.txt"" );; reader->BookMVA( ""MLP method"", ""weights/MLP.weights.txt"" );; // ... etc. // ------- start your event loop. for (Long64_t ievt=0; ievt<myTree->GetEntries();ievt++) {. // fill vector with values of variables computed from those in the tree; var1 = myvar1;; var2 = myvar2;; var3 = myvar3;; var4 = myvar4;. // retrieve the corresponding MVA output; double mvaFi = reader->EvaluateMVA( ""Fisher method"" );; double mvaNN = reader->EvaluateMVA( ""MLP method"" );. // do something with these ...., e.g., fill them into your ntuple. } // end of event loop. delete reader;; ~~~; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:29,Modifiability,variab,variables,29,"// arguments: names of input variables (vector); // verbose flag",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:29,Modifiability,variab,variables,29,"// arguments: names of input variables (vector); // verbose flag",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:29,Modifiability,variab,variables,29,"// arguments: names of input variables given in form: ""name1:name2:name3""; // verbose flag",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:29,Modifiability,variab,variables,29,"// arguments: names of input variables given in form: ""name1:name2:name3""; // verbose flag",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:101,Deployability,configurat,configuration,101,"////////////////////////////////////////////////////////////////////////////////; /// declaration of configuration options",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:101,Modifiability,config,configuration,101,"////////////////////////////////////////////////////////////////////////////////; /// declaration of configuration options",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:120,Modifiability,variab,variables,120,"////////////////////////////////////////////////////////////////////////////////; /// default initialisation (no member variables)",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:98,Modifiability,variab,variable,98,"////////////////////////////////////////////////////////////////////////////////; /// Add a float variable or expression to the reader",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:18,Modifiability,variab,variable,18,"// Add an integer variable or expression to the reader",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:22,Availability,Error,Error,22,"// file not found --> Error",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:3,Testability,assert,assert,3,"// assert non-existence",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:3,Performance,perform,performs,3,"// performs a copy to float values which are internally used by all methods",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:123,Modifiability,variab,variables,123,"////////////////////////////////////////////////////////////////////////////////; /// evaluates MVA for given set of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:123,Modifiability,variab,variables,123,"////////////////////////////////////////////////////////////////////////////////; /// evaluates MVA for given set of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:123,Modifiability,variab,variables,123,"////////////////////////////////////////////////////////////////////////////////; /// evaluates MVA for given set of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:138,Modifiability,variab,variables,138,"////////////////////////////////////////////////////////////////////////////////; /// evaluates probability of MVA for given set of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:146,Modifiability,variab,variable,146,"// ---------------------------------------------------------------------------------------; // ----- methods related to the decoding of the input variable names ---------------------; // ---------------------------------------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// decodes ""name1:name2:..."" form",MatchSource.CODE_COMMENT,tmva/tmva/src/Reader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RegressionVariance *; * *; * *; * Description: Calculate the separation criteria used in regression *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""Variance"" of a sample. *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criteria which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/RegressionVariance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RegressionVariance *; * *; * *; * Description: Calculate the separation criteria used in regression *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""Variance"" of a sample. *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criteria which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/RegressionVariance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx:810,Performance,optimiz,optimized,810,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RegressionVariance *; * *; * *; * Description: Calculate the separation criteria used in regression *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""Variance"" of a sample. *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criteria which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * *; * Authors (alphabetical): *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/RegressionVariance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx:561,Performance,optimiz,optimized,561,"/*! \class TMVA::RegressionVariance; \ingroup TMVA; Calculate the ""SeparationGain"" for Regression analysis; separation criteria used in various training algorithms. There are two things: the Separation Index, and the Separation Gain; Separation Index:; Measure of the ""Variance"" of a sample. Separation Gain:; the measure of how the quality of separation of the sample increases; by splitting the sample e.g. into a ""left-node"" and a ""right-node""; (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); this is then the quality criteria which is optimized for when trying; to increase the information in the system (making the best selection; */; ////////////////////////////////////////////////////////////////////////////////; /// Separation Gain:; /// the measure of how the quality of separation of the sample increases; /// by splitting the sample e.g. into a ""left-node"" and a ""right-node""; /// (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); /// this is then the quality criteria which is optimized for when trying; /// to increase the information in the system; /// for the Regression: as the ""Gain is maximised"", the RMS (sqrt(variance)); /// which is used as a ""separation"" index should be as small as possible.; /// the ""figure of merit"" here has to be -(rms left+rms-right) or 1/rms...",MatchSource.CODE_COMMENT,tmva/tmva/src/RegressionVariance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx:1033,Performance,optimiz,optimized,1033,"/*! \class TMVA::RegressionVariance; \ingroup TMVA; Calculate the ""SeparationGain"" for Regression analysis; separation criteria used in various training algorithms. There are two things: the Separation Index, and the Separation Gain; Separation Index:; Measure of the ""Variance"" of a sample. Separation Gain:; the measure of how the quality of separation of the sample increases; by splitting the sample e.g. into a ""left-node"" and a ""right-node""; (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); this is then the quality criteria which is optimized for when trying; to increase the information in the system (making the best selection; */; ////////////////////////////////////////////////////////////////////////////////; /// Separation Gain:; /// the measure of how the quality of separation of the sample increases; /// by splitting the sample e.g. into a ""left-node"" and a ""right-node""; /// (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); /// this is then the quality criteria which is optimized for when trying; /// to increase the information in the system; /// for the Regression: as the ""Gain is maximised"", the RMS (sqrt(variance)); /// which is used as a ""separation"" index should be as small as possible.; /// the ""figure of merit"" here has to be -(rms left+rms-right) or 1/rms...",MatchSource.CODE_COMMENT,tmva/tmva/src/RegressionVariance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx:106,Usability,simpl,simple,106,"////////////////////////////////////////////////////////////////////////////////; /// Separation Index: a simple Variance",MatchSource.CODE_COMMENT,tmva/tmva/src/RegressionVariance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Results.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Results *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Results; \ingroup TMVA; Class that is the base-class for a vector of result; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Results.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Results.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Results.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Results *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Results; \ingroup TMVA; Class that is the base-class for a vector of result; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Results.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Results.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsClassification.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsClassification *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ResultsClassification; \ingroup TMVA; Class that is the base-class for a vector of result; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsClassification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsClassification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsClassification.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsClassification *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ResultsClassification; \ingroup TMVA; Class that is the base-class for a vector of result; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsClassification.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsClassification.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx:220,Deployability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsMulticlass *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ResultsMulticlass; \ingroup TMVA; Class which takes the results of a multiclass classification; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsMulticlass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx:220,Integrability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsMulticlass *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ResultsMulticlass; \ingroup TMVA; Class which takes the results of a multiclass classification; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsMulticlass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx:3,Performance,Cache,Cache,3,"// Cache optimisation, count true and false positives with memory access; // instead of code branch.",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsMulticlass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx:66,Security,access,access,66,"// Cache optimisation, count true and false positives with memory access; // instead of code branch.",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsMulticlass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx:93,Performance,perform,performance,93,"////////////////////////////////////////////////////////////////////////////////; /// Create performance graphs for this classifier a multiclass setting.; /// Requires that the method has already been evaluated (that a resultset; /// already exists.); ///; /// Currently uses the new way of calculating ROC Curves. If anything looks; /// fishy, please contact the ROOT TMVA team.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsMulticlass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx:34,Testability,test,testing,34,"/*; //fill fine binned histos for testing; if(prefix.Contains(""Test"")){; std::vector<std::vector<TH1F*> > histos_highbin;; for (UInt_t iCls = 0; iCls < dsi->GetNClasses(); iCls++) {; histos_highbin.push_back(std::vector<TH1F*>(0));; for (UInt_t jCls = 0; jCls < dsi->GetNClasses(); jCls++) {; TString name = TString::Format(""%s_%s_prob_for_%s_HIGHBIN"",prefix.Data(),; dsi->GetClassInfo( jCls )->GetName().Data(),; dsi->GetClassInfo( iCls )->GetName().Data());; histos_highbin.at(iCls).push_back(new TH1F(name,name,nbins_high,xmin,xmax));; }; }. for (Int_t ievt=0; ievt<ds->GetNEvents(); ievt++) {; const Event* ev = ds->GetEvent(ievt);; Int_t cls = ev->GetClass();; Float_t w = ev->GetWeight();; for (UInt_t jCls = 0; jCls < dsi->GetNClasses(); jCls++) {; histos_highbin.at(cls).at(jCls)->Fill(fMultiClassValues[ievt][jCls],w);; }; }; for (UInt_t iCls = 0; iCls < dsi->GetNClasses(); iCls++) {; for (UInt_t jCls = 0; jCls < dsi->GetNClasses(); jCls++) {; gTools().NormHist( histos_highbin.at(iCls).at(jCls) );; Store(histos_highbin.at(iCls).at(jCls));; }; }; }; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsMulticlass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx:63,Testability,Test,Test,63,"/*; //fill fine binned histos for testing; if(prefix.Contains(""Test"")){; std::vector<std::vector<TH1F*> > histos_highbin;; for (UInt_t iCls = 0; iCls < dsi->GetNClasses(); iCls++) {; histos_highbin.push_back(std::vector<TH1F*>(0));; for (UInt_t jCls = 0; jCls < dsi->GetNClasses(); jCls++) {; TString name = TString::Format(""%s_%s_prob_for_%s_HIGHBIN"",prefix.Data(),; dsi->GetClassInfo( jCls )->GetName().Data(),; dsi->GetClassInfo( iCls )->GetName().Data());; histos_highbin.at(iCls).push_back(new TH1F(name,name,nbins_high,xmin,xmax));; }; }. for (Int_t ievt=0; ievt<ds->GetNEvents(); ievt++) {; const Event* ev = ds->GetEvent(ievt);; Int_t cls = ev->GetClass();; Float_t w = ev->GetWeight();; for (UInt_t jCls = 0; jCls < dsi->GetNClasses(); jCls++) {; histos_highbin.at(cls).at(jCls)->Fill(fMultiClassValues[ievt][jCls],w);; }; }; for (UInt_t iCls = 0; iCls < dsi->GetNClasses(); iCls++) {; for (UInt_t jCls = 0; jCls < dsi->GetNClasses(); jCls++) {; gTools().NormHist( histos_highbin.at(iCls).at(jCls) );; Store(histos_highbin.at(iCls).at(jCls));; }; }; }; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsMulticlass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsRegression.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsRegression *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ResultsRegression; \ingroup TMVA; Class that is the base-class for a vector of result; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsRegression.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsRegression.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsRegression.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ResultsRegression *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2006: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::ResultsRegression; \ingroup TMVA; Class that is the base-class for a vector of result; */",MatchSource.CODE_COMMENT,tmva/tmva/src/ResultsRegression.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsRegression.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx:270,Testability,test,tests,270,"// std::cout<<""mvaS->GetNbinsX()""<<mvaS->GetNbinsX()<<std::endl;; // std::cout<<""mvaB->GetNbinsX()""<<mvaB->GetNbinsX()<<std::endl;; //the output of mvaS->GetNbinsX() is about 40 and if we divide it by 100 the results is 0; //the I will divide it by 10 anyway doing some tests ROC integral is the same",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCalc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx:21,Availability,error,error,21,"// needed to get the error on the eff.. will only be correct if the histogram is not scaled to ""integral == 1"" Yet;",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCalc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx:24,Availability,error,error,24,"// reset to zero --> no error will be calculated on the efficiencies",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCalc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx:54,Deployability,update,update,54,"// find cut that corresponds to signal efficiency and update signal-like criterion",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCalc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx:258,Availability,avail,available,258,"// caution: here we take some ""forbidden"" action to hide a problem:; // in some cases, in particular for likelihood, the binned efficiency distributions; // do not equal 1, at xmin, and 0 at xmax; of course, in principle we have the; // unbinned information available in the trees, but the unbinned minimization is; // too slow, and we don't need to do a precision measurement here. Hence, we force; // this property.",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCalc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx:228,Deployability,integrat,integrated,228,"// @(#)root/tmva $Id$; // Author: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer, Simon Pfreundschuh and Kim Albertsson; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ROCCurve *; * *; * Description: *; * This is class to compute ROC Integral (AUC) *; * *; * Authors : *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; * *; * Copyright (c) 2015: *; * CERN, Switzerland *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; **********************************************************************************/; /*! \class TMVA::ROCCurve; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx:228,Integrability,integrat,integrated,228,"// @(#)root/tmva $Id$; // Author: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer, Simon Pfreundschuh and Kim Albertsson; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : ROCCurve *; * *; * Description: *; * This is class to compute ROC Integral (AUC) *; * *; * Authors : *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; * *; * Copyright (c) 2015: *; * CERN, Switzerland *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; **********************************************************************************/; /*! \class TMVA::ROCCurve; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx:192,Deployability,integrat,integration,192,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the ROC integral (AUC); ///; /// @param num_points Granularity of the resulting curve used for integration.; /// The curve will be subdivided into num_points - 1 regions; /// where the performance of the classifier is sampled.; /// Larger number means more accurate, but more costly,; /// evaluation.",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx:192,Integrability,integrat,integration,192,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the ROC integral (AUC); ///; /// @param num_points Granularity of the resulting curve used for integration.; /// The curve will be subdivided into num_points - 1 regions; /// where the performance of the classifier is sampled.; /// Larger number means more accurate, but more costly,; /// evaluation.",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx:282,Performance,perform,performance,282,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the ROC integral (AUC); ///; /// @param num_points Granularity of the resulting curve used for integration.; /// The curve will be subdivided into num_points - 1 regions; /// where the performance of the classifier is sampled.; /// Larger number means more accurate, but more costly,; /// evaluation.",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx:15,Deployability,integrat,integration,15,"// Trapezodial integration",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx:15,Integrability,integrat,integration,15,"// Trapezodial integration",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx:331,Performance,perform,performance,331,"////////////////////////////////////////////////////////////////////////////////; /// Returns a new TGraph containing the ROC curve. Sensitivity is on the x-axis,; /// specificity on the y-axis.; ///; /// @param num_points Granularity of the resulting curve. The curve will be subdivided; /// into num_points - 1 regions where the performance of the; /// classifier is sampled. Larger number means more accurate,; /// but more costly, evaluation.",MatchSource.CODE_COMMENT,tmva/tmva/src/ROCCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RootFinder.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RootFinder *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RootFinder; \ingroup TMVA; Root finding using Brents algorithm (translated from CERNLIB function RZERO); */",MatchSource.CODE_COMMENT,tmva/tmva/src/RootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RootFinder.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RootFinder *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RootFinder; \ingroup TMVA; Root finding using Brents algorithm (translated from CERNLIB function RZERO); */",MatchSource.CODE_COMMENT,tmva/tmva/src/RootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * *; * Description: *; * A class describing a 'rule' *; * Each internal node of a tree defines a rule from all the parental nodes. *; * A rule consists of at least 2 nodes. *; * Input: a decision tree (in the constructor) *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Rule; \ingroup TMVA. Implementation of a rule. A rule is simply a branch or a part of a branch in a tree.; It fulfills the following:. - First node is the root node of the originating tree; - Consists of a minimum of 2 nodes; - A rule returns for a given event:; - 0 : if the event fails at any node; - 1 : otherwise; - If the rule contains <2 nodes, it returns 0 SHOULD NOT HAPPEN!. The coefficient is found by either brute force or some sort of; intelligent fitting. See the RuleEnsemble class for more info.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Rule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * *; * Description: *; * A class describing a 'rule' *; * Each internal node of a tree defines a rule from all the parental nodes. *; * A rule consists of at least 2 nodes. *; * Input: a decision tree (in the constructor) *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Rule; \ingroup TMVA. Implementation of a rule. A rule is simply a branch or a part of a branch in a tree.; It fulfills the following:. - First node is the root node of the originating tree; - Consists of a minimum of 2 nodes; - A rule returns for a given event:; - 0 : if the event fails at any node; - 1 : otherwise; - If the rule contains <2 nodes, it returns 0 SHOULD NOT HAPPEN!. The coefficient is found by either brute force or some sort of; intelligent fitting. See the RuleEnsemble class for more info.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Rule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:1140,Usability,simpl,simply,1140,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * *; * Description: *; * A class describing a 'rule' *; * Each internal node of a tree defines a rule from all the parental nodes. *; * A rule consists of at least 2 nodes. *; * Input: a decision tree (in the constructor) *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Rule; \ingroup TMVA. Implementation of a rule. A rule is simply a branch or a part of a branch in a tree.; It fulfills the following:. - First node is the root node of the originating tree; - Consists of a minimum of 2 nodes; - A rule returns for a given event:; - 0 : if the event fails at any node; - 1 : otherwise; - If the rule contains <2 nodes, it returns 0 SHOULD NOT HAPPEN!. The coefficient is found by either brute force or some sort of; intelligent fitting. See the RuleEnsemble class for more info.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Rule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:90,Usability,simpl,simple,90,"////////////////////////////////////////////////////////////////////////////////; /// the simple constructor",MatchSource.CODE_COMMENT,tmva/tmva/src/Rule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:90,Usability,simpl,simple,90,"////////////////////////////////////////////////////////////////////////////////; /// the simple constructor",MatchSource.CODE_COMMENT,tmva/tmva/src/Rule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:95,Modifiability,variab,variable,95,"////////////////////////////////////////////////////////////////////////////////; /// check if variable in node",MatchSource.CODE_COMMENT,tmva/tmva/src/Rule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:140,Modifiability,variab,variables,140,"////////////////////////////////////////////////////////////////////////////////; /// Returns:; ///; /// * -1.0 : rules are NOT equal, i.e, variables and/or cut directions are wrong; /// * >=0: rules are equal apart from the cutvalue, returns \f$ d = \sqrt{\sum(c1-c2)^2} \f$; ///; /// If not useCutValue, the distance is exactly zero if they are equal",MatchSource.CODE_COMMENT,tmva/tmva/src/Rule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:7,Modifiability,variab,variable,7,"// cut variable",MatchSource.CODE_COMMENT,tmva/tmva/src/Rule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:14,Modifiability,variab,variable,14,"// rms of cut variable",MatchSource.CODE_COMMENT,tmva/tmva/src/Rule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/Rule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleCut.cxx:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * Description: *; * A class describing a 'rule cut' *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RuleCut; \ingroup TMVA; A class describing a 'rule cut'; */",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleCut.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleCut.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleCut.cxx:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * Description: *; * A class describing a 'rule cut' *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RuleCut; \ingroup TMVA; A class describing a 'rule cut'; */",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleCut.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleCut.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleCut.cxx:3,Usability,Clear,Clear,3,"// Clear vectors",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleCut.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleCut.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleCut.cxx:23,Modifiability,variab,variables,23,"// Count the number of variables in cut; // Exclude last node since that does not lead to a cut",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleCut.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleCut.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleEnsemble *; * *; * *; * Description: *; * A class generating an ensemble of rules *; * Input: a forest of decision trees *; * Output: an ensemble of rules *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, GER *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RuleEnsemble; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleEnsemble *; * *; * *; * Description: *; * A class generating an ensemble of rules *; * Input: a forest of decision trees *; * Output: an ensemble of rules *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, GER *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RuleEnsemble; \ingroup TMVA. */",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:109,Modifiability,variab,variables,109,"////////////////////////////////////////////////////////////////////////////////; /// Initializes all member variables with default values",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:97,Modifiability,variab,variable,97,"////////////////////////////////////////////////////////////////////////////////; /// Calculates variable importance using eq (35) in RuleFit paper by Friedman et.al",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:12,Modifiability,variab,variable,12,"//; // Make variable importance relative the strongest variable; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:55,Modifiability,variab,variable,55,"//; // Make variable importance relative the strongest variable; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:112,Usability,clear,clear,112,"////////////////////////////////////////////////////////////////////////////////; /// set rules; ///; /// first clear all",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:27,Modifiability,variab,variables,27,"// first find stats of all variables; // vardata[v][i].first -> value of var <v> in event <i>; // vardata[v][i].second.first -> the event weight; // vardata[v][i].second.second -> the event type",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:17,Deployability,UPDATE,UPDATED,17,"// TODO: NOT YET UPDATED FOR WEIGHTS",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:3,Usability,Clear,Clear,3,"// Clear vectors",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:21,Modifiability,variab,variable,21,"// count how often a variable occurs",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:29,Testability,Log,Log,29,"// if (pind==0) impref =; // Log() << kmtype << ""Rule #"" <<; // Log() << kmtype << *fRules[ind] << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:64,Testability,Log,Log,64,"// if (pind==0) impref =; // Log() << kmtype << ""Rule #"" <<; // Log() << kmtype << *fRules[ind] << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:11,Performance,cache,cached,11,"// already cached",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleEnsemble.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * *; * Description: *; * A class describing a 'rule' *; * Each internal node of a tree defines a rule from all the parental nodes. *; * A rule with 0 or 1 nodes in the list is a root rule -> corresponds to a0. *; * Input: a decision tree (in the constructor) *; * its coefficient *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RuleFit; \ingroup TMVA; A class implementing various fits of rule ensembles; */",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Rule *; * *; * *; * Description: *; * A class describing a 'rule' *; * Each internal node of a tree defines a rule from all the parental nodes. *; * A rule with 0 or 1 nodes in the list is a root rule -> corresponds to a0. *; * Input: a decision tree (in the constructor) *; * its coefficient *; * *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RuleFit; \ingroup TMVA; A class implementing various fits of rule ensembles; */",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx:102,Integrability,message,message,102,"////////////////////////////////////////////////////////////////////////////////; /// set the current message type to that of mlog for this class and all other subtools",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx:21,Availability,error,error,21,"// misclassification error",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// help routine to MakeVisHists() - fills for all variables",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx:133,Modifiability,variab,variables,133,"////////////////////////////////////////////////////////////////////////////////; /// help routine to MakeVisHists() - fills for all variables",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// help routine to MakeVisHists() - fills for all correlation plots",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx:107,Modifiability,variab,variables,107,"////////////////////////////////////////////////////////////////////////////////; /// get first and second variables from title",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitAPI *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-KP Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RuleFitAPI; \ingroup TMVA; J Friedman's RuleFit method; */",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitAPI *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-KP Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RuleFitAPI; \ingroup TMVA; J Friedman's RuleFit method; */",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:94,Integrability,message,message,94,"////////////////////////////////////////////////////////////////////////////////; /// welcome message",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:92,Integrability,message,message,92,"////////////////////////////////////////////////////////////////////////////////; /// howto message",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:143,Safety,abort,aborts,143,"////////////////////////////////////////////////////////////////////////////////; /// check if the rulefit work dir is properly setup.; /// it aborts (kFATAL) if not.; ///; /// Check existence of directory",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:94,Testability,test,test,94,"////////////////////////////////////////////////////////////////////////////////; /// set the test params",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:106,Availability,mask,mask,106,"////////////////////////////////////////////////////////////////////////////////; /// Save input variable mask; ///; /// If the lx vector size is not the same as inputVars,; /// resize it and fill it with 1; /// NOTE: Always set all to 1; /// if (fRFLx.size() != m_inputVars->size()) {",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:97,Modifiability,variab,variable,97,"////////////////////////////////////////////////////////////////////////////////; /// Save input variable mask; ///; /// If the lx vector size is not the same as inputVars,; /// resize it and fill it with 1; /// NOTE: Always set all to 1; /// if (fRFLx.size() != m_inputVars->size()) {",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:13,Modifiability,variab,variable,13,"// calculate variable importance",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:92,Testability,test,test,92,"////////////////////////////////////////////////////////////////////////////////; /// Write test data",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:89,Modifiability,variab,variable,89,"// Test data is saved as:; // 0 : <N> num of events, type float, 4 bytes; // 1-N : First variable for all events; // N+1-2N : Second variable...; // ...",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:133,Modifiability,variab,variable,133,"// Test data is saved as:; // 0 : <N> num of events, type float, 4 bytes; // 1-N : First variable for all events; // N+1-2N : Second variable...; // ...",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:3,Testability,Test,Test,3,"// Test data is saved as:; // 0 : <N> num of events, type float, 4 bytes; // 1-N : First variable for all events; // N+1-2N : Second variable...; // ...",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:92,Modifiability,variab,variable,92,"////////////////////////////////////////////////////////////////////////////////; /// write variable names, ascii",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:91,Modifiability,variab,variable,91,"////////////////////////////////////////////////////////////////////////////////; /// read variable importance",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:291,Integrability,interface,interface,291,"//; //--------------------------------------------; // read first part of rule info; //--------------------------------------------; //; // 8 <int> 10 ???; // 9 <float> 0.185 support; // 10 <float> 0.051 coefficient; // 11 <float> 2 num of cuts in rule; // 12 <float> 1 ??? not used by this interface; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:60,Availability,avail,available,60,"// the below are set to default values since no info is; // available in rulefit.sum",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitAPI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitParams *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RuleFitParams; \ingroup TMVA; A class doing the actual fitting of a linear model using rules as base functions.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : RuleFitParams *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Fredrik Tegenfeldt <Fredrik.Tegenfeldt@cern.ch> - Iowa State U., USA *; * Helge Voss <Helge.Voss@cern.ch> - MPI-KP Heidelberg, Ger. *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * Iowa State U. *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::RuleFitParams; \ingroup TMVA; A class doing the actual fitting of a linear model using rules as base functions.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:35,Security,validat,validation,35,"//; // Fraction of events used for validation should be close of unity..; // Always selection from the END; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:165,Security,validat,validation,165,"//; // Fraction of events used for the path search can be allowed to be a smaller value, say 0.5; // Alwas select events from the BEGINNING.; // This means that the validation and search samples will not overlap if both fractions are <0.5.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:115,Modifiability,variab,variable,115,"////////////////////////////////////////////////////////////////////////////////; /// evaluate the average of each variable and f(x) in the given range",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:9,Performance,cache,cache,9,// first cache rule/lin response; /* Double_t val = */,MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:11,Modifiability,variab,variable,11,"// average variable",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:112,Availability,error,error,112,"////////////////////////////////////////////////////////////////////////////////; /// Implementation of squared-error ramp loss function (eq 39,40 in ref 1); /// This is used for binary Classifications where y = {+1,-1} for (sig,bkg)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:112,Availability,error,error,112,"////////////////////////////////////////////////////////////////////////////////; /// Implementation of squared-error ramp loss function (eq 39,40 in ref 1); /// This is used for binary Classifications where y = {+1,-1} for (sig,bkg)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:112,Availability,error,error,112,"////////////////////////////////////////////////////////////////////////////////; /// Implementation of squared-error ramp loss function (eq 39,40 in ref 1); /// This is used for binary Classifications where y = {+1,-1} for (sig,bkg)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:86,Safety,risk,risk,86,"////////////////////////////////////////////////////////////////////////////////; /// risk assessment",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:86,Safety,risk,risk,86,"////////////////////////////////////////////////////////////////////////////////; /// risk assessment for tau model `<itau>`",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:7,Availability,error,error,7,"//; // error, coefs etc; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:67,Availability,error,error,67,"//; // Find how many points to scan and how often to calculate the error",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:340,Availability,error,error,340,"//; //--------------------; // loop over the paths; //--------------------; // The number of MAXIMUM loops is given by nscan.; // At each loop, the paths being far away from the minimum; // are rejected. Hence at each check (every netst events), the number; // of paths searched will be reduced.; // The maximum 'distance' from the minimum error rate is; // 1 sigma. See RiskPerfTst() for details.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:287,Energy Efficiency,reduce,reduced,287,"//; //--------------------; // loop over the paths; //--------------------; // The number of MAXIMUM loops is given by nscan.; // At each loop, the paths being far away from the minimum; // are rejected. Hence at each check (every netst events), the number; // of paths searched will be reduced.; // The maximum 'distance' from the minimum error rate is; // 1 sigma. See RiskPerfTst() for details.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:371,Safety,Risk,RiskPerfTst,371,"//; //--------------------; // loop over the paths; //--------------------; // The number of MAXIMUM loops is given by nscan.; // At each loop, the paths being far away from the minimum; // are rejected. Hence at each check (every netst events), the number; // of paths searched will be reduced.; // The maximum 'distance' from the minimum error rate is; // 1 sigma. See RiskPerfTst() for details.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:3,Deployability,update,update,3,"// update coefs",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:12,Availability,error,error,12,"// estimate error and do the sum; // do this at index=0, netst-1, 2*netst-1 ...",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:3,Availability,Error,ErrorRateRocTst,3,"// ErrorRateRocTst( );",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:29,Availability,Down,Downscale,29,"//; // Set tau and coefs; // Downscale tau slightly in order to avoid numerical problems; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:64,Safety,avoid,avoid,64,"//; // Set tau and coefs; // Downscale tau slightly in order to avoid numerical problems; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:588,Availability,error,error,588,"////////////////////////////////////////////////////////////////////////////////; /// The following finds the gradient directed path in parameter space.; /// More work is needed... FT, 24/9/2006; ///; /// The algorithm is currently as follows (if not otherwise stated, the sample; /// used below is [fPathIdx1,fPathIdx2]):; ///; /// 1. Set offset to -average(y(true)) and all coefs=0 => average of F(x)==0; /// 2. FindGDTau() : start scanning using several paths defined by different tau; /// choose the tau yielding the best path; /// 3. start the scanning the chosen path; /// 4. check error rate at a given frequency; /// data used for check: [fPerfIdx1,fPerfIdx2]; /// 5. stop when either of the following conditions are fullfilled:; /// 1. loop index==fGDNPathSteps; /// 2. error > fGDErrScale*errmin; /// 3. only in DEBUG mode: risk is not monotonously decreasing; ///; /// The algorithm will warn if:; /// 1. the error rate was still decreasing when loop finished -> increase fGDNPathSteps!; /// 2. minimum was found at an early stage -> decrease fGDPathStep; /// 3. DEBUG: risk > previous risk -> entered chaotic region (regularization is too small)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:779,Availability,error,error,779,"////////////////////////////////////////////////////////////////////////////////; /// The following finds the gradient directed path in parameter space.; /// More work is needed... FT, 24/9/2006; ///; /// The algorithm is currently as follows (if not otherwise stated, the sample; /// used below is [fPathIdx1,fPathIdx2]):; ///; /// 1. Set offset to -average(y(true)) and all coefs=0 => average of F(x)==0; /// 2. FindGDTau() : start scanning using several paths defined by different tau; /// choose the tau yielding the best path; /// 3. start the scanning the chosen path; /// 4. check error rate at a given frequency; /// data used for check: [fPerfIdx1,fPerfIdx2]; /// 5. stop when either of the following conditions are fullfilled:; /// 1. loop index==fGDNPathSteps; /// 2. error > fGDErrScale*errmin; /// 3. only in DEBUG mode: risk is not monotonously decreasing; ///; /// The algorithm will warn if:; /// 1. the error rate was still decreasing when loop finished -> increase fGDNPathSteps!; /// 2. minimum was found at an early stage -> decrease fGDPathStep; /// 3. DEBUG: risk > previous risk -> entered chaotic region (regularization is too small)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:920,Availability,error,error,920,"////////////////////////////////////////////////////////////////////////////////; /// The following finds the gradient directed path in parameter space.; /// More work is needed... FT, 24/9/2006; ///; /// The algorithm is currently as follows (if not otherwise stated, the sample; /// used below is [fPathIdx1,fPathIdx2]):; ///; /// 1. Set offset to -average(y(true)) and all coefs=0 => average of F(x)==0; /// 2. FindGDTau() : start scanning using several paths defined by different tau; /// choose the tau yielding the best path; /// 3. start the scanning the chosen path; /// 4. check error rate at a given frequency; /// data used for check: [fPerfIdx1,fPerfIdx2]; /// 5. stop when either of the following conditions are fullfilled:; /// 1. loop index==fGDNPathSteps; /// 2. error > fGDErrScale*errmin; /// 3. only in DEBUG mode: risk is not monotonously decreasing; ///; /// The algorithm will warn if:; /// 1. the error rate was still decreasing when loop finished -> increase fGDNPathSteps!; /// 2. minimum was found at an early stage -> decrease fGDPathStep; /// 3. DEBUG: risk > previous risk -> entered chaotic region (regularization is too small)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:834,Safety,risk,risk,834,"////////////////////////////////////////////////////////////////////////////////; /// The following finds the gradient directed path in parameter space.; /// More work is needed... FT, 24/9/2006; ///; /// The algorithm is currently as follows (if not otherwise stated, the sample; /// used below is [fPathIdx1,fPathIdx2]):; ///; /// 1. Set offset to -average(y(true)) and all coefs=0 => average of F(x)==0; /// 2. FindGDTau() : start scanning using several paths defined by different tau; /// choose the tau yielding the best path; /// 3. start the scanning the chosen path; /// 4. check error rate at a given frequency; /// data used for check: [fPerfIdx1,fPerfIdx2]; /// 5. stop when either of the following conditions are fullfilled:; /// 1. loop index==fGDNPathSteps; /// 2. error > fGDErrScale*errmin; /// 3. only in DEBUG mode: risk is not monotonously decreasing; ///; /// The algorithm will warn if:; /// 1. the error rate was still decreasing when loop finished -> increase fGDNPathSteps!; /// 2. minimum was found at an early stage -> decrease fGDPathStep; /// 3. DEBUG: risk > previous risk -> entered chaotic region (regularization is too small)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:1081,Safety,risk,risk,1081,"////////////////////////////////////////////////////////////////////////////////; /// The following finds the gradient directed path in parameter space.; /// More work is needed... FT, 24/9/2006; ///; /// The algorithm is currently as follows (if not otherwise stated, the sample; /// used below is [fPathIdx1,fPathIdx2]):; ///; /// 1. Set offset to -average(y(true)) and all coefs=0 => average of F(x)==0; /// 2. FindGDTau() : start scanning using several paths defined by different tau; /// choose the tau yielding the best path; /// 3. start the scanning the chosen path; /// 4. check error rate at a given frequency; /// data used for check: [fPerfIdx1,fPerfIdx2]; /// 5. stop when either of the following conditions are fullfilled:; /// 1. loop index==fGDNPathSteps; /// 2. error > fGDErrScale*errmin; /// 3. only in DEBUG mode: risk is not monotonously decreasing; ///; /// The algorithm will warn if:; /// 1. the error rate was still decreasing when loop finished -> increase fGDNPathSteps!; /// 2. minimum was found at an early stage -> decrease fGDPathStep; /// 3. DEBUG: risk > previous risk -> entered chaotic region (regularization is too small)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:1097,Safety,risk,risk,1097,"////////////////////////////////////////////////////////////////////////////////; /// The following finds the gradient directed path in parameter space.; /// More work is needed... FT, 24/9/2006; ///; /// The algorithm is currently as follows (if not otherwise stated, the sample; /// used below is [fPathIdx1,fPathIdx2]):; ///; /// 1. Set offset to -average(y(true)) and all coefs=0 => average of F(x)==0; /// 2. FindGDTau() : start scanning using several paths defined by different tau; /// choose the tau yielding the best path; /// 3. start the scanning the chosen path; /// 4. check error rate at a given frequency; /// data used for check: [fPerfIdx1,fPerfIdx2]; /// 5. stop when either of the following conditions are fullfilled:; /// 1. loop index==fGDNPathSteps; /// 2. error > fGDErrScale*errmin; /// 3. only in DEBUG mode: risk is not monotonously decreasing; ///; /// The algorithm will warn if:; /// 1. the error rate was still decreasing when loop finished -> increase fGDNPathSteps!; /// 2. minimum was found at an early stage -> decrease fGDPathStep; /// 3. DEBUG: risk > previous risk -> entered chaotic region (regularization is too small)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:26,Usability,clear,clear,26,"// init GD parameters and clear coeff vectors",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:10,Safety,risk,risk,10,"// DEBUG: risk scan",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:26,Safety,risk,risk,26,"// number of points where risk(i+1)>risk(i)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:36,Safety,risk,risk,36,"// number of points where risk(i+1)>risk(i)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:12,Safety,risk,risk,12,"// time per risk evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:54,Availability,error,error,54,"// previous risk; // parameters set at point with min error",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:12,Safety,risk,risk,12,"// previous risk; // parameters set at point with min error",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:7,Availability,error,error,7,"// min error; // Double_t riskMin=0; // risk",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:26,Safety,risk,riskMin,26,"// min error; // Double_t riskMin=0; // risk",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:40,Safety,risk,risk,40,"// min error; // Double_t riskMin=0; // risk",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:42,Availability,error,error,42,"// linear regression to estimate slope of error rate evolution",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:14,Availability,error,error,14,"// true if an error rate check is to be done",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:26,Safety,risk,risk,26,"// DEBUG: flag is true if risk evolution behaves badly",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:63,Availability,error,error,63,"// flag that the scan is done; // calculate how often to check error rate",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:51,Performance,perform,performed,51,"// find the best tau - returns the number of steps performed in scan",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:65,Deployability,update,update,65,"// Calculate the direction in parameter space (eq 25, ref 1) and update coeffs (eq 22, ref 1)",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:15,Availability,error,error,15,"// don't check error rate every loop",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:9,Safety,risk,risk,9,"// check risk evolution",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:13,Safety,risk,risk,13,"// calculate risk",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:32,Safety,risk,risk,32,"//; // Check for an increase in risk.; // Such an increase would imply that the regularization is too small.; // Stop the iteration if this happens.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:20,Availability,error,error,20,"//; // Estimate the error rate using cross validation; // Well, not quite full cross validation since we only; // use ONE model.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:43,Security,validat,validation,43,"//; // Estimate the error rate using cross validation; // Well, not quite full cross validation since we only; // use ONE model.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:85,Security,validat,validation,85,"//; // Estimate the error rate using cross validation; // Well, not quite full cross validation since we only; // use ONE model.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:9,Availability,error,error,9,"// Check error rate",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:4,Availability,Error,ErrorRateRoc,4,"//= ErrorRateRoc();",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:63,Energy Efficiency,reduce,reduced,63,"//; // Always take the last min.; // For each step the risk is reduced.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:55,Safety,risk,risk,55,"//; // Always take the last min.; // For each step the risk is reduced.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:3,Safety,risk,riskMin,3,"// riskMin = fNTRisk;",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:162,Availability,error,error,162,"// Stop iteration under various conditions; // * The condition R(i+1)<R(i) is no longer true (when then implicit regularization is too weak); // * If the current error estimate is > factor*errmin (factor = 1.1); // * We have reach the last step...",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:3,Safety,risk,riskMin,3,"// riskMin = fNTRisk;",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:188,Availability,Error,ErrorRateReg,188,"////////////////////////////////////////////////////////////////////////////////; /// Estimates F* (optimum scoring function) for all events for the given sets.; /// The result is used in ErrorRateReg().; /// --- NOT USED ---",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:100,Availability,error,error,100,"////////////////////////////////////////////////////////////////////////////////; /// Estimates the error rate with the current set of parameters; /// This code is pretty messy at the moment.; /// Cleanup is needed.; /// -- NOT USED ---",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:50,Availability,error,error,50,"//; // A bit messy here.; // I believe the binary error classification is appropriate here.; // The problem is stability.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:14,Availability,error,error,14,"// scaled abs error, eq 20 in RuleFit paper",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:14,Availability,error,error,14,"// scaled abs error, eq 20; // This error (df) is large - need to think on how to compensate...; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:36,Availability,error,error,36,"// scaled abs error, eq 20; // This error (df) is large - need to think on how to compensate...; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:105,Availability,error,error,105,"////////////////////////////////////////////////////////////////////////////////; ///; /// Estimates the error rate with the current set of parameters; /// It uses a binary estimate of (y-F*(x)); /// (y-F*(x)) = (Num of events where sign(F)!=sign(y))/Neve; /// y = {+1 if event is signal, -1 otherwise}; /// --- NOT USED ---",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:100,Availability,error,error,100,"////////////////////////////////////////////////////////////////////////////////; /// Estimates the error rate with the current set of parameters.; /// It calculates the area under the bkg rejection vs signal efficiency curve.; /// The value returned is 1-area.",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:100,Availability,error,error,100,"////////////////////////////////////////////////////////////////////////////////; /// Estimates the error rate with the current set of parameters.; /// It calculates the area under the bkg rejection vs signal efficiency curve.; /// The value returned is 1-area.; /// This works but is less efficient than calculating the Risk using RiskPerf().",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:290,Energy Efficiency,efficient,efficient,290,"////////////////////////////////////////////////////////////////////////////////; /// Estimates the error rate with the current set of parameters.; /// It calculates the area under the bkg rejection vs signal efficiency curve.; /// The value returned is 1-area.; /// This works but is less efficient than calculating the Risk using RiskPerf().",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:321,Safety,Risk,Risk,321,"////////////////////////////////////////////////////////////////////////////////; /// Estimates the error rate with the current set of parameters.; /// It calculates the area under the bkg rejection vs signal efficiency curve.; /// The value returned is 1-area.; /// This works but is less efficient than calculating the Risk using RiskPerf().",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:332,Safety,Risk,RiskPerf,332,"////////////////////////////////////////////////////////////////////////////////; /// Estimates the error rate with the current set of parameters.; /// It calculates the area under the bkg rejection vs signal efficiency curve.; /// The value returned is 1-area.; /// This works but is less efficient than calculating the Risk using RiskPerf().",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:100,Availability,error,error,100,"////////////////////////////////////////////////////////////////////////////////; /// Estimates the error rate with the current set of parameters.; /// It calculates the area under the bkg rejection vs signal efficiency curve.; /// The value returned is 1-area.; ///; /// See comment under ErrorRateRoc().",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:290,Availability,Error,ErrorRateRoc,290,"////////////////////////////////////////////////////////////////////////////////; /// Estimates the error rate with the current set of parameters.; /// It calculates the area under the bkg rejection vs signal efficiency curve.; /// The value returned is 1-area.; ///; /// See comment under ErrorRateRoc().",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:100,Availability,error,error,100,"////////////////////////////////////////////////////////////////////////////////; /// Estimates the error rate with the current set of parameters.; /// using the `<Perf>` subsample.; /// Return the tau index giving the lowest error",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:226,Availability,error,error,226,"////////////////////////////////////////////////////////////////////////////////; /// Estimates the error rate with the current set of parameters.; /// using the `<Perf>` subsample.; /// Return the tau index giving the lowest error",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:91,Testability,test,test,91,"////////////////////////////////////////////////////////////////////////////////; /// make test gradient vector for all tau; /// same algorithm as MakeGradientVector()",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:3,Usability,Clear,Clear,3,"// Clear gradient vectors",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:170,Usability,learn,learner,170,"// Add to offset, if gradient is large enough:; // Loop over the gradient vector and move to next set of coefficients; // size of GradVec (and GradVecLin) should be 0 if learner is disabled; //; // Step-size is divided by 10 when looking for the best path.; //",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:3,Usability,Clear,Clear,3,"// Clear gradient vectors",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:170,Usability,learn,learner,170,"// Add to offset, if gradient is large enough:; // Loop over the gradient vector and move to next set of coefficients; // size of GradVec (and GradVecLin) should be 0 if learner is disabled",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:116,Testability,test,test,116,"////////////////////////////////////////////////////////////////////////////////; /// calc average response for all test paths - TODO: see comment under CalcAverageResponse(); /// note that 0 offset is used",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:138,Integrability,depend,dependancy,138,"////////////////////////////////////////////////////////////////////////////////; /// calculate the average response - TODO : rewrite bad dependancy on EvaluateAverage() !; ///; /// note that 0 offset is used",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:126,Modifiability,rewrite,rewrite,126,"////////////////////////////////////////////////////////////////////////////////; /// calculate the average response - TODO : rewrite bad dependancy on EvaluateAverage() !; ///; /// note that 0 offset is used",MatchSource.CODE_COMMENT,tmva/tmva/src/RuleFitParams.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SdivSqrtSplusB.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SdivSqrtSplusB *; * *; * *; * Description: Implementation of the SdivSqrtSplusB as separation criterion *; * s / sqrt( s+b ) *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SdivSqrtSplusB; \ingroup TMVA; Implementation of the SdivSqrtSplusB as separation criterion. \f$ Index = \frac{S}{\sqrt{S+B}} \f$ (statistical significance); */",MatchSource.CODE_COMMENT,tmva/tmva/src/SdivSqrtSplusB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SdivSqrtSplusB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SdivSqrtSplusB.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SdivSqrtSplusB *; * *; * *; * Description: Implementation of the SdivSqrtSplusB as separation criterion *; * s / sqrt( s+b ) *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SdivSqrtSplusB; \ingroup TMVA; Implementation of the SdivSqrtSplusB as separation criterion. \f$ Index = \frac{S}{\sqrt{S+B}} \f$ (statistical significance); */",MatchSource.CODE_COMMENT,tmva/tmva/src/SdivSqrtSplusB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SdivSqrtSplusB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SdivSqrtSplusB.cxx:372,Performance,optimiz,optimized,372,"////////////////////////////////////////////////////////////////////////////////; /// Separation Gain:; /// the measure of how the quality of separation of the sample increases; /// by splitting the sample e.g. into a ""left-node"" and a ""right-node""; /// (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); /// this is then the quality criterion which is optimized for when trying; /// to increase the information in the system (making the best selection",MatchSource.CODE_COMMENT,tmva/tmva/src/SdivSqrtSplusB.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SdivSqrtSplusB.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SeparationBase *; * *; * *; * Description: An interface to different separation criteria used in various *; * training algorithms, as there are: *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""purity"" of a sample. If all elements (events) in the *; * sample belong to the same class (e.g. signal or backgr), than the *; * separation index is 0 (meaning 100% purity (or 0% purity as it is *; * symmetric. The index becomes maximal, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SeparationBase; \ingroup TMVA; An interface to calculate the ""SeparationGain"" for different; separation criteria used in various training algorithm",MatchSource.CODE_COMMENT,tmva/tmva/src/SeparationBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SeparationBase *; * *; * *; * Description: An interface to different separation criteria used in various *; * training algorithms, as there are: *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""purity"" of a sample. If all elements (events) in the *; * sample belong to the same class (e.g. signal or backgr), than the *; * separation index is 0 (meaning 100% purity (or 0% purity as it is *; * symmetric. The index becomes maximal, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SeparationBase; \ingroup TMVA; An interface to calculate the ""SeparationGain"" for different; separation criteria used in various training algorithm",MatchSource.CODE_COMMENT,tmva/tmva/src/SeparationBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx:316,Integrability,interface,interface,316,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SeparationBase *; * *; * *; * Description: An interface to different separation criteria used in various *; * training algorithms, as there are: *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""purity"" of a sample. If all elements (events) in the *; * sample belong to the same class (e.g. signal or backgr), than the *; * separation index is 0 (meaning 100% purity (or 0% purity as it is *; * symmetric. The index becomes maximal, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SeparationBase; \ingroup TMVA; An interface to calculate the ""SeparationGain"" for different; separation criteria used in various training algorithm",MatchSource.CODE_COMMENT,tmva/tmva/src/SeparationBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx:1888,Integrability,interface,interface,1888,"al, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SeparationBase; \ingroup TMVA; An interface to calculate the ""SeparationGain"" for different; separation criteria used in various training algorithms. There are two things: the Separation Index, and the Separation Gain; Separation Index:; Measure of the ""purity"" of a sample. If all elements (events) in the; sample belong to the same class (e.g. signal or background), than the; separation index is 0 (meaning 100% purity (or 0% purity as it is; symmetric. The index becomes maximal, for perfectly mixed samples; eg. purity=50% , N_signal = N_bkg. Separation Gain:; the measure of how the quality of separation of the sample increases; by splitting the sample e.g. into a ""left-node"" and a ""right-node""; (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); this is then the quality criterion which is optimized for when trying; to increase the information in the system (making the best selection; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SeparationBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx:1138,Performance,optimiz,optimized,1138,"**********************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SeparationBase *; * *; * *; * Description: An interface to different separation criteria used in various *; * training algorithms, as there are: *; * *; * There are two things: the Separation Index, and the Separation Gain *; * Separation Index: *; * Measure of the ""purity"" of a sample. If all elements (events) in the *; * sample belong to the same class (e.g. signal or backgr), than the *; * separation index is 0 (meaning 100% purity (or 0% purity as it is *; * symmetric. The index becomes maximal, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SeparationBase; \ingroup TMVA; An interface to calculate the ""SeparationGain"" for different; separation criteria used in various training algorithms. There are two things: the Separation Index, and the Separation Gain; Separation Index:; Measure of the ""purity"" of a sample. If all ele",MatchSource.CODE_COMMENT,tmva/tmva/src/SeparationBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx:2672,Performance,optimiz,optimized,2672,"al, for perfectly mixed samples *; * eg. purity=50% , N_signal = N_bkg *; * *; * Separation Gain: *; * the measure of how the quality of separation of the sample increases *; * by splitting the sample e.g. into a ""left-node"" and a ""right-node"" *; * (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) *; * this is then the quality criterion which is optimized for when trying *; * to increase the information in the system (making the best selection *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SeparationBase; \ingroup TMVA; An interface to calculate the ""SeparationGain"" for different; separation criteria used in various training algorithms. There are two things: the Separation Index, and the Separation Gain; Separation Index:; Measure of the ""purity"" of a sample. If all elements (events) in the; sample belong to the same class (e.g. signal or background), than the; separation index is 0 (meaning 100% purity (or 0% purity as it is; symmetric. The index becomes maximal, for perfectly mixed samples; eg. purity=50% , N_signal = N_bkg. Separation Gain:; the measure of how the quality of separation of the sample increases; by splitting the sample e.g. into a ""left-node"" and a ""right-node""; (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); this is then the quality criterion which is optimized for when trying; to increase the information in the system (making the best selection; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SeparationBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx:372,Performance,optimiz,optimized,372,"////////////////////////////////////////////////////////////////////////////////; /// Separation Gain:; /// the measure of how the quality of separation of the sample increases; /// by splitting the sample e.g. into a ""left-node"" and a ""right-node""; /// (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); /// this is then the quality criterion which is optimized for when trying; /// to increase the information in the system (making the best selection",MatchSource.CODE_COMMENT,tmva/tmva/src/SeparationBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SeparationBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx:242,Deployability,integrat,integrated,242,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SimulatedAnnealing *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * *; * Copyright (c) 2008: *; * IFJ-Krakow, Poland *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SimulatedAnnealing; \ingroup TMVA; Base implementation of simulated annealing fitting procedure.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx:242,Integrability,integrat,integrated,242,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SimulatedAnnealing *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * *; * Copyright (c) 2008: *; * IFJ-Krakow, Poland *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SimulatedAnnealing; \ingroup TMVA; Base implementation of simulated annealing fitting procedure.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx:3,Energy Efficiency,energy,energy,3,"//""energy""",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx:16,Energy Efficiency,energy,energy,16,"// keep xnew if energy is reduced",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx:26,Energy Efficiency,reduce,reduced,26,"// keep xnew if energy is reduced",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx:4,Energy Efficiency,energy,energy,4,"// ""energy""",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx:18,Performance,optimiz,optimize,18,"//use 1% calls to optimize best founded minimum",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx:192,Deployability,integrat,integrated,192,"// @(#)root/tmva $Id$; // Author: Andraes Hoecker, Kamil Kraszewski, Maciej Kruk; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SimulatedAnnealingFitter *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * *; * Copyright (c) 2008: *; * IFJ-Krakow, Poland *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SimulatedAnnealingFitter; \ingroup TMVA; Fitter using a Simulated Annealing Algorithm; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealingFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx:192,Integrability,integrat,integrated,192,"// @(#)root/tmva $Id$; // Author: Andraes Hoecker, Kamil Kraszewski, Maciej Kruk; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SimulatedAnnealingFitter *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Krzysztof Danielowski <danielow@cern.ch> - IFJ & AGH, Poland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Kamil Kraszewski <kalq@cern.ch> - IFJ & UJ, Poland *; * Maciej Kruk <mkruk@cern.ch> - IFJ & AGH, Poland *; * *; * Copyright (c) 2008: *; * IFJ-Krakow, Poland *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SimulatedAnnealingFitter; \ingroup TMVA; Fitter using a Simulated Annealing Algorithm; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealingFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx:311,Energy Efficiency,adapt,adaptive,311,"////////////////////////////////////////////////////////////////////////////////; /// declare SA options.; ///; /// - MaxCalls `<int>` maximum number of calls for simulated annealing; /// - TemperatureGradient `<float>` temperature gradient for simulated annealing; /// - UseAdaptiveTemperature `<bool>` use of adaptive temperature for simulated annealing; /// - InitialTemperature `<float>` initial temperature for simulated annealing; /// - MinTemperature `<float>` minimum temperature for simulated annealing; /// - Eps `<int>` number of epochs for simulated annealing; /// - NFunLoops `<int>` number of loops for simulated annealing; /// - NEps `<int>` number of epochs for simulated annealing",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealingFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx:311,Modifiability,adapt,adaptive,311,"////////////////////////////////////////////////////////////////////////////////; /// declare SA options.; ///; /// - MaxCalls `<int>` maximum number of calls for simulated annealing; /// - TemperatureGradient `<float>` temperature gradient for simulated annealing; /// - UseAdaptiveTemperature `<bool>` use of adaptive temperature for simulated annealing; /// - InitialTemperature `<float>` initial temperature for simulated annealing; /// - MinTemperature `<float>` minimum temperature for simulated annealing; /// - Eps `<int>` number of epochs for simulated annealing; /// - NFunLoops `<int>` number of loops for simulated annealing; /// - NEps `<int>` number of epochs for simulated annealing",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealingFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx:93,Deployability,configurat,configuration,93,"////////////////////////////////////////////////////////////////////////////////; /// set SA configuration parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealingFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx:93,Modifiability,config,configuration,93,"////////////////////////////////////////////////////////////////////////////////; /// set SA configuration parameters",MatchSource.CODE_COMMENT,tmva/tmva/src/SimulatedAnnealingFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SimulatedAnnealingFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVEvent.cxx:159,Deployability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVEvent *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SVEvent; \ingroup TMVA; Event class for Support Vector Machine; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SVEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVEvent.cxx:159,Integrability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVEvent *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SVEvent; \ingroup TMVA; Event class for Support Vector Machine; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SVEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:159,Deployability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVKernelFunction *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * MultiGaussian, Product and Sum kernels included: *; * Adrian Bevan <adrian.bevan@cern.ch> - Queen Mary *; * University of London, UK *; * Tom Stevenson <thomas.james.stevenson@cern.ch> - Queen Mary *; * University of London, UK *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SVKernelFunction; \ingroup TMVA; Kernel for Support Vector Machine; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:159,Integrability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVKernelFunction *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * MultiGaussian, Product and Sum kernels included: *; * Adrian Bevan <adrian.bevan@cern.ch> - Queen Mary *; * University of London, UK *; * Tom Stevenson <thomas.james.stevenson@cern.ch> - Queen Mary *; * University of London, UK *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SVKernelFunction; \ingroup TMVA; Kernel for Support Vector Machine; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:15,Usability,clear,clear,15,"//fKernelsList.clear();",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:68,Modifiability,variab,variable,68,"// Kernel function with a kernel parameter gamma for; // each input variable. Described in ""An Introduction to; // Support Vector Machines and Other Kernel-based Learning; // Methods"" by Cristianini and Shawe-Taylor, Section 3.5",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:162,Usability,Learn,Learning,162,"// Kernel function with a kernel parameter gamma for; // each input variable. Described in ""An Introduction to; // Support Vector Machines and Other Kernel-based Learning; // Methods"" by Cristianini and Shawe-Taylor, Section 3.5",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:77,Energy Efficiency,power,power,77,"// Polynomial kernel of form (z.x + theta)^n; // it should be noted that the power is currently only integer",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:143,Security,access,accessible,143,"// This kernel doesn't always result in a positive-semidefinite Gram; // matrix so should be used with caution and therefore not; // currently accessible. This is not a valid Mercer kernel",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:261,Usability,Learn,Learning,261,"// Calculate product of kernels by looping over list of kernels; // and evaluating the value for each, setting kernel back to; // kProd before returning so it can be used again. Described in ""An Introduction to // Support Vector Machines and Other Kernel-based Learning; // Methods"" by Cristianini and Shawe-Taylor, Section 3.3.2",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:256,Usability,Learn,Learning,256,"// Calculate sum of kernels by looping over list of kernels; // and evaluating the value for each, setting kernel back to; // kSum before returning so it can be used again. Described in ""An Introduction to // Support Vector Machines and Other Kernel-based Learning; // Methods"" by Cristianini and Shawe-Taylor, Section 3.3.2",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelMatrix.cxx:159,Deployability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVKernelMatrix *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Minor modification to improve optimisation of kernel values: *; * Adrian Bevan <adrian.bevan@cern.ch> - Queen Mary *; * University of London, UK *; * Tom Stevenson <thomas.james.stevenson@cern.ch> - Queen Mary *; * University of London, UK *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SVKernelMatrix; \ingroup TMVA; Kernel matrix for Support Vector Machine; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelMatrix.cxx:159,Integrability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVKernelMatrix *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Minor modification to improve optimisation of kernel values: *; * Adrian Bevan <adrian.bevan@cern.ch> - Queen Mary *; * University of London, UK *; * Tom Stevenson <thomas.james.stevenson@cern.ch> - Queen Mary *; * University of London, UK *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SVKernelMatrix; \ingroup TMVA; Kernel matrix for Support Vector Machine; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SVKernelMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:159,Deployability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVWorkingSet *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SVWorkingSet; \ingroup TMVA; Working class for Support Vector Machine; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:159,Integrability,integrat,integrated,159,"// @(#)root/tmva $Id$; // Author: Andrzej Zemla; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : SVWorkingSet *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Marcin Wolter <Marcin.Wolter@cern.ch> - IFJ PAN, Krakow, Poland *; * Andrzej Zemla <azemla@cern.ch> - IFJ PAN, Krakow, Poland *; * (IFJ PAN: Henryk Niewodniczanski Inst. Nucl. Physics, Krakow, Poland) *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * PAN, Krakow, Poland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::SVWorkingSet; \ingroup TMVA; Working class for Support Vector Machine; */",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:10,Availability,error,error,10,"// update error cache",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:3,Deployability,update,update,3,"// update error cache",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:16,Performance,cache,cache,16,"// update error cache",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:7,Performance,optimiz,optimized,7,"// for optimized alfa's",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:2,Deployability,update,update,2,"//update Li & Lj if change is significant (??)",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:2,Deployability,update,update,2,"//update alphai alphaj_p",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:2,Deployability,update,update,2,"//update alphai_p alphaj",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:9,Availability,error,error,9,"//update error cache",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:2,Deployability,update,update,2,"//update error cache",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:15,Performance,cache,cache,15,"//update error cache",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:7,Deployability,update,update,7,"//TODO update Idexes; // compute fI_low, fB_low",MatchSource.CODE_COMMENT,tmva/tmva/src/SVWorkingSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivation.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivation *; * *; * Description: *; * Interface for TNeuron activation function classes. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivation; \ingroup TMVA; Interface for TNeuron activation function classes; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivation.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivation *; * *; * Description: *; * Interface for TNeuron activation function classes. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivation; \ingroup TMVA; Interface for TNeuron activation function classes; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivation.cxx:288,Integrability,Interface,Interface,288,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivation *; * *; * Description: *; * Interface for TNeuron activation function classes. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivation; \ingroup TMVA; Interface for TNeuron activation function classes; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivation.cxx:810,Integrability,Interface,Interface,810,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivation *; * *; * Description: *; * Interface for TNeuron activation function classes. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivation; \ingroup TMVA; Interface for TNeuron activation function classes; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationChooser.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationChooser *; * *; * *; * Description: *; * Class for easily choosing activation functions. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationChooser; \ingroup TMVA; Class for easily choosing activation functions; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationChooser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationChooser.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationChooser.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TActivationChooser *; * *; * *; * Description: *; * Class for easily choosing activation functions. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationChooser; \ingroup TMVA; Class for easily choosing activation functions; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationChooser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationChooser.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationIdentity.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TActivationIdentity *; * *; * *; * Description: *; * Identity activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationIdentity; \ingroup TMVA; Identity activation function for TNeuron; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationIdentity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationIdentity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationIdentity.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TActivationIdentity *; * *; * *; * Description: *; * Identity activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationIdentity; \ingroup TMVA; Identity activation function for TNeuron; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationIdentity.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationIdentity.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationRadial.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TActivationRadial *; * *; * *; * Description: *; * Radial basis activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationRadial; \ingroup TMVA; Radial basis activation function for ANN.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationRadial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationRadial.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationRadial.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TActivationRadial *; * *; * *; * Description: *; * Radial basis activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationRadial; \ingroup TMVA; Radial basis activation function for ANN.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationRadial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationRadial.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationReLU.cxx:156,Deployability,integrat,integrated,156,"// @(#)root/tmva $Id$; // Author: Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TActivationReLU *; * *; * *; * Description: *; * Rectified linear unit function for an ANN. *; * *; * Authors (alphabetical): *; * Helge Voss *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationReLU; \ingroup TMVA; Rectified Linear Unit activation function for TNeuron; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationReLU.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationReLU.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationReLU.cxx:156,Integrability,integrat,integrated,156,"// @(#)root/tmva $Id$; // Author: Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TActivationReLU *; * *; * *; * Description: *; * Rectified linear unit function for an ANN. *; * *; * Authors (alphabetical): *; * Helge Voss *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationReLU; \ingroup TMVA; Rectified Linear Unit activation function for TNeuron; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationReLU.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationReLU.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationSigmoid.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TActivationSigmoid *; * *; * *; * Description: *; * Sigmoid activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationSigmoid; \ingroup TMVA; Sigmoid activation function for TNeuron.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationSigmoid.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationSigmoid.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationSigmoid.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TActivationSigmoid *; * *; * *; * Description: *; * Sigmoid activation function for TNeuron *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationSigmoid; \ingroup TMVA; Sigmoid activation function for TNeuron.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationSigmoid.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationSigmoid.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationTanh.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TActivationTanh *; * *; * *; * Description: *; * Tanh activation function (sigmoid normalized in [-1,1] for an ANN. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationTanh; \ingroup TMVA; Tanh activation function for ANN.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationTanh.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationTanh.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationTanh.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TActivationTanh *; * *; * *; * Description: *; * Tanh activation function (sigmoid normalized in [-1,1] for an ANN. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TActivationTanh; \ingroup TMVA; Tanh activation function for ANN.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TActivationTanh.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TActivationTanh.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Timer *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Timer; \ingroup TMVA; Timing information for training and evaluation of MVA methods. Usage:. ~~~ {.cpp}; TMVA::gConfig().SetDrawProgressBar(true);. TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code. // now, print progress bar:; timer.DrawProgressBar( i );. // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;. }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;; ~~~. Remark: in batch mode, the progress bar is quite ugly; you may; want to use the text output then. Note that by default in TMVA::Config the drawing of the; progress bar is switched off. To have the progress bar visible you need ; to enable it by calling TMVA::gConfig().SetDrawProgressBar(true). */",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Timer *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Timer; \ingroup TMVA; Timing information for training and evaluation of MVA methods. Usage:. ~~~ {.cpp}; TMVA::gConfig().SetDrawProgressBar(true);. TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code. // now, print progress bar:; timer.DrawProgressBar( i );. // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;. }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;; ~~~. Remark: in batch mode, the progress bar is quite ugly; you may; want to use the text output then. Note that by default in TMVA::Config the drawing of the; progress bar is switched off. To have the progress bar visible you need ; to enable it by calling TMVA::gConfig().SetDrawProgressBar(true). */",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:1648,Modifiability,Config,Config,1648,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Timer *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Timer; \ingroup TMVA; Timing information for training and evaluation of MVA methods. Usage:. ~~~ {.cpp}; TMVA::gConfig().SetDrawProgressBar(true);. TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code. // now, print progress bar:; timer.DrawProgressBar( i );. // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;. }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;; ~~~. Remark: in batch mode, the progress bar is quite ugly; you may; want to use the text output then. Note that by default in TMVA::Config the drawing of the; progress bar is switched off. To have the progress bar visible you need ; to enable it by calling TMVA::gConfig().SetDrawProgressBar(true). */",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:1271,Usability,progress bar,progress bar,1271,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Timer *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Timer; \ingroup TMVA; Timing information for training and evaluation of MVA methods. Usage:. ~~~ {.cpp}; TMVA::gConfig().SetDrawProgressBar(true);. TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code. // now, print progress bar:; timer.DrawProgressBar( i );. // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;. }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;; ~~~. Remark: in batch mode, the progress bar is quite ugly; you may; want to use the text output then. Note that by default in TMVA::Config the drawing of the; progress bar is switched off. To have the progress bar visible you need ; to enable it by calling TMVA::gConfig().SetDrawProgressBar(true). */",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:1547,Usability,progress bar,progress bar,1547,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Timer *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Timer; \ingroup TMVA; Timing information for training and evaluation of MVA methods. Usage:. ~~~ {.cpp}; TMVA::gConfig().SetDrawProgressBar(true);. TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code. // now, print progress bar:; timer.DrawProgressBar( i );. // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;. }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;; ~~~. Remark: in batch mode, the progress bar is quite ugly; you may; want to use the text output then. Note that by default in TMVA::Config the drawing of the; progress bar is switched off. To have the progress bar visible you need ; to enable it by calling TMVA::gConfig().SetDrawProgressBar(true). */",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:1675,Usability,progress bar,progress bar,1675,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Timer *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Timer; \ingroup TMVA; Timing information for training and evaluation of MVA methods. Usage:. ~~~ {.cpp}; TMVA::gConfig().SetDrawProgressBar(true);. TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code. // now, print progress bar:; timer.DrawProgressBar( i );. // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;. }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;; ~~~. Remark: in batch mode, the progress bar is quite ugly; you may; want to use the text output then. Note that by default in TMVA::Config the drawing of the; progress bar is switched off. To have the progress bar visible you need ; to enable it by calling TMVA::gConfig().SetDrawProgressBar(true). */",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:1717,Usability,progress bar,progress bar,1717,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Timer *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Timer; \ingroup TMVA; Timing information for training and evaluation of MVA methods. Usage:. ~~~ {.cpp}; TMVA::gConfig().SetDrawProgressBar(true);. TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code. // now, print progress bar:; timer.DrawProgressBar( i );. // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;. }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;; ~~~. Remark: in batch mode, the progress bar is quite ugly; you may; want to use the text output then. Note that by default in TMVA::Config the drawing of the; progress bar is switched off. To have the progress bar visible you need ; to enable it by calling TMVA::gConfig().SetDrawProgressBar(true). */",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:108,Usability,progress bar,progress bar,108,"////////////////////////////////////////////////////////////////////////////////; /// draws a string in the progress bar",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:92,Usability,progress bar,progress bar,92,"////////////////////////////////////////////////////////////////////////////////; /// draws progress bar in color or B&W; /// caution:",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:3,Safety,sanity check,sanity check,3,"// sanity check:",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:17,Usability,progress bar,progress bar,17,"// do not redraw progress bar when neither time not ticks are different",MatchSource.CODE_COMMENT,tmva/tmva/src/Timer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TNeuron *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuron; \ingroup TMVA; Neuron class used by TMVA artificial neural network methods; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TNeuron *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuron; \ingroup TMVA; Neuron class used by TMVA artificial neural network methods; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:114,Modifiability,variab,variables,114,"////////////////////////////////////////////////////////////////////////////////; /// initialize the neuron, most variables still need to be set via setters",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:96,Availability,error,error,96,"////////////////////////////////////////////////////////////////////////////////; /// calculate error field",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:29,Availability,error,error,29,"// output neuron should have error set all ready",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:21,Availability,error,error,21,"// need to calculate error for any other neuron",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// set error, this should only be done for an output neuron",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:86,Deployability,update,update,86,"////////////////////////////////////////////////////////////////////////////////; /// update and adjust the pre-synapses for each neuron (input neuron has no pre-synapse); /// this method should only be called in batch mode",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:86,Deployability,update,update,86,"////////////////////////////////////////////////////////////////////////////////; /// update the pre-synapses for each neuron (input neuron has no pre-synapse); /// this method should only be called in sequential mode",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// initialize the error fields of all pre-neurons; /// this method should only be called in batch mode",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:92,Integrability,message,message,92,"////////////////////////////////////////////////////////////////////////////////; /// print message, for debugging",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:4,Integrability,message,message,4,"//! message logger, static to save resources",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:12,Testability,log,logger,12,"//! message logger, static to save resources",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuron.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInput.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInput *; * *; * Description: *; * Interface for TNeuron input calculation classes *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInput; \ingroup TMVA; Interface for TNeuron input calculation classes.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInput.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInput.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInput.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInput *; * *; * Description: *; * Interface for TNeuron input calculation classes *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInput; \ingroup TMVA; Interface for TNeuron input calculation classes.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInput.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInput.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInput.cxx:289,Integrability,Interface,Interface,289,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInput *; * *; * Description: *; * Interface for TNeuron input calculation classes *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInput; \ingroup TMVA; Interface for TNeuron input calculation classes.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInput.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInput.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInput.cxx:809,Integrability,Interface,Interface,809,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInput *; * *; * Description: *; * Interface for TNeuron input calculation classes *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInput; \ingroup TMVA; Interface for TNeuron input calculation classes.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInput.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInput.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputAbs.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputAbs *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the sum of the absolute values *; * of the weighted inputs *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInputAbs; \ingroup TMVA; TNeuron input calculator -- calculates the sum of the absolute; values of the weighted inputs; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInputAbs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputAbs.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputAbs.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputAbs *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the sum of the absolute values *; * of the weighted inputs *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInputAbs; \ingroup TMVA; TNeuron input calculator -- calculates the sum of the absolute; values of the weighted inputs; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInputAbs.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputAbs.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputChooser.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputChooser *; * *; * *; * Description: *; * Class for easily choosing neuron input functions. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInputChooser; \ingroup TMVA; Class for easily choosing neuron input functions.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInputChooser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputChooser.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputChooser.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputChooser *; * *; * *; * Description: *; * Class for easily choosing neuron input functions. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInputChooser; \ingroup TMVA; Class for easily choosing neuron input functions.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInputChooser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputChooser.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputSqSum.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputSqSum *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the square *; * of the weighted sum of inputs. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInputSqSum; \ingroup TMVA; TNeuron input calculator -- calculates the squared weighted sum of inputs.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInputSqSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputSqSum.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputSqSum.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputSqSum *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the square *; * of the weighted sum of inputs. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInputSqSum; \ingroup TMVA; TNeuron input calculator -- calculates the squared weighted sum of inputs.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInputSqSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputSqSum.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputSum.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputSum *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the weighted sum of inputs. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInputSum; \ingroup TMVA; TNeuron input calculator -- calculates the weighted sum of inputs.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInputSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputSum.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputSum.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::TNeuronInputSum *; * *; * *; * Description: *; * TNeuron input calculator -- calculates the weighted sum of inputs. *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TNeuronInputSum; \ingroup TMVA; TNeuron input calculator -- calculates the weighted sum of inputs.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TNeuronInputSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuronInputSum.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:220,Deployability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Tools *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Tools; \ingroup TMVA; Global auxiliary applications and data treatment routines.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:220,Integrability,integrat,integrated,220,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Tools *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Tools; \ingroup TMVA; Global auxiliary applications and data treatment routines.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:1236,Integrability,rout,routines,1236,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Tools *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Tools; \ingroup TMVA; Global auxiliary applications and data treatment routines.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:27,Safety,safe,safe,27,"//NOTE: there is no thread safe way to do this so; // one must only call this method ones in an executable",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks; // signal and background histograms must have same number of bins and; // same limits",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:86,Safety,sanity check,sanity check,86,"////////////////////////////////////////////////////////////////////////////////; /// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Safety,sanity check,sanity check,3,"// sanity check: matrix must be diagonal and positive definit",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:95,Modifiability,variab,variable,95,"////////////////////////////////////////////////////////////////////////////////; /// projects variable from tree into normalised histogram",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:20,Availability,error,errors,20,"// enable quadratic errors",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:410,Modifiability,variab,variables,410,"////////////////////////////////////////////////////////////////////////////////; /// parse option string for ANN methods; /// default settings (should be defined in theOption string); ///; /// format and syntax of option string: ""3000:N:N+2:N-3:6""; ///; /// where:; /// - 3000 - number of training cycles (epochs); /// - N - number of nodes in first hidden layer, where N is the number; /// of discriminating variables used (note that the first ANN; /// layer necessarily has N nodes, and hence is not given).; /// - N+2 - number of nodes in 2nd hidden layer (2 nodes more than; /// number of variables); /// - N-3 - number of nodes in 3rd hidden layer (3 nodes less than; /// number of variables); /// - 6 - 6 nodes in last (4th) hidden layer (note that the last ANN; /// layer in MVA has 2 nodes, each one for signal and background; /// classes)",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:594,Modifiability,variab,variables,594,"////////////////////////////////////////////////////////////////////////////////; /// parse option string for ANN methods; /// default settings (should be defined in theOption string); ///; /// format and syntax of option string: ""3000:N:N+2:N-3:6""; ///; /// where:; /// - 3000 - number of training cycles (epochs); /// - N - number of nodes in first hidden layer, where N is the number; /// of discriminating variables used (note that the first ANN; /// layer necessarily has N nodes, and hence is not given).; /// - N+2 - number of nodes in 2nd hidden layer (2 nodes more than; /// number of variables); /// - N-3 - number of nodes in 3rd hidden layer (3 nodes less than; /// number of variables); /// - 6 - 6 nodes in last (4th) hidden layer (note that the last ANN; /// layer in MVA has 2 nodes, each one for signal and background; /// classes)",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:688,Modifiability,variab,variables,688,"////////////////////////////////////////////////////////////////////////////////; /// parse option string for ANN methods; /// default settings (should be defined in theOption string); ///; /// format and syntax of option string: ""3000:N:N+2:N-3:6""; ///; /// where:; /// - 3000 - number of training cycles (epochs); /// - N - number of nodes in first hidden layer, where N is the number; /// of discriminating variables used (note that the first ANN; /// layer necessarily has N nodes, and hence is not given).; /// - N+2 - number of nodes in 2nd hidden layer (2 nodes more than; /// number of variables); /// - N-3 - number of nodes in 3rd hidden layer (3 nodes less than; /// number of variables); /// - 6 - 6 nodes in last (4th) hidden layer (note that the last ANN; /// layer in MVA has 2 nodes, each one for signal and background; /// classes)",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:151,Integrability,depend,dependency,151,"////////////////////////////////////////////////////////////////////////////////; /// Compute Correlation Ratio of 2D histogram to estimate functional dependency between two variables; /// Author: Moritz Backes, Geneva (2009)",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:174,Modifiability,variab,variables,174,"////////////////////////////////////////////////////////////////////////////////; /// Compute Correlation Ratio of 2D histogram to estimate functional dependency between two variables; /// Author: Moritz Backes, Geneva (2009)",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:116,Deployability,configurat,configuration,116,"////////////////////////////////////////////////////////////////////////////////; /// check for ""silence"" option in configuration option string",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:116,Modifiability,config,configuration,116,"////////////////////////////////////////////////////////////////////////////////; /// check for ""silence"" option in configuration option string",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:8,Energy Efficiency,green,green,8,"// dark green",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:14,Energy Efficiency,green,green,14,"// bold light green",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:12,Energy Efficiency,green,green,12,"// white on green background",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:106,Usability,simpl,simple,106,"////////////////////////////////////////////////////////////////////////////////; /// formatted output of simple table",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Safety,sanity check,sanity check,3,"// sanity check: matrix must be quadratic",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:22,Modifiability,variab,variable,22,"// get length of each variable, and maximum length",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Safety,sanity check,sanity check,3,"// sanity check: matrix must be quadratic",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:22,Modifiability,variab,variable,22,"// get length of each variable, and maximum length",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:116,Availability,avail,available,116,"////////////////////////////////////////////////////////////////////////////////; /// writes a float value with the available precision to a stream",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:115,Availability,avail,available,115,"////////////////////////////////////////////////////////////////////////////////; /// reads a float value with the available precision from a stream",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:145,Testability,Log,Logger,145,"////////////////////////////////////////////////////////////////////////////////; /// direct output, eg, when starting ROOT session -> no use of Logger here",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:102,Deployability,release,release,102,"////////////////////////////////////////////////////////////////////////////////; /// prints the TMVA release number and date",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:102,Deployability,release,release,102,"////////////////////////////////////////////////////////////////////////////////; /// prints the ROOT release number and date",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:111,Integrability,message,messages,111,"////////////////////////////////////////////////////////////////////////////////; /// various kinds of welcome messages; /// ASCII text generated by this site: http://www.network-science.de/ascii/",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Testability,log,logger,3,"// logger << kINFO << "" "" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,Performance,perform,perform,3,"// perform event loop",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:24,Availability,Error,Error,24,"// if ( *w < 0) {; // ::Error(""TMVA::Tools::Mean"",""w[%d] = %.4e < 0 ?!"",i,*w);; // return 0;; // } // SURE, why wouldn't you allow for negative event weights here ?? :)",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:24,Availability,Error,Error,24,"// if ( *w < 0) {; // ::Error(""TMVA::Tools::Mean"",""w[%d] = %.4e < 0 ?!"",i,*w);; // return 0;; // } // SURE, why wouldn't you allow for negative event weights here ?? :)",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:8,Usability,learn,learned,8,"// as I learned multiplications are much faster than division, and later I need one per bin. Well, not that it would really matter here I guess :)",MatchSource.CODE_COMMENT,tmva/tmva/src/Tools.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TrainingHistory.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TrainingHistory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Author: *; * Joseph McKenna <Joseph.McKenna@cern.ch> - Aarhus, Denmark *; * *; * Copyright (c) 2019: *; * Aarhus, Denmark *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TrainingHistory; \ingroup TMVA. Tracking data from training. Eg, From deep learning record loss for each Epoch. */",MatchSource.CODE_COMMENT,tmva/tmva/src/TrainingHistory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TrainingHistory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TrainingHistory.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TrainingHistory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Author: *; * Joseph McKenna <Joseph.McKenna@cern.ch> - Aarhus, Denmark *; * *; * Copyright (c) 2019: *; * Aarhus, Denmark *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TrainingHistory; \ingroup TMVA. Tracking data from training. Eg, From deep learning record loss for each Epoch. */",MatchSource.CODE_COMMENT,tmva/tmva/src/TrainingHistory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TrainingHistory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TrainingHistory.cxx:776,Usability,learn,learning,776,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TrainingHistory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Author: *; * Joseph McKenna <Joseph.McKenna@cern.ch> - Aarhus, Denmark *; * *; * Copyright (c) 2019: *; * Aarhus, Denmark *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TrainingHistory; \ingroup TMVA. Tracking data from training. Eg, From deep learning record loss for each Epoch. */",MatchSource.CODE_COMMENT,tmva/tmva/src/TrainingHistory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TrainingHistory.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:240,Deployability,integrat,integrated,240,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TransformationHandler *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TransformationHandler; \ingroup TMVA; Class that contains all the data information.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:240,Integrability,integrat,integrated,240,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Eckhard von Toerne, Jan Therhaag; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TransformationHandler *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TransformationHandler; \ingroup TMVA; Class that contains all the data information.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:138,Modifiability,variab,variables,138,"////////////////////////////////////////////////////////////////////////////////; /// Caches calculated summary statistics of transformed variables.; ///; /// \param[in] k index of class; /// \param[in] ivar index of variable; /// \param[in] mean the mean value of the variable; /// \param[in] rms the root-mean-square value of the variable; /// \param[in] min the minimum value of the variable; /// \param[in] max the maximum value of the variable",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:217,Modifiability,variab,variable,217,"////////////////////////////////////////////////////////////////////////////////; /// Caches calculated summary statistics of transformed variables.; ///; /// \param[in] k index of class; /// \param[in] ivar index of variable; /// \param[in] mean the mean value of the variable; /// \param[in] rms the root-mean-square value of the variable; /// \param[in] min the minimum value of the variable; /// \param[in] max the maximum value of the variable",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:269,Modifiability,variab,variable,269,"////////////////////////////////////////////////////////////////////////////////; /// Caches calculated summary statistics of transformed variables.; ///; /// \param[in] k index of class; /// \param[in] ivar index of variable; /// \param[in] mean the mean value of the variable; /// \param[in] rms the root-mean-square value of the variable; /// \param[in] min the minimum value of the variable; /// \param[in] max the maximum value of the variable",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:332,Modifiability,variab,variable,332,"////////////////////////////////////////////////////////////////////////////////; /// Caches calculated summary statistics of transformed variables.; ///; /// \param[in] k index of class; /// \param[in] ivar index of variable; /// \param[in] mean the mean value of the variable; /// \param[in] rms the root-mean-square value of the variable; /// \param[in] min the minimum value of the variable; /// \param[in] max the maximum value of the variable",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:386,Modifiability,variab,variable,386,"////////////////////////////////////////////////////////////////////////////////; /// Caches calculated summary statistics of transformed variables.; ///; /// \param[in] k index of class; /// \param[in] ivar index of variable; /// \param[in] mean the mean value of the variable; /// \param[in] rms the root-mean-square value of the variable; /// \param[in] min the minimum value of the variable; /// \param[in] max the maximum value of the variable",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:440,Modifiability,variab,variable,440,"////////////////////////////////////////////////////////////////////////////////; /// Caches calculated summary statistics of transformed variables.; ///; /// \param[in] k index of class; /// \param[in] ivar index of variable; /// \param[in] mean the mean value of the variable; /// \param[in] rms the root-mean-square value of the variable; /// \param[in] min the minimum value of the variable; /// \param[in] max the maximum value of the variable",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:86,Performance,Cache,Caches,86,"////////////////////////////////////////////////////////////////////////////////; /// Caches calculated summary statistics of transformed variables.; ///; /// \param[in] k index of class; /// \param[in] ivar index of variable; /// \param[in] mean the mean value of the variable; /// \param[in] rms the root-mean-square value of the variable; /// \param[in] min the minimum value of the variable; /// \param[in] max the maximum value of the variable",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:2,Testability,Log,Log,2,"//Log() << kWARNING << __FILE__ <<"":InverseTransform fTransformationsReferenceClasses is empty"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:214,Modifiability,Variab,VariableTransformBase,214,"// TListIter trIt(&fTransformations);; // std::vector< Int_t >::const_iterator rClsIt = fTransformationsReferenceClasses.begin();; // const Event* trEv = ev;; // UInt_t nvars = 0, ntgts = 0, nspcts = 0;; // while (VariableTransformBase *trf = (VariableTransformBase*) trIt() ) { // shouldn't be the transformation called in the inverse order for the inversetransformation?????; // if (trf->IsCreated()) {; // trf->CountVariableTypes( nvars, ntgts, nspcts );; // if( !(suppressIfNoTargets && ntgts==0) ); // trEv = trf->InverseTransform(ev, (*rClsIt) );; // }; // else break;; // rClsIt++;; // }; // return trEv;",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:244,Modifiability,Variab,VariableTransformBase,244,"// TListIter trIt(&fTransformations);; // std::vector< Int_t >::const_iterator rClsIt = fTransformationsReferenceClasses.begin();; // const Event* trEv = ev;; // UInt_t nvars = 0, ntgts = 0, nspcts = 0;; // while (VariableTransformBase *trf = (VariableTransformBase*) trIt() ) { // shouldn't be the transformation called in the inverse order for the inversetransformation?????; // if (trf->IsCreated()) {; // trf->CountVariableTypes( nvars, ntgts, nspcts );; // if( !(suppressIfNoTargets && ntgts==0) ); // trEv = trf->InverseTransform(ev, (*rClsIt) );; // }; // else break;; // rClsIt++;; // }; // return trEv;",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:12,Modifiability,variab,variables,12,"// plot the variables once in this transformation",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:151,Modifiability,variab,variables,151,"////////////////////////////////////////////////////////////////////////////////; /// method to calculate minimum, maximum, mean, and RMS for all; /// variables used in the MVA",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:13,Modifiability,variab,variables,13,"// first for variables, then for targets",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:13,Modifiability,variab,variables,13,"// first for variables, then for targets",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:34,Testability,Log,Log,34,"//for (UInt_t i=0; i<clen; i++) //Log() << ""-"";; //Log() << Endl;; // full column length",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:51,Testability,Log,Log,51,"//for (UInt_t i=0; i<clen; i++) //Log() << ""-"";; //Log() << Endl;; // full column length",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:119,Modifiability,variab,variables,119,"////////////////////////////////////////////////////////////////////////////////; /// create histograms from the input variables; /// - histograms for all input variables; /// - scatter plots for all pairs of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:161,Modifiability,variab,variables,161,"////////////////////////////////////////////////////////////////////////////////; /// create histograms from the input variables; /// - histograms for all input variables; /// - scatter plots for all pairs of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:215,Modifiability,variab,variables,215,"////////////////////////////////////////////////////////////////////////////////; /// create histograms from the input variables; /// - histograms for all input variables; /// - scatter plots for all pairs of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:118,Testability,test,testing,118,"// you plot for the individual classifiers. Note, here the ""statistics"" still need to be calculated as you are in the testing phase",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:18,Modifiability,variab,variables,18,"// histograms for variables",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:31,Modifiability,variab,variables,31,"// if there are too many input variables, the creation of correlations plots blows up; // memory and basically kills the TMVA execution; // --> avoid above critical number (which can be user defined)",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:144,Safety,avoid,avoid,144,"// if there are too many input variables, the creation of correlations plots blows up; // memory and basically kills the TMVA execution; // --> avoid above critical number (which can be user defined)",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:35,Modifiability,variab,variables,35,"// create the histos first for the variables, then for the targets",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:13,Modifiability,variab,variables,13,"// number of variables or number of targets",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:31,Modifiability,variab,variable,31,"// choose the appropriate one (variable or target)",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:34,Modifiability,variab,variable,34,"// add ""target"" in case of target variable (required for plotting macros)",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:33,Modifiability,variab,variables,33,"// special treatment for integer variables",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:33,Safety,safe,safety,33,"// this if xmin == xmax == 0; // safety margin for values equal to the maximum within the histogram",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:31,Modifiability,variab,variable,31,"// choose the appropriate one (variable or target)",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:60,Modifiability,variab,variables,60,"// compute correlation coefficient between target value and variables (regression only)",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:48,Modifiability,variab,variables,48,"// average correlation between first target and variables (so far only for single-target regression)",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:35,Modifiability,variab,variables,35,"// create the histos first for the variables, then for the targets",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:13,Modifiability,variab,variables,13,"// number of variables or number of targets",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:3,Modifiability,variab,variable,3,"// variable histos",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:29,Modifiability,variab,variables,29,"// computes ranking of input variables; // separation for 2-class classification",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:21,Energy Efficiency,adapt,adapt,21,"// TODO: ugly hack.. adapt to new framework",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:21,Modifiability,adapt,adapt,21,"// TODO: ugly hack.. adapt to new framework",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:26,Performance,perform,performance,26,"// for regression compute performance from correlation with target value; // write histograms",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:75,Testability,Log,Log,75,"// TObject* o = fRootBaseDir->FindObject(outputDir);; // if (o != 0) {; // Log() << kFATAL << ""A "" << o->ClassName() << "" with name "" << o->GetName() << "" already exists in ""; // << fRootBaseDir->GetPath() << ""(""<<outputDir<<"")"" << Endl;; // }",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:110,Modifiability,variab,variables,110,"////////////////////////////////////////////////////////////////////////////////; /// prints ranking of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:2,Testability,Log,Log,2,"//Log() << kINFO << "" "" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/TransformationHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline1.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSpline1 *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TSpline1; \ingroup TMVA; Linear interpolation of TGraph; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TSpline1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline1.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline1.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSpline1 *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TSpline1; \ingroup TMVA; Linear interpolation of TGraph; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TSpline1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline1.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline1.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/TSpline1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline1.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline2.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSpline2 *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TSpline2; \ingroup TMVA; Quadratic interpolation of TGraph; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TSpline2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline2.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline2.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSpline2 *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TSpline2; \ingroup TMVA; Quadratic interpolation of TGraph; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TSpline2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline2.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline2.cxx:3,Safety,sanity check,sanity checks,3,"// sanity checks",MatchSource.CODE_COMMENT,tmva/tmva/src/TSpline2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline2.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline2.cxx:258,Integrability,rout,routine,258,"////////////////////////////////////////////////////////////////////////////////; /// quadratic interpolation; /// Revised and checked by Francois Nov, 16th, 2000; /// Note the beautiful non-spontaneous symmetry breaking ...; /// It was checked that the old routine gave exactly the same answers.; ///",MatchSource.CODE_COMMENT,tmva/tmva/src/TSpline2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSpline2.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx:160,Deployability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSynapse *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TSynapse; \ingroup TMVA; Synapse class used by TMVA artificial neural network methods; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TSynapse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx:160,Integrability,integrat,integrated,160,"// @(#)root/tmva $Id$; // Author: Matt Jachowski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TSynapse *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::TSynapse; \ingroup TMVA; Synapse class used by TMVA artificial neural network methods; */",MatchSource.CODE_COMMENT,tmva/tmva/src/TSynapse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx:90,Availability,error,error,90,"////////////////////////////////////////////////////////////////////////////////; /// get error field of post-neuron weighted by synapse weight",MatchSource.CODE_COMMENT,tmva/tmva/src/TSynapse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx:117,Availability,error,error,117,"////////////////////////////////////////////////////////////////////////////////; /// adjust the weight based on the error field all ready calculated by CalculateDelta",MatchSource.CODE_COMMENT,tmva/tmva/src/TSynapse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx:107,Availability,error,error,107,"////////////////////////////////////////////////////////////////////////////////; /// calculate/adjust the error field for this synapse",MatchSource.CODE_COMMENT,tmva/tmva/src/TSynapse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx:4,Integrability,message,message,4,"//! message logger, static to save resources",MatchSource.CODE_COMMENT,tmva/tmva/src/TSynapse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx:12,Testability,log,logger,12,"//! message logger, static to save resources",MatchSource.CODE_COMMENT,tmva/tmva/src/TSynapse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TSynapse.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Types.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Types *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::Types; \ingroup TMVA; Singleton class for Global types used by TMVA; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Types.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Types.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Types.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Types *; * *; * *; * Description: *; * Implementation *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::Types; \ingroup TMVA; Singleton class for Global types used by TMVA; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Types.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Types.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableDecorrTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableDecorrTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableDecorrTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableDecorrTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableDecorrTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableDecorrTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:290,Modifiability,Variab,VariableDecorrTransform,290,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableDecorrTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableDecorrTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableDecorrTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:1086,Modifiability,Variab,VariableDecorrTransform,1086,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableDecorrTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableDecorrTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableDecorrTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:106,Modifiability,variab,variable,106,"////////////////////////////////////////////////////////////////////////////////; /// creates string with variable transformations applied",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableDecorrTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:37,Modifiability,variab,variables,37,"// transformation to decorrelate the variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableDecorrTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:20,Availability,mask,masked,20,"// targets might be masked (for events where the targets have not been computed yet)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableDecorrTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:15,Modifiability,variab,variable,15,"// diagonalise variable vectors",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableDecorrTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:207,Deployability,integrat,integrated,207,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard v. Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableGaussTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - Uni Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableGaussTransform; \ingroup TMVA; Gaussian Transformation of input variables.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:207,Integrability,integrat,integrated,207,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard v. Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableGaussTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - Uni Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableGaussTransform; \ingroup TMVA; Gaussian Transformation of input variables.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:289,Modifiability,Variab,VariableGaussTransform,289,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard v. Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableGaussTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - Uni Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableGaussTransform; \ingroup TMVA; Gaussian Transformation of input variables.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:1145,Modifiability,Variab,VariableGaussTransform,1145,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard v. Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableGaussTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - Uni Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableGaussTransform; \ingroup TMVA; Gaussian Transformation of input variables.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:1217,Modifiability,variab,variables,1217,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard v. Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableGaussTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - Uni Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableGaussTransform; \ingroup TMVA; Gaussian Transformation of input variables.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:33,Modifiability,variab,variable,33,"//EVT workaround end; // get the variable vector of the current event",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:33,Modifiability,variab,variable,33,"//EVT workaround end; // get the variable vector of the current event",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:58,Integrability,depend,depends,58,"// nbins[0] = number of bins for signal distributions. It depends on the number of entries, thus it's the same for all the input variables, but it isn't necessary for some ""weird"" reason.",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:129,Modifiability,variab,variables,129,"// nbins[0] = number of bins for signal distributions. It depends on the number of entries, thus it's the same for all the input variables, but it isn't necessary for some ""weird"" reason.",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:50,Performance,perform,perform,50,"// entries with kTRUE must not be transformed; // perform event loop",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:3,Performance,perform,perform,3,"// perform event loop",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:37,Modifiability,Variab,Variables,37,"// gTools().AddAttr( varxml, ""Name"", Variables()[ivar].GetLabel() );",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:8,Safety,avoid,avoids,8,"// this avoids the binding of the hists in TMVA::PDF to the current ROOT file",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:11,Modifiability,variab,variables,11,"// declare variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:16,Modifiability,Variab,Variables,16,"// Double_t xmn=Variables()[idx].GetMin();; // Double_t xmx=Variables()[idx].GetMax();",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:60,Modifiability,Variab,Variables,60,"// Double_t xmn=Variables()[idx].GetMin();; // Double_t xmx=Variables()[idx].GetMax();",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableGaussTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx:188,Deployability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableIdentityTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableIdentityTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableIdentityTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx:188,Integrability,integrat,integrated,188,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableIdentityTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableIdentityTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableIdentityTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx:270,Modifiability,Variab,VariableIdentityTransform,270,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableIdentityTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableIdentityTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableIdentityTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx:969,Modifiability,Variab,VariableIdentityTransform,969,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableIdentityTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableIdentityTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableIdentityTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx:130,Testability,Log,Log,130,"////////////////////////////////////////////////////////////////////////////////; /// identity transformation to write to XML; ///Log() << kFATAL << ""Please implement writing of transformation as XML"" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableIdentityTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:83,Modifiability,Variab,VariableImportanceResult,83,// @(#)root/tmva $Id$; // Author: Omar Zapata and Sergei Gleyzer; /*! \class TMVA::VariableImportanceResult; \ingroup TMVA; */; /*! \class TMVA::VariableImportance; \ingroup TMVA; */,MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:145,Modifiability,Variab,VariableImportance,145,// @(#)root/tmva $Id$; // Author: Omar Zapata and Sergei Gleyzer; /*! \class TMVA::VariableImportanceResult; \ingroup TMVA; */; /*! \class TMVA::VariableImportance; \ingroup TMVA; */,MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:21,Modifiability,variab,variables,21,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:35,Modifiability,variab,variable,35,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:55,Performance,load,loader,55,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:32,Modifiability,variab,variable,32,"// dataloader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:54,Performance,load,loader,54,"// dataloader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:10,Modifiability,variab,variables,10,"// adding variables from seed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:3,Performance,Load,Loading,3,"// Loading Dataset",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:9,Testability,Test,Test,9,"// Train/Test/Evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:20,Modifiability,variab,variable,20,"//need at least one variable; //NOTE: if subssed is zero then is the special case; //that count in xbitset is 1",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:11,Performance,load,loader,11,"//creating loader for subseed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:9,Modifiability,variab,variables,9,"//adding variables from subseed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:2,Performance,Load,Loading,2,"//Loading Dataset",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:8,Testability,Test,Test,8,"//Train/Test/Evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:21,Modifiability,variab,variables,21,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:35,Modifiability,variab,variable,35,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:55,Performance,load,loader,55,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:32,Modifiability,variab,variable,32,"// dataloader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:54,Performance,load,loader,54,"// dataloader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:10,Modifiability,variab,variables,10,"// adding variables from seed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:2,Performance,Load,Loading,2,"//Loading Dataset",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:8,Testability,Test,Test,8,"//Train/Test/Evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:20,Modifiability,variab,variable,20,"//need at least one variable; //NOTE: if subssed is zero then is the special case; //that count in xbitset is 1",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:11,Performance,load,loader,11,"//creating loader for subseed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:9,Modifiability,variab,variables,9,"//adding variables from subseed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:2,Performance,Load,Loading,2,"//Loading Dataset",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:8,Testability,Test,Test,8,"//Train/Test/Evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:21,Modifiability,variab,variables,21,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:35,Modifiability,variab,variable,35,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:55,Performance,load,loader,55,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:32,Modifiability,variab,variable,32,"// dataloader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:54,Performance,load,loader,54,"// dataloader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:10,Modifiability,variab,variables,10,"// adding variables from seed",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:8,Testability,Test,Test,8,"//Train/Test/Evaluation",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableImportance.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableInfo *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::VariableInfo; \ingroup TMVA; Class for type info of MVA input variable; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableInfo *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::VariableInfo; \ingroup TMVA; Class for type info of MVA input variable; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:288,Modifiability,Variab,VariableInfo,288,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableInfo *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::VariableInfo; \ingroup TMVA; Class for type info of MVA input variable; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:1046,Modifiability,Variab,VariableInfo,1046,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableInfo *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::VariableInfo; \ingroup TMVA; Class for type info of MVA input variable; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:1108,Modifiability,variab,variable,1108,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableInfo *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; **********************************************************************************/; /*! \class TMVA::VariableInfo; \ingroup TMVA; Class for type info of MVA input variable; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:92,Modifiability,Variab,VariableInfo,92,"////////////////////////////////////////////////////////////////////////////////; /// write VariableInfo to stream",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:91,Modifiability,Variab,VariableInfo,91,"////////////////////////////////////////////////////////////////////////////////; /// read VariableInfo from stream",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:20,Modifiability,variab,variables,20,"// in case of array variables, add ""[]"" to the type string: e.g. F[]",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:91,Modifiability,Variab,VariableInfo,91,"////////////////////////////////////////////////////////////////////////////////; /// read VariableInfo from stream",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:10,Modifiability,variab,variables,10,"// detect variables from array",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:3,Safety,detect,detect,3,"// detect variables from array",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:226,Deployability,integrat,integrated,226,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Peter Speckmayer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableNormalizeTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableNormalizeTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:226,Integrability,integrat,integrated,226,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Peter Speckmayer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableNormalizeTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableNormalizeTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:308,Modifiability,Variab,VariableNormalizeTransform,308,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Peter Speckmayer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableNormalizeTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableNormalizeTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:1169,Modifiability,Variab,VariableNormalizeTransform,1169,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Peter Speckmayer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableNormalizeTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableNormalizeTransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:36,Modifiability,variab,variables,36,"// will be filled with the selected variables, targets, (spectators)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:36,Modifiability,variab,variables,36,"// will be filled with the selected variables, targets, (spectators)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:19,Modifiability,variab,variables,19,"// loop over input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:51,Availability,mask,masked,51,"// don't put any value into output if the value is masked",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:36,Modifiability,variab,variables,36,"// will be filled with the selected variables, targets, (spectators)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:19,Modifiability,variab,variables,19,"// loop over input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:36,Modifiability,variab,variables,36,"// will be filled with the selected variables, targets, (spectators)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:19,Modifiability,variab,variables,19,"// number of input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:20,Modifiability,variab,variables,20,"// select the input variables for the transformation and get them from the event",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:19,Modifiability,variab,variables,19,"// loop over input variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:106,Modifiability,variab,variable,106,"////////////////////////////////////////////////////////////////////////////////; /// creates string with variable transformations applied",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:95,Modifiability,variab,variable,95,"////////////////////////////////////////////////////////////////////////////////; /// Read the variable ranges from an input stream",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:3,Usability,simpl,simply,3,"// simply made it static so it doesn't need to be re-booked every time",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableNormalizeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:208,Deployability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariablePCATransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariablePCATransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:208,Integrability,integrat,integrated,208,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariablePCATransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariablePCATransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:290,Modifiability,Variab,VariablePCATransform,290,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariablePCATransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariablePCATransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:1145,Modifiability,Variab,VariablePCATransform,1145,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariablePCATransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariablePCATransform; \ingroup TMVA; Linear interpolation class; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:63,Modifiability,variab,variables,63,"// TPrincipal doesn't support PCA transformation for 1 or less variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:26,Performance,Perform,Perform,26,"// EVT workaround end; // Perform PCA and put it into PCAed events tree",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:20,Availability,mask,masked,20,"// targets might be masked (for events where the targets have not been computed yet)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:182,Testability,Log,Log,182,"////////////////////////////////////////////////////////////////////////////////; /// apply the principal component analysis; /// TODO: implementation of inverse transformation; /// Log() << kFATAL << ""Inverse transformation for PCA transformation not yet implemented. Hence, this transformation cannot be applied together with regression. Please contact the authors if necessary."" << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:40,Performance,Perform,Perform,40,"//( GetNClasses() == 1 ? 0 : 1 ); ;; // Perform PCA and put it into PCAed events tree",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:54,Performance,perform,performance,54,"// !! Not normalizing and not storing input data, for performance reasons. Should perhaps restore normalization.; // But this can be done afterwards by adding a normalisation transformation (user defined)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:335,Energy Efficiency,allocate,allocated,335,"////////////////////////////////////////////////////////////////////////////////; /// Calculate the principal components from the original data vector; /// x, and return it in p (function extracted from TPrincipal::X2P); /// It's the users responsibility to make sure that both x and p are; /// of the right size (i.e., memory must be allocated for p)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:286,Energy Efficiency,allocate,allocated,286,"////////////////////////////////////////////////////////////////////////////////; /// Perform the back-transformation from the principal components; /// pc, and return x; /// It's the users responsibility to make sure that both x and pc are; /// of the right size (i.e., memory must be allocated for p)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform the back-transformation from the principal components; /// pc, and return x; /// It's the users responsibility to make sure that both x and pc are; /// of the right size (i.e., memory must be allocated for p)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,tmva/tmva/src/VariablePCATransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableRearrangeTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableRearrangeTransform; \ingroup TMVA; Rearrangement of input variables; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableRearrangeTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableRearrangeTransform; \ingroup TMVA; Rearrangement of input variables; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:288,Modifiability,Variab,VariableRearrangeTransform,288,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableRearrangeTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableRearrangeTransform; \ingroup TMVA; Rearrangement of input variables; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:863,Modifiability,Variab,VariableRearrangeTransform,863,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableRearrangeTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableRearrangeTransform; \ingroup TMVA; Rearrangement of input variables; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:929,Modifiability,variab,variables,929,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Peter Speckmayer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableRearrangeTransform *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableRearrangeTransform; \ingroup TMVA; Rearrangement of input variables; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:36,Modifiability,variab,variables,36,"// will be filled with the selected variables, (targets)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:3,Availability,mask,masked,3,"// masked variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:10,Modifiability,variab,variables,10,"// masked variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:36,Modifiability,variab,variables,36,"// will be filled with the selected variables, targets, (spectators)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:3,Availability,mask,masked,3,"// masked variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:10,Modifiability,variab,variables,10,"// masked variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:106,Modifiability,variab,variable,106,"////////////////////////////////////////////////////////////////////////////////; /// creates string with variable transformations applied",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableRearrangeTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx:219,Deployability,integrat,integrated,219,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Omar Zapata; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx:219,Integrability,integrat,integrated,219,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Omar Zapata; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx:301,Modifiability,Variab,VariableTransformBase,301,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Omar Zapata; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx:93,Modifiability,variab,variable,93,"////////////////////////////////////////////////////////////////////////////////; /// create variable transformations",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx:158,Modifiability,variab,variables,158,"// no transformations; // workaround for transformations to complicated to be handled by makeclass; // count number of transformations with incomplete set of variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx:25,Modifiability,variab,variables,25,"// contains selection of variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransform.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:206,Deployability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableTransformBase; \ingroup TMVA; Linear interpolation class.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:206,Integrability,integrat,integrated,206,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableTransformBase; \ingroup TMVA; Linear interpolation class.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:288,Modifiability,Variab,VariableTransformBase,288,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableTransformBase; \ingroup TMVA; Linear interpolation class.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:1052,Modifiability,Variab,VariableTransformBase,1052,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VariableTransformBase *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::VariableTransformBase; \ingroup TMVA; Linear interpolation class.; */",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:97,Modifiability,variab,variables,97,"////////////////////////////////////////////////////////////////////////////////; /// select the variables/targets/spectators which serve as input to the transformation",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:16,Modifiability,variab,variables,16,"// unselect all variables first",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:18,Modifiability,variab,variables,18,"// default is all variables and all targets",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:3,Modifiability,variab,variables,3,"// variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:3,Deployability,toggle,toggle,3,"// toggle rearrange sorting (take sort order given in the options)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:33,Modifiability,variab,variable,33,"// no keyword, ... user provided variable labels",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:14,Modifiability,variab,variables,14,"// search all variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:3,Testability,Log,Log,3,"// Log() << kINFO << Endl;",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:19,Availability,mask,masked,19,"// if the value is masked",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:92,Modifiability,variab,variables,92,"////////////////////////////////////////////////////////////////////////////////; /// count variables, targets and spectators",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:95,Energy Efficiency,adapt,adapt,95,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// method to calculate minimum, maximum, mean, and RMS for all; /// variables used in the MVA",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:95,Modifiability,adapt,adapt,95,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// method to calculate minimum, maximum, mean, and RMS for all; /// variables used in the MVA",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:104,Modifiability,variab,variable,104,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// method to calculate minimum, maximum, mean, and RMS for all; /// variables used in the MVA",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:210,Modifiability,variab,variables,210,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// method to calculate minimum, maximum, mean, and RMS for all; /// variables used in the MVA",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:95,Energy Efficiency,adapt,adapt,95,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// default transformation output; /// --> only indicate that transformation occurred",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:95,Modifiability,adapt,adapt,95,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// default transformation output; /// --> only indicate that transformation occurred",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:104,Modifiability,variab,variable,104,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// default transformation output; /// --> only indicate that transformation occurred",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:145,Deployability,update,update,145,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// update min and max of a given variable (target) and a given transformation method",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:95,Energy Efficiency,adapt,adapt,95,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// update min and max of a given variable (target) and a given transformation method",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:95,Modifiability,adapt,adapt,95,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// update min and max of a given variable (target) and a given transformation method",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:104,Modifiability,variab,variable,104,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// update min and max of a given variable (target) and a given transformation method",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:175,Modifiability,variab,variable,175,"////////////////////////////////////////////////////////////////////////////////; /// TODO --> adapt to variable,target,spectator selection; /// update min and max of a given variable (target) and a given transformation method",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:156,Modifiability,variab,variables,156,"////////////////////////////////////////////////////////////////////////////////; /// create XML description the transformation (write out info of selected variables)",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:101,Modifiability,variab,variables,101,"////////////////////////////////////////////////////////////////////////////////; /// Read the input variables from the XML node",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:14,Modifiability,variab,variables,14,"// search all variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:14,Modifiability,variab,variables,14,"// search all variables",MatchSource.CODE_COMMENT,tmva/tmva/src/VariableTransformBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VarTransformHandler *; * *; * *; * Description: *; * Implementation of unsupervised variable transformation methods *; * *; * Authors (alphabetical): *; * Abhinav Moudgil <abhinav.moudgil@research.iiit.ac.in> - IIIT-H, India *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VarTransformHandler *; * *; * *; * Description: *; * Implementation of unsupervised variable transformation methods *; * *; * Authors (alphabetical): *; * Abhinav Moudgil <abhinav.moudgil@research.iiit.ac.in> - IIIT-H, India *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:276,Modifiability,variab,variable,276,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : VarTransformHandler *; * *; * *; * Description: *; * Implementation of unsupervised variable transformation methods *; * *; * Authors (alphabetical): *; * Abhinav Moudgil <abhinav.moudgil@research.iiit.ac.in> - IIIT-H, India *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:115,Modifiability,variab,variables,115,"////////////////////////////////////////////////////////////////////////////////; /// Computes variance of all the variables and; /// returns a new DataLoader with the selected variables whose variance is above a specific threshold.; /// Threshold can be provided by user otherwise default value is 0 i.e. remove the variables which have same value in all; /// the events.; ///; /// \param[in] threshold value (Double); ///; /// Transformation Definition String Format: ""VT(optional float value)""; ///; /// Usage examples:; ///; /// String | Description; /// ------- |----------------------------------------; /// ""VT"" | Select variables whose variance is above threshold value = 0 (Default); /// ""VT(1.5)"" | Select variables whose variance is above threshold value = 1.5",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:177,Modifiability,variab,variables,177,"////////////////////////////////////////////////////////////////////////////////; /// Computes variance of all the variables and; /// returns a new DataLoader with the selected variables whose variance is above a specific threshold.; /// Threshold can be provided by user otherwise default value is 0 i.e. remove the variables which have same value in all; /// the events.; ///; /// \param[in] threshold value (Double); ///; /// Transformation Definition String Format: ""VT(optional float value)""; ///; /// Usage examples:; ///; /// String | Description; /// ------- |----------------------------------------; /// ""VT"" | Select variables whose variance is above threshold value = 0 (Default); /// ""VT(1.5)"" | Select variables whose variance is above threshold value = 1.5",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:317,Modifiability,variab,variables,317,"////////////////////////////////////////////////////////////////////////////////; /// Computes variance of all the variables and; /// returns a new DataLoader with the selected variables whose variance is above a specific threshold.; /// Threshold can be provided by user otherwise default value is 0 i.e. remove the variables which have same value in all; /// the events.; ///; /// \param[in] threshold value (Double); ///; /// Transformation Definition String Format: ""VT(optional float value)""; ///; /// Usage examples:; ///; /// String | Description; /// ------- |----------------------------------------; /// ""VT"" | Select variables whose variance is above threshold value = 0 (Default); /// ""VT(1.5)"" | Select variables whose variance is above threshold value = 1.5",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:628,Modifiability,variab,variables,628,"////////////////////////////////////////////////////////////////////////////////; /// Computes variance of all the variables and; /// returns a new DataLoader with the selected variables whose variance is above a specific threshold.; /// Threshold can be provided by user otherwise default value is 0 i.e. remove the variables which have same value in all; /// the events.; ///; /// \param[in] threshold value (Double); ///; /// Transformation Definition String Format: ""VT(optional float value)""; ///; /// Usage examples:; ///; /// String | Description; /// ------- |----------------------------------------; /// ""VT"" | Select variables whose variance is above threshold value = 0 (Default); /// ""VT(1.5)"" | Select variables whose variance is above threshold value = 1.5",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:716,Modifiability,variab,variables,716,"////////////////////////////////////////////////////////////////////////////////; /// Computes variance of all the variables and; /// returns a new DataLoader with the selected variables whose variance is above a specific threshold.; /// Threshold can be provided by user otherwise default value is 0 i.e. remove the variables which have same value in all; /// the events.; ///; /// \param[in] threshold value (Double); ///; /// Transformation Definition String Format: ""VT(optional float value)""; ///; /// Usage examples:; ///; /// String | Description; /// ------- |----------------------------------------; /// ""VT"" | Select variables whose variance is above threshold value = 0 (Default); /// ""VT(1.5)"" | Select variables whose variance is above threshold value = 1.5",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:48,Modifiability,variab,variables,48,"// return a new dataloader; // iterate over all variables, ignore the ones whose variance is below specific threshold; // DataLoader *transformedLoader=(DataLoader *)fDataLoader->Clone(""vt_transformed_dataset"");; // TMVA::DataLoader *transformedLoader = new TMVA::DataLoader(fDataSetInfo.GetName());",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:329,Deployability,Update,Updates,329,"///////////////////////////////////////////////////////////////////////////////; ////////////////////////////// Utility methods ////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Updates maximum and minimum value of a variable or target",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:368,Modifiability,variab,variable,368,"///////////////////////////////////////////////////////////////////////////////; ////////////////////////////// Utility methods ////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Updates maximum and minimum value of a variable or target",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:149,Modifiability,variab,variables,149,"////////////////////////////////////////////////////////////////////////////////; /// Computes maximum, minimum, mean, RMS and variance for all; /// variables and targets",MatchSource.CODE_COMMENT,tmva/tmva/src/VarTransformHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx:198,Deployability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Volume *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Volume; \ingroup TMVA; Volume for BinarySearchTree. volume element: variable space between upper and lower bonds of; nvar-dimensional variable space; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Volume.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx:198,Integrability,integrat,integrated,198,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Volume *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Volume; \ingroup TMVA; Volume for BinarySearchTree. volume element: variable space between upper and lower bonds of; nvar-dimensional variable space; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Volume.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx:1056,Modifiability,variab,variable,1056,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Volume *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Volume; \ingroup TMVA; Volume for BinarySearchTree. volume element: variable space between upper and lower bonds of; nvar-dimensional variable space; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Volume.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx:1122,Modifiability,variab,variable,1122,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Volume *; * *; * *; * Description: *; * Implementation (see header file for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Volume; \ingroup TMVA; Volume for BinarySearchTree. volume element: variable space between upper and lower bonds of; nvar-dimensional variable space; */",MatchSource.CODE_COMMENT,tmva/tmva/src/Volume.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx:86,Usability,simpl,simple,86,"////////////////////////////////////////////////////////////////////////////////; /// simple constructors for 1 dimensional values (double)",MatchSource.CODE_COMMENT,tmva/tmva/src/Volume.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx:86,Usability,simpl,simple,86,"////////////////////////////////////////////////////////////////////////////////; /// simple constructors for 1 dimensional values (float)",MatchSource.CODE_COMMENT,tmva/tmva/src/Volume.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/ActivationFunctions.hxx:532,Performance,multi-thread,multi-threaded,532,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 19/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Implementation of the activation functions for multi-threaded //; // CPU architectures using Roots TThreadExecutor and BLAS. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/ActivationFunctions.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/ActivationFunctions.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/ActivationFunctions.hxx:19,Availability,avail,available,19,"// when VDT is not available; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/ActivationFunctions.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/ActivationFunctions.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx:539,Performance,multi-thread,multi-threaded,539,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 20/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////; // Implementation of Helper arithmetic functions for the //; // multi-threaded CPU implementation of DNNs. //; ////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx:346,Availability,toler,tolerance,346,"////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////; /// \brief Checks two matrices for element-wise equality.; /// \tparam AReal An architecture-specific floating point number type.; /// \param A The first matrix.; /// \param B The second matrix.; /// \param epsilon Equality tolerance, needed to address floating point arithmetic.; /// \return Whether the two matrices can be considered equal element-wise; ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx:9,Deployability,update,updates,9,"/// Adam updates; //____________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx:8,Deployability,update,update,8,"// ADAM update the weights.; // Weight = Weight - alpha * M / (sqrt(V) + epsilon)",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx:34,Deployability,update,update,34,"// First momentum weight gradient update for ADAM; // Mt = beta1 * Mt-1 + (1-beta1) * WeightGradients",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx:35,Deployability,update,update,35,"// Second momentum weight gradient update for ADAM; // Vt = beta2 * Vt-1 + (1-beta2) * WeightGradients^2",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Blas.h:20,Integrability,Rout,Routines,20,"// External Library Routines; //____________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Blas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Blas.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Blas.h:16,Integrability,Wrap,Wrappers,16,// Type-Generic Wrappers; //____________________________________________________________________________; /** Add the vector \p x scaled by \p alpha to \p y scaled by `\beta` */,MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Blas.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Blas.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx:490,Integrability,interface,interface,490,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/08/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // CPU Buffer interface class for the generic data loader. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx:527,Performance,load,loader,527,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/08/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // CPU Buffer interface class for the generic data loader. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx:41,Integrability,wrap,wrap,41,"// After copying the data to the device, wrap the device buffer in the respective; // architectures matrix type",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx:41,Integrability,wrap,wrap,41,"// After copying the data to the device, wrap the device buffer in the respective; // architectures matrix type",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx:41,Integrability,wrap,wrap,41,"// After copying the data to the device, wrap the device buffer in the respective; // architectures matrix type",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx:41,Integrability,wrap,wrap,41,"// After copying the data to the device, wrap the device buffer in the respective; // architectures matrix type",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/DataLoader.cxx:526,Performance,multi-thread,multi-threaded,526,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////; // Implementation for the DataLoader for the multi-threaded //; // CPU implementation of DNNs. //; //////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Dropout.hxx:104,Performance,multi-thread,multi-threaded,104,"/////////////////////////////////////////////////////////////////////; // Implementation of Dropout for multi-threaded CPU architectures. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Dropout.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Dropout.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Initialization.hxx:544,Performance,multi-thread,multi-threaded,544,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////; // Implementation of the DNN initialization methods for the //; // multi-threaded CPU backend. //; //////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Initialization.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Initialization.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx:532,Performance,multi-thread,multi-threaded,532,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 20/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Implementation of the loss functions for the multi-threaded CPU //; // implementation using Roots TThreadExecutor and BLAS. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx:72,Availability,robust,robust,72,"// AFloat sig = 1.0 / (1.0 + exp(- dataOutput[workerID]));; // Use more robust formula to compute log(sig) and log(1-sig) where sig= 1./(1+exp(-x)); // when sig is close to zero or to 1",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx:98,Testability,log,log,98,"// AFloat sig = 1.0 / (1.0 + exp(- dataOutput[workerID]));; // Use more robust formula to compute log(sig) and log(1-sig) where sig= 1./(1+exp(-x)); // when sig is close to zero or to 1",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx:111,Testability,log,log,111,"// AFloat sig = 1.0 / (1.0 + exp(- dataOutput[workerID]));; // Use more robust formula to compute log(sig) and log(1-sig) where sig= 1./(1+exp(-x)); // when sig is close to zero or to 1",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx:26,Testability,log,log,26,"//temp[workerID] = - (y * log(sig) + (1.0 - y) * log(1.0 - sig));",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx:49,Testability,log,log,49,"//temp[workerID] = - (y * log(sig) + (1.0 - y) * log(1.0 - sig));",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/OutputFunctions.hxx:520,Performance,multi-thread,multi-threaded,520,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////; // Implementation of output functions for multi-threaded CPU //; // architectures. //; ///////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/OutputFunctions.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/OutputFunctions.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx:18,Performance,multi-thread,multi-thread,18,"//this should fix multi-thread inizializations of arrays",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx:40,Safety,safe,safe,40,"//inputTr.Zero(); // this is not thread safe",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx:3,Deployability,Update,Update,3,"// Update derivatives; // size_t m, n;; // m = activationGradients[0].GetNrows();; // n = activationGradients[0].GetNcols();; // Compute activation backward pass dx = f'(x) * dy; // put resulting dx of activation in activationgradients",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx:24,Performance,cache,cached,24,"// A is output , B is a cached index tensor used for backward pass and C is the input",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.hxx:29,Performance,Perform,Perform,29,"// compute the gradients; // Perform the operation in place by readding the result on the same gradient matrix; // e.g. W += D * X; // Weights gradients",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.hxx:3,Deployability,update,update,3,"// update gradient",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Regularization.hxx:567,Performance,multi-thread,multi-threaded,567,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////////; // Implementation of the regularization functionals and gradients //; // for the multi-threaded CPU implementation using Roots TThreadExecutor. //; ///////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cpu/Regularization.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Regularization.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx:41,Integrability,wrap,wrap,41,"// After copying the data to the device, wrap the device buffer in the respective; // architectures matrix type",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx:41,Integrability,wrap,wrap,41,"// After copying the data to the device, wrap the device buffer in the respective; // architectures matrix type",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx:41,Integrability,wrap,wrap,41,"// After copying the data to the device, wrap the device buffer in the respective; // architectures matrix type",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx:41,Integrability,wrap,wrap,41,"// After copying the data to the device, wrap the device buffer in the respective; // architectures matrix type",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx:9,Deployability,update,updates,9,"/// Adam updates ; //____________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx:8,Deployability,update,update,8,"// ADAM update the weights.; // Weight = Weight - alpha * M / (sqrt(V) + epsilon)",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx:34,Deployability,update,update,34,"// First momentum weight gradient update for ADAM ; // Mt = beta1 * Mt-1 + (1-beta1) * WeightGradients",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx:35,Deployability,update,update,35,"// Second momentum weight gradient update for ADAM ; // Vt = beta2 * Vt-1 + (1-beta2) * WeightGradients^2",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/DataLoader.cxx:14,Modifiability,variab,variables,14,"// Copy input variables.",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/DataLoader.cxx:14,Modifiability,variab,variables,14,"// Copy input variables.",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/DataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/DataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/DenoisePropagation.hxx:85,Testability,Log,Logistic,85,"//______________________________________________________________________________; // Logistic Regression Layer Methods; //; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/DenoisePropagation.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/DenoisePropagation.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/Propagation.hxx:3,Deployability,Update,Update,3,"// Update derivatives",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/Propagation.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/Propagation.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/RecurrentPropagation.hxx:3,Deployability,update,update,3,"// update gradient",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/RecurrentPropagation.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/RecurrentPropagation.hxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/TensorDataLoader.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ///////////////////////////////////////////////////////////////////; // Specializations of Copy functions for the TensorDataLoader //; // specialized for the reference architecture. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/TensorDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/TensorDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/TensorDataLoader.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ///////////////////////////////////////////////////////////////////; // Specializations of Copy functions for the TensorDataLoader //; // specialized for the reference architecture. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/TensorDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/TensorDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/TensorDataLoader.cxx:339,Performance,Load,Loader,339,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TTensorDataLoader *; * *; * *; * Description: *; * Specialization of the Tensor Data Loader Class *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ///////////////////////////////////////////////////////////////////; // Specializations of Copy functions for the TensorDataLoader //; // specialized for the reference architecture. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/src/DNN/Architectures/Reference/TensorDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Reference/TensorDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:44,Safety,avoid,avoid,44,"# XGBoost has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227",MatchSource.CODE_COMMENT,tmva/tmva/test/rbdt_xgboost.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:15,Integrability,interface,interface,15,"""""""; Test RBDT interface; """"""",MatchSource.CODE_COMMENT,tmva/tmva/test/rbdt_xgboost.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:5,Testability,Test,Test,5,"""""""; Test RBDT interface; """"""",MatchSource.CODE_COMMENT,tmva/tmva/test/rbdt_xgboost.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:5,Testability,Test,Test,5,"""""""; Test model trained with binary XGBClassifier.; """"""",MatchSource.CODE_COMMENT,tmva/tmva/test/rbdt_xgboost.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:5,Testability,Test,Test,5,"""""""; Test model trained with multiclass XGBClassifier.; """"""",MatchSource.CODE_COMMENT,tmva/tmva/test/rbdt_xgboost.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:5,Testability,Test,Test,5,"""""""; Test model trained with XGBRegressor.; """"""",MatchSource.CODE_COMMENT,tmva/tmva/test/rbdt_xgboost.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rreader.cxx:7,Modifiability,variab,variables,7,"// Add variables and register the trees with the dataloader",MatchSource.CODE_COMMENT,tmva/tmva/test/rreader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rreader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rreader.cxx:7,Modifiability,variab,variables,7,"// Add variables and register the trees with the dataloader",MatchSource.CODE_COMMENT,tmva/tmva/test/rreader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rreader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rreader.cxx:7,Modifiability,variab,variables,7,"// Add variables and register the trees with the dataloader",MatchSource.CODE_COMMENT,tmva/tmva/test/rreader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rreader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx:11,Testability,log,logical,11,"// Layout (logical):; // 0, 1, 2; // 3, 4, 5",MatchSource.CODE_COMMENT,tmva/tmva/test/rtensor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx:11,Testability,log,logical,11,"// Layout (logical):; // 0, 3; // 1, 4; // 2, 5",MatchSource.CODE_COMMENT,tmva/tmva/test/rtensor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx:11,Testability,log,logical,11,"// Layout (logical):; // 0, 1, 2; // 3, 4, 5",MatchSource.CODE_COMMENT,tmva/tmva/test/rtensor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx:11,Testability,log,logical,11,"// Layout (logical):; // 0, 1, 2; // 3, 4, 5",MatchSource.CODE_COMMENT,tmva/tmva/test/rtensor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx:11,Testability,log,logical,11,"// Layout (logical):; // 0, 1, 2; // 3, 4, 5",MatchSource.CODE_COMMENT,tmva/tmva/test/rtensor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx:11,Testability,log,logical,11,"// Layout (logical):; // 0, 1, 2; // 3, 4, 5",MatchSource.CODE_COMMENT,tmva/tmva/test/rtensor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:61,Modifiability,extend,extended,61,"//; // this stress test for TMVA is a shorter version of the extended TMVA testsuite; // generated by script tmvaValidation/testsuite/RootTest/buildRootTest.sh; //; // Eckhard von Toerne, Dec 2010; //; /* if working, it creates output like this:. ******************************************************************; * TMVA - S T R E S S and U N I T test suite (FAST); ******************************************************************; Event [107/107]..................................................OK; VariableInfo [31/31].............................................OK; DataSetInfo [20/20]..............................................OK; DataSet [15/15]..................................................OK; Factory [11/11]..................................................OK; Reader [2/2].....................................................OK; CutsGA [3/3].....................................................OK; LikelihoodD [4/4]................................................OK; PDERS [4/4]......................................................OK; PDEFoam [4/4]....................................................OK; KNN [4/4]........................................................OK; Fisher [4/4].....................................................OK; BoostedFisher [4/4]..............................................OK; LD [4/4].........................................................OK; MLP [4/4]........................................................OK; MLPBFGS [4/4]....................................................OK; SVM [4/4]........................................................OK; BDTG [4/4].......................................................OK; BDT [4/4]........................................................OK; Regression_LD [4/4]..............................................OK; Regression_MLPBFGSN [4/4]........................................OK; Regression_BDTG2 [4/4]...........................................OK; Event [107/107].................................",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:504,Modifiability,Variab,VariableInfo,504,"//; // this stress test for TMVA is a shorter version of the extended TMVA testsuite; // generated by script tmvaValidation/testsuite/RootTest/buildRootTest.sh; //; // Eckhard von Toerne, Dec 2010; //; /* if working, it creates output like this:. ******************************************************************; * TMVA - S T R E S S and U N I T test suite (FAST); ******************************************************************; Event [107/107]..................................................OK; VariableInfo [31/31].............................................OK; DataSetInfo [20/20]..............................................OK; DataSet [15/15]..................................................OK; Factory [11/11]..................................................OK; Reader [2/2].....................................................OK; CutsGA [3/3].....................................................OK; LikelihoodD [4/4]................................................OK; PDERS [4/4]......................................................OK; PDEFoam [4/4]....................................................OK; KNN [4/4]........................................................OK; Fisher [4/4].....................................................OK; BoostedFisher [4/4]..............................................OK; LD [4/4].........................................................OK; MLP [4/4]........................................................OK; MLPBFGS [4/4]....................................................OK; SVM [4/4]........................................................OK; BDTG [4/4].......................................................OK; BDT [4/4]........................................................OK; Regression_LD [4/4]..............................................OK; Regression_MLPBFGSN [4/4]........................................OK; Regression_BDTG2 [4/4]...........................................OK; Event [107/107].................................",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:2022,Modifiability,Variab,VariableInfo,2022,......................OK; PDEFoam [4/4]....................................................OK; KNN [4/4]........................................................OK; Fisher [4/4].....................................................OK; BoostedFisher [4/4]..............................................OK; LD [4/4].........................................................OK; MLP [4/4]........................................................OK; MLPBFGS [4/4]....................................................OK; SVM [4/4]........................................................OK; BDTG [4/4].......................................................OK; BDT [4/4]........................................................OK; Regression_LD [4/4]..............................................OK; Regression_MLPBFGSN [4/4]........................................OK; Regression_BDTG2 [4/4]...........................................OK; Event [107/107]..................................................OK; VariableInfo [31/31].............................................OK; DataSetInfo [20/20]..............................................OK; DataSet [15/15]..................................................OK; Factory [11/11]..................................................OK; Reader [2/2].....................................................OK; CutsGA [3/3].....................................................OK; LikelihoodD [4/4]................................................OK; PDERS [4/4]......................................................OK; PDEFoam [4/4]....................................................OK; KNN [4/4]........................................................OK; Fisher [4/4].....................................................OK; BoostedFisher [4/4]..............................................OK; LD [4/4].........................................................OK; MLP [4/4]........................................................OK; MLPBFGS [4/4]..............................,MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:19,Testability,test,test,19,"//; // this stress test for TMVA is a shorter version of the extended TMVA testsuite; // generated by script tmvaValidation/testsuite/RootTest/buildRootTest.sh; //; // Eckhard von Toerne, Dec 2010; //; /* if working, it creates output like this:. ******************************************************************; * TMVA - S T R E S S and U N I T test suite (FAST); ******************************************************************; Event [107/107]..................................................OK; VariableInfo [31/31].............................................OK; DataSetInfo [20/20]..............................................OK; DataSet [15/15]..................................................OK; Factory [11/11]..................................................OK; Reader [2/2].....................................................OK; CutsGA [3/3].....................................................OK; LikelihoodD [4/4]................................................OK; PDERS [4/4]......................................................OK; PDEFoam [4/4]....................................................OK; KNN [4/4]........................................................OK; Fisher [4/4].....................................................OK; BoostedFisher [4/4]..............................................OK; LD [4/4].........................................................OK; MLP [4/4]........................................................OK; MLPBFGS [4/4]....................................................OK; SVM [4/4]........................................................OK; BDTG [4/4].......................................................OK; BDT [4/4]........................................................OK; Regression_LD [4/4]..............................................OK; Regression_MLPBFGSN [4/4]........................................OK; Regression_BDTG2 [4/4]...........................................OK; Event [107/107].................................",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:75,Testability,test,testsuite,75,"//; // this stress test for TMVA is a shorter version of the extended TMVA testsuite; // generated by script tmvaValidation/testsuite/RootTest/buildRootTest.sh; //; // Eckhard von Toerne, Dec 2010; //; /* if working, it creates output like this:. ******************************************************************; * TMVA - S T R E S S and U N I T test suite (FAST); ******************************************************************; Event [107/107]..................................................OK; VariableInfo [31/31].............................................OK; DataSetInfo [20/20]..............................................OK; DataSet [15/15]..................................................OK; Factory [11/11]..................................................OK; Reader [2/2].....................................................OK; CutsGA [3/3].....................................................OK; LikelihoodD [4/4]................................................OK; PDERS [4/4]......................................................OK; PDEFoam [4/4]....................................................OK; KNN [4/4]........................................................OK; Fisher [4/4].....................................................OK; BoostedFisher [4/4]..............................................OK; LD [4/4].........................................................OK; MLP [4/4]........................................................OK; MLPBFGS [4/4]....................................................OK; SVM [4/4]........................................................OK; BDTG [4/4].......................................................OK; BDT [4/4]........................................................OK; Regression_LD [4/4]..............................................OK; Regression_MLPBFGSN [4/4]........................................OK; Regression_BDTG2 [4/4]...........................................OK; Event [107/107].................................",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:124,Testability,test,testsuite,124,"//; // this stress test for TMVA is a shorter version of the extended TMVA testsuite; // generated by script tmvaValidation/testsuite/RootTest/buildRootTest.sh; //; // Eckhard von Toerne, Dec 2010; //; /* if working, it creates output like this:. ******************************************************************; * TMVA - S T R E S S and U N I T test suite (FAST); ******************************************************************; Event [107/107]..................................................OK; VariableInfo [31/31].............................................OK; DataSetInfo [20/20]..............................................OK; DataSet [15/15]..................................................OK; Factory [11/11]..................................................OK; Reader [2/2].....................................................OK; CutsGA [3/3].....................................................OK; LikelihoodD [4/4]................................................OK; PDERS [4/4]......................................................OK; PDEFoam [4/4]....................................................OK; KNN [4/4]........................................................OK; Fisher [4/4].....................................................OK; BoostedFisher [4/4]..............................................OK; LD [4/4].........................................................OK; MLP [4/4]........................................................OK; MLPBFGS [4/4]....................................................OK; SVM [4/4]........................................................OK; BDTG [4/4].......................................................OK; BDT [4/4]........................................................OK; Regression_LD [4/4]..............................................OK; Regression_MLPBFGSN [4/4]........................................OK; Regression_BDTG2 [4/4]...........................................OK; Event [107/107].................................",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:348,Testability,test,test,348,"//; // this stress test for TMVA is a shorter version of the extended TMVA testsuite; // generated by script tmvaValidation/testsuite/RootTest/buildRootTest.sh; //; // Eckhard von Toerne, Dec 2010; //; /* if working, it creates output like this:. ******************************************************************; * TMVA - S T R E S S and U N I T test suite (FAST); ******************************************************************; Event [107/107]..................................................OK; VariableInfo [31/31].............................................OK; DataSetInfo [20/20]..............................................OK; DataSet [15/15]..................................................OK; Factory [11/11]..................................................OK; Reader [2/2].....................................................OK; CutsGA [3/3].....................................................OK; LikelihoodD [4/4]................................................OK; PDERS [4/4]......................................................OK; PDEFoam [4/4]....................................................OK; KNN [4/4]........................................................OK; Fisher [4/4].....................................................OK; BoostedFisher [4/4]..............................................OK; LD [4/4].........................................................OK; MLP [4/4]........................................................OK; MLPBFGS [4/4]....................................................OK; SVM [4/4]........................................................OK; BDTG [4/4].......................................................OK; BDT [4/4]........................................................OK; Regression_LD [4/4]..............................................OK; Regression_MLPBFGSN [4/4]........................................OK; Regression_BDTG2 [4/4]...........................................OK; Event [107/107].................................",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:54,Testability,test,tests,54,"// Author: Christoph Rosemann Dec. 2009; // TMVA unit tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:54,Testability,test,tests,54,"// Author: Christoph Rosemann Dec. 2009; // TMVA unit tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:9,Testability,Test,Test,9,"// Calls Test::run() repeatedly",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:11,Testability,test,tests,11,"// Deletes tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:10,Testability,test,test,10,"// Verify test is valid and has a stream:",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:54,Testability,test,tests,54,"// Author: Christoph Rosemann Dec. 2009; // TMVA unit tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:157,Modifiability,Variab,VariableInfo,157,"// FIXME:this doesn't work straightforward; // test_(datasetinfo->GetDataSet() == 0);; // note: the ""constructor""-like call is different from the /standard/ VariableInfo constructor",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:39,Modifiability,Variab,VariableInfo,39,"// there is no comparison operator for VariableInfo, this will be broken if the implementation changes; /*; for(vector<VariableInfo>::const_iterator varinf = vecvarinfo.begin(); varinf < vecvarinfo.end(); ++varinf); {; unsigned int index = vecvarinfo.begin() - varinf;; test_(datasetinfo->GetVariableInfo(index) == varinfo); // doesn't work!; }; */",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:119,Modifiability,Variab,VariableInfo,119,"// there is no comparison operator for VariableInfo, this will be broken if the implementation changes; /*; for(vector<VariableInfo>::const_iterator varinf = vecvarinfo.begin(); varinf < vecvarinfo.end(); ++varinf); {; unsigned int index = vecvarinfo.begin() - varinf;; test_(datasetinfo->GetVariableInfo(index) == varinfo); // doesn't work!; }; */",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:412,Testability,test,test,412,"/*; void ClearDataSet() const;; Int_t FindVarIndex( const TString& ) const;; std::vector<TString> GetListOfVariables() const;; const TMatrixD* CorrelationMatrix ( const TString& className ) const;; void SetCorrelationMatrix ( const TString& className, TMatrixD* matrix );; TH2* CreateCorrelationMatrixHist( const TMatrixD* m, const TString& hName, const TString& hTitle ); const;; */; /*; unclear to me, what to test:; void SetRootDir(TDirectory* d) { fOwnRootDir = d; }; TDirectory* GetRootDir() const { return fOwnRootDir; }; */",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:9,Usability,Clear,ClearDataSet,9,"/*; void ClearDataSet() const;; Int_t FindVarIndex( const TString& ) const;; std::vector<TString> GetListOfVariables() const;; const TMatrixD* CorrelationMatrix ( const TString& className ) const;; void SetCorrelationMatrix ( const TString& className, TMatrixD* matrix );; TH2* CreateCorrelationMatrixHist( const TMatrixD* m, const TString& hName, const TString& hTitle ); const;; */; /*; unclear to me, what to test:; void SetRootDir(TDirectory* d) { fOwnRootDir = d; }; TDirectory* GetRootDir() const { return fOwnRootDir; }; */",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:54,Testability,test,tests,54,"// Author: Christoph Rosemann Dec. 2009; // TMVA unit tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:7,Testability,test,test,7,"// the test values for initialisation",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:65,Modifiability,Extend,Extend,65,"// this is only a temporary solution for the testing; // FIXME:: Extend to a real test!",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:45,Testability,test,testing,45,"// this is only a temporary solution for the testing; // FIXME:: Extend to a real test!",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:82,Testability,test,test,82,"// this is only a temporary solution for the testing; // FIXME:: Extend to a real test!",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:29,Testability,test,tests,29,"/* function still to develop tests for:; void SetCurrentEvent( Long64_t ievt ) const { fCurrentEventIdx = ievt; }; void SetCurrentType ( Types::ETreeType type ) const { fCurrentTreeIdx = TreeIndex(type); }. void SetEventCollection( std::vector<Event*>*, Types::ETreeType );; const std::vector<Event*>& GetEventCollection( Types::ETreeType type = Types::kMaxTreeType ) const;; const TTree* GetEventCollectionAsTree();. Results* GetResults ( const TString &,Types::ETreeType type, Types::EAnalysisType analysistype );; void DivideTrainingSet( UInt_t blockNum );; void MoveTrainingBlock( Int_t blockInd,Types::ETreeType dest, Bool_t applyChanges = kTRUE );; void IncrementNClassEvents( Int_t type, UInt_t classNumber );; Long64_t GetNClassEvents ( Int_t type, UInt_t classNumber );; void ClearNClassEvents ( Int_t type );; TTree* GetTree( Types::ETreeType type );; void InitSampling( Float_t fraction, Float_t weight, UInt_t seed = 0 );; void EventResult( Bool_t successful, Long64_t evtNumber = -1 );; void CreateSampling() const;; UInt_t TreeIndex(Types::ETreeType type) const;; */",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:785,Usability,Clear,ClearNClassEvents,785,"/* function still to develop tests for:; void SetCurrentEvent( Long64_t ievt ) const { fCurrentEventIdx = ievt; }; void SetCurrentType ( Types::ETreeType type ) const { fCurrentTreeIdx = TreeIndex(type); }. void SetEventCollection( std::vector<Event*>*, Types::ETreeType );; const std::vector<Event*>& GetEventCollection( Types::ETreeType type = Types::kMaxTreeType ) const;; const TTree* GetEventCollectionAsTree();. Results* GetResults ( const TString &,Types::ETreeType type, Types::EAnalysisType analysistype );; void DivideTrainingSet( UInt_t blockNum );; void MoveTrainingBlock( Int_t blockInd,Types::ETreeType dest, Bool_t applyChanges = kTRUE );; void IncrementNClassEvents( Int_t type, UInt_t classNumber );; Long64_t GetNClassEvents ( Int_t type, UInt_t classNumber );; void ClearNClassEvents ( Int_t type );; TTree* GetTree( Types::ETreeType type );; void InitSampling( Float_t fraction, Float_t weight, UInt_t seed = 0 );; void EventResult( Bool_t successful, Long64_t evtNumber = -1 );; void CreateSampling() const;; UInt_t TreeIndex(Types::ETreeType type) const;; */",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:54,Testability,test,tests,54,"// Author: Christoph Rosemann Dec. 2009; // TMVA unit tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:7,Testability,test,test,7,"// the test calls in different blocks; // the distinctions are arbitrary:",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:7,Testability,test,test,7,"// the test values for initialisation",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:52,Testability,test,tests,52,"// the empty/default constructor is taken for these tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:9,Modifiability,variab,variables,9,"// check variables",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:121,Integrability,interface,interface,121,"// Author: E. v. Toerne, Nov 2011, implementing unit tests by C. Rosemann; // TMVA unit tests; //; // this class acts as interface to several reader applications",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:53,Testability,test,tests,53,"// Author: E. v. Toerne, Nov 2011, implementing unit tests by C. Rosemann; // TMVA unit tests; //; // this class acts as interface to several reader applications",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:88,Testability,test,tests,88,"// Author: E. v. Toerne, Nov 2011, implementing unit tests by C. Rosemann; // TMVA unit tests; //; // this class acts as interface to several reader applications",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:74,Integrability,interface,interface,74,"// Author: D. Piparo, 2015; // TMVA unit tests; //; // this class acts as interface to several reader applications in MT mode",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:41,Testability,test,tests,41,"// Author: D. Piparo, 2015; // TMVA unit tests; //; // this class acts as interface to several reader applications in MT mode",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:121,Integrability,interface,interface,121,"// Author: E. v. Toerne, Nov 2011, implementing unit tests by C. Rosemann; // TMVA unit tests; //; // this class acts as interface to several factory applications",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:53,Testability,test,tests,53,"// Author: E. v. Toerne, Nov 2011, implementing unit tests by C. Rosemann; // TMVA unit tests; //; // this class acts as interface to several factory applications",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:88,Testability,test,tests,88,"// Author: E. v. Toerne, Nov 2011, implementing unit tests by C. Rosemann; // TMVA unit tests; //; // this class acts as interface to several factory applications",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:54,Testability,test,tests,54,"// Author: Christoph Rosemann Dec. 2009; // TMVA unit tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:7,Testability,test,test,7,"// the test calls in different blocks; // the distinctions are arbitrary:",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:36,Modifiability,Variab,VariableInfo,36,"// the values needed to create all ""VariableInfo"" objects in all ways",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:3,Testability,test,test,3,"// test assignment",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:86,Integrability,interface,interface,86,"// Author: Christoph Rosemann Jul 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // as additional argument the limits of the ROC integral can be given; // to determine the performance",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:262,Performance,perform,performance,262,"// Author: Christoph Rosemann Jul 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // as additional argument the limits of the ROC integral can be given; // to determine the performance",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:53,Testability,test,tests,53,"// Author: Christoph Rosemann Jul 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // as additional argument the limits of the ROC integral can be given; // to determine the performance",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:19,Modifiability,variab,variable,19,"// ToDo make class variable _theEffi",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:10,Testability,test,tests,10,"// Reader tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:23,Testability,test,tests,23,"// 3 reader usages + 3 tests with additional readers",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:19,Security,access,access,19,"// setup test tree access",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:9,Testability,test,test,9,"// setup test tree access",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:45,Testability,test,test,45,"// run the reader application and compare to test tree",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:86,Integrability,interface,interface,86,"// Author: Christoph Rosemann Oct 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // additionally the regression performance is evaluated",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:202,Performance,perform,performance,202,"// Author: Christoph Rosemann Oct 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // additionally the regression performance is evaluated",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:53,Testability,test,tests,53,"// Author: Christoph Rosemann Oct 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // additionally the regression performance is evaluated",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:36,Security,access,access,36,"// reader tests; // setup test tree access",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:10,Testability,test,tests,10,"// reader tests; // setup test tree access",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:26,Testability,test,test,26,"// reader tests; // setup test tree access",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:45,Testability,test,test,45,"// run the reader application and compare to test tree",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:70,Testability,test,testTarget,70,"// if (ievt<3) std::cout << ""i=""<<iTest<<"", readerVal=""<<readerVal<<"" testTarget""<<testTarget<<""; // diff=""<<diff<<std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:83,Testability,test,testTarget,83,"// if (ievt<3) std::cout << ""i=""<<iTest<<"", readerVal=""<<readerVal<<"" testTarget""<<testTarget<<""; // diff=""<<diff<<std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:139,Integrability,interface,interface,139,"// Author: Eckhard von Toerne, uses Christoph Rosemann's MethodUnitTest as example Nov 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // as additional argument the limits of the ROC integral can be given; // to determine the performance",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:315,Performance,perform,performance,315,"// Author: Eckhard von Toerne, uses Christoph Rosemann's MethodUnitTest as example Nov 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // as additional argument the limits of the ROC integral can be given; // to determine the performance",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:106,Testability,test,tests,106,"// Author: Eckhard von Toerne, uses Christoph Rosemann's MethodUnitTest as example Nov 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // as additional argument the limits of the ROC integral can be given; // to determine the performance",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:19,Modifiability,variab,variable,19,"// ToDo make class variable _theEffi",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:10,Testability,test,test,10,/**; Unit test for TMVA::IPythonInteractive located in TMVA/MethodBase.h; */,MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:111,Testability,test,tests,111,"///////////////////////////////////////////////////////////////////////////////////////////////////; ///// Run tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:107,Testability,Test,Testing,107,"///////////////////////////////////////////////////////////////////////////////////////////////////; ///// Testing creating IPythonInteractive object and initialization.",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:146,Testability,test,testing,146,"///////////////////////////////////////////////////////////////////////////////////////////////////; ///// Adding datas to IPythonInteractive and testing if it got all of them correctly.",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:109,Testability,test,tests,109,"// including file stressTMVA.cxx; // Authors: Christoph Rosemann, Eckhard von Toerne July 2010; // TMVA unit tests",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:191,Testability,Test,TestRate,191,"// this does not work satisfactory TMVA_test.addTest(new RegressionUnitTestWithDeviation( TMVA::Types::kMLP, ""MLP"",; // ""!H:!V:VarTransform=Norm:NeuronType=tanh:NCycles=300:HiddenLayers=N+20:TestRate=6:TrainingMethod=BP:Sampling=0.3:SamplingEpoch=0.8:ConvergenceImprove=1e-6:ConvergenceTests=15:!UseRegulator""; // , 0.4, 0.8, 0.2, 0.5 )); SVM regression does not work TMVA_test.addTest(new RegressionUnitTestWithDeviation(; // TMVA::Types::kSVM, ""SVM"", ""Gamma=0.25:Tol=0.001:VarTransform=Norm"" , 0., 1., 0., 1. ));",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:16,Testability,test,tests,16,"// complex data tests Fisher for comparison",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:16,Testability,test,tests,16,"// complex data tests with MLP",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:31,Testability,test,tests,31,"// std::cout << running longer tests<<std::endl;",MatchSource.CODE_COMMENT,tmva/tmva/test/stressTMVA.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:53,Testability,test,test,53,/*; * This class is a friend class to the unit under test and its main purpose is; * to forward calls to private functions.; *; * It also provides a static test environment so that the creation of dataset; * and any potetial shared operations (e.g. training) is executed only once; * for all tests.; */,MatchSource.CODE_COMMENT,tmva/tmva/test/TestOptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:156,Testability,test,test,156,/*; * This class is a friend class to the unit under test and its main purpose is; * to forward calls to private functions.; *; * It also provides a static test environment so that the creation of dataset; * and any potetial shared operations (e.g. training) is executed only once; * for all tests.; */,MatchSource.CODE_COMMENT,tmva/tmva/test/TestOptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:292,Testability,test,tests,292,/*; * This class is a friend class to the unit under test and its main purpose is; * to forward calls to private functions.; *; * It also provides a static test environment so that the creation of dataset; * and any potetial shared operations (e.g. training) is executed only once; * for all tests.; */,MatchSource.CODE_COMMENT,tmva/tmva/test/TestOptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:14,Testability,Test,TestOptimizeConfigParameters,14,"// auto opt = TestOptimizeConfigParameters(""SigEffAtBkg1"", GetMethod());; // auto opt = TestOptimizeConfigParameters(""SigEffAtBkg10"", GetMethod());; // Expect crash",MatchSource.CODE_COMMENT,tmva/tmva/test/TestOptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:88,Testability,Test,TestOptimizeConfigParameters,88,"// auto opt = TestOptimizeConfigParameters(""SigEffAtBkg1"", GetMethod());; // auto opt = TestOptimizeConfigParameters(""SigEffAtBkg10"", GetMethod());; // Expect crash",MatchSource.CODE_COMMENT,tmva/tmva/test/TestOptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:14,Testability,Test,TestOptimizeConfigParameters,14,"// auto opt = TestOptimizeConfigParameters(""BkgRejAtSigEff1"", GetMethod());; // auto opt = TestOptimizeConfigParameters(""BkgRejAtSigEff10"", GetMethod());; // Expect crash",MatchSource.CODE_COMMENT,tmva/tmva/test/TestOptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:91,Testability,Test,TestOptimizeConfigParameters,91,"// auto opt = TestOptimizeConfigParameters(""BkgRejAtSigEff1"", GetMethod());; // auto opt = TestOptimizeConfigParameters(""BkgRejAtSigEff10"", GetMethod());; // Expect crash",MatchSource.CODE_COMMENT,tmva/tmva/test/TestOptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:14,Testability,Test,TestOptimizeConfigParameters,14,"// auto opt = TestOptimizeConfigParameters(""BkgEffAtSigEff1"", GetMethod());; // auto opt = TestOptimizeConfigParameters(""BkgEffAtSigEff10"", GetMethod());; // Expect crash",MatchSource.CODE_COMMENT,tmva/tmva/test/TestOptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:91,Testability,Test,TestOptimizeConfigParameters,91,"// auto opt = TestOptimizeConfigParameters(""BkgEffAtSigEff1"", GetMethod());; // auto opt = TestOptimizeConfigParameters(""BkgEffAtSigEff10"", GetMethod());; // Expect crash",MatchSource.CODE_COMMENT,tmva/tmva/test/TestOptimizeConfigParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestRandomGenerator.cxx:3,Testability,Test,Test,3,"// Test that generation compiles",MatchSource.CODE_COMMENT,tmva/tmva/test/TestRandomGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestRandomGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx:51,Modifiability,variab,variable,51,/**; * Perform prediction using float as spectator variable; * @param method Path to a method weight file.; */,MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx:7,Performance,Perform,Perform,7,/**; * Perform prediction using float as spectator variable; * @param method Path to a method weight file.; */,MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx:15,Safety,predict,prediction,15,/**; * Perform prediction using float as spectator variable; * @param method Path to a method weight file.; */,MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx:56,Modifiability,variab,variable,56,/**; * @brief Perform prediction using int as spectator variable; * @param method Path to a method weight file.; * This tests check if issue #9115 is fixed since it uses an integer; * type in TMVA::Reader; */,MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx:14,Performance,Perform,Perform,14,/**; * @brief Perform prediction using int as spectator variable; * @param method Path to a method weight file.; * This tests check if issue #9115 is fixed since it uses an integer; * type in TMVA::Reader; */,MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx:22,Safety,predict,prediction,22,/**; * @brief Perform prediction using int as spectator variable; * @param method Path to a method weight file.; * This tests check if issue #9115 is fixed since it uses an integer; * type in TMVA::Reader; */,MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx:120,Testability,test,tests,120,/**; * @brief Perform prediction using int as spectator variable; * @param method Path to a method weight file.; * This tests check if issue #9115 is fixed since it uses an integer; * type in TMVA::Reader; */,MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx:3,Security,Access,AccessPathName,3,"// AccessPathName() == kFALSE means file exits",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationMultiProc.cxx:3,Security,Access,AccessPathName,3,"// AccessPathName() == kFALSE means file exits",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationMultiProc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationMultiProc.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:41,Deployability,integrat,integrated,41,"/// \file; /// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; /// - Package : TMVA; /// - Exectuable: TMVACrossValidation; ///; ///; /// Performs a verification that the cross evaluation splitting was performed as; /// intended. If the input data has ids (EventNumbers); ///; /// 0,1,2,3,4,5,6,7,8,9,10; ///; /// these will be split into e.g. 3 parts; ///; /// Part 0: 0,3,6,9; /// Part 1: 1,4,7,10; /// Part 2: 2,5,8; ///; /// This file verifies that each fold is calculated so that the test data for; /// each fold is equal to the equivalent part. That is the test set for fold 0; /// is part 0 and the train set is part 1 + part 2.; ///; /// Fold 0:; /// Train: 1,2,4,5,7,8,10,; /// Test : 0,3,6,9; ///; /// Et.c.; ///",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:41,Integrability,integrat,integrated,41,"/// \file; /// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; /// - Package : TMVA; /// - Exectuable: TMVACrossValidation; ///; ///; /// Performs a verification that the cross evaluation splitting was performed as; /// intended. If the input data has ids (EventNumbers); ///; /// 0,1,2,3,4,5,6,7,8,9,10; ///; /// these will be split into e.g. 3 parts; ///; /// Part 0: 0,3,6,9; /// Part 1: 1,4,7,10; /// Part 2: 2,5,8; ///; /// This file verifies that each fold is calculated so that the test data for; /// each fold is equal to the equivalent part. That is the test set for fold 0; /// is part 0 and the train set is part 1 + part 2.; ///; /// Fold 0:; /// Train: 1,2,4,5,7,8,10,; /// Test : 0,3,6,9; ///; /// Et.c.; ///",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:167,Performance,Perform,Performs,167,"/// \file; /// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; /// - Package : TMVA; /// - Exectuable: TMVACrossValidation; ///; ///; /// Performs a verification that the cross evaluation splitting was performed as; /// intended. If the input data has ids (EventNumbers); ///; /// 0,1,2,3,4,5,6,7,8,9,10; ///; /// these will be split into e.g. 3 parts; ///; /// Part 0: 0,3,6,9; /// Part 1: 1,4,7,10; /// Part 2: 2,5,8; ///; /// This file verifies that each fold is calculated so that the test data for; /// each fold is equal to the equivalent part. That is the test set for fold 0; /// is part 0 and the train set is part 1 + part 2.; ///; /// Fold 0:; /// Train: 1,2,4,5,7,8,10,; /// Test : 0,3,6,9; ///; /// Et.c.; ///",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:231,Performance,perform,performed,231,"/// \file; /// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; /// - Package : TMVA; /// - Exectuable: TMVACrossValidation; ///; ///; /// Performs a verification that the cross evaluation splitting was performed as; /// intended. If the input data has ids (EventNumbers); ///; /// 0,1,2,3,4,5,6,7,8,9,10; ///; /// these will be split into e.g. 3 parts; ///; /// Part 0: 0,3,6,9; /// Part 1: 1,4,7,10; /// Part 2: 2,5,8; ///; /// This file verifies that each fold is calculated so that the test data for; /// each fold is equal to the equivalent part. That is the test set for fold 0; /// is part 0 and the train set is part 1 + part 2.; ///; /// Fold 0:; /// Train: 1,2,4,5,7,8,10,; /// Test : 0,3,6,9; ///; /// Et.c.; ///",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:518,Testability,test,test,518,"/// \file; /// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; /// - Package : TMVA; /// - Exectuable: TMVACrossValidation; ///; ///; /// Performs a verification that the cross evaluation splitting was performed as; /// intended. If the input data has ids (EventNumbers); ///; /// 0,1,2,3,4,5,6,7,8,9,10; ///; /// these will be split into e.g. 3 parts; ///; /// Part 0: 0,3,6,9; /// Part 1: 1,4,7,10; /// Part 2: 2,5,8; ///; /// This file verifies that each fold is calculated so that the test data for; /// each fold is equal to the equivalent part. That is the test set for fold 0; /// is part 0 and the train set is part 1 + part 2.; ///; /// Fold 0:; /// Train: 1,2,4,5,7,8,10,; /// Test : 0,3,6,9; ///; /// Et.c.; ///",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:592,Testability,test,test,592,"/// \file; /// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; /// - Package : TMVA; /// - Exectuable: TMVACrossValidation; ///; ///; /// Performs a verification that the cross evaluation splitting was performed as; /// intended. If the input data has ids (EventNumbers); ///; /// 0,1,2,3,4,5,6,7,8,9,10; ///; /// these will be split into e.g. 3 parts; ///; /// Part 0: 0,3,6,9; /// Part 1: 1,4,7,10; /// Part 2: 2,5,8; ///; /// This file verifies that each fold is calculated so that the test data for; /// each fold is equal to the equivalent part. That is the test set for fold 0; /// is part 0 and the train set is part 1 + part 2.; ///; /// Fold 0:; /// Train: 1,2,4,5,7,8,10,; /// Test : 0,3,6,9; ///; /// Et.c.; ///",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:716,Testability,Test,Test,716,"/// \file; /// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; /// - Package : TMVA; /// - Exectuable: TMVACrossValidation; ///; ///; /// Performs a verification that the cross evaluation splitting was performed as; /// intended. If the input data has ids (EventNumbers); ///; /// 0,1,2,3,4,5,6,7,8,9,10; ///; /// these will be split into e.g. 3 parts; ///; /// Part 0: 0,3,6,9; /// Part 1: 1,4,7,10; /// Part 2: 2,5,8; ///; /// This file verifies that each fold is calculated so that the test data for; /// each fold is equal to the equivalent part. That is the test set for fold 0; /// is part 0 and the train set is part 1 + part 2.; ///; /// Fold 0:; /// Train: 1,2,4,5,7,8,10,; /// Test : 0,3,6,9; ///; /// Et.c.; ///",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:34,Testability,test,test,34,"/*; * Creates data for use by the test. Returns a tuple of a TTree and an id; * vector. The TTree can be used by a dataloader to create a DataSet. The id; * vector can be used to verify that the splitting was done correctly.; *; * \param nPoints Number of data points to generate; * \param start Start value for the id, can be used to differentiate trees.; */",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:7,Performance,Perform,Performs,7,/**; * Performs the same split as CvSplitKFolds; *; * @param ids; */,MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:37,Testability,test,test,37,"// Combine folds into a training and test set",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:32,Testability,test,test,32,"// Fold number iFold is kept as test set",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:10,Testability,Test,Test,10,"// Verify Test set",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:10,Testability,test,test,10,"// Actual test",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:3,Testability,test,test,3,"// test split expression without passing the number of folds",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:10,Testability,test,test,10,"// Actual test",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:3,Testability,Test,Test,3,"// Test for unbalanced classes",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:10,Testability,test,test,10,"// Actual test",MatchSource.CODE_COMMENT,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.cxx:528,Testability,test,test,528,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic activation function test //; // for the reference architecture. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.cxx:3,Availability,error,error,3,"// error is larger when using fast tanh from vdt",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.cxx:3,Availability,error,error,3,"// error is larger when using fast tanh from vdt",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:835,Availability,error,error,835,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Generic tests of the layer activation functions //; // //; // Contains tests for each of the layer activation functions that //; // test the evaluation of the function using the evaluate(...) //; // method and the computation of the derivatives using //; // evaluate_derivative(...) on a randomly generated matrix. Each //; // function returns the maximum relative error between the expected //; // result and the result obtained for the given arcthitecture. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:478,Testability,test,tests,478,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Generic tests of the layer activation functions //; // //; // Contains tests for each of the layer activation functions that //; // test the evaluation of the function using the evaluate(...) //; // method and the computation of the derivatives using //; // evaluate_derivative(...) on a randomly generated matrix. Each //; // function returns the maximum relative error between the expected //; // result and the result obtained for the given arcthitecture. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:541,Testability,test,tests,541,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Generic tests of the layer activation functions //; // //; // Contains tests for each of the layer activation functions that //; // test the evaluation of the function using the evaluate(...) //; // method and the computation of the derivatives using //; // evaluate_derivative(...) on a randomly generated matrix. Each //; // function returns the maximum relative error between the expected //; // result and the result obtained for the given arcthitecture. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:602,Testability,test,test,602,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Generic tests of the layer activation functions //; // //; // Contains tests for each of the layer activation functions that //; // test the evaluation of the function using the evaluate(...) //; // method and the computation of the derivatives using //; // evaluate_derivative(...) on a randomly generated matrix. Each //; // function returns the maximum relative error between the expected //; // result and the result obtained for the given arcthitecture. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:3,Integrability,wrap,wrapper,3,// wrapper functions for calling on Matrix instead of tensors; /* impl using Matrix */,MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:3,Testability,test,test,3,"// test the tensor API",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:90,Testability,test,test,90,"//___________________________________________________________________________________; // test derivative of activation",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:3,Testability,test,test,3,"// test the tensor API",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:205,Testability,Test,Test,205,"//______________________________________________________________________________; //; // Identity Activation Function; //______________________________________________________________________________; /*! Test application of identity function to matrix. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Testability,Test,Test,4,"/*! Test computation of the first derivative of the identity function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:201,Testability,Test,Test,201,"//______________________________________________________________________________; //; // ReLU Activation Function; //______________________________________________________________________________; /*! Test application of ReLU function to matrix. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Testability,Test,Test,4,"/*! Test computation of the first derivative of the ReLU function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:204,Testability,Test,Test,204,"//______________________________________________________________________________; //; // Sigmoid Activation Function; //______________________________________________________________________________; /*! Test application of Sigmoid function to matrix. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Testability,Test,Test,4,"/*! Test computation of the first derivative of the Sigmoid function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:201,Testability,Test,Test,201,"//______________________________________________________________________________; //; // Tanh Activation Function; //______________________________________________________________________________; /*! Test application of tanh function to matrix. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Testability,Test,Test,4,"/*! Test computation of the first derivative of the tanh function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:211,Testability,Test,Test,211,"//______________________________________________________________________________; //; // Symmetric ReLU Activation Function; //______________________________________________________________________________; /*! Test application of symmetric ReLU function to matrix. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Testability,Test,Test,4,"/*! Test computation of the first derivative of the symmetric ReLU function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:206,Testability,Test,Test,206,"//______________________________________________________________________________; //; // Soft Sign Activation Function; //______________________________________________________________________________; /*! Test application of symmetric soft sign function to matrix. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Testability,Test,Test,4,"/*! Test computation of the first derivative of the soft sign function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:203,Testability,Test,Test,203,"//______________________________________________________________________________; //; // Gauss Activation Functions; //______________________________________________________________________________; /*! Test application of Gauss activation function to matrix. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Testability,Test,Test,4,"/*! Test computation of the first derivative of the Gauss activation function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCpu.cxx:548,Performance,multi-thread,multi-threaded,548,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic activation function test //; // for the multi-threaded CPU implementation. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCpu.cxx:528,Testability,test,test,528,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic activation function test //; // for the multi-threaded CPU implementation. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:22,Testability,test,test,22,"// @(#)root/tmva/tmva/test/dnn $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic activation function test //; // for the TCuda implementation. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:540,Testability,test,test,540,"// @(#)root/tmva/tmva/test/dnn $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic activation function test //; // for the TCuda implementation. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:3,Availability,error,error,3,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:123,Availability,error,error,123,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:136,Availability,error,error,136,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:164,Availability,error,error,164,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:196,Availability,error,error,196,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:337,Availability,error,error,337,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:350,Availability,error,error,350,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:378,Availability,error,error,378,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:426,Availability,error,error,426,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:552,Availability,error,error,552,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:565,Availability,error,error,565,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:593,Availability,error,error,593,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:625,Availability,error,error,625,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:772,Availability,error,error,772,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:785,Availability,error,error,785,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:813,Availability,error,error,813,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:11,Testability,test,testRelu,11,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:60,Testability,Test,Testing,60,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:204,Testability,test,testReluDerivative,204,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:263,Testability,Test,Testing,263,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:434,Testability,test,testSigmoid,434,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:486,Testability,Test,Testing,486,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:633,Testability,test,testSigmoidDerivative,633,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:695,Testability,Test,Testing,695,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.cxx:520,Testability,test,test,520,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // the reference architecture. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.cxx:7,Testability,Test,Test,7,"//; // Test backpropagation for linear net.; //",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:769,Safety,avoid,avoid,769,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:474,Testability,test,tests,474,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:532,Testability,test,tests,532,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:646,Testability,test,tests,646,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:176,Availability,error,error,176,"/*! Generate a random net, perform forward and backward propagation and check; * the weight gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:27,Performance,perform,perform,27,"/*! Generate a random net, perform forward and backward propagation and check; * the weight gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:207,Availability,error,error,207,"/*! Generate a random, linear net, perform forward and backward propagation with; * L1 regularization and check the weight gradients using numerical; * differentiation. Returns the maximum relative gradient error and; * also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:35,Performance,perform,perform,35,"/*! Generate a random, linear net, perform forward and backward propagation with; * L1 regularization and check the weight gradients using numerical; * differentiation. Returns the maximum relative gradient error and; * also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:3,Safety,Avoid,Avoid,3,"// Avoid running into the non-derivable point at 0.0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:207,Availability,error,error,207,"/*! Generate a random, linear net, perform forward and backward propagation with; * L2 regularization and check the weight gradients using numerical; * differentiation. Returns the maximum relative gradient error and; * also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:35,Performance,perform,perform,35,"/*! Generate a random, linear net, perform forward and backward propagation with; * L2 regularization and check the weight gradients using numerical; * differentiation. Returns the maximum relative gradient error and; * also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:174,Availability,error,error,174,"/*! Generate a random net, perform forward and backward propagation and check; * the bias gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:27,Performance,perform,perform,27,"/*! Generate a random net, perform forward and backward propagation and check; * the bias gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationCpu.cxx:538,Performance,multi-thread,multi-threaded,538,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // multi-threaded CPU architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationCpu.cxx:522,Testability,test,test,522,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // multi-threaded CPU architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationCuda.cxx:522,Testability,test,test,522,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.cxx:520,Testability,test,test,520,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // the reference architecture. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.cxx:7,Testability,Test,Test,7,"//; // Test backpropagation for linear net.; //",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:787,Safety,avoid,avoid,787,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:492,Testability,test,tests,492,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:550,Testability,test,tests,550,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:664,Testability,test,tests,664,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:176,Availability,error,error,176,"/*! Generate a random net, perform forward and backward propagation and check; * the weight gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:27,Performance,perform,perform,27,"/*! Generate a random net, perform forward and backward propagation and check; * the weight gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:207,Availability,error,error,207,"/*! Generate a random, linear net, perform forward and backward propagation with; * L1 regularization and check the weight gradients using numerical; * differentiation. Returns the maximum relative gradient error and; * also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:35,Performance,perform,perform,35,"/*! Generate a random, linear net, perform forward and backward propagation with; * L1 regularization and check the weight gradients using numerical; * differentiation. Returns the maximum relative gradient error and; * also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:3,Safety,Avoid,Avoid,3,"// Avoid running into the non-derivable point at 0.0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:207,Availability,error,error,207,"/*! Generate a random, linear net, perform forward and backward propagation with; * L2 regularization and check the weight gradients using numerical; * differentiation. Returns the maximum relative gradient error and; * also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:35,Performance,perform,perform,35,"/*! Generate a random, linear net, perform forward and backward propagation with; * L2 regularization and check the weight gradients using numerical; * differentiation. Returns the maximum relative gradient error and; * also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:118,Testability,test,test,118,"// use kIdentity for debugging; // FCLayer_t* l1 = net.AddDenseLayer(outputSize, EActivationFunction::kIdentity);; // test fails if using VDT and tanh",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:174,Availability,error,error,174,"/*! Generate a random net, perform forward and backward propagation and check; * the bias gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:27,Performance,perform,perform,27,"/*! Generate a random net, perform forward and backward propagation and check; * the bias gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDLCpu.cxx:538,Performance,multi-thread,multi-threaded,538,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // multi-threaded CPU architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDLCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDLCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDLCpu.cxx:522,Testability,test,test,522,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // multi-threaded CPU architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDLCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDLCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDLCuda.cxx:522,Testability,test,test,522,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBackpropagationDLCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDLCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.cxx:520,Testability,test,test,520,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // the reference architecture. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.cxx:7,Testability,Test,Test,7,"//; // Test backpropagation for linear net.; //",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:787,Safety,avoid,avoid,787,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:492,Testability,test,tests,492,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:550,Testability,test,tests,550,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:664,Testability,test,tests,664,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:176,Availability,error,error,176,"/*! Generate a random net, perform forward and backward propagation and check; * the weight gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:27,Performance,perform,perform,27,"/*! Generate a random net, perform forward and backward propagation and check; * the weight gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:9,Modifiability,layers,layers,9,"// auto &layers = net.GetLayers();; // auto bnlayer = new TBatchNormLayer<Architecture>(tbatchSize, 1, 1, outputSize);; // layers.push_back( bnlayer);",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:123,Modifiability,layers,layers,123,"// auto &layers = net.GetLayers();; // auto bnlayer = new TBatchNormLayer<Architecture>(tbatchSize, 1, 1, outputSize);; // layers.push_back( bnlayer);",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:176,Availability,error,error,176,"/*! Generate a random net, perform forward and backward propagation and check; * the weight gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:27,Performance,perform,perform,27,"/*! Generate a random net, perform forward and backward propagation and check; * the weight gradients using numerical differentiation. Returns the maximum; * relative gradient error and also prints it to stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:9,Modifiability,layers,layers,9,"// auto &layers = net.GetLayers();; // auto bnlayer = new TBatchNormLayer<Architecture>(tbatchSize, 1, 1, outputSize);; // layers.push_back( bnlayer);",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:123,Modifiability,layers,layers,123,"// auto &layers = net.GetLayers();; // auto bnlayer = new TBatchNormLayer<Architecture>(tbatchSize, 1, 1, outputSize);; // layers.push_back( bnlayer);",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCpu.cxx:520,Testability,test,test,520,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // the reference architecture. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCpu.cxx:7,Testability,Test,Test,7,"//; // Test backpropagation for linear net.; //",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx:520,Testability,test,test,520,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // the reference architecture. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx:151,Availability,error,error,151,"//; // Test backpropagation for linear net.; //; //Since batch norm is not supported for plain Cuda - the BNOrm layer will be a dummy layer; // and an error message should be produced",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx:157,Integrability,message,message,157,"//; // Test backpropagation for linear net.; //; //Since batch norm is not supported for plain Cuda - the BNOrm layer will be a dummy layer; // and an error message should be produced",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx:7,Testability,Test,Test,7,"//; // Test backpropagation for linear net.; //; //Since batch norm is not supported for plain Cuda - the BNOrm layer will be a dummy layer; // and an error message should be produced",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCudnn.cxx:520,Testability,test,test,520,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // the reference architecture. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalizationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCudnn.cxx:7,Testability,Test,Test,7,"//; // Test backpropagation for linear net.; //",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestBatchNormalizationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:541,Availability,error,error,541,"//_________________________________________________________________________________; /*Double_t testAddRowWise(); {; const size_t ntests = 10;. Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 50 + 1;; n = rand() % 50 + 1;. TMatrixT<Double_t> A(m,n), B(m,n), theta(n,1);; //randomMatrix(A);; randomMatrix(theta);; TCudaMatrix ACuda(A), BCuda(B), thetaCuda(theta);. TReference<Double_t>::AddRowWise(A, theta);; TCuda<false>::AddRowWise(ACuda,thetaCuda);; TMatrixT<Double_t> ARef(ACuda);. Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________; /*Double_t testHadamard(); {; const size_t ntests = 10;; Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 10 + 1;; n = rand() % 10 + 1;. TMatrixT<Double_t> A(m,n), B(m,n);; randomMatrix(A);; randomMatrix(B);; TCudaMatrix ACuda(A), BCuda(B);. for (size_t j = 0; j < (size_t) A.GetNrows(); j++) {; for (size_t k = 0; k < (size_t) A.GetNcols(); k++) {; A(j,k) *= B(j,k);; }; }. TCuda<false>::Hadamard(ACuda, BCuda);; TMatrixT<Double_t> ARef(ACuda);; Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:605,Availability,error,error,605,"//_________________________________________________________________________________; /*Double_t testAddRowWise(); {; const size_t ntests = 10;. Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 50 + 1;; n = rand() % 50 + 1;. TMatrixT<Double_t> A(m,n), B(m,n), theta(n,1);; //randomMatrix(A);; randomMatrix(theta);; TCudaMatrix ACuda(A), BCuda(B), thetaCuda(theta);. TReference<Double_t>::AddRowWise(A, theta);; TCuda<false>::AddRowWise(ACuda,thetaCuda);; TMatrixT<Double_t> ARef(ACuda);. Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________; /*Double_t testHadamard(); {; const size_t ntests = 10;; Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 10 + 1;; n = rand() % 10 + 1;. TMatrixT<Double_t> A(m,n), B(m,n);; randomMatrix(A);; randomMatrix(B);; TCudaMatrix ACuda(A), BCuda(B);. for (size_t j = 0; j < (size_t) A.GetNrows(); j++) {; for (size_t k = 0; k < (size_t) A.GetNcols(); k++) {; A(j,k) *= B(j,k);; }; }. TCuda<false>::Hadamard(ACuda, BCuda);; TMatrixT<Double_t> ARef(ACuda);; Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:1244,Availability,error,error,1244,"//_________________________________________________________________________________; /*Double_t testAddRowWise(); {; const size_t ntests = 10;. Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 50 + 1;; n = rand() % 50 + 1;. TMatrixT<Double_t> A(m,n), B(m,n), theta(n,1);; //randomMatrix(A);; randomMatrix(theta);; TCudaMatrix ACuda(A), BCuda(B), thetaCuda(theta);. TReference<Double_t>::AddRowWise(A, theta);; TCuda<false>::AddRowWise(ACuda,thetaCuda);; TMatrixT<Double_t> ARef(ACuda);. Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________; /*Double_t testHadamard(); {; const size_t ntests = 10;; Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 10 + 1;; n = rand() % 10 + 1;. TMatrixT<Double_t> A(m,n), B(m,n);; randomMatrix(A);; randomMatrix(B);; TCudaMatrix ACuda(A), BCuda(B);. for (size_t j = 0; j < (size_t) A.GetNrows(); j++) {; for (size_t k = 0; k < (size_t) A.GetNcols(); k++) {; A(j,k) *= B(j,k);; }; }. TCuda<false>::Hadamard(ACuda, BCuda);; TMatrixT<Double_t> ARef(ACuda);; Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:1308,Availability,error,error,1308,"//_________________________________________________________________________________; /*Double_t testAddRowWise(); {; const size_t ntests = 10;. Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 50 + 1;; n = rand() % 50 + 1;. TMatrixT<Double_t> A(m,n), B(m,n), theta(n,1);; //randomMatrix(A);; randomMatrix(theta);; TCudaMatrix ACuda(A), BCuda(B), thetaCuda(theta);. TReference<Double_t>::AddRowWise(A, theta);; TCuda<false>::AddRowWise(ACuda,thetaCuda);; TMatrixT<Double_t> ARef(ACuda);. Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________; /*Double_t testHadamard(); {; const size_t ntests = 10;; Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 10 + 1;; n = rand() % 10 + 1;. TMatrixT<Double_t> A(m,n), B(m,n);; randomMatrix(A);; randomMatrix(B);; TCudaMatrix ACuda(A), BCuda(B);. for (size_t j = 0; j < (size_t) A.GetNrows(); j++) {; for (size_t k = 0; k < (size_t) A.GetNcols(); k++) {; A(j,k) *= B(j,k);; }; }. TCuda<false>::Hadamard(ACuda, BCuda);; TMatrixT<Double_t> ARef(ACuda);; Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:96,Testability,test,testAddRowWise,96,"//_________________________________________________________________________________; /*Double_t testAddRowWise(); {; const size_t ntests = 10;. Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 50 + 1;; n = rand() % 50 + 1;. TMatrixT<Double_t> A(m,n), B(m,n), theta(n,1);; //randomMatrix(A);; randomMatrix(theta);; TCudaMatrix ACuda(A), BCuda(B), thetaCuda(theta);. TReference<Double_t>::AddRowWise(A, theta);; TCuda<false>::AddRowWise(ACuda,thetaCuda);; TMatrixT<Double_t> ARef(ACuda);. Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________; /*Double_t testHadamard(); {; const size_t ntests = 10;; Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 10 + 1;; n = rand() % 10 + 1;. TMatrixT<Double_t> A(m,n), B(m,n);; randomMatrix(A);; randomMatrix(B);; TCudaMatrix ACuda(A), BCuda(B);. for (size_t j = 0; j < (size_t) A.GetNrows(); j++) {; for (size_t k = 0; k < (size_t) A.GetNcols(); k++) {; A(j,k) *= B(j,k);; }; }. TCuda<false>::Hadamard(ACuda, BCuda);; TMatrixT<Double_t> ARef(ACuda);; Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:754,Testability,test,testHadamard,754,"//_________________________________________________________________________________; /*Double_t testAddRowWise(); {; const size_t ntests = 10;. Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 50 + 1;; n = rand() % 50 + 1;. TMatrixT<Double_t> A(m,n), B(m,n), theta(n,1);; //randomMatrix(A);; randomMatrix(theta);; TCudaMatrix ACuda(A), BCuda(B), thetaCuda(theta);. TReference<Double_t>::AddRowWise(A, theta);; TCuda<false>::AddRowWise(ACuda,thetaCuda);; TMatrixT<Double_t> ARef(ACuda);. Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________; /*Double_t testHadamard(); {; const size_t ntests = 10;; Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 10 + 1;; n = rand() % 10 + 1;. TMatrixT<Double_t> A(m,n), B(m,n);; randomMatrix(A);; randomMatrix(B);; TCudaMatrix ACuda(A), BCuda(B);. for (size_t j = 0; j < (size_t) A.GetNrows(); j++) {; for (size_t k = 0; k < (size_t) A.GetNcols(); k++) {; A(j,k) *= B(j,k);; }; }. TCuda<false>::Hadamard(ACuda, BCuda);; TMatrixT<Double_t> ARef(ACuda);; Double_t error = maximumRelativeError(A, ARef);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:91,Availability,error,error,91,"/*for (size_t j = 0; j < n; j++) {; //std::cout << B(0,j) << "" / "" << j * m << std::endl;; error = std::abs(B(0,j) - m);; maximumError = std::max(error, maximumError);; }*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:146,Availability,error,error,146,"/*for (size_t j = 0; j < n; j++) {; //std::cout << B(0,j) << "" / "" << j * m << std::endl;; error = std::abs(B(0,j) - m);; maximumError = std::max(error, maximumError);; }*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:550,Availability,error,error,550,"//_________________________________________________________________________________; /*Double_t testScaleAdd(); {; const size_t ntests = 10;; Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 1000 + 1;; n = rand() % 1000 + 1;. TMatrixT<Double_t> A(m,n), B(m,n);. randomMatrix(A);; randomMatrix(B);. TCudaMatrix ACuda(A);; TCudaMatrix BCuda(B);. Double_t beta = ((Double_t) rand()) / ((Double_t) RAND_MAX);; TReference<Double_t>::ScaleAdd(A, B, beta);; TCuda<false>::ScaleAdd(ACuda, BCuda, beta);. Double_t error = maximumRelativeError(A, (TMatrixT<Double_t>) ACuda);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:636,Availability,error,error,636,"//_________________________________________________________________________________; /*Double_t testScaleAdd(); {; const size_t ntests = 10;; Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 1000 + 1;; n = rand() % 1000 + 1;. TMatrixT<Double_t> A(m,n), B(m,n);. randomMatrix(A);; randomMatrix(B);. TCudaMatrix ACuda(A);; TCudaMatrix BCuda(B);. Double_t beta = ((Double_t) rand()) / ((Double_t) RAND_MAX);; TReference<Double_t>::ScaleAdd(A, B, beta);; TCuda<false>::ScaleAdd(ACuda, BCuda, beta);. Double_t error = maximumRelativeError(A, (TMatrixT<Double_t>) ACuda);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:96,Testability,test,testScaleAdd,96,"//_________________________________________________________________________________; /*Double_t testScaleAdd(); {; const size_t ntests = 10;; Double_t maximumError = 0;. for (size_t i = 0; i < ntests; i++) {; size_t m, n;; m = rand() % 1000 + 1;; n = rand() % 1000 + 1;. TMatrixT<Double_t> A(m,n), B(m,n);. randomMatrix(A);; randomMatrix(B);. TCudaMatrix ACuda(A);; TCudaMatrix BCuda(B);. Double_t beta = ((Double_t) rand()) / ((Double_t) RAND_MAX);; TReference<Double_t>::ScaleAdd(A, B, beta);; TCuda<false>::ScaleAdd(ACuda, BCuda, beta);. Double_t error = maximumRelativeError(A, (TMatrixT<Double_t>) ACuda);; maximumError = std::max(error, maximumError);; }; return maximumError;; }*/; //_________________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:2,Availability,error,error,2,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:70,Availability,error,error,70,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:95,Availability,error,error,95,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:120,Availability,error,error,120,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:187,Availability,error,error,187,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:212,Availability,error,error,212,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:237,Availability,error,error,237,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:310,Availability,error,error,310,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:335,Availability,error,error,335,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:360,Availability,error,error,360,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:433,Availability,error,error,433,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:458,Availability,error,error,458,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:10,Testability,test,testScaleAdd,10,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:41,Testability,Test,Testing,41,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:128,Testability,test,testHadamard,128,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:159,Testability,Test,Testing,159,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:245,Testability,test,testMultiply,245,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:276,Testability,Test,Testing,276,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:368,Testability,test,testAddRowWise,368,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:401,Testability,Test,Testing,401,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.cxx:494,Performance,load,loader,494,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////; // Test the reference data loader implementation. //; ////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.cxx:470,Testability,Test,Test,470,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////; // Test the reference data loader implementation. //; ////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:476,Testability,test,test,476,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////; // Generic test for DataLoader implementations. //; //////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:23,Performance,load,loader,23,"/** Test that the data loader loads all data in the data set by summing; * up all elements batch wise and comparing to the result obtained by summing; * over the complete dataset.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:30,Performance,load,loads,30,"/** Test that the data loader loads all data in the data set by summing; * up all elements batch wise and comparing to the result obtained by summing; * over the complete dataset.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:4,Testability,Test,Test,4,"/** Test that the data loader loads all data in the data set by summing; * up all elements batch wise and comparing to the result obtained by summing; * over the complete dataset.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:149,Availability,error,error,149,"/** Test the data loader by loading identical input and output data, running it; * through an identity neural network and computing the mean squared error,; * should obviously be zero. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:18,Performance,load,loader,18,"/** Test the data loader by loading identical input and output data, running it; * through an identity neural network and computing the mean squared error,; * should obviously be zero. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:28,Performance,load,loading,28,"/** Test the data loader by loading identical input and output data, running it; * through an identity neural network and computing the mean squared error,; * should obviously be zero. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:4,Testability,Test,Test,4,"/** Test the data loader by loading identical input and output data, running it; * through an identity neural network and computing the mean squared error,; * should obviously be zero. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCpu.cxx:488,Performance,multi-thread,multi-threaded,488,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // Test the multi-threaded CPU data loader implementation. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCpu.cxx:512,Performance,load,loader,512,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // Test the multi-threaded CPU data loader implementation. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCpu.cxx:479,Testability,Test,Test,479,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // Test the multi-threaded CPU data loader implementation. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCuda.cxx:503,Performance,load,loader,503,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 08/08/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////; // Test the generic data loader for the CUDA implementation. //; ///////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoaderCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCuda.cxx:481,Testability,Test,Test,481,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 08/08/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////; // Test the generic data loader for the CUDA implementation. //; ///////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDataLoaderCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.cxx:516,Testability,test,test,516,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic derivative test for the //; // reference implementation. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivatives.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:478,Testability,test,tests,478,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Generic tests for the derivatives and gradiens of acitvation, //; // loss and regularization functions. Each function generates a //; // random 10 x 10 matrix and uses a central finite difference and //; // to numerically compute the derivative of the function //; // w.r.t. this element. The result is compared to the result //; // obtained by the corresponding analytic derivative implemented by //; // the evaluateDerivative(...), evaluateGradients(...), //; // addRegularizationGradients(...) functions. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivatives.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:84,Availability,error,error,84,"/*! Test derivatives of all activation functions and return the maximum relative; * error. Prints the result for each function to the stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivatives.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:4,Testability,Test,Test,4,"/*! Test derivatives of all activation functions and return the maximum relative; * error. Prints the result for each function to the stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivatives.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:3,Testability,Test,Test,3,"// Test only differentiable activation functions.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivatives.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:203,Testability,test,testDerivatives,203,"//______________________________________________________________________________; //; // Loss functions.; //______________________________________________________________________________; /*! Similar to testDerivatives only that here the mathematical function is; * expected to be a matrix functional, i.e. to be mapping a matrix to a; * scalar value. The scalar value is supposed to be computed by the provided; * function object f, while the function object is just like above. */",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivatives.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:107,Availability,error,error,107,"/*! Test gradients of all loss function for the given architecture type and; * return the maximum relative error. Prints results for each function to; * standard out. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivatives.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:4,Testability,Test,Test,4,"/*! Test gradients of all loss function for the given architecture type and; * return the maximum relative error. Prints results for each function to; * standard out. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivatives.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:192,Testability,Test,Test,192,"//______________________________________________________________________________; //; // Regularization.; //______________________________________________________________________________; /*! Test the computation of gradients for all differentiable regularization types,; * which is so far only L2 and no regularization and print the results to standard; * out */",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivatives.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivativesCpu.cxx:536,Performance,multi-thread,multi-threaded,536,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic derivative test for the //; // multi-threaded CPU implementation. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivativesCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivativesCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivativesCpu.cxx:516,Testability,test,test,516,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic derivative test for the //; // multi-threaded CPU implementation. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivativesCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivativesCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivativesCuda.cxx:516,Testability,test,test,516,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic derivative test for the //; // reference implementation. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestDerivativesCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivativesCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.cxx:467,Testability,Test,Test,467,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test for the loss function reference implementation using the //; // generic test defined in TestLossFunctions.h. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.cxx:544,Testability,test,test,544,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test for the loss function reference implementation using the //; // generic test defined in TestLossFunctions.h. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.cxx:560,Testability,Test,TestLossFunctions,560,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test for the loss function reference implementation using the //; // generic test defined in TestLossFunctions.h. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.cxx:20,Availability,Error,Error,20,"//; // Mean Squared Error.; //",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.h:478,Testability,test,tests,478,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Generic tests of the loss functions //; // //; // Contains generic test for architecture-specific implementations //; // of the loss functions. Requires the architecture-specific matrix //; // type to be constructible and convertible from/to the //; // TMatrixT<Double_t> type. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.h:537,Testability,test,test,537,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Generic tests of the loss functions //; // //; // Contains generic test for architecture-specific implementations //; // of the loss functions. Requires the architecture-specific matrix //; // type to be constructible and convertible from/to the //; // TMatrixT<Double_t> type. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.h:102,Availability,Error,Error,102,"//______________________________________________________________________________; //; // Mean Squared Error; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx:524,Performance,multi-thread,multi-threaded,524,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////; // Test for the loss function implementatoins for the //; // multi-threaded CPU version using the generic test defined in //; // TestLossFunctions.h. //; //////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx:466,Testability,Test,Test,466,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////; // Test for the loss function implementatoins for the //; // multi-threaded CPU version using the generic test defined in //; // TestLossFunctions.h. //; //////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx:569,Testability,test,test,569,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////; // Test for the loss function implementatoins for the //; // multi-threaded CPU version using the generic test defined in //; // TestLossFunctions.h. //; //////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx:592,Testability,Test,TestLossFunctions,592,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////; // Test for the loss function implementatoins for the //; // multi-threaded CPU version using the generic test defined in //; // TestLossFunctions.h. //; //////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx:20,Availability,Error,Error,20,"//; // Mean Squared Error.; //",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx:467,Testability,Test,Test,467,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test for the loss function reference implementation using the //; // generic test defined in TestLossFunctions.h. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx:544,Testability,test,test,544,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test for the loss function reference implementation using the //; // generic test defined in TestLossFunctions.h. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx:560,Testability,Test,TestLossFunctions,560,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test for the loss function reference implementation using the //; // generic test defined in TestLossFunctions.h. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx:20,Availability,Error,Error,20,"//; // Mean Squared Error.; //",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:484,Testability,Test,Test,484,"// @(#)root/tmva/tmva/dnn:$Id$ // Author: Simon Pfreundschuh 20/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test arithmetic functions defined on matrices and compare the //; // results to the reference implementation. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmetic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Testability,Test,Test,4,"/** Test multiplication (standard, transpose ) operation on; * architecture specific matrix types and compare with results; * obtained with TMatrixT.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmetic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Testability,Test,Test,4,"/** Test hadamard operation on; * architecture specific matrix and tensor types and compare with results; * obtained with TMatrixT.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmetic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:10,Testability,test,test,10,"// tensor test; //ntests = 1;",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmetic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Testability,Test,Test,4,"/** Test the summing over columns by summing by the sums obtained; * from a matrix filled with column indices as elements.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmetic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Testability,Test,Test,4,"/** Test the addition of a constant to every element of; * the given matrix.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmetic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Testability,Test,Test,4,"/** Test the multiplication of a constant to every element of; * the given matrix.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmetic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Testability,Test,Test,4,"/** Test the application of reciprocating every element of; * the given matrix.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmetic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Testability,Test,Test,4,"/** Test the application of squaring every element of; * the given matrix.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmetic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Testability,Test,Test,4,"/** Test the application of taking square root of every element of; * the given matrix.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmetic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx:484,Testability,Test,Test,484,"// @(#)root/tmva/tmva/dnn:$Id$ // Author: Simon Pfreundschuh 20/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test arithmetic on CpuMatrix class using the generic tests in //; // TestArithmetic.h //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx:537,Testability,test,tests,537,"// @(#)root/tmva/tmva/dnn:$Id$ // Author: Simon Pfreundschuh 20/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test arithmetic on CpuMatrix class using the generic tests in //; // TestArithmetic.h //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx:553,Testability,Test,TestArithmetic,553,"// @(#)root/tmva/tmva/dnn:$Id$ // Author: Simon Pfreundschuh 20/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test arithmetic on CpuMatrix class using the generic tests in //; // TestArithmetic.h //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCuda.cxx:520,Testability,test,test,520,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:520,Testability,test,test,520,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:2,Availability,error,error,2,"/*error = testSumColumns<TCudnn<Double_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:91,Availability,error,error,91,"/*error = testSumColumns<TCudnn<Double_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:103,Availability,error,error,103,"/*error = testSumColumns<TCudnn<Double_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:128,Availability,error,error,128,"/*error = testSumColumns<TCudnn<Double_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:10,Testability,test,testSumColumns,10,"/*error = testSumColumns<TCudnn<Double_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:2,Availability,error,error,2,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:114,Availability,error,error,114,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:126,Availability,error,error,126,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:151,Availability,error,error,151,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:181,Availability,error,error,181,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:285,Availability,error,error,285,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:297,Availability,error,error,297,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:322,Availability,error,error,322,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:10,Testability,test,testReciprocalElementWise,10,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:189,Testability,test,testSquareElementWise,189,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:2,Availability,error,error,2,"/*error = testSumColumns<TCudnn<Real_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:89,Availability,error,error,89,"/*error = testSumColumns<TCudnn<Real_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:101,Availability,error,error,101,"/*error = testSumColumns<TCudnn<Real_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:126,Availability,error,error,126,"/*error = testSumColumns<TCudnn<Real_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:10,Testability,test,testSumColumns,10,"/*error = testSumColumns<TCudnn<Real_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:2,Availability,error,error,2,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:112,Availability,error,error,112,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:124,Availability,error,error,124,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:149,Availability,error,error,149,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:179,Availability,error,error,179,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:281,Availability,error,error,281,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:293,Availability,error,error,293,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:318,Availability,error,error,318,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:10,Testability,test,testReciprocalElementWise,10,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:187,Testability,test,testSquareElementWise,187,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adadelta optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adadelta optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx:321,Performance,optimiz,optimizer,321,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adadelta optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx:282,Testability,Test,Testing,282,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adadelta optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adagrad optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adagrad optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx:320,Performance,optimiz,optimizer,320,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adagrad optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx:282,Testability,Test,Testing,282,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adagrad optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adam optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adam optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx:317,Performance,optimiz,optimizer,317,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adam optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx:282,Testability,Test,Testing,282,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adam optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:186,Deployability,integrat,integrated,186,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for various optimizers *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:186,Integrability,integrat,integrated,186,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for various optimizers *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:339,Performance,optimiz,optimizers,339,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for various optimizers *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:301,Testability,Test,Testing,301,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for various optimizers *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:23,Deployability,pipeline,pipeline,23,"/** Testing the entire pipeline of the Method DL, when only a Multilayer Percepton; * is constructed with various optimizers. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:114,Performance,optimiz,optimizers,114,"/** Testing the entire pipeline of the Method DL, when only a Multilayer Percepton; * is constructed with various optimizers. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:4,Testability,Test,Testing,4,"/** Testing the entire pipeline of the Method DL, when only a Multilayer Percepton; * is constructed with various optimizers. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:29,Testability,test,test,29,"// Register the training and test trees",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:40,Energy Efficiency,reduce,reduce,40,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:103,Performance,Optimiz,Optimizer,103,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:117,Performance,optimiz,optimizerStr,117,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:365,Performance,Optimiz,Optimizer,365,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:379,Performance,optimiz,optimizerStr,379,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:51,Testability,test,test,51,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:206,Testability,Test,TestRepetitions,206,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:468,Testability,Test,TestRepetitions,468,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:85,Usability,Learn,LearningRate,85,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:347,Usability,Learn,LearningRate,347,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for RMSProp optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for RMSProp optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx:320,Performance,optimiz,optimizer,320,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for RMSProp optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx:282,Testability,Test,Testing,282,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for RMSProp optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx:186,Deployability,integrat,integrated,186,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for SGD optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx:186,Integrability,integrat,integrated,186,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for SGD optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx:335,Performance,optimiz,optimizer,335,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for SGD optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx:301,Testability,Test,Testing,301,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for SGD optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.cxx:458,Testability,Test,Test,458,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////; // Test the Neural Network training using the reference //; // implementation. //; // //; // Calls the generic testMinimization function defined in //; // TestMinimization.cpp for the reference architecture. //; ////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.cxx:566,Testability,test,testMinimization,566,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////; // Test the Neural Network training using the reference //; // implementation. //; // //; // Calls the generic testMinimization function defined in //; // TestMinimization.cpp for the reference architecture. //; ////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.cxx:610,Testability,Test,TestMinimization,610,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////; // Test the Neural Network training using the reference //; // implementation. //; // //; // Calls the generic testMinimization function defined in //; // TestMinimization.cpp for the reference architecture. //; ////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:613,Availability,error,error,613,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Test Standard Minimizer //; // //; // This test trains a linear neural network on a linear function //; // F(x) = W * x and computes the relative error between the matrix //; // W' representing the linear function learned by the net to the //; // orignal matrix W. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:467,Testability,Test,Test,467,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Test Standard Minimizer //; // //; // This test trains a linear neural network on a linear function //; // F(x) = W * x and computes the relative error between the matrix //; // W' representing the linear function learned by the net to the //; // orignal matrix W. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:510,Testability,test,test,510,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Test Standard Minimizer //; // //; // This test trains a linear neural network on a linear function //; // F(x) = W * x and computes the relative error between the matrix //; // W' representing the linear function learned by the net to the //; // orignal matrix W. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:681,Usability,learn,learned,681,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Test Standard Minimizer //; // //; // This test trains a linear neural network on a linear function //; // F(x) = W * x and computes the relative error between the matrix //; // W' representing the linear function learned by the net to the //; // orignal matrix W. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:158,Availability,error,error,158,/** Train a linear neural network on a randomly generated linear mapping; * from an 8-dimensional input space to a 1-dimensional output space.; * Returns the error of the response of the network to the input containing; * only ones to the 1x8 matrix used to generate the training data.; */,MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:297,Availability,error,error,297,/** Train a linear neural network on data from two randomly generated linear mappings; * from a 8-dimensional input space to a 1-dimensional output space. Set weights; * corresponding to the second mapping to zero so that the neural network is forced to; * learn the first mapping.; * Returns the error of the response of the network to the input containing; * only ones to the 1x8 matrix used to generate the training data.; */,MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:257,Usability,learn,learn,257,/** Train a linear neural network on data from two randomly generated linear mappings; * from a 8-dimensional input space to a 1-dimensional output space. Set weights; * corresponding to the second mapping to zero so that the neural network is forced to; * learn the first mapping.; * Returns the error of the response of the network to the input containing; * only ones to the 1x8 matrix used to generate the training data.; */,MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:3,Testability,Test,Test,3,"// Test data from only the first mapping;",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:15,Testability,test,testMinimization,15,/** Similar to testMinimization() as the function above except that; * it uses momentum for the training */,MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimizationCpu.cxx:477,Performance,multi-thread,multi-threaded,477,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Train the multi-threaded CPU implementation of DNNs on a random //; // linear mapping. In the linear case the minimization problem is //; // convex and the gradient descent training should converge to the //; // global minimum. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimizationCuda.cxx:483,Testability,test,tests,483,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Use the generic tests defined in TestMinimization.h to test the //; // training of Neural Networks for CUDA architectures. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimizationCuda.cxx:500,Testability,Test,TestMinimization,500,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Use the generic tests defined in TestMinimization.h to test the //; // training of Neural Networks for CUDA architectures. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimizationCuda.cxx:522,Testability,test,test,522,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Use the generic tests defined in TestMinimization.h to test the //; // training of Neural Networks for CUDA architectures. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestMinimizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Various Optimizers for training DeepNet *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Various Optimizers for training DeepNet *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:298,Performance,Optimiz,Optimizers,298,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Various Optimizers for training DeepNet *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:282,Testability,Test,Testing,282,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Various Optimizers for training DeepNet *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:159,Availability,error,error,159,/** Train a linear neural network on a randomly generated linear mapping; * from an 32-dimensional input space to a 1-dimensional output space.; * Returns the error of the response of the network to the input containing; * only ones to the 1x32 matrix used to generate the training data.; */,MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:24,Testability,test,test,24,"// Initialize train and test input; // XTrain = (1 x nSamples x nFeatures); // XTest = (1 x nSamples x nFeatures)",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:24,Testability,test,test,24,"// Initialize train and test output; // YTrain = (nSamples x nOutput); // YTest = (nSamples x nOutput)",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:24,Testability,test,test,24,"// Initialize train and test weights; // WTrain = (nSamples x 1); // WTest = (nSamples x 1)",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:18,Performance,optimiz,optimizer,18,"// Initialize the optimizer",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:18,Modifiability,variab,variables,18,"// Initialize the variables related to training procedure",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:3,Testability,test,test,3,"// test the net; // Logic : Y = X * K; // Let X = I, Then Y = I * K => Y = K; // I = (1 x batchSize x nFeatures)",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:20,Testability,Log,Logic,20,"// test the net; // Logic : Y = X * K; // Let X = I, Then Y = I * K => Y = K; // I = (1 x batchSize x nFeatures)",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:45,Availability,Error,Error,45,"// do a forward pass to compute initial Mean Error",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:19,Availability,error,error,19,"// calculating the error",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:16,Availability,error,error,16,"// compute test error",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:11,Testability,test,test,11,"// compute test error",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:73,Testability,test,test,73,"//Architecture_t::PrintTensor(inputTensor, std::string(TString::Format("" test batch %d"",i++).Data()));",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:26,Availability,error,error,26,"// found the minimum test error",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:21,Testability,test,test,21,"// found the minimum test error",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:20,Availability,error,error,20,"// compute training error",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:21,Performance,throughput,throughput,21,"// compute numerical throughput",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:37,Availability,error,errors,37,"// time to compute training and test errors",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:32,Testability,test,test,32,"// time to compute training and test errors",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCpu.cxx:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCpu.cxx:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCpu.cxx:298,Performance,optimiz,optimizers,298,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCpu.cxx:282,Testability,Test,Testing,282,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCuda.cxx:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCuda.cxx:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCuda.cxx:298,Performance,optimiz,optimizers,298,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCuda.cxx:282,Testability,Test,Testing,282,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCudnn.cxx:167,Deployability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCudnn.cxx:167,Integrability,integrat,integrated,167,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCudnn.cxx:298,Performance,optimiz,optimizers,298,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCudnn.cxx:282,Testability,Test,Testing,282,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestOptimizationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx:180,Deployability,integrat,integrated,180,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Siddhartha Rao Kamalakara; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Regression *; * *; * Authors (alphabetical): *; * Siddhartha Rao Kamalakara <srk97c@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestRegressionMethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx:180,Integrability,integrat,integrated,180,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Siddhartha Rao Kamalakara; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Regression *; * *; * Authors (alphabetical): *; * Siddhartha Rao Kamalakara <srk97c@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestRegressionMethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx:295,Testability,Test,Testing,295,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Siddhartha Rao Kamalakara; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Regression *; * *; * Authors (alphabetical): *; * Siddhartha Rao Kamalakara <srk97c@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestRegressionMethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx:23,Deployability,pipeline,pipeline,23,"/** Testing the entire pipeline of the Method DL, when only a Multilayer Percepton; * is constructed. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestRegressionMethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx:4,Testability,Test,Testing,4,"/** Testing the entire pipeline of the Method DL, when only a Multilayer Percepton; * is constructed. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestRegressionMethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx:78,Performance,CACHE,CACHEREAD,78,"//TFile *input(0);; //input = TFile::Open(""~/Documents/gsoc/root/tree.root"", ""CACHEREAD"");",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestRegressionMethodDL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx:494,Performance,load,loader,494,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////; // Test the reference data loader implementation. //; ////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx:470,Testability,Test,Test,470,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////; // Test the reference data loader implementation. //; ////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx:2,Availability,error,error,2,"/*error = testIdentity<TReference<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx:90,Availability,error,error,90,"/*error = testIdentity<TReference<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx:103,Availability,error,error,103,"/*error = testIdentity<TReference<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx:148,Availability,error,error,148,"/*error = testIdentity<TReference<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx:10,Testability,test,testIdentity,10,"/*error = testIdentity<TReference<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:476,Testability,test,test,476,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////; // Generic test for DataLoader implementations. //; //////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:23,Performance,load,loader,23,"/** Test that the data loader loads all data in the data set by summing; * up all elements batch wise and comparing to the result obtained by summing; * over the complete dataset.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:30,Performance,load,loads,30,"/** Test that the data loader loads all data in the data set by summing; * up all elements batch wise and comparing to the result obtained by summing; * over the complete dataset.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:4,Testability,Test,Test,4,"/** Test that the data loader loads all data in the data set by summing; * up all elements batch wise and comparing to the result obtained by summing; * over the complete dataset.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:149,Availability,error,error,149,"/** Test the data loader by loading identical input and output data, running it; * through an identity neural network and computing the mean squared error,; * should obviously be zero. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:18,Performance,load,loader,18,"/** Test the data loader by loading identical input and output data, running it; * through an identity neural network and computing the mean squared error,; * should obviously be zero. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:28,Performance,load,loading,28,"/** Test the data loader by loading identical input and output data, running it; * through an identity neural network and computing the mean squared error,; * should obviously be zero. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:4,Testability,Test,Test,4,"/** Test the data loader by loading identical input and output data, running it; * through an identity neural network and computing the mean squared error,; * should obviously be zero. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:707,Availability,error,error,707,"/*using Scalar_t = typename Architecture_t::Scalar_t;; using Net_t = TNet<Architecture_t>;; using TensorDataLoader_t = TTensorDataLoader<MatrixInput_t, Architecture_t>;. TMatrixT<Double_t> X(2000, 100), W(2000, 1);; randomMatrix(X);; randomMatrix(W);; MatrixInput_t input(X, X, W);; DataLoader_t loader(input, 2000, 20, 100, 100);. Net_t net(20, 100, ELossFunction::kMeanSquaredError);; net.AddLayer(100, EActivationFunction::kIdentity);; net.AddLayer(100, EActivationFunction::kIdentity);; net.Initialize(EInitialization::kIdentity);. Scalar_t maximumError = 0.0;; for (auto b : loader) {; auto inputMatrix = b.GetInput();; auto outputMatrix = b.GetOutput();; auto weightMatrix = b.GetWeights();; Scalar_t error = net.Loss(inputMatrix, outputMatrix, weightMatrix);; maximumError = std::max(error, maximumError);; }. return maximumError;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:791,Availability,error,error,791,"/*using Scalar_t = typename Architecture_t::Scalar_t;; using Net_t = TNet<Architecture_t>;; using TensorDataLoader_t = TTensorDataLoader<MatrixInput_t, Architecture_t>;. TMatrixT<Double_t> X(2000, 100), W(2000, 1);; randomMatrix(X);; randomMatrix(W);; MatrixInput_t input(X, X, W);; DataLoader_t loader(input, 2000, 20, 100, 100);. Net_t net(20, 100, ELossFunction::kMeanSquaredError);; net.AddLayer(100, EActivationFunction::kIdentity);; net.AddLayer(100, EActivationFunction::kIdentity);; net.Initialize(EInitialization::kIdentity);. Scalar_t maximumError = 0.0;; for (auto b : loader) {; auto inputMatrix = b.GetInput();; auto outputMatrix = b.GetOutput();; auto weightMatrix = b.GetWeights();; Scalar_t error = net.Loss(inputMatrix, outputMatrix, weightMatrix);; maximumError = std::max(error, maximumError);; }. return maximumError;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:296,Performance,load,loader,296,"/*using Scalar_t = typename Architecture_t::Scalar_t;; using Net_t = TNet<Architecture_t>;; using TensorDataLoader_t = TTensorDataLoader<MatrixInput_t, Architecture_t>;. TMatrixT<Double_t> X(2000, 100), W(2000, 1);; randomMatrix(X);; randomMatrix(W);; MatrixInput_t input(X, X, W);; DataLoader_t loader(input, 2000, 20, 100, 100);. Net_t net(20, 100, ELossFunction::kMeanSquaredError);; net.AddLayer(100, EActivationFunction::kIdentity);; net.AddLayer(100, EActivationFunction::kIdentity);; net.Initialize(EInitialization::kIdentity);. Scalar_t maximumError = 0.0;; for (auto b : loader) {; auto inputMatrix = b.GetInput();; auto outputMatrix = b.GetOutput();; auto weightMatrix = b.GetWeights();; Scalar_t error = net.Loss(inputMatrix, outputMatrix, weightMatrix);; maximumError = std::max(error, maximumError);; }. return maximumError;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h:580,Performance,load,loader,580,"/*using Scalar_t = typename Architecture_t::Scalar_t;; using Net_t = TNet<Architecture_t>;; using TensorDataLoader_t = TTensorDataLoader<MatrixInput_t, Architecture_t>;. TMatrixT<Double_t> X(2000, 100), W(2000, 1);; randomMatrix(X);; randomMatrix(W);; MatrixInput_t input(X, X, W);; DataLoader_t loader(input, 2000, 20, 100, 100);. Net_t net(20, 100, ELossFunction::kMeanSquaredError);; net.AddLayer(100, EActivationFunction::kIdentity);; net.AddLayer(100, EActivationFunction::kIdentity);; net.Initialize(EInitialization::kIdentity);. Scalar_t maximumError = 0.0;; for (auto b : loader) {; auto inputMatrix = b.GetInput();; auto outputMatrix = b.GetOutput();; auto weightMatrix = b.GetWeights();; Scalar_t error = net.Loss(inputMatrix, outputMatrix, weightMatrix);; maximumError = std::max(error, maximumError);; }. return maximumError;*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx:488,Performance,multi-thread,multi-threaded,488,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // Test the multi-threaded CPU data loader implementation. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx:512,Performance,load,loader,512,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // Test the multi-threaded CPU data loader implementation. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx:479,Testability,Test,Test,479,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // Test the multi-threaded CPU data loader implementation. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx:2,Availability,error,error,2,"/*error = testIdentity<TCpu<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx:84,Availability,error,error,84,"/*error = testIdentity<TCpu<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx:97,Availability,error,error,97,"/*error = testIdentity<TCpu<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx:142,Availability,error,error,142,"/*error = testIdentity<TCpu<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx:10,Testability,test,testIdentity,10,"/*error = testIdentity<TCpu<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx:503,Performance,load,loader,503,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 08/08/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////; // Test the generic data loader for the CUDA implementation. //; ///////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx:481,Testability,Test,Test,481,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 08/08/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////; // Test the generic data loader for the CUDA implementation. //; ///////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx:2,Availability,error,error,2,"/*error = testIdentity<TCuda<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx:85,Availability,error,error,85,"/*error = testIdentity<TCuda<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx:98,Availability,error,error,98,"/*error = testIdentity<TCuda<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx:143,Availability,error,error,143,"/*error = testIdentity<TCuda<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx:10,Testability,test,testIdentity,10,"/*error = testIdentity<TCuda<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h:120,Modifiability,layers,layers,120,"/** Construct a convolutional neural network with one convolutional layer,; * one pooling layer and two fully connected layers. The dimensions are; * predetermined. The activation functions are chosen randomly. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h:127,Modifiability,layers,layers,127,"/** Construct a linear convolutional neural network with one convolutional layer,; * one pooling layer and two fully connected layers. The dimensions are; * predetermined. The activation functions are all linear. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h:61,Modifiability,layers,layers,61,"/** Construct a random linear neural network with up to five layers.*/; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h:25,Availability,error,error,25,"/** Compute the relative error of x and y. If their difference is too small,; * compute the absolute error instead. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h:101,Availability,error,error,101,"/** Compute the relative error of x and y. If their difference is too small,; * compute the absolute error instead. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h:47,Availability,error,error,47,"/*! Compute the maximum, element-wise relative error of the matrices; * X and Y normalized by the element of Y. Protected against division; * by zero. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h:46,Availability,error,error,46,"/** Compute the average element-wise absolute error of the matrices; * X and Y.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h:15,Availability,error,error,15,"/*! Color code error. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/Utility.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:908,Testability,Test,Testing,908,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:16,Testability,test,test,16,"// to debug the test and print matrices",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:3,Testability,test,test,3,"// test first in a simple network with linear activations",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:19,Usability,simpl,simple,19,"// test first in a simple network with linear activations",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:3,Testability,test,test,3,"// test in a more complex network",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:3,Testability,test,testConvBackwardPass,3,"// testConvBackwardPass<TReference<double>>(batchSizeTest1, imgDepthTest1, imgHeightTest1, imgWidthTest1, batchDepth,; // batchHeight, batchWidth);",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx:908,Testability,Test,Testing,908,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx:16,Testability,test,test,16,"// to debug the test and print matrices",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx:3,Testability,test,test,3,"// test first in a simple network with linear activations",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx:19,Usability,simpl,simple,19,"// test first in a simple network with linear activations",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx:3,Testability,test,test,3,"// test in a more complex network",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx:3,Testability,test,testConvBackwardPass,3,"// testConvBackwardPass<TReference<double>>(batchSizeTest1, imgDepthTest1, imgHeightTest1, imgWidthTest1, batchDepth,; // batchHeight, batchWidth);",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx:908,Testability,Test,Testing,908,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx:16,Testability,test,test,16,"// to debug the test and print matrices",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx:3,Testability,test,test,3,"// test first in a simple network with linear activations",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx:19,Usability,simpl,simple,19,"// test first in a simple network with linear activations",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx:3,Testability,test,test,3,"// test in a more complex network",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx:3,Testability,test,testConvBackwardPass,3,"// testConvBackwardPass<TReference<double>>(batchSizeTest1, imgDepthTest1, imgHeightTest1, imgWidthTest1, batchDepth,; // batchHeight, batchWidth);",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagationCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h:294,Availability,Down,Downsample,294,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h:171,Deployability,integrat,integrated,171,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h:171,Integrability,integrat,integrated,171,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h:286,Testability,Test,Testing,286,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h:918,Testability,Test,Testing,918,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h:78,Testability,Test,Test,78,"/*************************************************************************; * Test 1: Forward Propagation; * batch size = 1; * image depth = 2, image height = 4, image width = 4,; * num frames = 3, filter height = 2, filter width = 2,; * stride rows = 2, stride cols = 2,; * zero-padding height = 0, zero-padding width = 0,; *************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h:78,Testability,Test,Test,78,"/*************************************************************************; * Test 1: Backward Propagation; * batch size = 1; * image depth = 2, image height = 5, image width = 5,; * num frames = 2, filter height = 3, filter width = 3,; * stride rows = 1, stride cols = 1,; * zero-padding height = 0, zero-padding width = 0,; *************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx:294,Availability,Down,Downsample,294,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx:171,Deployability,integrat,integrated,171,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx:171,Integrability,integrat,integrated,171,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx:286,Testability,Test,Testing,286,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx:918,Testability,Test,Testing,918,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx:294,Availability,Down,Downsample,294,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx:171,Deployability,integrat,integrated,171,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx:171,Integrability,integrat,integrated,171,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx:286,Testability,Test,Testing,286,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx:918,Testability,Test,Testing,918,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx:294,Availability,Down,Downsample,294,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx:171,Deployability,integrat,integrated,171,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx:171,Integrability,integrat,integrated,171,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx:286,Testability,Test,Testing,286,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx:918,Testability,Test,Testing,918,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Features *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Features *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Features *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:4,Testability,Test,Testing,4,"/** Testing the image to column function. Check wheether the matrix A after; * the transformation will be equal to the matrix B. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:4,Testability,Test,Testing,4,"/** Testing the rotation of the weights function. Check whether the rotated; * weight matrix A, will be equal to the matrix B. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:4,Availability,Down,Downsample,4,"/** Downsample the matrix A and check whether the downsampled version; * is equal to B, and if the winning indices are equal to the matrix ind. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:50,Availability,down,downsampled,50,"/** Downsample the matrix A and check whether the downsampled version; * is equal to B, and if the winning indices are equal to the matrix ind. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:61,Testability,test,tests,61,"// Using a magic EPSILON value (makes sense for the existing tests).",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:25,Performance,perform,perform,25,"/*! Generate a conv net, perform forward pass */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:33,Safety,predict,predictios,33,"/*! Generate a conv net, get the predictios */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:25,Performance,perform,perform,25,"/*! Generate a conv net, perform p */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:25,Testability,test,test,25,"/*! Generate a conv net, test the backward pass, always with stride 1. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:6,Testability,test,testType,6,"//if (testType == kRndmActNet) return true;",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:150,Testability,assert,assert,150,"// size_t n1 = (gwm.GetNDim() == 2 ) ? gwm.GetNrows() : gwm.GetCSize();; // size_t n1b = (gwb.GetNDim() == 2 ) ? gwb.GetNrows() : gwb.GetCSize();; // assert(n1 == n1b);; // size_t n2 = (gwm.GetNDim() == 2 ) ? gwm.GetNcols() : gwm.GetHSize()*gwm.GetWSize();",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:2,Testability,assert,assert,2,"//assert(n1b <= n1);; //Matrix_t & wm = layer.GetWeightsAt(k);; // make matrices in case they are not",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:24,Availability,error,error,24,"// Compute the relative error if dy != 0.",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Loss *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Loss Function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Loss *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Loss Function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Loss *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Loss Function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx:897,Testability,Test,Testing,897,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Loss *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Loss Function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Loss for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Loss Function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Loss for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Loss Function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Loss for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Loss Function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx:905,Testability,Test,Testing,905,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Loss for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Loss Function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx:304,Safety,Predict,Prediction,304,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx:924,Safety,Predict,Prediction,924,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx:903,Testability,Test,Testing,903,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx:304,Safety,Predict,Prediction,304,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx:932,Safety,Predict,Prediction,932,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx:911,Testability,Test,Testing,911,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPass.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPass.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPass.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPass.cxx:905,Testability,Test,Testing,905,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPass.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPass.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx:917,Testability,Test,Testing,917,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx:917,Testability,Test,Testing,917,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx:917,Testability,Test,Testing,917,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCudnn.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.cxx:897,Testability,Test,Testing,897,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method *; * *; * Authors (alphabetical): *; * Vladimir Ilievsky <ilievski.vladimir@live.com> - CERN, Switzerland *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method *; * *; * Authors (alphabetical): *; * Vladimir Ilievsky <ilievski.vladimir@live.com> - CERN, Switzerland *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:225,Testability,Test,Testing,225,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method *; * *; * Authors (alphabetical): *; * Vladimir Ilievsky <ilievski.vladimir@live.com> - CERN, Switzerland *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:903,Testability,Test,Testing,903,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method *; * *; * Authors (alphabetical): *; * Vladimir Ilievsky <ilievski.vladimir@live.com> - CERN, Switzerland *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:78,Testability,Test,Test,78,"/*************************************************************************; * Test 1:; * depth = 1, image height = 5, image width = 5,; * filter depth = 1, filter height = 2, filter width = 2,; * stride rows = 1, stride cols = 1,; * zero-padding height = 1, zero-padding width = 1,; *************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:78,Testability,Test,Test,78,"/*************************************************************************; * Test 2:; * depth = 2, image height = 5, image width = 5,; * filter depth = 2, filter height = 2, filter width = 3,; * stride rows = 1, stride cols = 1,; * zero-padding height = 1, zero-padding width = 1,; *************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:78,Testability,Test,Test,78,"/*************************************************************************; * Test 3:; * depth = 3, image height = 2, image width = 3,; * filter depth = 3, filter height = 3, filter width = 2,; * stride rows = 3, stride cols = 1,; * zero-padding height = 2, zero-padding width = 1,; *************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2Col.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method on a CPU architecture *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method on a CPU architecture *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method on a CPU architecture *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx:919,Testability,Test,Testing,919,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method on a CPU architecture *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx:110,Deployability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method on the GPU *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic Im2Col test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx:110,Integrability,integrat,integrated,110,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method on the GPU *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic Im2Col test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx:225,Testability,Test,Testing,225,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method on the GPU *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic Im2Col test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx:887,Testability,test,test,887,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method on the GPU *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic Im2Col test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Conv Net for the Reference backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Conv Net for the Reference backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Conv Net for the Reference backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Conv Net *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Conv Net *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Conv Net *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h:23,Deployability,pipeline,pipeline,23,"/** Testing the entire pipeline of the Method DL, when only a Convolutional Net; * is constructed. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h:4,Testability,Test,Testing,4,"/** Testing the entire pipeline of the Method DL, when only a Convolutional Net; * is constructed. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h:3,Performance,Load,Load,3,"// Load the input data",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h:35,Testability,test,testing,35,"// generate the files; // 1000 for testing 1000 for training",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.cxx:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer for the Reference backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMinimization.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.cxx:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer for the Reference backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMinimization.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.cxx:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer for the Reference backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMinimization.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.cxx:300,Usability,Learn,Learning,300,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer for the Reference backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMinimization.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.cxx
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h:172,Deployability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h:172,Integrability,integrat,integrated,172,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h:287,Testability,Test,Testing,287,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h:300,Usability,Learn,Learning,300,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,tmva/tmva/test/DNN/CNN/TestMinimization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h
