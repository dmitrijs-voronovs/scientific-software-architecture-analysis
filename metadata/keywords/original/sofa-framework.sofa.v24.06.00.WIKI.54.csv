id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:3601,Modifiability,Inherit,Inherited,3601,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:3639,Modifiability,inherit,inherited,3639,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:3846,Modifiability,inherit,inherited,3846,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ _class_info. const sofa::core::objectmodel::ClassInfo& sofa::simulation::graph::GetUpObjectsVisitor::_class_info. protected . ◆ _container. DAGNode::GetObjectsCallBack& sofa::simulation::graph::GetUpObjectsVisitor::_container. protected . ◆ _searchNode. DAGNode* sofa::simulation::graph::GetUpObjectsVisitor::_searchNod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:3783,Security,access,access,3783,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:2069,Testability,test,testTags,2069,"ation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html:302,Modifiability,inherit,inherited,302,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *node, core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobianvirtual; sofa::simulation::BaseMechanicalVisitor::bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html:10384,Testability,test,testTags,10384,"ulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobianprotected; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobianinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:370,Modifiability,Inherit,Inheritance,370,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian Class Reference . #include <MechanicalAccumulateJacobian.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian:. [legend]; Detailed Description; This class define a visitor which will go through the scene graph in reverse order and call the method applyJT of each mechanical mapping (See alsosofa::core::BaseMapping) . Protected Attributes; core::MultiMatrixDerivId res;  ; const sofa::core::ConstraintParams * cparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateJacobian (const core::ConstraintParams *_cparams, core::MultiMatrixDerivId _res);  ; void bwdMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:794,Modifiability,inherit,inherited,794,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian Class Reference . #include <MechanicalAccumulateJacobian.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian:. [legend]; Detailed Description; This class define a visitor which will go through the scene graph in reverse order and call the method applyJT of each mechanical mapping (See alsosofa::core::BaseMapping) . Protected Attributes; core::MultiMatrixDerivId res;  ; const sofa::core::ConstraintParams * cparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateJacobian (const core::ConstraintParams *_cparams, core::MultiMatrixDerivId _res);  ; void bwdMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:1018,Modifiability,inherit,inherited,1018,"or::MechanicalAccumulateJacobian Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian Class Reference . #include <MechanicalAccumulateJacobian.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian:. [legend]; Detailed Description; This class define a visitor which will go through the scene graph in reverse order and call the method applyJT of each mechanical mapping (See alsosofa::core::BaseMapping) . Protected Attributes; core::MultiMatrixDerivId res;  ; const sofa::core::ConstraintParams * cparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateJacobian (const core::ConstraintParams *_cparams, core::MultiMatrixDerivId _res);  ; void bwdMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const overri",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:1623,Modifiability,inherit,inherited,1623,"itor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateJacobian (const core::ConstraintParams *_cparams, core::MultiMatrixDerivId _res);  ; void bwdMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Constrai",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:8459,Modifiability,inherit,inherited,8459,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:10234,Modifiability,Inherit,Inherited,10234,"ject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:10272,Modifiability,inherit,inherited,10272,"ject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:10479,Modifiability,inherit,inherited,10479,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian::cparams. protected . ◆ res. core::MultiMatrixDerivId sofa::simulation::mechanical",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:10730,Modifiability,inherit,inherited,10730,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian::cparams. protected . ◆ res. core::MultiMatrixDerivId sofa::simulation::mechanical",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:10416,Security,access,access,10416,"odel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:8873,Testability,test,testTags,8873," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html:308,Modifiability,inherit,inherited,308,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDerivvirtual; sofa::simulation::BaseMechanicalVisitor::bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html:10709,Testability,test,testTags,10709,"override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDerivprotected; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; reverseOrdersofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDerivprotected; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDerivinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:467,Modifiability,Inherit,Inheritance,467,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv Class Reference . #include <MechanicalAccumulateMatrixDeriv.h>; Accumulate Jacobian matrices through the mappings up to the independent DOFs. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv:. [legend]; Detailed Description; Accumulate Jacobian matrices through the mappings up to the independent DOFs. . Protected Attributes; sofa::core::MultiMatrixDerivId res;  ; const sofa::core::ConstraintParams * cparams;  ; bool reverseOrder;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateMatrixDeriv (const sofa::core::ConstraintParams *_cparams, sofa::core::MultiMatrixDerivId _res, bool _reverseOrder=false);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; bool childOrderReversed (simulation::Node *) override;  Return true to reverse the order of traversal of child nodes. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Funct",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:828,Modifiability,inherit,inherited,828,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv Class Reference . #include <MechanicalAccumulateMatrixDeriv.h>; Accumulate Jacobian matrices through the mappings up to the independent DOFs. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv:. [legend]; Detailed Description; Accumulate Jacobian matrices through the mappings up to the independent DOFs. . Protected Attributes; sofa::core::MultiMatrixDerivId res;  ; const sofa::core::ConstraintParams * cparams;  ; bool reverseOrder;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateMatrixDeriv (const sofa::core::ConstraintParams *_cparams, sofa::core::MultiMatrixDerivId _res, bool _reverseOrder=false);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; bool childOrderReversed (simulation::Node *) override;  Return true to reverse the order of traversal of child nodes. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Funct",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:1052,Modifiability,inherit,inherited,1052,"v Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv Class Reference . #include <MechanicalAccumulateMatrixDeriv.h>; Accumulate Jacobian matrices through the mappings up to the independent DOFs. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv:. [legend]; Detailed Description; Accumulate Jacobian matrices through the mappings up to the independent DOFs. . Protected Attributes; sofa::core::MultiMatrixDerivId res;  ; const sofa::core::ConstraintParams * cparams;  ; bool reverseOrder;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateMatrixDeriv (const sofa::core::ConstraintParams *_cparams, sofa::core::MultiMatrixDerivId _res, bool _reverseOrder=false);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; bool childOrderReversed (simulation::Node *) override;  Return true to reverse the order of traversal of child nodes. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVis",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:2006,Modifiability,inherit,inherited,2006,"Id _res, bool _reverseOrder=false);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; bool childOrderReversed (simulation::Node *) override;  Return true to reverse the order of traversal of child nodes. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual Result fwdMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:8842,Modifiability,inherit,inherited,8842,"VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:10488,Modifiability,Inherit,Inherited,10488,"ject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:10526,Modifiability,inherit,inherited,10526,"ject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:10733,Modifiability,inherit,inherited,10733,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv::cparams. protected . ◆ res. sofa::core::MultiMatrixDerivId sofa::simulation::m",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:10984,Modifiability,inherit,inherited,10984,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv::cparams. protected . ◆ res. sofa::core::MultiMatrixDerivId sofa::simulation::m",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:10670,Security,access,access,10670,"odel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:9127,Testability,test,testTags,9127,"VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html:296,Modifiability,inherit,inherited,296,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor, including all inherited members. asofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor; addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html:10517,Testability,test,testTags,10517,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:358,Modifiability,Inherit,Inheritance,358,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference . #include <MechanicalAccFromFVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor:. [legend]; Detailed Description; Compute accelerations generated by given forces . Public Attributes; sofa::core::MultiVecDerivId a;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAccFromFVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId a);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryNam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:601,Modifiability,inherit,inherited,601,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference . #include <MechanicalAccFromFVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor:. [legend]; Detailed Description; Compute accelerations generated by given forces . Public Attributes; sofa::core::MultiVecDerivId a;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAccFromFVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId a);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryNam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:1447,Modifiability,inherit,inherited,1447,"r (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId a);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:1595,Modifiability,inherit,inherited,1595,"r (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId a);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:8351,Modifiability,inherit,inherited,8351,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10084,Modifiability,Inherit,Inherited,10084,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10125,Modifiability,inherit,inherited,10125,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10248,Modifiability,inherit,inherited,10248,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10472,Modifiability,inherit,inherited,10472,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor::a. Constructor details. ◆ MechanicalAccFromFV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10584,Modifiability,inherit,inherited,10584,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor::a. Constructor details. ◆ MechanicalAccFromFV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10835,Modifiability,inherit,inherited,10835,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor::a. Constructor details. ◆ MechanicalAccFromFV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:745,Security,access,access,745,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference . #include <MechanicalAccFromFVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor:. [legend]; Detailed Description; Compute accelerations generated by given forces . Public Attributes; sofa::core::MultiVecDerivId a;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAccFromFVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId a);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryNam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:8723,Testability,test,testTags,8723,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html:296,Modifiability,inherit,inherited,296,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor, including all inherited members. accumulatesofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor; addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitorvirtual; sofa::simulation::MechanicalVisitor::bwdMechanicalMapping(VisitorContext *ctx, so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html:10835,Testability,test,testTags,10835,"wn(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:569,Deployability,integrat,integration,569,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:569,Integrability,integrat,integration,569,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:358,Modifiability,Inherit,Inheritance,358,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:917,Modifiability,inherit,inherited,917,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:2324,Modifiability,inherit,inherited,2324,"ForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:2472,Modifiability,inherit,inherited,2472,"ForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:8699,Modifiability,inherit,inherited,8699,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:10432,Modifiability,Inherit,Inherited,10432,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:10473,Modifiability,inherit,inherited,10473,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:10596,Modifiability,inherit,inherited,10596,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:10820,Modifiability,inherit,inherited,10820,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor::accumulate. Accumulate everything back to the DOFs through ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:10932,Modifiability,inherit,inherited,10932,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor::accumulate. Accumulate everything back to the DOFs through ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:11183,Modifiability,inherit,inherited,11183,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor::accumulate. Accumulate everything back to the DOFs through ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:1061,Security,access,access,1061,"MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState wh",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:9071,Testability,test,testTags,9071,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html:10528,Testability,test,testTags,10528,"ectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *node, core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:379,Modifiability,Inherit,Inheritance,379,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference . #include <MechanicalAddMBK_ToMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor:. [legend]; Detailed Description; Accumulate the entries of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBK_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; const char * getClassName () const override;  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; bool stopAtMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Nod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:693,Modifiability,inherit,inherited,693,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference . #include <MechanicalAddMBK_ToMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor:. [legend]; Detailed Description; Accumulate the entries of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBK_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; const char * getClassName () const override;  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; bool stopAtMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Nod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:1514,Modifiability,inherit,inherited,1514,"sSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBK_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; const char * getClassName () const override;  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; bool stopAtMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:1662,Modifiability,inherit,inherited,1662,"sSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBK_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; const char * getClassName () const override;  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; bool stopAtMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:8304,Modifiability,inherit,inherited,8304,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10178,Modifiability,Inherit,Inherited,10178,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10219,Modifiability,inherit,inherited,10219,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10342,Modifiability,inherit,inherited,10342,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10566,Modifiability,inherit,inherited,10566,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor::matrix. Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10678,Modifiability,inherit,inherited,10678,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor::matrix. Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10929,Modifiability,inherit,inherited,10929,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor::matrix. Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:837,Security,access,access,837,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference . #include <MechanicalAddMBK_ToMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor:. [legend]; Detailed Description; Accumulate the entries of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBK_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; const char * getClassName () const override;  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; bool stopAtMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Nod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:8718,Testability,test,testTags,8718," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html:292,Modifiability,inherit,inherited,292,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanical",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html:10819,Testability,test,testTags,10819,"Down(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:559,Deployability,integrat,integration,559,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference . #include <MechanicalAddMDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor:. [legend]; Detailed Description; Accumulate the product of the mass matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. Note that if a dx vector is given, it is used and propagated by the mappings, Otherwise the current value is used. . Public Attributes; sofa::core::MultiVecDerivId res;  ; sofa::core::MultiVecDerivId dx;  ; SReal factor;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, sofa::core::MultiVecDerivId dx, SReal factor);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify wheth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:559,Integrability,integrat,integration,559,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference . #include <MechanicalAddMDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor:. [legend]; Detailed Description; Accumulate the product of the mass matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. Note that if a dx vector is given, it is used and propagated by the mappings, Otherwise the current value is used. . Public Attributes; sofa::core::MultiVecDerivId res;  ; sofa::core::MultiVecDerivId dx;  ; SReal factor;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, sofa::core::MultiVecDerivId dx, SReal factor);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify wheth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:352,Modifiability,Inherit,Inheritance,352,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference . #include <MechanicalAddMDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor:. [legend]; Detailed Description; Accumulate the product of the mass matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. Note that if a dx vector is given, it is used and propagated by the mappings, Otherwise the current value is used. . Public Attributes; sofa::core::MultiVecDerivId res;  ; sofa::core::MultiVecDerivId dx;  ; SReal factor;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, sofa::core::MultiVecDerivId dx, SReal factor);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify wheth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:856,Modifiability,inherit,inherited,856,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference . #include <MechanicalAddMDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor:. [legend]; Detailed Description; Accumulate the product of the mass matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. Note that if a dx vector is given, it is used and propagated by the mappings, Otherwise the current value is used. . Public Attributes; sofa::core::MultiVecDerivId res;  ; sofa::core::MultiVecDerivId dx;  ; SReal factor;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, sofa::core::MultiVecDerivId dx, SReal factor);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify wheth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:2074,Modifiability,inherit,inherited,2074,"avior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:2222,Modifiability,inherit,inherited,2222,"avior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:8654,Modifiability,inherit,inherited,8654,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:10387,Modifiability,Inherit,Inherited,10387,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:10428,Modifiability,inherit,inherited,10428,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:10551,Modifiability,inherit,inherited,10551,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:10775,Modifiability,inherit,inherited,10775,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dx. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor::dx. ◆ factor. SReal sofa::simulation::mechanic",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:10887,Modifiability,inherit,inherited,10887,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dx. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor::dx. ◆ factor. SReal sofa::simulation::mechanic",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:11138,Modifiability,inherit,inherited,11138,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dx. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor::dx. ◆ factor. SReal sofa::simulation::mechanic",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:1000,Security,access,access,1000,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference . #include <MechanicalAddMDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor:. [legend]; Detailed Description; Accumulate the product of the mass matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. Note that if a dx vector is given, it is used and propagated by the mappings, Otherwise the current value is used. . Public Attributes; sofa::core::MultiVecDerivId res;  ; sofa::core::MultiVecDerivId dx;  ; SReal factor;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, sofa::core::MultiVecDerivId dx, SReal factor);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify wheth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:9026,Testability,test,testTags,9026,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor-members.html:316,Modifiability,inherit,inherited,316,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor-members.html:10492,Testability,test,testTags,10492,"ion::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:388,Modifiability,Inherit,Inheritance,388,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor Class Reference . #include <MechanicalAddSeparateGravityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor:. [legend]; Detailed Description; Add dt*mass*Gravity to the velocity This is called if the mass wants to be added separately to the mm from the other forces . Public Attributes; sofa::core::MultiVecDerivId res;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddSeparateGravityVisitor (const sofa::core::MechanicalParams *m_mparams, sofa::core::MultiVecDerivId res);  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:719,Modifiability,inherit,inherited,719,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor Class Reference . #include <MechanicalAddSeparateGravityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor:. [legend]; Detailed Description; Add dt*mass*Gravity to the velocity This is called if the mass wants to be added separately to the mm from the other forces . Public Attributes; sofa::core::MultiVecDerivId res;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddSeparateGravityVisitor (const sofa::core::MechanicalParams *m_mparams, sofa::core::MultiVecDerivId res);  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:1288,Modifiability,inherit,inherited,1288,"from the other forces . Public Attributes; sofa::core::MultiVecDerivId res;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddSeparateGravityVisitor (const sofa::core::MechanicalParams *m_mparams, sofa::core::MultiVecDerivId res);  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:1436,Modifiability,inherit,inherited,1436,"from the other forces . Public Attributes; sofa::core::MultiVecDerivId res;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddSeparateGravityVisitor (const sofa::core::MechanicalParams *m_mparams, sofa::core::MultiVecDerivId res);  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:8381,Modifiability,inherit,inherited,8381,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:10213,Modifiability,Inherit,Inherited,10213,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:10254,Modifiability,inherit,inherited,10254,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:10377,Modifiability,inherit,inherited,10377,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:10601,Modifiability,inherit,inherited,10601,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ res. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor::res. Constructor details. ◆ Mecha",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:10713,Modifiability,inherit,inherited,10713,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ res. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor::res. Constructor details. ◆ Mecha",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:10964,Modifiability,inherit,inherited,10964,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ res. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor::res. Constructor details. ◆ Mecha",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:863,Security,access,access,863,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor Class Reference . #include <MechanicalAddSeparateGravityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor:. [legend]; Detailed Description; Add dt*mass*Gravity to the velocity This is called if the mass wants to be added separately to the mm from the other forces . Public Attributes; sofa::core::MultiVecDerivId res;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddSeparateGravityVisitor (const sofa::core::MechanicalParams *m_mparams, sofa::core::MultiVecDerivId res);  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:8753,Testability,test,testTags,8753,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor-members.html:312,Modifiability,inherit,inherited,312,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::beha",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor-members.html:10744,Testability,test,testTags,10744,", LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitorinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; Wsofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:382,Modifiability,Inherit,Inheritance,382,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Class Reference . #include <MechanicalApplyConstraintsVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor:. [legend]; Detailed Description; Apply the constraints as filters to the given vector. This works for simple independent constraints, like maintaining a fixed point. . Public Attributes; sofa::core::MultiVecDerivId res;  ; double ** W;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalApplyConstraintsVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, double **W=nullptr);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:736,Modifiability,inherit,inherited,736,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Class Reference . #include <MechanicalApplyConstraintsVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor:. [legend]; Detailed Description; Apply the constraints as filters to the given vector. This works for simple independent constraints, like maintaining a fixed point. . Public Attributes; sofa::core::MultiVecDerivId res;  ; double ** W;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalApplyConstraintsVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, double **W=nullptr);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:1950,Modifiability,inherit,inherited,1950,"echanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:2098,Modifiability,inherit,inherited,2098,"echanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:8512,Modifiability,inherit,inherited,8512,"itorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual void bwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:10245,Modifiability,Inherit,Inherited,10245,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:10286,Modifiability,inherit,inherited,10286,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:10409,Modifiability,inherit,inherited,10409,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:10633,Modifiability,inherit,inherited,10633,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ res. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor::res. ◆ W. double** sofa::simulation",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:10745,Modifiability,inherit,inherited,10745,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ res. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor::res. ◆ W. double** sofa::simulation",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:10996,Modifiability,inherit,inherited,10996,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ res. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor::res. ◆ W. double** sofa::simulation",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:880,Security,access,access,880,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Class Reference . #include <MechanicalApplyConstraintsVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor:. [legend]; Detailed Description; Apply the constraints as filters to the given vector. This works for simple independent constraints, like maintaining a fixed point. . Public Attributes; sofa::core::MultiVecDerivId res;  ; double ** W;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalApplyConstraintsVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, double **W=nullptr);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:8884,Testability,test,testTags,8884,"ehavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:580,Usability,simpl,simple,580,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Class Reference . #include <MechanicalApplyConstraintsVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor:. [legend]; Detailed Description; Apply the constraints as filters to the given vector. This works for simple independent constraints, like maintaining a fixed point. . Public Attributes; sofa::core::MultiVecDerivId res;  ; double ** W;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalApplyConstraintsVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, double **W=nullptr);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor-members.html:348,Modifiability,inherit,inherited,348,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor-members.html:10642,Testability,test,testTags,10642,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:436,Modifiability,Inherit,Inheritance,436,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor Class Reference . #include <MechanicalApplyProjectiveConstraint_ToMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor:. [legend]; Detailed Description; Apply projective constraints of the whole scene . Public Attributes; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalApplyProjectiveConstraint_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; virtual const char * getClassName () const override;  ; virtual Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:732,Modifiability,inherit,inherited,732,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor Class Reference . #include <MechanicalApplyProjectiveConstraint_ToMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor:. [legend]; Detailed Description; Apply projective constraints of the whole scene . Public Attributes; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalApplyProjectiveConstraint_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; virtual const char * getClassName () const override;  ; virtual Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:1535,Modifiability,inherit,inherited,1535,"Member Functions;  MechanicalApplyProjectiveConstraint_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; virtual const char * getClassName () const override;  ; virtual Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:1683,Modifiability,inherit,inherited,1683,"Member Functions;  MechanicalApplyProjectiveConstraint_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; virtual const char * getClassName () const override;  ; virtual Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:8378,Modifiability,inherit,inherited,8378,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:10252,Modifiability,Inherit,Inherited,10252,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:10293,Modifiability,inherit,inherited,10293,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:10416,Modifiability,inherit,inherited,10416,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:10640,Modifiability,inherit,inherited,10640,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:10752,Modifiability,inherit,inherited,10752,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:11003,Modifiability,inherit,inherited,11003,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:876,Security,access,access,876,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor Class Reference . #include <MechanicalApplyProjectiveConstraint_ToMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor:. [legend]; Detailed Description; Apply projective constraints of the whole scene . Public Attributes; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalApplyProjectiveConstraint_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; virtual const char * getClassName () const override;  ; virtual Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:8792,Testability,test,testTags,8792," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor-members.html:312,Modifiability,inherit,inherited,312,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::beha",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor-members.html:10411,Testability,test,testTags,10411,"irtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitorinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:542,Deployability,integrat,integration,542,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference . #include <MechanicalBeginIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor:. [legend]; Detailed Description; Visitor used to prepare a time integration step. Typically, does nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalBeginIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const over",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:542,Integrability,integrat,integration,542,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference . #include <MechanicalBeginIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor:. [legend]; Detailed Description; Visitor used to prepare a time integration step. Typically, does nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalBeginIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const over",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:382,Modifiability,Inherit,Inheritance,382,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference . #include <MechanicalBeginIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor:. [legend]; Detailed Description; Visitor used to prepare a time integration step. Typically, does nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalBeginIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const over",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:638,Modifiability,inherit,inherited,638,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference . #include <MechanicalBeginIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor:. [legend]; Detailed Description; Visitor used to prepare a time integration step. Typically, does nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalBeginIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const over",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:1580,Modifiability,inherit,inherited,1580,"MechanicalBeginIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual Result fwdMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:8167,Modifiability,inherit,inherited,8167,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:9942,Modifiability,Inherit,Inherited,9942,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:9983,Modifiability,inherit,inherited,9983,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:10207,Modifiability,inherit,inherited,10207,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor::dt. Constructor details. ◆ MechanicalBeginIntegrationVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:10319,Modifiability,inherit,inherited,10319,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor::dt. Constructor details. ◆ MechanicalBeginIntegrationVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:10570,Modifiability,inherit,inherited,10570,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor::dt. Constructor details. ◆ MechanicalBeginIntegrationVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:782,Security,access,access,782,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference . #include <MechanicalBeginIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor:. [legend]; Detailed Description; Visitor used to prepare a time integration step. Typically, does nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalBeginIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const over",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:8581,Testability,test,testTags,8581," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix-members.html:308,Modifiability,inherit,inherited,308,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix-members.html:10652,Testability,test,testTags,10652,"eMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrixprotected; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrixinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:449,Modifiability,Inherit,Inheritance,449,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix Class Reference . #include <MechanicalBuildConstraintMatrix.h>; Call each BaseConstraintSet to build the Jacobian matrices. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix:. [legend]; Detailed Description; Call each BaseConstraintSet to build the Jacobian matrices. . Protected Attributes; sofa::core::MultiMatrixDerivId res;  ; unsigned int & contactId;  ; const sofa::core::ConstraintParams * cparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalBuildConstraintMatrix (const sofa::core::ConstraintParams *_cparams, sofa::core::MultiMatrixDerivId _res, unsigned int &_contactId);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; Result fwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *c) override;  Process all the BaseConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:799,Modifiability,inherit,inherited,799,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix Class Reference . #include <MechanicalBuildConstraintMatrix.h>; Call each BaseConstraintSet to build the Jacobian matrices. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix:. [legend]; Detailed Description; Call each BaseConstraintSet to build the Jacobian matrices. . Protected Attributes; sofa::core::MultiMatrixDerivId res;  ; unsigned int & contactId;  ; const sofa::core::ConstraintParams * cparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalBuildConstraintMatrix (const sofa::core::ConstraintParams *_cparams, sofa::core::MultiMatrixDerivId _res, unsigned int &_contactId);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; Result fwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *c) override;  Process all the BaseConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:1023,Modifiability,inherit,inherited,1023,"echanicalBuildConstraintMatrix Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix Class Reference . #include <MechanicalBuildConstraintMatrix.h>; Call each BaseConstraintSet to build the Jacobian matrices. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix:. [legend]; Detailed Description; Call each BaseConstraintSet to build the Jacobian matrices. . Protected Attributes; sofa::core::MultiMatrixDerivId res;  ; unsigned int & contactId;  ; const sofa::core::ConstraintParams * cparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalBuildConstraintMatrix (const sofa::core::ConstraintParams *_cparams, sofa::core::MultiMatrixDerivId _res, unsigned int &_contactId);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; Result fwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *c) override;  Process all the BaseConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeD",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:1859,Modifiability,inherit,inherited,1859,"unctions;  MechanicalBuildConstraintMatrix (const sofa::core::ConstraintParams *_cparams, sofa::core::MultiMatrixDerivId _res, unsigned int &_contactId);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; Result fwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *c) override;  Process all the BaseConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual Result fwdMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:8681,Modifiability,inherit,inherited,8681,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:10456,Modifiability,Inherit,Inherited,10456,"ject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:10494,Modifiability,inherit,inherited,10494,"ject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:10701,Modifiability,inherit,inherited,10701,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ contactId. unsigned int& sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix::contactId. protected . ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanical",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:10952,Modifiability,inherit,inherited,10952,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ contactId. unsigned int& sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix::contactId. protected . ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanical",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:10638,Security,access,access,10638,"odel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html:9095,Testability,test,testTags,9095," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_build_constraint_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor-members.html:318,Modifiability,inherit,inherited,318,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitorvirtual; sofa::simulation::MechanicalVisitor::bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor-members.html:10661,Testability,test,testTags,10661,"on::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:391,Modifiability,Inherit,Inheritance,391,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor Class Reference . #include <MechanicalComputeContactForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor:. [legend]; Detailed Description; Accumulate only the contact forces computed in applyContactForce. This action is typically called after a MechanicalResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeContactForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::Exe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:734,Modifiability,inherit,inherited,734,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor Class Reference . #include <MechanicalComputeContactForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor:. [legend]; Detailed Description; Accumulate only the contact forces computed in applyContactForce. This action is typically called after a MechanicalResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeContactForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::Exe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:1752,Modifiability,inherit,inherited,1752,"hanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:1900,Modifiability,inherit,inherited,1900,"hanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:8448,Modifiability,inherit,inherited,8448,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:10223,Modifiability,Inherit,Inherited,10223,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:10264,Modifiability,inherit,inherited,10264,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:10387,Modifiability,inherit,inherited,10387,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:10611,Modifiability,inherit,inherited,10611,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ res. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor::res. Constructor details. ◆ Mech",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:10723,Modifiability,inherit,inherited,10723,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ res. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor::res. Constructor details. ◆ Mech",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:10974,Modifiability,inherit,inherited,10974,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ res. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor::res. Constructor details. ◆ Mech",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:878,Security,access,access,878,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor Class Reference . #include <MechanicalComputeContactForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor:. [legend]; Detailed Description; Accumulate only the contact forces computed in applyContactForce. This action is typically called after a MechanicalResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeContactForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::Exe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:8862,Testability,test,testTags,8862," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor-members.html:298,Modifiability,inherit,inherited,298,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor, including all inherited members. accumulatesofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor; addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitorvirtual; sofa::simulation::MechanicalVisitor::bwdMechanicalMapping(VisitorContext *ctx",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor-members.html:11013,Testability,test,testTags,11013,"n(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:361,Modifiability,Inherit,Inheritance,361,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor Class Reference . #include <MechanicalComputeDfVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor:. [legend]; Detailed Description; Compute the variation of force corresponding to a variation of position. This action is typically called after a MechanicalPropagateDxVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeDfVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res);  ;  MechanicalComputeDfVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Pr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:793,Modifiability,inherit,inherited,793,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor Class Reference . #include <MechanicalComputeDfVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor:. [legend]; Detailed Description; Compute the variation of force corresponding to a variation of position. This action is typically called after a MechanicalPropagateDxVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeDfVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res);  ;  MechanicalComputeDfVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Pr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:2299,Modifiability,inherit,inherited,2299,"or::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:2447,Modifiability,inherit,inherited,2447,"or::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:8674,Modifiability,inherit,inherited,8674,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:10407,Modifiability,Inherit,Inherited,10407,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:10448,Modifiability,inherit,inherited,10448,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:10571,Modifiability,inherit,inherited,10571,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:10795,Modifiability,inherit,inherited,10795,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor::accumulate. Accumulate everything back to the DOFs through",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:10907,Modifiability,inherit,inherited,10907,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor::accumulate. Accumulate everything back to the DOFs through",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:11158,Modifiability,inherit,inherited,11158,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor::accumulate. Accumulate everything back to the DOFs through",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:937,Security,access,access,937,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor Class Reference . #include <MechanicalComputeDfVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor:. [legend]; Detailed Description; Compute the variation of force corresponding to a variation of position. This action is typically called after a MechanicalPropagateDxVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeDfVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res);  ;  MechanicalComputeDfVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Pr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:9046,Testability,test,testTags,9046,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor-members.html:306,Modifiability,inherit,inherited,306,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor-members.html:10596,Testability,test,testTags,10596,"ulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~MechanicalComputeEnergyVisitor() overridesofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:511,Energy Efficiency,energy,energy,511,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor Class Reference . #include <MechanicalComputeEnergyVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor:. [legend]; Detailed Description; Compute the amount of mechanical energy @author Francois Faure; . Public Member Functions;  MechanicalComputeEnergyVisitor (const sofa::core::MechanicalParams *mparams);  ;  ~MechanicalComputeEnergyVisitor () override;  ; SReal getKineticEnergy ();  ; SReal getPotentialEnergy ();  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *f) override;  Process the BaseForceField. More...;  ; const char * getClassName () const override;  ; void execute (sofa::core::objectmodel::BaseContext *c, bool precomputedTraversalOrder=false) override;  Alias for context->executeVisitor(this) More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:352,Modifiability,Inherit,Inheritance,352,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor Class Reference . #include <MechanicalComputeEnergyVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor:. [legend]; Detailed Description; Compute the amount of mechanical energy @author Francois Faure; . Public Member Functions;  MechanicalComputeEnergyVisitor (const sofa::core::MechanicalParams *mparams);  ;  ~MechanicalComputeEnergyVisitor () override;  ; SReal getKineticEnergy ();  ; SReal getPotentialEnergy ();  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *f) override;  Process the BaseForceField. More...;  ; const char * getClassName () const override;  ; void execute (sofa::core::objectmodel::BaseContext *c, bool precomputedTraversalOrder=false) override;  Alias for context->executeVisitor(this) More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:1244,Modifiability,inherit,inherited,1244,"calParams *mparams);  ;  ~MechanicalComputeEnergyVisitor () override;  ; SReal getKineticEnergy ();  ; SReal getPotentialEnergy ();  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *f) override;  Process the BaseForceField. More...;  ; const char * getClassName () const override;  ; void execute (sofa::core::objectmodel::BaseContext *c, bool precomputedTraversalOrder=false) override;  Alias for context->executeVisitor(this) More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:1392,Modifiability,inherit,inherited,1392,"calParams *mparams);  ;  ~MechanicalComputeEnergyVisitor () override;  ; SReal getKineticEnergy ();  ; SReal getPotentialEnergy ();  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *f) override;  Process the BaseForceField. More...;  ; const char * getClassName () const override;  ; void execute (sofa::core::objectmodel::BaseContext *c, bool precomputedTraversalOrder=false) override;  Alias for context->executeVisitor(this) More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:8201,Modifiability,inherit,inherited,8201,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:9926,Modifiability,Inherit,Inherited,9926,"core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:9964,Modifiability,inherit,inherited,9964,"core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:10165,Modifiability,inherit,inherited,10165," More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:10288,Modifiability,inherit,inherited,10288," More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:10512,Modifiability,inherit,inherited,10512,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalComputeEnergyVisitor(). sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor::MechanicalComputeEnergyVisitor ; (;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:10624,Modifiability,inherit,inherited,10624,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalComputeEnergyVisitor(). sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor::MechanicalComputeEnergyVisitor ; (;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:10875,Modifiability,inherit,inherited,10875,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalComputeEnergyVisitor(). sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor::MechanicalComputeEnergyVisitor ; (;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:10108,Security,access,access,10108,"ation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:8615,Testability,test,testTags,8615,"aintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor-members.html:304,Modifiability,inherit,inherited,304,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor, including all inherited members. accumulatesofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor; addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitorvirtual; sofa::simulation::MechanicalVisitor::bwdMechanicalMapping(Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor-members.html:10885,Testability,test,testTags,10885,"imulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:370,Modifiability,Inherit,Inheritance,370,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor Class Reference . #include <MechanicalComputeForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor:. [legend]; Detailed Description; Accumulate the forces (internal and interactions). This action is typically called after a MechanicalResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:782,Modifiability,inherit,inherited,782,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor Class Reference . #include <MechanicalComputeForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor:. [legend]; Detailed Description; Accumulate the forces (internal and interactions). This action is typically called after a MechanicalResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:2185,Modifiability,inherit,inherited,2185,"or::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:2333,Modifiability,inherit,inherited,2333,"or::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:8560,Modifiability,inherit,inherited,8560,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:10293,Modifiability,Inherit,Inherited,10293,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:10334,Modifiability,inherit,inherited,10334,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:10457,Modifiability,inherit,inherited,10457,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:10681,Modifiability,inherit,inherited,10681,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor::accumulate. Accumulate everything back to the DOFs thro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:10793,Modifiability,inherit,inherited,10793,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor::accumulate. Accumulate everything back to the DOFs thro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:11044,Modifiability,inherit,inherited,11044,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor::accumulate. Accumulate everything back to the DOFs thro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:926,Security,access,access,926,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor Class Reference . #include <MechanicalComputeForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor:. [legend]; Detailed Description; Accumulate the forces (internal and interactions). This action is typically called after a MechanicalResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:8932,Testability,test,testTags,8932,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness-members.html:316,Modifiability,inherit,inherited,316,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness-members.html:10558,Testability,test,testTags,10558,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:388,Modifiability,Inherit,Inheritance,388,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness Class Reference . #include <MechanicalComputeGeometricStiffness.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness:. [legend]; Detailed Description; Compute the mapping geometric stiffness matrices. This action must be call before BaseMapping::getK() . Public Attributes; sofa::core::ConstMultiVecDerivId childForce;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeGeometricStiffness (const sofa::core::MechanicalParams *mparams, sofa::core::ConstMultiVecDerivId childForce);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechani",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:709,Modifiability,inherit,inherited,709,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness Class Reference . #include <MechanicalComputeGeometricStiffness.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness:. [legend]; Detailed Description; Compute the mapping geometric stiffness matrices. This action must be call before BaseMapping::getK() . Public Attributes; sofa::core::ConstMultiVecDerivId childForce;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeGeometricStiffness (const sofa::core::MechanicalParams *mparams, sofa::core::ConstMultiVecDerivId childForce);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechani",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:1397,Modifiability,inherit,inherited,1397," of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeGeometricStiffness (const sofa::core::MechanicalParams *mparams, sofa::core::ConstMultiVecDerivId childForce);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:1545,Modifiability,inherit,inherited,1545," of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeGeometricStiffness (const sofa::core::MechanicalParams *mparams, sofa::core::ConstMultiVecDerivId childForce);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:8471,Modifiability,inherit,inherited,8471,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:10204,Modifiability,Inherit,Inherited,10204,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:10245,Modifiability,inherit,inherited,10245,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:10368,Modifiability,inherit,inherited,10368,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:10592,Modifiability,inherit,inherited,10592,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ childForce. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness::childForce. Construct",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:10704,Modifiability,inherit,inherited,10704,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ childForce. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness::childForce. Construct",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:10955,Modifiability,inherit,inherited,10955,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ childForce. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness::childForce. Construct",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:853,Security,access,access,853,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness Class Reference . #include <MechanicalComputeGeometricStiffness.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness:. [legend]; Detailed Description; Compute the mapping geometric stiffness matrices. This action must be call before BaseMapping::getK() . Public Attributes; sofa::core::ConstMultiVecDerivId childForce;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeGeometricStiffness (const sofa::core::MechanicalParams *mparams, sofa::core::ConstMultiVecDerivId childForce);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechani",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:8843,Testability,test,testTags,8843,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor-members.html:308,Modifiability,inherit,inherited,308,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor-members.html:10391,Testability,test,testTags,10391,"dvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitorinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:376,Modifiability,Inherit,Inheritance,376,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor Class Reference . #include <MechanicalEndIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor:. [legend]; Detailed Description; Visitor applied after a time step has been applied. Does typically nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalEndIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:632,Modifiability,inherit,inherited,632,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor Class Reference . #include <MechanicalEndIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor:. [legend]; Detailed Description; Visitor applied after a time step has been applied. Does typically nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalEndIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:1572,Modifiability,inherit,inherited,1572,"  MechanicalEndIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual Result fwdMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:8159,Modifiability,inherit,inherited,8159,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:9934,Modifiability,Inherit,Inherited,9934,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:9975,Modifiability,inherit,inherited,9975,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:10199,Modifiability,inherit,inherited,10199,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor::dt. Constructor details. ◆ MechanicalEndIntegrationVisitor()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:10311,Modifiability,inherit,inherited,10311,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor::dt. Constructor details. ◆ MechanicalEndIntegrationVisitor()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:10562,Modifiability,inherit,inherited,10562,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor::dt. Constructor details. ◆ MechanicalEndIntegrationVisitor()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:776,Security,access,access,776,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor Class Reference . #include <MechanicalEndIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor:. [legend]; Detailed Description; Visitor applied after a time step has been applied. Does typically nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalEndIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:8573,Testability,test,testTags,8573," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor-members.html:314,Modifiability,inherit,inherited,314,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::be",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor-members.html:10305,Testability,test,testTags,10305,"amesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; VecConstArea typedefsofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor; VecConstCoord typedefsofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor; VecConstDeriv typedefsofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor; VecConstraintBlockInfo typedefsofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor; VecPersistentID typedefsofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:364,Modifiability,Inherit,Inheritance,364,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor Class Reference . #include <MechanicalGetConstraintInfoVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor:. [legend]. Public Member Functions;  MechanicalGetConstraintInfoVisitor (const core::ConstraintParams *params, VecConstraintBlockInfo &blocks, VecPersistentID &ids, VecConstCoord &positions, VecConstDeriv &directions, VecConstArea &areas);  ; Result fwdConstraintSet (simulation::Node *node, core::behavior::BaseConstraintSet *cSet) override;  Process all the BaseConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:1009,Modifiability,inherit,inherited,1009,"t of all members . sofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor Class Reference . #include <MechanicalGetConstraintInfoVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor:. [legend]. Public Member Functions;  MechanicalGetConstraintInfoVisitor (const core::ConstraintParams *params, VecConstraintBlockInfo &blocks, VecPersistentID &ids, VecConstCoord &positions, VecConstDeriv &directions, VecConstArea &areas);  ; Result fwdConstraintSet (simulation::Node *node, core::behavior::BaseConstraintSet *cSet) override;  Process all the BaseConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:7831,Modifiability,inherit,inherited,7831,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:9705,Modifiability,Inherit,Inherited,9705,"core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VCo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:9743,Modifiability,inherit,inherited,9743,"core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VCo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:9944,Modifiability,inherit,inherited,9944," () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorTy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:10168,Modifiability,inherit,inherited,10168,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalGetConstraintInfoVisitor(). sofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor::MechanicalGetConstraintInfo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:10280,Modifiability,inherit,inherited,10280,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalGetConstraintInfoVisitor(). sofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor::MechanicalGetConstraintInfo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:10531,Modifiability,inherit,inherited,10531,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalGetConstraintInfoVisitor(). sofa::simulation::mechanicalvisitor::MechanicalGetConstraintInfoVisitor::MechanicalGetConstraintInfo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:9887,Security,access,access,9887,"ation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html:8245,Testability,test,testTags,8245," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_info_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor-members.html:322,Modifiability,inherit,inherited,322,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor-members.html:10589,Testability,test,testTags,10589,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:397,Modifiability,Inherit,Inheritance,397,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor Class Reference . #include <MechanicalGetConstraintJacobianVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor:. [legend]; Detailed Description; Compute the size of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; const core::ConstraintParams * cparams;  ; linearalgebra::BaseMatrix * J;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetConstraintJacobianVisitor (const core::ConstraintParams *cparams, linearalgebra::BaseMatrix *_J, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:803,Modifiability,inherit,inherited,803,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor Class Reference . #include <MechanicalGetConstraintJacobianVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor:. [legend]; Detailed Description; Compute the size of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; const core::ConstraintParams * cparams;  ; linearalgebra::BaseMatrix * J;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetConstraintJacobianVisitor (const core::ConstraintParams *cparams, linearalgebra::BaseMatrix *_J, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:1447,Modifiability,inherit,inherited,1447,"or::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetConstraintJacobianVisitor (const core::ConstraintParams *cparams, linearalgebra::BaseMatrix *_J, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:8317,Modifiability,inherit,inherited,8317,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:10191,Modifiability,Inherit,Inherited,10191,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:10232,Modifiability,inherit,inherited,10232,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:10456,Modifiability,inherit,inherited,10456,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor::cparams. ◆ J. linearalge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:10568,Modifiability,inherit,inherited,10568,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor::cparams. ◆ J. linearalge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:10819,Modifiability,inherit,inherited,10819,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor::cparams. ◆ J. linearalge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:947,Security,access,access,947,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor Class Reference . #include <MechanicalGetConstraintJacobianVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor:. [legend]; Detailed Description; Compute the size of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; const core::ConstraintParams * cparams;  ; linearalgebra::BaseMatrix * J;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetConstraintJacobianVisitor (const core::ConstraintParams *cparams, linearalgebra::BaseMatrix *_J, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:8731,Testability,test,testTags,8731," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor-members.html:316,Modifiability,inherit,inherited,316,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor-members.html:10647,Testability,test,testTags,10647,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:388,Modifiability,Inherit,Inheritance,388,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor Class Reference . #include <MechanicalGetMatrixDimensionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor:. [legend]; Detailed Description; Compute the size of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; sofa::Size *const nbRow;  ; sofa::Size *const nbCol;  ; sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetMatrixDimensionVisitor (const core::ExecParams *params, sofa::Size *const _nbRow, sofa::Size *const _nbCol, sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, core::BaseMapping *mm) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:749,Modifiability,inherit,inherited,749,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor Class Reference . #include <MechanicalGetMatrixDimensionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor:. [legend]; Detailed Description; Compute the size of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; sofa::Size *const nbRow;  ; sofa::Size *const nbCol;  ; sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetMatrixDimensionVisitor (const core::ExecParams *params, sofa::Size *const _nbRow, sofa::Size *const _nbCol, sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, core::BaseMapping *mm) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:1716,Modifiability,inherit,inherited,1716,"::ExecParams *params, sofa::Size *const _nbRow, sofa::Size *const _nbCol, sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, core::BaseMapping *mm) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:8262,Modifiability,inherit,inherited,8262,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:10136,Modifiability,Inherit,Inherited,10136,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:10177,Modifiability,inherit,inherited,10177,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:10401,Modifiability,inherit,inherited,10401,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor::matrix. ◆ nbCol",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:10513,Modifiability,inherit,inherited,10513,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor::matrix. ◆ nbCol",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:10764,Modifiability,inherit,inherited,10764,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor::matrix. ◆ nbCol",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:893,Security,access,access,893,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor Class Reference . #include <MechanicalGetMatrixDimensionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor:. [legend]; Detailed Description; Compute the size of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; sofa::Size *const nbRow;  ; sofa::Size *const nbCol;  ; sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetMatrixDimensionVisitor (const core::ExecParams *params, sofa::Size *const _nbRow, sofa::Size *const _nbCol, sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, core::BaseMapping *mm) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:8676,Testability,test,testTags,8676," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor-members.html:302,Modifiability,inherit,inherited,302,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor-members.html:10378,Testability,test,testTags,10378,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:346,Modifiability,Inherit,Inheritance,346,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor Class Reference . #include <MechanicalGetMomentumVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor:. [legend]; Detailed Description; Compute the linear and angular momenta; AuthorMatthieu Nesme, 2015 . Public Member Functions;  MechanicalGetMomentumVisitor (const core::MechanicalParams *mparams);  ; const type::Vec6 & getMomentum () const;  ; virtual Result fwdMass (simulation::Node *, core::behavior::BaseMass *mass);  Process the BaseMass. More...;  ; virtual const char * getClassName () const;  ; virtual void execute (sofa::core::objectmodel::BaseContext *c, bool precomputedTraversalOrder=false);  Alias for context->executeVisitor(this) More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:1021,Modifiability,inherit,inherited,1021,"r::MechanicalGetMomentumVisitor:. [legend]; Detailed Description; Compute the linear and angular momenta; AuthorMatthieu Nesme, 2015 . Public Member Functions;  MechanicalGetMomentumVisitor (const core::MechanicalParams *mparams);  ; const type::Vec6 & getMomentum () const;  ; virtual Result fwdMass (simulation::Node *, core::behavior::BaseMass *mass);  Process the BaseMass. More...;  ; virtual const char * getClassName () const;  ; virtual void execute (sofa::core::objectmodel::BaseContext *c, bool precomputedTraversalOrder=false);  Alias for context->executeVisitor(this) More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:1169,Modifiability,inherit,inherited,1169,"r::MechanicalGetMomentumVisitor:. [legend]; Detailed Description; Compute the linear and angular momenta; AuthorMatthieu Nesme, 2015 . Public Member Functions;  MechanicalGetMomentumVisitor (const core::MechanicalParams *mparams);  ; const type::Vec6 & getMomentum () const;  ; virtual Result fwdMass (simulation::Node *, core::behavior::BaseMass *mass);  Process the BaseMass. More...;  ; virtual const char * getClassName () const;  ; virtual void execute (sofa::core::objectmodel::BaseContext *c, bool precomputedTraversalOrder=false);  Alias for context->executeVisitor(this) More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:8114,Modifiability,inherit,inherited,8114,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:9839,Modifiability,Inherit,Inherited,9839,"core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:9877,Modifiability,inherit,inherited,9877,"core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:10078,Modifiability,inherit,inherited,10078," More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:10201,Modifiability,inherit,inherited,10201," More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:10425,Modifiability,inherit,inherited,10425,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalGetMomentumVisitor(). sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor::MechanicalGetMomentumVisitor ; (; const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:10537,Modifiability,inherit,inherited,10537,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalGetMomentumVisitor(). sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor::MechanicalGetMomentumVisitor ; (; const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:10788,Modifiability,inherit,inherited,10788,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalGetMomentumVisitor(). sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor::MechanicalGetMomentumVisitor ; (; const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:10021,Security,access,access,10021,"ation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html:8528,Testability,test,testTags,8528,"aintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_momentum_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor-members.html:330,Modifiability,inherit,inherited,330,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor-members.html:10677,Testability,test,testTags,10677,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:409,Modifiability,Inherit,Inheritance,409,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor Class Reference . #include <MechanicalGetNonDiagonalMassesCountVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor:. [legend]; Detailed Description; Count the number of masses which are not diagonal . Public Attributes; sofa::Size *const m_nbNonDiagonalMassesPtr { nullptr };  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, SReal *result)=delete;  ;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, sofa::Size *result);  ; Result fwdMass (VisitorContext *ctx, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:696,Modifiability,inherit,inherited,696,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor Class Reference . #include <MechanicalGetNonDiagonalMassesCountVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor:. [legend]; Detailed Description; Count the number of masses which are not diagonal . Public Attributes; sofa::Size *const m_nbNonDiagonalMassesPtr { nullptr };  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, SReal *result)=delete;  ;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, sofa::Size *result);  ; Result fwdMass (VisitorContext *ctx, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:1323,Modifiability,inherit,inherited,1323,"ic Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, SReal *result)=delete;  ;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, sofa::Size *result);  ; Result fwdMass (VisitorContext *ctx, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstra",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:1471,Modifiability,inherit,inherited,1471,"ic Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, SReal *result)=delete;  ;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, sofa::Size *result);  ; Result fwdMass (VisitorContext *ctx, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstra",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:8411,Modifiability,inherit,inherited,8411,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:10285,Modifiability,Inherit,Inherited,10285,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:10326,Modifiability,inherit,inherited,10326,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:10449,Modifiability,inherit,inherited,10449,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:10673,Modifiability,inherit,inherited,10673,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_nbNonDiagonalMassesPtr. sofa::Size* const sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor::m_nbNonDiagonal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:10785,Modifiability,inherit,inherited,10785,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_nbNonDiagonalMassesPtr. sofa::Size* const sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor::m_nbNonDiagonal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:11036,Modifiability,inherit,inherited,11036,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_nbNonDiagonalMassesPtr. sofa::Size* const sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor::m_nbNonDiagonal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:840,Security,access,access,840,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor Class Reference . #include <MechanicalGetNonDiagonalMassesCountVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor:. [legend]; Detailed Description; Count the number of masses which are not diagonal . Public Attributes; sofa::Size *const m_nbNonDiagonalMassesPtr { nullptr };  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, SReal *result)=delete;  ;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, sofa::Size *result);  ; Result fwdMass (VisitorContext *ctx, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:8825,Testability,test,testTags,8825," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor-members.html:328,Modifiability,inherit,inherited,328,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *) overridesofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitorvirtual; sofa::simulation::BaseMechanicalVisitor::bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor-members.html:10346,Testability,test,testTags,10346,"tedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:385,Modifiability,Inherit,Inheritance,385,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitor Class Reference . #include <MechanicalIdentityBlocksInJacobianVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitor:. [legend]. Public Member Functions; const char * getClassName () const override;  ;  MechanicalIdentityBlocksInJacobianVisitor (const sofa::core::ExecParams *params, sofa::core::MatrixDerivId id);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState when it is mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:1123,Modifiability,inherit,inherited,1123,"nicalIdentityBlocksInJacobianVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitor:. [legend]. Public Member Functions; const char * getClassName () const override;  ;  MechanicalIdentityBlocksInJacobianVisitor (const sofa::core::ExecParams *params, sofa::core::MatrixDerivId id);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState when it is mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Constrai",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:7770,Modifiability,inherit,inherited,7770,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:9644,Modifiability,Inherit,Inherited,9644,"core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VCo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:9682,Modifiability,inherit,inherited,9682,"core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VCo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:9883,Modifiability,inherit,inherited,9883," () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorTy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:10107,Modifiability,inherit,inherited,10107,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalIdentityBlocksInJacobianVisitor(). sofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitor::MechanicalIde",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:10219,Modifiability,inherit,inherited,10219,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalIdentityBlocksInJacobianVisitor(). sofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitor::MechanicalIde",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:10470,Modifiability,inherit,inherited,10470,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalIdentityBlocksInJacobianVisitor(). sofa::simulation::mechanicalvisitor::MechanicalIdentityBlocksInJacobianVisitor::MechanicalIde",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:9826,Security,access,access,9826,"ation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html:8184,Testability,test,testTags,8184," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_identity_blocks_in_jacobian_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor-members.html:320,Modifiability,inherit,inherited,320,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor-members.html:10928,Testability,test,testTags,10928,"aseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; velocityFactorsofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor; vIdsofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; xIdsofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:733,Deployability,integrat,integration,733,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference . #include <MechanicalIntegrateConstraintVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor:. [legend]; Detailed Description; Apply the motion correction computed from constraint force influence . Public Attributes; const sofa::core::ConstraintParams * cparams;  ; const double positionFactor;  use the OdeSolver to get the position integration factor More...;  ; const double velocityFactor;  use the OdeSolver to get the position integration factor More...;  ; sofa::core::ConstMultiVecDerivId correctionId;  ; sofa::core::MultiVecDerivId dxId;  ; sofa::core::MultiVecCoordId xId;  ; sofa::core::MultiVecDerivId vId;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrateConstraintsVisitor (const core::ConstraintParams *cparams, double pf, double vf, sofa::core::ConstMultiVecDerivId correction, sofa::core::MultiVecDerivId dx=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), sofa::core::MultiVecCoordId x=sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), sofa::core::MultiVecDerivId v=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()));  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:832,Deployability,integrat,integration,832,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference . #include <MechanicalIntegrateConstraintVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor:. [legend]; Detailed Description; Apply the motion correction computed from constraint force influence . Public Attributes; const sofa::core::ConstraintParams * cparams;  ; const double positionFactor;  use the OdeSolver to get the position integration factor More...;  ; const double velocityFactor;  use the OdeSolver to get the position integration factor More...;  ; sofa::core::ConstMultiVecDerivId correctionId;  ; sofa::core::MultiVecDerivId dxId;  ; sofa::core::MultiVecCoordId xId;  ; sofa::core::MultiVecDerivId vId;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrateConstraintsVisitor (const core::ConstraintParams *cparams, double pf, double vf, sofa::core::ConstMultiVecDerivId correction, sofa::core::MultiVecDerivId dx=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), sofa::core::MultiVecCoordId x=sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), sofa::core::MultiVecDerivId v=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()));  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:13275,Deployability,integrat,integration,13275,"&typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ correctionId. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::correctionId. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::cparams. ◆ dxId. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::dxId. ◆ offset. int sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::offset. ◆ positionFactor. const double sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::positionFactor. use the OdeSolver to get the position integration factor . ◆ velocityFactor. const double sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::velocityFactor. use the OdeSolver to get the position integration factor . ◆ vId. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::vId. ◆ xId. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::xId. Constructor details. ◆ MechanicalIntegrateConstraintsVisitor(). sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::MechanicalIntegrateConstraintsVisitor ; (; const core::ConstraintParams * ; cparams, . double ; pf, . double ; vf, . sofa::core::ConstMultiVecDerivId ; correction, . sofa::core::MultiVecDerivId ; dx = sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), . sofa::core::MultiVecCoordId ; x = sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), . sofa::core::MultiVecDerivId ; v = sofa::core::MultiVe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:13457,Deployability,integrat,integration,13457,"t *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ correctionId. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::correctionId. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::cparams. ◆ dxId. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::dxId. ◆ offset. int sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::offset. ◆ positionFactor. const double sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::positionFactor. use the OdeSolver to get the position integration factor . ◆ velocityFactor. const double sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::velocityFactor. use the OdeSolver to get the position integration factor . ◆ vId. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::vId. ◆ xId. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::xId. Constructor details. ◆ MechanicalIntegrateConstraintsVisitor(). sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::MechanicalIntegrateConstraintsVisitor ; (; const core::ConstraintParams * ; cparams, . double ; pf, . double ; vf, . sofa::core::ConstMultiVecDerivId ; correction, . sofa::core::MultiVecDerivId ; dx = sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), . sofa::core::MultiVecCoordId ; x = sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), . sofa::core::MultiVecDerivId ; v = sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()) . ). Function details. ◆ fwdMechanicalState(). MechanicalIntegrateConstraintsVisitor::Result sofa::simulation::mechanicalvisitor::Mechani",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:733,Integrability,integrat,integration,733,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference . #include <MechanicalIntegrateConstraintVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor:. [legend]; Detailed Description; Apply the motion correction computed from constraint force influence . Public Attributes; const sofa::core::ConstraintParams * cparams;  ; const double positionFactor;  use the OdeSolver to get the position integration factor More...;  ; const double velocityFactor;  use the OdeSolver to get the position integration factor More...;  ; sofa::core::ConstMultiVecDerivId correctionId;  ; sofa::core::MultiVecDerivId dxId;  ; sofa::core::MultiVecCoordId xId;  ; sofa::core::MultiVecDerivId vId;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrateConstraintsVisitor (const core::ConstraintParams *cparams, double pf, double vf, sofa::core::ConstMultiVecDerivId correction, sofa::core::MultiVecDerivId dx=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), sofa::core::MultiVecCoordId x=sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), sofa::core::MultiVecDerivId v=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()));  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:832,Integrability,integrat,integration,832,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference . #include <MechanicalIntegrateConstraintVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor:. [legend]; Detailed Description; Apply the motion correction computed from constraint force influence . Public Attributes; const sofa::core::ConstraintParams * cparams;  ; const double positionFactor;  use the OdeSolver to get the position integration factor More...;  ; const double velocityFactor;  use the OdeSolver to get the position integration factor More...;  ; sofa::core::ConstMultiVecDerivId correctionId;  ; sofa::core::MultiVecDerivId dxId;  ; sofa::core::MultiVecCoordId xId;  ; sofa::core::MultiVecDerivId vId;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrateConstraintsVisitor (const core::ConstraintParams *cparams, double pf, double vf, sofa::core::ConstMultiVecDerivId correction, sofa::core::MultiVecDerivId dx=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), sofa::core::MultiVecCoordId x=sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), sofa::core::MultiVecDerivId v=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()));  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:13275,Integrability,integrat,integration,13275,"&typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ correctionId. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::correctionId. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::cparams. ◆ dxId. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::dxId. ◆ offset. int sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::offset. ◆ positionFactor. const double sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::positionFactor. use the OdeSolver to get the position integration factor . ◆ velocityFactor. const double sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::velocityFactor. use the OdeSolver to get the position integration factor . ◆ vId. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::vId. ◆ xId. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::xId. Constructor details. ◆ MechanicalIntegrateConstraintsVisitor(). sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::MechanicalIntegrateConstraintsVisitor ; (; const core::ConstraintParams * ; cparams, . double ; pf, . double ; vf, . sofa::core::ConstMultiVecDerivId ; correction, . sofa::core::MultiVecDerivId ; dx = sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), . sofa::core::MultiVecCoordId ; x = sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), . sofa::core::MultiVecDerivId ; v = sofa::core::MultiVe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:13457,Integrability,integrat,integration,13457,"t *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ correctionId. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::correctionId. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::cparams. ◆ dxId. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::dxId. ◆ offset. int sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::offset. ◆ positionFactor. const double sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::positionFactor. use the OdeSolver to get the position integration factor . ◆ velocityFactor. const double sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::velocityFactor. use the OdeSolver to get the position integration factor . ◆ vId. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::vId. ◆ xId. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::xId. Constructor details. ◆ MechanicalIntegrateConstraintsVisitor(). sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::MechanicalIntegrateConstraintsVisitor ; (; const core::ConstraintParams * ; cparams, . double ; pf, . double ; vf, . sofa::core::ConstMultiVecDerivId ; correction, . sofa::core::MultiVecDerivId ; dx = sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), . sofa::core::MultiVecCoordId ; x = sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), . sofa::core::MultiVecDerivId ; v = sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()) . ). Function details. ◆ fwdMechanicalState(). MechanicalIntegrateConstraintsVisitor::Result sofa::simulation::mechanicalvisitor::Mechani",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:393,Modifiability,Inherit,Inheritance,393,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference . #include <MechanicalIntegrateConstraintVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor:. [legend]; Detailed Description; Apply the motion correction computed from constraint force influence . Public Attributes; const sofa::core::ConstraintParams * cparams;  ; const double positionFactor;  use the OdeSolver to get the position integration factor More...;  ; const double velocityFactor;  use the OdeSolver to get the position integration factor More...;  ; sofa::core::ConstMultiVecDerivId correctionId;  ; sofa::core::MultiVecDerivId dxId;  ; sofa::core::MultiVecCoordId xId;  ; sofa::core::MultiVecDerivId vId;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrateConstraintsVisitor (const core::ConstraintParams *cparams, double pf, double vf, sofa::core::ConstMultiVecDerivId correction, sofa::core::MultiVecDerivId dx=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), sofa::core::MultiVecCoordId x=sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), sofa::core::MultiVecDerivId v=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()));  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:1056,Modifiability,inherit,inherited,1056,"SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference . #include <MechanicalIntegrateConstraintVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor:. [legend]; Detailed Description; Apply the motion correction computed from constraint force influence . Public Attributes; const sofa::core::ConstraintParams * cparams;  ; const double positionFactor;  use the OdeSolver to get the position integration factor More...;  ; const double velocityFactor;  use the OdeSolver to get the position integration factor More...;  ; sofa::core::ConstMultiVecDerivId correctionId;  ; sofa::core::MultiVecDerivId dxId;  ; sofa::core::MultiVecCoordId xId;  ; sofa::core::MultiVecDerivId vId;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrateConstraintsVisitor (const core::ConstraintParams *cparams, double pf, double vf, sofa::core::ConstMultiVecDerivId correction, sofa::core::MultiVecDerivId dx=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), sofa::core::MultiVecCoordId x=sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), sofa::core::MultiVecDerivId v=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()));  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:1949,Modifiability,inherit,inherited,1949," Public Member Functions;  MechanicalIntegrateConstraintsVisitor (const core::ConstraintParams *cparams, double pf, double vf, sofa::core::ConstMultiVecDerivId correction, sofa::core::MultiVecDerivId dx=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), sofa::core::MultiVecCoordId x=sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), sofa::core::MultiVecDerivId v=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()));  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:8819,Modifiability,inherit,inherited,8819,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:10693,Modifiability,Inherit,Inherited,10693,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:10734,Modifiability,inherit,inherited,10734,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:10958,Modifiability,inherit,inherited,10958,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ correctionId. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::correctionId. ◆ c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:11070,Modifiability,inherit,inherited,11070,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ correctionId. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::correctionId. ◆ c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:11321,Modifiability,inherit,inherited,11321,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ correctionId. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::correctionId. ◆ c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:1200,Security,access,access,1200,"ributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference . #include <MechanicalIntegrateConstraintVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor:. [legend]; Detailed Description; Apply the motion correction computed from constraint force influence . Public Attributes; const sofa::core::ConstraintParams * cparams;  ; const double positionFactor;  use the OdeSolver to get the position integration factor More...;  ; const double velocityFactor;  use the OdeSolver to get the position integration factor More...;  ; sofa::core::ConstMultiVecDerivId correctionId;  ; sofa::core::MultiVecDerivId dxId;  ; sofa::core::MultiVecCoordId xId;  ; sofa::core::MultiVecDerivId vId;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrateConstraintsVisitor (const core::ConstraintParams *cparams, double pf, double vf, sofa::core::ConstMultiVecDerivId correction, sofa::core::MultiVecDerivId dx=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), sofa::core::MultiVecCoordId x=sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), sofa::core::MultiVecDerivId v=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()));  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeDat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:9233,Testability,test,testTags,9233," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor-members.html:302,Modifiability,inherit,inherited,302,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor-members.html:10324,Testability,test,testTags,10324,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:517,Deployability,integrat,integration,517,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference . #include <MechanicalIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor:. [legend]; Detailed Description; Visitor used to do a time integration step using OdeSolvers . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrationVisitor (const sofa::core::ExecParams *m_params, SReal _dt);  ; Result fwdOdeSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *obj) override;  Process the OdeSolver. More...;  ; Result fwdInteractionForceField (simulation::Node *, sofa::core::behavior::BaseInteractionForceField *obj) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:517,Integrability,integrat,integration,517,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference . #include <MechanicalIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor:. [legend]; Detailed Description; Visitor used to do a time integration step using OdeSolvers . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrationVisitor (const sofa::core::ExecParams *m_params, SReal _dt);  ; Result fwdOdeSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *obj) override;  Process the OdeSolver. More...;  ; Result fwdInteractionForceField (simulation::Node *, sofa::core::behavior::BaseInteractionForceField *obj) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:367,Modifiability,Inherit,Inheritance,367,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference . #include <MechanicalIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor:. [legend]; Detailed Description; Visitor used to do a time integration step using OdeSolvers . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrationVisitor (const sofa::core::ExecParams *m_params, SReal _dt);  ; Result fwdOdeSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *obj) override;  Process the OdeSolver. More...;  ; Result fwdInteractionForceField (simulation::Node *, sofa::core::behavior::BaseInteractionForceField *obj) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:604,Modifiability,inherit,inherited,604,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference . #include <MechanicalIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor:. [legend]; Detailed Description; Visitor used to do a time integration step using OdeSolvers . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrationVisitor (const sofa::core::ExecParams *m_params, SReal _dt);  ; Result fwdOdeSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *obj) override;  Process the OdeSolver. More...;  ; Result fwdInteractionForceField (simulation::Node *, sofa::core::behavior::BaseInteractionForceField *obj) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:1364,Modifiability,inherit,inherited,1364,"st of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrationVisitor (const sofa::core::ExecParams *m_params, SReal _dt);  ; Result fwdOdeSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *obj) override;  Process the OdeSolver. More...;  ; Result fwdInteractionForceField (simulation::Node *, sofa::core::behavior::BaseInteractionForceField *obj) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *);  Process t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:8131,Modifiability,inherit,inherited,8131,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:9906,Modifiability,Inherit,Inherited,9906,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:9947,Modifiability,inherit,inherited,9947,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:10171,Modifiability,inherit,inherited,10171,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor::dt. Constructor details. ◆ MechanicalIntegrationVisitor(). sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:10283,Modifiability,inherit,inherited,10283,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor::dt. Constructor details. ◆ MechanicalIntegrationVisitor(). sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:10534,Modifiability,inherit,inherited,10534,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor::dt. Constructor details. ◆ MechanicalIntegrationVisitor(). sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:748,Security,access,access,748,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference . #include <MechanicalIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor:. [legend]; Detailed Description; Visitor used to do a time integration step using OdeSolvers . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrationVisitor (const sofa::core::ExecParams *m_params, SReal _dt);  ; Result fwdOdeSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *obj) override;  Process the OdeSolver. More...;  ; Result fwdInteractionForceField (simulation::Node *, sofa::core::behavior::BaseInteractionForceField *obj) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:8545,Testability,test,testTags,8545," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor-members.html:330,Modifiability,inherit,inherited,330,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor-members.html:10659,Testability,test,testTags,10659,"de *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; srcsofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:409,Modifiability,Inherit,Inheritance,409,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorFromBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor:. [legend]. Public Attributes; const sofa::linearalgebra::BaseVector * src;  ; sofa::core::MultiVecId dest;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorFromBaseVectorVisitor (const core::ExecParams *params, sofa::core::MultiVecId _dest, const linearalgebra::BaseVector *_src, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:719,Modifiability,inherit,inherited,719,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorFromBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor:. [legend]. Public Attributes; const sofa::linearalgebra::BaseVector * src;  ; sofa::core::MultiVecId dest;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorFromBaseVectorVisitor (const core::ExecParams *params, sofa::core::MultiVecId _dest, const linearalgebra::BaseVector *_src, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:1398,Modifiability,inherit,inherited,1398,"; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorFromBaseVectorVisitor (const core::ExecParams *params, sofa::core::MultiVecId _dest, const linearalgebra::BaseVector *_src, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:8268,Modifiability,inherit,inherited,8268,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:10142,Modifiability,Inherit,Inherited,10142,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:10183,Modifiability,inherit,inherited,10183,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:10407,Modifiability,inherit,inherited,10407,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dest. sofa::core::MultiVecId sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor::dest. ◆ matrix. const sofa::co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:10519,Modifiability,inherit,inherited,10519,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dest. sofa::core::MultiVecId sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor::dest. ◆ matrix. const sofa::co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:10770,Modifiability,inherit,inherited,10770,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dest. sofa::core::MultiVecId sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor::dest. ◆ matrix. const sofa::co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:863,Security,access,access,863,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorFromBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor:. [legend]. Public Attributes; const sofa::linearalgebra::BaseVector * src;  ; sofa::core::MultiVecId dest;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorFromBaseVectorVisitor (const core::ExecParams *params, sofa::core::MultiVecId _dest, const linearalgebra::BaseVector *_src, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:8682,Testability,test,testTags,8682," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor-members.html:328,Modifiability,inherit,inherited,328,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor-members.html:10654,Testability,test,testTags,10654,"ode *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; srcsofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:406,Modifiability,Inherit,Inheritance,406,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorPeqBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor:. [legend]. Public Attributes; const sofa::linearalgebra::BaseVector * src;  ; sofa::core::MultiVecDerivId dest;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorPeqBaseVectorVisitor (const core::ExecParams *params, sofa::core::MultiVecDerivId _dest, const linearalgebra::BaseVector *_src, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method ca",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:720,Modifiability,inherit,inherited,720,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorPeqBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor:. [legend]. Public Attributes; const sofa::linearalgebra::BaseVector * src;  ; sofa::core::MultiVecDerivId dest;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorPeqBaseVectorVisitor (const core::ExecParams *params, sofa::core::MultiVecDerivId _dest, const linearalgebra::BaseVector *_src, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method ca",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:1403,Modifiability,inherit,inherited,1403,"t offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorPeqBaseVectorVisitor (const core::ExecParams *params, sofa::core::MultiVecDerivId _dest, const linearalgebra::BaseVector *_src, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:8273,Modifiability,inherit,inherited,8273,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:10147,Modifiability,Inherit,Inherited,10147,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:10188,Modifiability,inherit,inherited,10188,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:10412,Modifiability,inherit,inherited,10412,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dest. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor::dest. ◆ matrix. const sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:10524,Modifiability,inherit,inherited,10524,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dest. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor::dest. ◆ matrix. const sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:10775,Modifiability,inherit,inherited,10775,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dest. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor::dest. ◆ matrix. const sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:864,Security,access,access,864,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorPeqBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor:. [legend]. Public Attributes; const sofa::linearalgebra::BaseVector * src;  ; sofa::core::MultiVecDerivId dest;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorPeqBaseVectorVisitor (const core::ExecParams *params, sofa::core::MultiVecDerivId _dest, const linearalgebra::BaseVector *_src, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method ca",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:8687,Testability,test,testTags,8687," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor-members.html:326,Modifiability,inherit,inherited,326,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor-members.html:10555,Testability,test,testTags,10555,"own(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; srcsofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vectsofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:403,Modifiability,Inherit,Inheritance,403,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorToBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor:. [legend]. Public Attributes; sofa::core::ConstMultiVecId src;  ; sofa::linearalgebra::BaseVector * vect;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorToBaseVectorVisitor (const core::ExecParams *params, sofa::core::ConstMultiVecId _src, linearalgebra::BaseVector *_vect, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* meth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:710,Modifiability,inherit,inherited,710,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorToBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor:. [legend]. Public Attributes; sofa::core::ConstMultiVecId src;  ; sofa::linearalgebra::BaseVector * vect;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorToBaseVectorVisitor (const core::ExecParams *params, sofa::core::ConstMultiVecId _src, linearalgebra::BaseVector *_vect, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* meth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:1386,Modifiability,inherit,inherited,1386,";  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorToBaseVectorVisitor (const core::ExecParams *params, sofa::core::ConstMultiVecId _src, linearalgebra::BaseVector *_vect, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:8256,Modifiability,inherit,inherited,8256,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:10130,Modifiability,Inherit,Inherited,10130,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:10171,Modifiability,inherit,inherited,10171,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:10395,Modifiability,inherit,inherited,10395,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor::matr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:10507,Modifiability,inherit,inherited,10507,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor::matr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:10758,Modifiability,inherit,inherited,10758,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor::matr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:854,Security,access,access,854,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorToBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor:. [legend]. Public Attributes; sofa::core::ConstMultiVecId src;  ; sofa::linearalgebra::BaseVector * vect;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorToBaseVectorVisitor (const core::ExecParams *params, sofa::core::ConstMultiVecId _src, linearalgebra::BaseVector *_vect, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* meth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:8670,Testability,test,testTags,8670," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor-members.html:306,Modifiability,inherit,inherited,306,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor-members.html:11222,Testability,test,testTags,11222,"tor::MechanicalPickParticlesVisitor; rayDirectionsofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor; rayOriginsofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; tagNoPickingsofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:373,Modifiability,Inherit,Inheritance,373,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor Class Reference . #include <MechanicalPickParticlesVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor:. [legend]; Detailed Description; Find mechanical particles hit by the given ray.; A mechanical particle is defined as a 2D or 3D, position or rigid DOF which is linked to the free mechanical DOFs by mechanical mappings . Public Attributes; type::Vec3d rayOrigin;  ; type::Vec3d rayDirection;  ; double radius0;  ; double dRadius;  ; sofa::core::objectmodel::Tag tagNoPicking;  ; Particles particles;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPickParticlesVisitor (const sofa::core::ExecParams *mparams, const type::Vec3d &origin, const type::Vec3d &direction, double r0=0.001, double dr=0.0, sofa::core::objectmodel::Tag tag=sofa::core::objectmodel::Tag(""NoPicking""));  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; void getClosestParticle (sofa::core::behavior::BaseMechanicalState *&mstate, sofa::Index &indexCo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:888,Modifiability,inherit,inherited,888,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor Class Reference . #include <MechanicalPickParticlesVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor:. [legend]; Detailed Description; Find mechanical particles hit by the given ray.; A mechanical particle is defined as a 2D or 3D, position or rigid DOF which is linked to the free mechanical DOFs by mechanical mappings . Public Attributes; type::Vec3d rayOrigin;  ; type::Vec3d rayDirection;  ; double radius0;  ; double dRadius;  ; sofa::core::objectmodel::Tag tagNoPicking;  ; Particles particles;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPickParticlesVisitor (const sofa::core::ExecParams *mparams, const type::Vec3d &origin, const type::Vec3d &direction, double r0=0.001, double dr=0.0, sofa::core::objectmodel::Tag tag=sofa::core::objectmodel::Tag(""NoPicking""));  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; void getClosestParticle (sofa::core::behavior::BaseMechanicalState *&mstate, sofa::Index &indexCo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:2127,Modifiability,inherit,inherited,2127,"  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; void getClosestParticle (sofa::core::behavior::BaseMechanicalState *&mstate, sofa::Index &indexCollisionElement, type::Vec3 &point, SReal &rayLength);  get the closest pickable particle More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:8673,Modifiability,inherit,inherited,8673,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:10547,Modifiability,Inherit,Inherited,10547,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:10588,Modifiability,inherit,inherited,10588,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:10812,Modifiability,inherit,inherited,10812,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dRadius. double sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor::dRadius. ◆ particles. Particles sofa::simulation::mecha",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:10924,Modifiability,inherit,inherited,10924,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dRadius. double sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor::dRadius. ◆ particles. Particles sofa::simulation::mecha",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:11175,Modifiability,inherit,inherited,11175,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dRadius. double sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor::dRadius. ◆ particles. Particles sofa::simulation::mecha",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:1032,Security,access,access,1032,"mulation::mechanicalvisitor::MechanicalPickParticlesVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor Class Reference . #include <MechanicalPickParticlesVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor:. [legend]; Detailed Description; Find mechanical particles hit by the given ray.; A mechanical particle is defined as a 2D or 3D, position or rigid DOF which is linked to the free mechanical DOFs by mechanical mappings . Public Attributes; type::Vec3d rayOrigin;  ; type::Vec3d rayDirection;  ; double radius0;  ; double dRadius;  ; sofa::core::objectmodel::Tag tagNoPicking;  ; Particles particles;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPickParticlesVisitor (const sofa::core::ExecParams *mparams, const type::Vec3d &origin, const type::Vec3d &direction, double r0=0.001, double dr=0.0, sofa::core::objectmodel::Tag tag=sofa::core::objectmodel::Tag(""NoPicking""));  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; void getClosestParticle (sofa::core::behavior::BaseMechanicalState *&mstate, sofa::Index &indexCollisionElement, type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:9087,Testability,test,testTags,9087," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor-members.html:322,Modifiability,inherit,inherited,322,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor-members.html:11487,Testability,test,testTags,11487,"clesWithTagsVisitor; rayDirectionsofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor; rayOriginsofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; tagssofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:397,Modifiability,Inherit,Inheritance,397,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor Class Reference . #include <MechanicalPickParticlesWithTagsVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor:. [legend]; Detailed Description; Find mechanical particles hit by the given ray on dof containing one tag or all provided by a tag list; A mechanical particle is defined as a 2D or 3D, position or rigid DOF which is linked to the free mechanical DOFs by mechanical mappings . Public Attributes; type::Vec3d rayOrigin;  ; type::Vec3d rayDirection;  ; double radius0;  ; double dRadius;  ; std::list< sofa::core::objectmodel::Tag > tags;  ; bool mustContainAllTags;  ; Particles particles;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPickParticlesWithTagsVisitor (const sofa::core::ExecParams *mparams, const type::Vec3d &origin, const type::Vec3d &direction, double r0=0.001, double dr=0.0, std::list< sofa::core::objectmodel::Tag > _tags=std::list< sofa::core::objectmodel::Tag >(), bool _mustContainAllTags=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped fro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:1008,Modifiability,inherit,inherited,1008,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor Class Reference . #include <MechanicalPickParticlesWithTagsVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor:. [legend]; Detailed Description; Find mechanical particles hit by the given ray on dof containing one tag or all provided by a tag list; A mechanical particle is defined as a 2D or 3D, position or rigid DOF which is linked to the free mechanical DOFs by mechanical mappings . Public Attributes; type::Vec3d rayOrigin;  ; type::Vec3d rayDirection;  ; double radius0;  ; double dRadius;  ; std::list< sofa::core::objectmodel::Tag > tags;  ; bool mustContainAllTags;  ; Particles particles;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPickParticlesWithTagsVisitor (const sofa::core::ExecParams *mparams, const type::Vec3d &origin, const type::Vec3d &direction, double r0=0.001, double dr=0.0, std::list< sofa::core::objectmodel::Tag > _tags=std::list< sofa::core::objectmodel::Tag >(), bool _mustContainAllTags=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped fro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:2305,Modifiability,inherit,inherited,2305," Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; void getClosestParticle (sofa::core::behavior::BaseMechanicalState *&mstate, unsigned int &indexCollisionElement, type::Vec3 &point, SReal &rayLength);  get the closest pickable particle More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:8851,Modifiability,inherit,inherited,8851,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:10725,Modifiability,Inherit,Inherited,10725,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:10766,Modifiability,inherit,inherited,10766,"eObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:10990,Modifiability,inherit,inherited,10990,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dRadius. double sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor::dRadius. ◆ mustContainAllTags. bool sofa::simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:11102,Modifiability,inherit,inherited,11102,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dRadius. double sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor::dRadius. ◆ mustContainAllTags. bool sofa::simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:11353,Modifiability,inherit,inherited,11353,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dRadius. double sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor::dRadius. ◆ mustContainAllTags. bool sofa::simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:1152,Security,access,access,1152,"framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor Class Reference . #include <MechanicalPickParticlesWithTagsVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor:. [legend]; Detailed Description; Find mechanical particles hit by the given ray on dof containing one tag or all provided by a tag list; A mechanical particle is defined as a 2D or 3D, position or rigid DOF which is linked to the free mechanical DOFs by mechanical mappings . Public Attributes; type::Vec3d rayOrigin;  ; type::Vec3d rayDirection;  ; double radius0;  ; double dRadius;  ; std::list< sofa::core::objectmodel::Tag > tags;  ; bool mustContainAllTags;  ; Particles particles;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPickParticlesWithTagsVisitor (const sofa::core::ExecParams *mparams, const type::Vec3d &origin, const type::Vec3d &direction, double r0=0.001, double dr=0.0, std::list< sofa::core::objectmodel::Tag > _tags=std::list< sofa::core::objectmodel::Tag >(), bool _mustContainAllTags=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; void getClosestParticle (sofa::core::behavior::BaseMechanica",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:9265,Testability,test,testTags,9265," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor-members.html:322,Modifiability,inherit,inherited,322,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor-members.html:10739,Testability,test,testTags,10739,"on::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; tsofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:397,Modifiability,Inherit,Inheritance,397,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor Class Reference . #include <MechanicalProjectJacobianMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor:. [legend]. Public Attributes; sofa::core::MultiMatrixDerivId cId;  ; SReal t;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectJacobianMatrixVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiMatrixDerivId c=sofa::core::MatrixDerivId::constraintJacobian(), SReal time=0.0);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:598,Modifiability,inherit,inherited,598,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor Class Reference . #include <MechanicalProjectJacobianMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor:. [legend]. Public Attributes; sofa::core::MultiMatrixDerivId cId;  ; SReal t;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectJacobianMatrixVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiMatrixDerivId c=sofa::core::MatrixDerivId::constraintJacobian(), SReal time=0.0);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:1476,Modifiability,inherit,inherited,1476,"::MechanicalParams *mparams, sofa::core::MultiMatrixDerivId c=sofa::core::MatrixDerivId::constraintJacobian(), SReal time=0.0);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:1624,Modifiability,inherit,inherited,1624,"::MechanicalParams *mparams, sofa::core::MultiMatrixDerivId c=sofa::core::MatrixDerivId::constraintJacobian(), SReal time=0.0);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:8375,Modifiability,inherit,inherited,8375,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:10150,Modifiability,Inherit,Inherited,10150,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:10191,Modifiability,inherit,inherited,10191,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:10314,Modifiability,inherit,inherited,10314,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:10538,Modifiability,inherit,inherited,10538,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cId. sofa::core::MultiMatrixDerivId sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor::cId. ◆ t. SReal sofa::simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:10650,Modifiability,inherit,inherited,10650,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cId. sofa::core::MultiMatrixDerivId sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor::cId. ◆ t. SReal sofa::simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:10901,Modifiability,inherit,inherited,10901,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cId. sofa::core::MultiMatrixDerivId sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor::cId. ◆ t. SReal sofa::simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:742,Security,access,access,742,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor Class Reference . #include <MechanicalProjectJacobianMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor:. [legend]. Public Attributes; sofa::core::MultiMatrixDerivId cId;  ; SReal t;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectJacobianMatrixVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiMatrixDerivId c=sofa::core::MatrixDerivId::constraintJacobian(), SReal time=0.0);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:8789,Testability,test,testTags,8789," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor-members.html:332,Modifiability,inherit,inherited,332,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor-members.html:10896,Testability,test,testTags,10896,"(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; tsofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; velsofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:412,Modifiability,Inherit,Inheritance,412,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor Class Reference . #include <MechanicalProjectPositionAndVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor:. [legend]. Public Attributes; double t;  ; sofa::core::MultiVecCoordId pos;  ; sofa::core::MultiVecDerivId vel;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, double time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:652,Modifiability,inherit,inherited,652,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor Class Reference . #include <MechanicalProjectPositionAndVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor:. [legend]. Public Attributes; double t;  ; sofa::core::MultiVecCoordId pos;  ; sofa::core::MultiVecDerivId vel;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, double time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:1627,Modifiability,inherit,inherited,1627,"rdId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:1775,Modifiability,inherit,inherited,1775,"rdId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:8526,Modifiability,inherit,inherited,8526,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:10259,Modifiability,Inherit,Inherited,10259,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:10300,Modifiability,inherit,inherited,10300,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:10423,Modifiability,inherit,inherited,10423,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:10647,Modifiability,inherit,inherited,10647,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ pos. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor::pos. ◆ t. double sofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:10759,Modifiability,inherit,inherited,10759,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ pos. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor::pos. ◆ t. double sofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:11010,Modifiability,inherit,inherited,11010,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ pos. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor::pos. ◆ t. double sofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:796,Security,access,access,796,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor Class Reference . #include <MechanicalProjectPositionAndVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor:. [legend]. Public Attributes; double t;  ; sofa::core::MultiVecCoordId pos;  ; sofa::core::MultiVecDerivId vel;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, double time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:8898,Testability,test,testTags,8898,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor-members.html:10708,Testability,test,testTags,10708,"mulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; tsofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:379,Modifiability,Inherit,Inheritance,379,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor Class Reference . #include <MechanicalProjectPositionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor:. [legend]. Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId pos;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectPositionVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:571,Modifiability,inherit,inherited,571,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor Class Reference . #include <MechanicalProjectPositionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor:. [legend]. Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId pos;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectPositionVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:1468,Modifiability,inherit,inherited,1468,"ms, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:1616,Modifiability,inherit,inherited,1616,"ms, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:8367,Modifiability,inherit,inherited,8367,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:10100,Modifiability,Inherit,Inherited,10100,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:10141,Modifiability,inherit,inherited,10141,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:10264,Modifiability,inherit,inherited,10264,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:10488,Modifiability,inherit,inherited,10488,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ pos. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor::pos. ◆ t. SReal sofa::simulation::me",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:10600,Modifiability,inherit,inherited,10600,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ pos. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor::pos. ◆ t. SReal sofa::simulation::me",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:10851,Modifiability,inherit,inherited,10851,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ pos. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor::pos. ◆ t. SReal sofa::simulation::me",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:715,Security,access,access,715,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor Class Reference . #include <MechanicalProjectPositionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor:. [legend]. Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId pos;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectPositionVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:8739,Testability,test,testTags,8739,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor-members.html:10634,Testability,test,testTags,10634,"al; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; tsofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; velsofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:379,Modifiability,Inherit,Inheritance,379,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor Class Reference . #include <MechanicalProjectVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor:. [legend]. Public Attributes; SReal t;  ; sofa::core::MultiVecDerivId vel;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:571,Modifiability,inherit,inherited,571,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor Class Reference . #include <MechanicalProjectVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor:. [legend]. Public Attributes; SReal t;  ; sofa::core::MultiVecDerivId vel;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:1468,Modifiability,inherit,inherited,1468,"ms, SReal time=0, sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:1616,Modifiability,inherit,inherited,1616,"ms, SReal time=0, sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:8367,Modifiability,inherit,inherited,8367,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:10100,Modifiability,Inherit,Inherited,10100,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:10141,Modifiability,inherit,inherited,10141,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:10264,Modifiability,inherit,inherited,10264,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:10488,Modifiability,inherit,inherited,10488,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ t. SReal sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor::t. ◆ vel. sofa::core::MultiVecDerivId sofa::simulation::mech",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:10600,Modifiability,inherit,inherited,10600,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ t. SReal sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor::t. ◆ vel. sofa::core::MultiVecDerivId sofa::simulation::mech",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:10851,Modifiability,inherit,inherited,10851,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ t. SReal sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor::t. ◆ vel. sofa::core::MultiVecDerivId sofa::simulation::mech",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:715,Security,access,access,715,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor Class Reference . #include <MechanicalProjectVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor:. [legend]. Public Attributes; SReal t;  ; sofa::core::MultiVecDerivId vel;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:8739,Testability,test,testTags,8739,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor-members.html:328,Modifiability,inherit,inherited,328,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor-members.html:10964,Testability,test,testTags,10964,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:406,Modifiability,Inherit,Inheritance,406,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor Class Reference . #include <MechanicalPropagateDxAndResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor:. [legend]; Detailed Description; Same as MechanicalPropagateDxVisitor followed by MechanicalResetForceVisitor . Public Attributes; sofa::core::MultiVecDerivId dx;  ; sofa::core::MultiVecDerivId f;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateDxAndResetForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId dx, sofa::core::MultiVecDerivId f);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Mem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:729,Modifiability,inherit,inherited,729,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor Class Reference . #include <MechanicalPropagateDxAndResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor:. [legend]; Detailed Description; Same as MechanicalPropagateDxVisitor followed by MechanicalResetForceVisitor . Public Attributes; sofa::core::MultiVecDerivId dx;  ; sofa::core::MultiVecDerivId f;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateDxAndResetForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId dx, sofa::core::MultiVecDerivId f);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Mem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:2015,Modifiability,inherit,inherited,2015,"s the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:2163,Modifiability,inherit,inherited,2163,"s the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:8524,Modifiability,inherit,inherited,8524,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:10257,Modifiability,Inherit,Inherited,10257,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:10298,Modifiability,inherit,inherited,10298,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:10421,Modifiability,inherit,inherited,10421,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:10645,Modifiability,inherit,inherited,10645,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dx. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor::dx. ◆ f. sofa::core::MultiVe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:10757,Modifiability,inherit,inherited,10757,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dx. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor::dx. ◆ f. sofa::core::MultiVe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:11008,Modifiability,inherit,inherited,11008,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dx. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor::dx. ◆ f. sofa::core::MultiVe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:873,Security,access,access,873,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor Class Reference . #include <MechanicalPropagateDxAndResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor:. [legend]; Detailed Description; Same as MechanicalPropagateDxVisitor followed by MechanicalResetForceVisitor . Public Attributes; sofa::core::MultiVecDerivId dx;  ; sofa::core::MultiVecDerivId f;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateDxAndResetForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId dx, sofa::core::MultiVecDerivId f);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Mem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:8896,Testability,test,testTags,8896,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor-members.html:302,Modifiability,inherit,inherited,302,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor-members.html:10748,Testability,test,testTags,10748,"otectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:367,Modifiability,Inherit,Inheritance,367,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor Class Reference . #include <MechanicalPropagateDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor:. [legend]; Detailed Description; Apply a hypothetical displacement. This action does not modify the state (i.e. positions and velocities) of the objects. It is typically applied before a MechanicalComputeDfVisitor, in order to compute the df corresponding to a given dx (i.e. apply stiffness). Dx is propagated to all the layers through the mappings. . Public Attributes; sofa::core::MultiVecDerivId dx;  ; bool ignoreFlag;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId dx, bool f=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:780,Modifiability,layers,layers,780,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor Class Reference . #include <MechanicalPropagateDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor:. [legend]; Detailed Description; Apply a hypothetical displacement. This action does not modify the state (i.e. positions and velocities) of the objects. It is typically applied before a MechanicalComputeDfVisitor, in order to compute the df corresponding to a given dx (i.e. apply stiffness). Dx is propagated to all the layers through the mappings. . Public Attributes; sofa::core::MultiVecDerivId dx;  ; bool ignoreFlag;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId dx, bool f=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:904,Modifiability,inherit,inherited,904,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor Class Reference . #include <MechanicalPropagateDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor:. [legend]; Detailed Description; Apply a hypothetical displacement. This action does not modify the state (i.e. positions and velocities) of the objects. It is typically applied before a MechanicalComputeDfVisitor, in order to compute the df corresponding to a given dx (i.e. apply stiffness). Dx is propagated to all the layers through the mappings. . Public Attributes; sofa::core::MultiVecDerivId dx;  ; bool ignoreFlag;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId dx, bool f=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:2059,Modifiability,inherit,inherited,2059,"the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:2207,Modifiability,inherit,inherited,2207,"the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:8667,Modifiability,inherit,inherited,8667,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:10400,Modifiability,Inherit,Inherited,10400,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:10441,Modifiability,inherit,inherited,10441,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:10564,Modifiability,inherit,inherited,10564,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:10788,Modifiability,inherit,inherited,10788,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dx. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor::dx. ◆ ignoreFlag. bool sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:10900,Modifiability,inherit,inherited,10900,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dx. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor::dx. ◆ ignoreFlag. bool sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:11151,Modifiability,inherit,inherited,11151,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dx. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor::dx. ◆ ignoreFlag. bool sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:1048,Security,access,access,1048,"icalvisitor::MechanicalPropagateDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor Class Reference . #include <MechanicalPropagateDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor:. [legend]; Detailed Description; Apply a hypothetical displacement. This action does not modify the state (i.e. positions and velocities) of the objects. It is typically applied before a MechanicalComputeDfVisitor, in order to compute the df corresponding to a given dx (i.e. apply stiffness). Dx is propagated to all the layers through the mappings. . Public Attributes; sofa::core::MultiVecDerivId dx;  ; bool ignoreFlag;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId dx, bool f=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Pu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:9039,Testability,test,testTags,9039,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor-members.html:348,Modifiability,inherit,inherited,348,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor-members.html:10935,Testability,test,testTags,10935,"e) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; xsofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:436,Modifiability,Inherit,Inheritance,436,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor Class Reference . #include <MechanicalPropagateOnlyPositionAndResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor:. [legend]; Detailed Description; Same as MechanicalPropagateOnlyPositionVisitor followed by MechanicalResetForceVisitor; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndResetForceVisitor. Use MechanicalProjectPositionVisitor before this visitor if projection is needed. . Public Attributes; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId f;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndResetForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId f);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:1038,Modifiability,inherit,inherited,1038,":mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor Class Reference . #include <MechanicalPropagateOnlyPositionAndResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor:. [legend]; Detailed Description; Same as MechanicalPropagateOnlyPositionVisitor followed by MechanicalResetForceVisitor; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndResetForceVisitor. Use MechanicalProjectPositionVisitor before this visitor if projection is needed. . Public Attributes; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId f;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndResetForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId f);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:2290,Modifiability,inherit,inherited,2290,":BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:2438,Modifiability,inherit,inherited,2438,":BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:8799,Modifiability,inherit,inherited,8799,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:10574,Modifiability,Inherit,Inherited,10574,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:10615,Modifiability,inherit,inherited,10615,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:10738,Modifiability,inherit,inherited,10738,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:10962,Modifiability,inherit,inherited,10962,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ f. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor::f. ◆ x. sofa::core:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:11074,Modifiability,inherit,inherited,11074,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ f. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor::f. ◆ x. sofa::core:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:11325,Modifiability,inherit,inherited,11325,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ f. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor::f. ◆ x. sofa::core:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:1182,Security,access,access,1182,"ti-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor Class Reference . #include <MechanicalPropagateOnlyPositionAndResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor:. [legend]; Detailed Description; Same as MechanicalPropagateOnlyPositionVisitor followed by MechanicalResetForceVisitor; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndResetForceVisitor. Use MechanicalProjectPositionVisitor before this visitor if projection is needed. . Public Attributes; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId f;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndResetForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId f);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; bool ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:9213,Testability,test,testTags,9213," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor-members.html:344,Modifiability,inherit,inherited,344,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor-members.html:11019,Testability,test,testTags,11019,"mulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitorinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vsofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; xsofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:887,Deployability,integrat,integration,887,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor Class Reference . #include <MechanicalPropagateOnlyPositionAndVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor:. [legend]; Detailed Description; Propagate positions and velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom. This action is typically applied after time integration of the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndVelocityVisitor. Use MechanicalProjectPositionAndVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:887,Integrability,integrat,integration,887,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor Class Reference . #include <MechanicalPropagateOnlyPositionAndVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor:. [legend]; Detailed Description; Propagate positions and velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom. This action is typically applied after time integration of the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndVelocityVisitor. Use MechanicalProjectPositionAndVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:430,Modifiability,Inherit,Inheritance,430,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor Class Reference . #include <MechanicalPropagateOnlyPositionAndVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor:. [legend]; Detailed Description; Propagate positions and velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom. This action is typically applied after time integration of the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndVelocityVisitor. Use MechanicalProjectPositionAndVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:1337,Modifiability,inherit,inherited,1337,"nlyPositionAndVelocityVisitor Class Reference . #include <MechanicalPropagateOnlyPositionAndVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor:. [legend]; Detailed Description; Propagate positions and velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom. This action is typically applied after time integration of the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndVelocityVisitor. Use MechanicalProjectPositionAndVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMap",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:2600,Modifiability,inherit,inherited,2600,"om the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:2748,Modifiability,inherit,inherited,2748,"om the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:9208,Modifiability,inherit,inherited,9208,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:10941,Modifiability,Inherit,Inherited,10941,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:10982,Modifiability,inherit,inherited,10982,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:11105,Modifiability,inherit,inherited,11105,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:11329,Modifiability,inherit,inherited,11329,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ currentTime. SReal sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor::currentTime. ◆ v. sofa::core::Mul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:11441,Modifiability,inherit,inherited,11441,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ currentTime. SReal sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor::currentTime. ◆ v. sofa::core::Mul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:11692,Modifiability,inherit,inherited,11692,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ currentTime. SReal sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor::currentTime. ◆ v. sofa::core::Mul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:1481,Security,access,access,1481,"::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor:. [legend]; Detailed Description; Propagate positions and velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom. This action is typically applied after time integration of the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndVelocityVisitor. Use MechanicalProjectPositionAndVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const overrid",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:9580,Testability,test,testTags,9580,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor-members.html:322,Modifiability,inherit,inherited,322,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor-members.html:10821,Testability,test,testTags,10821,"e *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitorinlinevirtual; subsetsToManagesofa::simulation::Visitor; tsofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; xsofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:397,Modifiability,Inherit,Inheritance,397,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor Class Reference . #include <MechanicalPropagateOnlyPositionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor:. [legend]; Detailed Description; Propagate positions to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionVisitor. Use MechanicalProjectPositionVisitor before this visitor if projection is needed. . Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId x;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:989,Modifiability,inherit,inherited,989,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor Class Reference . #include <MechanicalPropagateOnlyPositionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor:. [legend]; Detailed Description; Propagate positions to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionVisitor. Use MechanicalProjectPositionVisitor before this visitor if projection is needed. . Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId x;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:2185,Modifiability,inherit,inherited,2185,"om the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:2333,Modifiability,inherit,inherited,2333,"om the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:8793,Modifiability,inherit,inherited,8793,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:10526,Modifiability,Inherit,Inherited,10526,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:10567,Modifiability,inherit,inherited,10567,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:10690,Modifiability,inherit,inherited,10690,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:10914,Modifiability,inherit,inherited,10914,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ t. SReal sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor::t. ◆ x. sofa::core::MultiVecCoordId sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:11026,Modifiability,inherit,inherited,11026,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ t. SReal sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor::t. ◆ x. sofa::core::MultiVecCoordId sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:11277,Modifiability,inherit,inherited,11277,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ t. SReal sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor::t. ◆ x. sofa::core::MultiVecCoordId sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:1133,Security,access,access,1133,"a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor Class Reference . #include <MechanicalPropagateOnlyPositionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor:. [legend]; Detailed Description; Propagate positions to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionVisitor. Use MechanicalProjectPositionVisitor before this visitor if projection is needed. . Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId x;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this ac",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:9165,Testability,test,testTags,9165,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor-members.html:322,Modifiability,inherit,inherited,322,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor-members.html:10826,Testability,test,testTags,10826,"chanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitorinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vsofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:397,Modifiability,Inherit,Inheritance,397,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor Class Reference . #include <MechanicalPropagateOnlyVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor:. [legend]; Detailed Description; Propagate velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagateVelocityVisitor. Use MechanicalProjectVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:1128,Modifiability,inherit,inherited,1128,"7. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor Class Reference . #include <MechanicalPropagateOnlyVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor:. [legend]; Detailed Description; Propagate velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagateVelocityVisitor. Use MechanicalProjectVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassNa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:2319,Modifiability,inherit,inherited,2319,"om the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:2467,Modifiability,inherit,inherited,2467,"om the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:8927,Modifiability,inherit,inherited,8927,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:10660,Modifiability,Inherit,Inherited,10660,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:10701,Modifiability,inherit,inherited,10701,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:10824,Modifiability,inherit,inherited,10824,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:11048,Modifiability,inherit,inherited,11048,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ currentTime. SReal sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor::currentTime. ◆ v. sofa::core::MultiVecDerivI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:11160,Modifiability,inherit,inherited,11160,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ currentTime. SReal sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor::currentTime. ◆ v. sofa::core::MultiVecDerivI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:11411,Modifiability,inherit,inherited,11411,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ currentTime. SReal sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor::currentTime. ◆ v. sofa::core::MultiVecDerivI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:1272,Security,access,access,1272,"ation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor Class Reference . #include <MechanicalPropagateOnlyVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor:. [legend]; Detailed Description; Propagate velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagateVelocityVisitor. Use MechanicalProjectVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:9299,Testability,test,testTags,9299,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalResetConstraintVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalResetConstraintVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor-members.html:10405,Testability,test,testTags,10405,"virtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalResetConstraintVisitorinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:358,Modifiability,Inherit,Inheritance,358,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalResetConstraintVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalResetConstraintVisitor Class Reference . #include <MechanicalResetConstraintVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalResetConstraintVisitor:. [legend]. Public Member Functions;  MechanicalResetConstraintVisitor (const sofa::core::ConstraintParams *cparams);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *mm) override;  Process all the BaseConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTop",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:1369,Modifiability,inherit,inherited,1369,"behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *mm) override;  Process all the BaseConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual Result fwdMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:7811,Modifiability,inherit,inherited,7811,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:9586,Modifiability,Inherit,Inherited,9586,"ject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VCo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:9624,Modifiability,inherit,inherited,9624,"ject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VCo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:9825,Modifiability,inherit,inherited,9825,"rContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorTy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:10049,Modifiability,inherit,inherited,10049,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalResetConstraintVisitor(). sofa::simulation::mechanicalvisitor::MechanicalResetConstraintVisitor::MechanicalResetConstraintVisito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:10161,Modifiability,inherit,inherited,10161,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalResetConstraintVisitor(). sofa::simulation::mechanicalvisitor::MechanicalResetConstraintVisitor::MechanicalResetConstraintVisito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:10412,Modifiability,inherit,inherited,10412,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ MechanicalResetConstraintVisitor(). sofa::simulation::mechanicalvisitor::MechanicalResetConstraintVisitor::MechanicalResetConstraintVisito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:9768,Security,access,access,9768,"odel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:8225,Testability,test,testTags,8225," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor-members.html:300,Modifiability,inherit,inherited,300,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::BaseMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor-members.html:10478,Testability,test,testTags,10478,"(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:364,Modifiability,Inherit,Inheritance,364,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor Class Reference . #include <MechanicalResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor:. [legend]; Detailed Description; Reset the force in all the MechanicalModel This action is typically applied before accumulating all the forces. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool onlyMapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalResetForceVisitor (const sofa::core::ExecParams *mparams, sofa::core::MultiVecDerivId res, bool onlyMapped=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=dele",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:695,Modifiability,inherit,inherited,695,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor Class Reference . #include <MechanicalResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor:. [legend]; Detailed Description; Reset the force in all the MechanicalModel This action is typically applied before accumulating all the forces. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool onlyMapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalResetForceVisitor (const sofa::core::ExecParams *mparams, sofa::core::MultiVecDerivId res, bool onlyMapped=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=dele",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:1629,Modifiability,inherit,inherited,1629,"a::core::ExecParams *mparams, sofa::core::MultiVecDerivId res, bool onlyMapped=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:8308,Modifiability,inherit,inherited,8308,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:10041,Modifiability,Inherit,Inherited,10041,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:10082,Modifiability,inherit,inherited,10082,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:10306,Modifiability,inherit,inherited,10306,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ onlyMapped. bool sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor::onlyMapped. ◆ res. sofa::core::MultiVecDerivId sofa::simu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:10418,Modifiability,inherit,inherited,10418,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ onlyMapped. bool sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor::onlyMapped. ◆ res. sofa::core::MultiVecDerivId sofa::simu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:10669,Modifiability,inherit,inherited,10669,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ onlyMapped. bool sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor::onlyMapped. ◆ res. sofa::core::MultiVecDerivId sofa::simu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:839,Security,access,access,839,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor Class Reference . #include <MechanicalResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor:. [legend]; Detailed Description; Reset the force in all the MechanicalModel This action is typically applied before accumulating all the forces. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool onlyMapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalResetForceVisitor (const sofa::core::ExecParams *mparams, sofa::core::MultiVecDerivId res, bool onlyMapped=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=dele",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:8680,Testability,test,testTags,8680,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor-members.html:324,Modifiability,inherit,inherited,324,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor-members.html:10685,Testability,test,testTags,10685,"mulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; tsofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vsofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; xsofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:513,Modifiability,Inherit,Inheritance,513,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor Class Reference . #include <MechanicalSetPositionAndVelocityVisitor.h>; Visitor class used to set positions and velocities of the top level MechanicalStates of the hierarchy. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor:. [legend]; Detailed Description; Visitor class used to set positions and velocities of the top level MechanicalStates of the hierarchy. . Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalSetPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virt",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:871,Modifiability,inherit,inherited,871,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor Class Reference . #include <MechanicalSetPositionAndVelocityVisitor.h>; Visitor class used to set positions and velocities of the top level MechanicalStates of the hierarchy. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor:. [legend]; Detailed Description; Visitor class used to set positions and velocities of the top level MechanicalStates of the hierarchy. . Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalSetPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virt",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:1727,Modifiability,inherit,inherited,1727,"sitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:1875,Modifiability,inherit,inherited,1875,"sitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:8745,Modifiability,inherit,inherited,8745,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:10478,Modifiability,Inherit,Inherited,10478,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:10519,Modifiability,inherit,inherited,10519,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:10642,Modifiability,inherit,inherited,10642,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:10866,Modifiability,inherit,inherited,10866,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ t. SReal sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor::t. ◆ v. sofa::core::MultiVecDerivId sofa::simulation:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:10978,Modifiability,inherit,inherited,10978,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ t. SReal sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor::t. ◆ v. sofa::core::MultiVecDerivId sofa::simulation:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:11229,Modifiability,inherit,inherited,11229,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ t. SReal sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor::t. ◆ v. sofa::core::MultiVecDerivId sofa::simulation:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:1015,Security,access,access,1015,"OFA API: sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor Class Reference . #include <MechanicalSetPositionAndVelocityVisitor.h>; Visitor class used to set positions and velocities of the top level MechanicalStates of the hierarchy. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor:. [legend]; Detailed Description; Visitor class used to set positions and velocities of the top level MechanicalStates of the hierarchy. . Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalSetPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:9117,Testability,test,testTags,9117,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype > Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype >, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor-members.html:10464,Testability,test,testTags,10464,"mulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vsofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype >; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:388,Modifiability,Inherit,Inheritance,388,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype > Class Template Reference . #include <MechanicalVAllocVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype >; Reserve an auxiliary vector identified by a symbolic constant. . Public Attributes; MyMultiVecId v;  ; const core::VecIdProperties & m_properties;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAllocVisitor (const sofa::core::ExecParams *params, MyMultiVecId v, const core::VecIdProperties &properties={});  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:799,Modifiability,inherit,inherited,799,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype > Class Template Reference . #include <MechanicalVAllocVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype >; Reserve an auxiliary vector identified by a symbolic constant. . Public Attributes; MyMultiVecId v;  ; const core::VecIdProperties & m_properties;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAllocVisitor (const sofa::core::ExecParams *params, MyMultiVecId v, const core::VecIdProperties &properties={});  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:1546,Modifiability,inherit,inherited,1546,"ToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAllocVisitor (const sofa::core::ExecParams *params, MyMultiVecId v, const core::VecIdProperties &properties={});  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:8416,Modifiability,inherit,inherited,8416,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:10149,Modifiability,Inherit,Inherited,10149,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:10190,Modifiability,inherit,inherited,10190,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:10414,Modifiability,inherit,inherited,10414,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_properties. template<sofa::core::VecType vtype> . const core::VecIdProperties& sofa::simulation::mechanicalvisitor::MechanicalVAllocVisito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:10526,Modifiability,inherit,inherited,10526,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_properties. template<sofa::core::VecType vtype> . const core::VecIdProperties& sofa::simulation::mechanicalvisitor::MechanicalVAllocVisito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:10777,Modifiability,inherit,inherited,10777,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_properties. template<sofa::core::VecType vtype> . const core::VecIdProperties& sofa::simulation::mechanicalvisitor::MechanicalVAllocVisito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:943,Security,access,access,943,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype > Class Template Reference . #include <MechanicalVAllocVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype >; Reserve an auxiliary vector identified by a symbolic constant. . Public Attributes; MyMultiVecId v;  ; const core::VecIdProperties & m_properties;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAllocVisitor (const sofa::core::ExecParams *params, MyMultiVecId v, const core::VecIdProperties &properties={});  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:8788,Testability,test,testTags,8788,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor-members.html:10583,Testability,test,testTags,10583,"imulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; statessofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >; StateSet typedefsofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vsofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:645,Availability,avail,available,645,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Class Template Reference . #include <MechanicalVAvailVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >; Find the first available index for a VecId . Public Attributes; MyVecId & v;  ; StateSet states;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAvailVisitor (const sofa::core::ExecParams *params, MyVecId &v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:388,Modifiability,Inherit,Inheritance,388,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Class Template Reference . #include <MechanicalVAvailVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >; Find the first available index for a VecId . Public Attributes; MyVecId & v;  ; StateSet states;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAvailVisitor (const sofa::core::ExecParams *params, MyVecId &v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:749,Modifiability,inherit,inherited,749,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Class Template Reference . #include <MechanicalVAvailVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >; Find the first available index for a VecId . Public Attributes; MyVecId & v;  ; StateSet states;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAvailVisitor (const sofa::core::ExecParams *params, MyVecId &v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:1448,Modifiability,inherit,inherited,1448,"d from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAvailVisitor (const sofa::core::ExecParams *params, MyVecId &v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:8318,Modifiability,inherit,inherited,8318,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:10051,Modifiability,Inherit,Inherited,10051,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:10092,Modifiability,inherit,inherited,10092,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:10316,Modifiability,inherit,inherited,10316,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ states. template<sofa::core::VecType vtype> . StateSet sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >::states. ◆ v. t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:10428,Modifiability,inherit,inherited,10428,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ states. template<sofa::core::VecType vtype> . StateSet sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >::states. ◆ v. t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:10679,Modifiability,inherit,inherited,10679,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ states. template<sofa::core::VecType vtype> . StateSet sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >::states. ◆ v. t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:893,Security,access,access,893,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Class Template Reference . #include <MechanicalVAvailVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >; Find the first available index for a VecId . Public Attributes; MyVecId & v;  ; StateSet states;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAvailVisitor (const sofa::core::ExecParams *params, MyVecId &v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:8690,Testability,test,testTags,8690,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor-members.html:288,Modifiability,inherit,inherited,288,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor, including all inherited members. asofa::simulation::mechanicalvisitor::MechanicalVDotVisitor; addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; bsofa::simulation::mechanicalvisitor::MechanicalVDotVisitor; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor-members.html:10410,Testability,test,testTags,10410,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:346,Modifiability,Inherit,Inheritance,346,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor Class Reference . #include <MechanicalVDotVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor:. [legend]; Detailed Description; Compute the dot product of two vectors . Public Attributes; sofa::core::ConstMultiVecId a;  ; sofa::core::ConstMultiVecId b;  ; SReal *const m_total { nullptr };  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVDotVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, sofa::core::ConstMultiVecId b, SReal *t);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:647,Modifiability,inherit,inherited,647,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor Class Reference . #include <MechanicalVDotVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor:. [legend]; Detailed Description; Compute the dot product of two vectors . Public Attributes; sofa::core::ConstMultiVecId a;  ; sofa::core::ConstMultiVecId b;  ; SReal *const m_total { nullptr };  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVDotVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, sofa::core::ConstMultiVecId b, SReal *t);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:1397,Modifiability,inherit,inherited,1397,"anage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVDotVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, sofa::core::ConstMultiVecId b, SReal *t);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:8264,Modifiability,inherit,inherited,8264,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:9997,Modifiability,Inherit,Inherited,9997,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:10038,Modifiability,inherit,inherited,10038,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:10262,Modifiability,inherit,inherited,10262,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::ConstMultiVecId sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor::a. ◆ b. sofa::core::ConstMultiVecId sofa::simulat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:10374,Modifiability,inherit,inherited,10374,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::ConstMultiVecId sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor::a. ◆ b. sofa::core::ConstMultiVecId sofa::simulat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:10625,Modifiability,inherit,inherited,10625,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::ConstMultiVecId sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor::a. ◆ b. sofa::core::ConstMultiVecId sofa::simulat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:791,Security,access,access,791,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor Class Reference . #include <MechanicalVDotVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor:. [legend]; Detailed Description; Compute the dot product of two vectors . Public Attributes; sofa::core::ConstMultiVecId a;  ; sofa::core::ConstMultiVecId b;  ; SReal *const m_total { nullptr };  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVDotVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, sofa::core::ConstMultiVecId b, SReal *t);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:8636,Testability,test,testTags,8636,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor-members.html:308,Modifiability,inherit,inherited,308,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype > Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor-members.html:10714,Testability,test,testTags,10714,"processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; propagatesofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vsofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:385,Modifiability,Inherit,Inheritance,385,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype > Class Template Reference . #include <MechanicalVFreeVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >; Free an auxiliary vector identified by a symbolic constant . Public Attributes; MyMultiVecId v;  ; bool interactionForceField;  ; bool propagate;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVFreeVisitor (const sofa::core::ExecParams *params, MyMultiVecId v, bool interactionForceField=false, bool propagate=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdInteractionForceField (simulation::Node *node, sofa::core::behavior::BaseInteractionForceField *ff) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:793,Modifiability,inherit,inherited,793,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype > Class Template Reference . #include <MechanicalVFreeVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >; Free an auxiliary vector identified by a symbolic constant . Public Attributes; MyMultiVecId v;  ; bool interactionForceField;  ; bool propagate;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVFreeVisitor (const sofa::core::ExecParams *params, MyMultiVecId v, bool interactionForceField=false, bool propagate=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdInteractionForceField (simulation::Node *node, sofa::core::behavior::BaseInteractionForceField *ff) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:1909,Modifiability,inherit,inherited,1909,"lState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdInteractionForceField (simulation::Node *node, sofa::core::behavior::BaseInteractionForceField *ff) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:8417,Modifiability,inherit,inherited,8417,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:10150,Modifiability,Inherit,Inherited,10150,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:10191,Modifiability,inherit,inherited,10191,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:10415,Modifiability,inherit,inherited,10415,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ interactionForceField. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >::inte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:10527,Modifiability,inherit,inherited,10527,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ interactionForceField. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >::inte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:10778,Modifiability,inherit,inherited,10778,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ interactionForceField. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >::inte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:937,Security,access,access,937,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype > Class Template Reference . #include <MechanicalVFreeVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >; Free an auxiliary vector identified by a symbolic constant . Public Attributes; MyMultiVecId v;  ; bool interactionForceField;  ; bool propagate;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVFreeVisitor (const sofa::core::ExecParams *params, MyMultiVecId v, bool interactionForceField=false, bool propagate=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdInteractionForceField (simulation::Node *node, sofa::core::behavior::BaseInteractionForceField *ff) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:8789,Testability,test,testTags,8789,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor-members.html:308,Modifiability,inherit,inherited,308,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype > Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor-members.html:10704,Testability,test,testTags,10704,"NodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; SrcMultiVecId typedefsofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >inlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vDestsofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; vSrcsofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:385,Modifiability,Inherit,Inheritance,385,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype > Class Template Reference . #include <MechanicalVInitVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >; Initialize unset MState destVecId vectors with srcVecId vectors value. . Public Attributes; DestMultiVecId vDest;  ; SrcMultiVecId vSrc;  ; bool m_propagate;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVInitVisitor (const sofa::core::ExecParams *params, DestMultiVecId _vDest, SrcMultiVecId _vSrc=SrcMultiVecId::null(), bool propagate=false);  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; Result fwdMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool rea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:805,Modifiability,inherit,inherited,805,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype > Class Template Reference . #include <MechanicalVInitVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >; Initialize unset MState destVecId vectors with srcVecId vectors value. . Public Attributes; DestMultiVecId vDest;  ; SrcMultiVecId vSrc;  ; bool m_propagate;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVInitVisitor (const sofa::core::ExecParams *params, DestMultiVecId _vDest, SrcMultiVecId _vSrc=SrcMultiVecId::null(), bool propagate=false);  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; Result fwdMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool rea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:1863,Modifiability,inherit,inherited,1863,"Id::null(), bool propagate=false);  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; Result fwdMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual Result fwdMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:8450,Modifiability,inherit,inherited,8450,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:10183,Modifiability,Inherit,Inherited,10183,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:10224,Modifiability,inherit,inherited,10224,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:10448,Modifiability,inherit,inherited,10448,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_propagate. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >::m_propagate. ◆",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:10560,Modifiability,inherit,inherited,10560,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_propagate. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >::m_propagate. ◆",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:10811,Modifiability,inherit,inherited,10811,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_propagate. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >::m_propagate. ◆",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:949,Security,access,access,949,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype > Class Template Reference . #include <MechanicalVInitVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >; Initialize unset MState destVecId vectors with srcVecId vectors value. . Public Attributes; DestMultiVecId vDest;  ; SrcMultiVecId vSrc;  ; bool m_propagate;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVInitVisitor (const sofa::core::ExecParams *params, DestMultiVecId _vDest, SrcMultiVecId _vSrc=SrcMultiVecId::null(), bool propagate=false);  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; Result fwdMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool rea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:8822,Testability,test,testTags,8822,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor-members.html:296,Modifiability,inherit,inherited,296,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechan",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor-members.html:10605,Testability,test,testTags,10605,"orvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setMapped(bool m=true)sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitorinline; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; setVMultiOp(VMultiOp &o)sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; VMultiOp typedefsofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:382,Modifiability,Inherit,Inheritance,382,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference . #include <MechanicalVMultiOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor:. [legend]; Detailed Description; Perform a sequence of linear vector accumulation operation $r_i = sum_j (v_j*f_{ij}); This is used to compute in on steps operations such as $v = v + a*dt, x = x + v*dt$. Note that if the result vector appears inside the expression, it must be the first operand. . Public Attributes; bool mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; VMultiOp ops;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVMultiOpVisitor (const sofa::core::ExecParams *params, const VMultiOp &o);  ; MechanicalVMultiOpVisitor & setMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getIn",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:822,Modifiability,inherit,inherited,822,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference . #include <MechanicalVMultiOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor:. [legend]; Detailed Description; Perform a sequence of linear vector accumulation operation $r_i = sum_j (v_j*f_{ij}); This is used to compute in on steps operations such as $v = v + a*dt, x = x + v*dt$. Note that if the result vector appears inside the expression, it must be the first operand. . Public Attributes; bool mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; VMultiOp ops;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVMultiOpVisitor (const sofa::core::ExecParams *params, const VMultiOp &o);  ; MechanicalVMultiOpVisitor & setMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getIn",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:1062,Modifiability,inherit,inherited,1062,"FA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference . #include <MechanicalVMultiOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor:. [legend]; Detailed Description; Perform a sequence of linear vector accumulation operation $r_i = sum_j (v_j*f_{ij}); This is used to compute in on steps operations such as $v = v + a*dt, x = x + v*dt$. Note that if the result vector appears inside the expression, it must be the first operand. . Public Attributes; bool mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; VMultiOp ops;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVMultiOpVisitor (const sofa::core::ExecParams *params, const VMultiOp &o);  ; MechanicalVMultiOpVisitor & setMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can b",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:1286,Modifiability,inherit,inherited,1286,"OpVisitor Class Reference . #include <MechanicalVMultiOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor:. [legend]; Detailed Description; Perform a sequence of linear vector accumulation operation $r_i = sum_j (v_j*f_{ij}); This is used to compute in on steps operations such as $v = v + a*dt, x = x + v*dt$. Note that if the result vector appears inside the expression, it must be the first operand. . Public Attributes; bool mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; VMultiOp ops;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVMultiOpVisitor (const sofa::core::ExecParams *params, const VMultiOp &o);  ; MechanicalVMultiOpVisitor & setMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; void setVMultiOp (VMultiOp &o);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtua",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:2186,Modifiability,inherit,inherited,2186,"o);  ; MechanicalVMultiOpVisitor & setMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; void setVMultiOp (VMultiOp &o);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:8859,Modifiability,inherit,inherited,8859,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:10592,Modifiability,Inherit,Inherited,10592,"ame PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ mapped. bool sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor::mapped. ◆ ops. VMultiOp sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor::ops. protected ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:10639,Modifiability,inherit,inherited,10639,"ame PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ mapped. bool sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor::mapped. ◆ ops. VMultiOp sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor::ops. protected ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:10890,Modifiability,inherit,inherited,10890,"ame PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ mapped. bool sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor::mapped. ◆ ops. VMultiOp sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor::ops. protected ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:503,Performance,Perform,Perform,503,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference . #include <MechanicalVMultiOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor:. [legend]; Detailed Description; Perform a sequence of linear vector accumulation operation $r_i = sum_j (v_j*f_{ij}); This is used to compute in on steps operations such as $v = v + a*dt, x = x + v*dt$. Note that if the result vector appears inside the expression, it must be the first operand. . Public Attributes; bool mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; VMultiOp ops;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVMultiOpVisitor (const sofa::core::ExecParams *params, const VMultiOp &o);  ; MechanicalVMultiOpVisitor & setMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getIn",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:966,Security,access,access,966,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference . #include <MechanicalVMultiOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor:. [legend]; Detailed Description; Perform a sequence of linear vector accumulation operation $r_i = sum_j (v_j*f_{ij}); This is used to compute in on steps operations such as $v = v + a*dt, x = x + v*dt$. Note that if the result vector appears inside the expression, it must be the first operand. . Public Attributes; bool mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; VMultiOp ops;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVMultiOpVisitor (const sofa::core::ExecParams *params, const VMultiOp &o);  ; MechanicalVMultiOpVisitor & setMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getIn",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:9231,Testability,test,testTags,9231,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor-members.html:290,Modifiability,inherit,inherited,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor, including all inherited members. asofa::simulation::mechanicalvisitor::MechanicalVNormVisitor; addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalSt",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor-members.html:10402,Testability,test,testTags,10402,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:595,Energy Efficiency,efficient,efficiently,595,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference . #include <MechanicalVNormVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor:. [legend]; Detailed Description; Compute the norm of a vector. The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. AuthorFrancois Faure, 2013 . Public Attributes; sofa::core::ConstMultiVecId a;  ; unsigned l;  Type of norm: for l>0, , while we use l=0 for the infinite norm: . More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVNormVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, unsigned l);  ; SReal getResult () const;  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:349,Modifiability,Inherit,Inheritance,349,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference . #include <MechanicalVNormVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor:. [legend]; Detailed Description; Compute the norm of a vector. The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. AuthorFrancois Faure, 2013 . Public Attributes; sofa::core::ConstMultiVecId a;  ; unsigned l;  Type of norm: for l>0, , while we use l=0 for the infinite norm: . More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVNormVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, unsigned l);  ; SReal getResult () const;  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:851,Modifiability,inherit,inherited,851,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference . #include <MechanicalVNormVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor:. [legend]; Detailed Description; Compute the norm of a vector. The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. AuthorFrancois Faure, 2013 . Public Attributes; sofa::core::ConstMultiVecId a;  ; unsigned l;  Type of norm: for l>0, , while we use l=0 for the infinite norm: . More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVNormVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, unsigned l);  ; SReal getResult () const;  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:1610,Modifiability,inherit,inherited,1610,"ist of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVNormVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, unsigned l);  ; SReal getResult () const;  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:8477,Modifiability,inherit,inherited,8477,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:10210,Modifiability,Inherit,Inherited,10210,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:10251,Modifiability,inherit,inherited,10251,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:10475,Modifiability,inherit,inherited,10475,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::ConstMultiVecId sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor::a. ◆ l. unsigned sofa::simulation::mechanicalvis",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:10587,Modifiability,inherit,inherited,10587,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::ConstMultiVecId sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor::a. ◆ l. unsigned sofa::simulation::mechanicalvis",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:10838,Modifiability,inherit,inherited,10838,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::ConstMultiVecId sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor::a. ◆ l. unsigned sofa::simulation::mechanicalvis",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:995,Security,access,access,995,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference . #include <MechanicalVNormVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor:. [legend]; Detailed Description; Compute the norm of a vector. The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. AuthorFrancois Faure, 2013 . Public Attributes; sofa::core::ConstMultiVecId a;  ; unsigned l;  Type of norm: for l>0, , while we use l=0 for the infinite norm: . More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVNormVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, unsigned l);  ; SReal getResult () const;  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:8849,Testability,test,testTags,8849,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor-members.html:286,Modifiability,inherit,inherited,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor, including all inherited members. asofa::simulation::mechanicalvisitor::MechanicalVOpVisitor; addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; bsofa::simulation::mechanicalvisitor::MechanicalVOpVisitor; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::sim",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor-members.html:10902,Testability,test,testTags,10902,"torvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setMapped(bool m=true)sofa::simulation::mechanicalvisitor::MechanicalVOpVisitorinline; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setOnlyMapped(bool m=true)sofa::simulation::mechanicalvisitor::MechanicalVOpVisitorinline; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalVOpVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vsofa::simulation::mechanicalvisitor::MechanicalVOpVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:343,Modifiability,Inherit,Inheritance,343,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Class Reference . #include <MechanicalVOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor:. [legend]; Detailed Description; Perform a vector operation v=a+b*f . Public Attributes; sofa::core::MultiVecId v;  ; sofa::core::ConstMultiVecId a;  ; sofa::core::ConstMultiVecId b;  ; SReal f;  ; bool mapped;  ; bool only_mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVOpVisitor (const sofa::core::ExecParams *params, sofa::core::MultiVecId v, sofa::core::ConstMultiVecId a=sofa::core::ConstMultiVecId::null(), sofa::core::ConstMultiVecId b=sofa::core::ConstMultiVecId::null(), SReal f=1.0);  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; MechanicalVOpVisitor & setMapped (bool m=true);  ; MechanicalVOpVisitor & setOnlyMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:680,Modifiability,inherit,inherited,680,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Class Reference . #include <MechanicalVOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor:. [legend]; Detailed Description; Perform a vector operation v=a+b*f . Public Attributes; sofa::core::MultiVecId v;  ; sofa::core::ConstMultiVecId a;  ; sofa::core::ConstMultiVecId b;  ; SReal f;  ; bool mapped;  ; bool only_mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVOpVisitor (const sofa::core::ExecParams *params, sofa::core::MultiVecId v, sofa::core::ConstMultiVecId a=sofa::core::ConstMultiVecId::null(), sofa::core::ConstMultiVecId b=sofa::core::ConstMultiVecId::null(), SReal f=1.0);  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; MechanicalVOpVisitor & setMapped (bool m=true);  ; MechanicalVOpVisitor & setOnlyMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:1924,Modifiability,inherit,inherited,1924,"eMapping *map) override;  ; MechanicalVOpVisitor & setMapped (bool m=true);  ; MechanicalVOpVisitor & setOnlyMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual Result fwdMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:8505,Modifiability,inherit,inherited,8505,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:10238,Modifiability,Inherit,Inherited,10238,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:10279,Modifiability,inherit,inherited,10279,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:10503,Modifiability,inherit,inherited,10503,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::ConstMultiVecId sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor::a. ◆ b. sofa::core::ConstMultiVecId sofa::simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:10615,Modifiability,inherit,inherited,10615,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::ConstMultiVecId sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor::a. ◆ b. sofa::core::ConstMultiVecId sofa::simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:10866,Modifiability,inherit,inherited,10866,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::ConstMultiVecId sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor::a. ◆ b. sofa::core::ConstMultiVecId sofa::simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:459,Performance,Perform,Perform,459,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Class Reference . #include <MechanicalVOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor:. [legend]; Detailed Description; Perform a vector operation v=a+b*f . Public Attributes; sofa::core::MultiVecId v;  ; sofa::core::ConstMultiVecId a;  ; sofa::core::ConstMultiVecId b;  ; SReal f;  ; bool mapped;  ; bool only_mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVOpVisitor (const sofa::core::ExecParams *params, sofa::core::MultiVecId v, sofa::core::ConstMultiVecId a=sofa::core::ConstMultiVecId::null(), sofa::core::ConstMultiVecId b=sofa::core::ConstMultiVecId::null(), SReal f=1.0);  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; MechanicalVOpVisitor & setMapped (bool m=true);  ; MechanicalVOpVisitor & setOnlyMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:824,Security,access,access,824,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Class Reference . #include <MechanicalVOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor:. [legend]; Detailed Description; Perform a vector operation v=a+b*f . Public Attributes; sofa::core::MultiVecId v;  ; sofa::core::ConstMultiVecId a;  ; sofa::core::ConstMultiVecId b;  ; SReal f;  ; bool mapped;  ; bool only_mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVOpVisitor (const sofa::core::ExecParams *params, sofa::core::MultiVecId v, sofa::core::ConstMultiVecId a=sofa::core::ConstMultiVecId::null(), sofa::core::ConstMultiVecId b=sofa::core::ConstMultiVecId::null(), SReal f=1.0);  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; MechanicalVOpVisitor & setMapped (bool m=true);  ; MechanicalVOpVisitor & setOnlyMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:8877,Testability,test,testTags,8877,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor-members.html:314,Modifiability,inherit,inherited,314,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype > Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::be",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor-members.html:11165,Testability,test,testTags,11165,"::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >inlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vsofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:424,Modifiability,Inherit,Inheritance,424,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype > Class Template Reference . #include <MechanicalVReallocVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >; Reserve an auxiliary vector identified by a symbolic constant. . Public Attributes; DestMultiVecId * v;  ; bool m_propagate;  ; bool m_interactionForceField;  ; const core::VecIdProperties & m_properties;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVReallocVisitor (const sofa::core::ExecParams *params, DestMultiVecId *v, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={});  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; Result fwdMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdInteractionForceField (simulation::Node *node, sofa::core::behavior::BaseInteractionForceField *ff) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; std::st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:897,Modifiability,inherit,inherited,897,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype > Class Template Reference . #include <MechanicalVReallocVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >; Reserve an auxiliary vector identified by a symbolic constant. . Public Attributes; DestMultiVecId * v;  ; bool m_propagate;  ; bool m_interactionForceField;  ; const core::VecIdProperties & m_properties;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVReallocVisitor (const sofa::core::ExecParams *params, DestMultiVecId *v, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={});  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; Result fwdMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdInteractionForceField (simulation::Node *node, sofa::core::behavior::BaseInteractionForceField *ff) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; std::st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:2161,Modifiability,inherit,inherited,2161,"*node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdInteractionForceField (simulation::Node *node, sofa::core::behavior::BaseInteractionForceField *ff) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual Result fwdMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:8577,Modifiability,inherit,inherited,8577,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:10421,Modifiability,inherit,inherited,10421,"ult for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Protected Member Functions; MyVecId getId (sofa::core::behavior::BaseMechanicalState *mm);  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor wa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:10672,Modifiability,inherit,inherited,10672,"ult for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Protected Member Functions; MyVecId getId (sofa::core::behavior::BaseMechanicalState *mm);  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor wa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:11970,Modifiability,Inherit,Inherited,11970,"ype *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Attribute details. ◆ m_interactionForceField. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::m_interactionForceField. ◆ m_propagate. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::m_propagate. ◆ m_properties. template<sofa::core::VecType vtype> . const core::VecIdProperties& sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::m_properties. ◆ v. template<sofa::core::VecType vtype> . DestMultiVecId* sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::v. Constructor details. ◆ MechanicalVReallocVisitor(). template<sofa::core::VecType vtype> . sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:12011,Modifiability,inherit,inherited,12011,"ype *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Attribute details. ◆ m_interactionForceField. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::m_interactionForceField. ◆ m_propagate. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::m_propagate. ◆ m_properties. template<sofa::core::VecType vtype> . const core::VecIdProperties& sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::m_properties. ◆ v. template<sofa::core::VecType vtype> . DestMultiVecId* sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::v. Constructor details. ◆ MechanicalVReallocVisitor(). template<sofa::core::VecType vtype> . sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:12235,Modifiability,inherit,inherited,12235,"ask)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Attribute details. ◆ m_interactionForceField. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::m_interactionForceField. ◆ m_propagate. template<sofa::core::VecType vtype> . bool sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::m_propagate. ◆ m_properties. template<sofa::core::VecType vtype> . const core::VecIdProperties& sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::m_properties. ◆ v. template<sofa::core::VecType vtype> . DestMultiVecId* sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::v. Constructor details. ◆ MechanicalVReallocVisitor(). template<sofa::core::VecType vtype> . sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >::MechanicalVReallocVisitor ; (; const sofa::core::ExecParams * ; params, . DestMultiVecId * ; v, . bool ; interactionForceField = false, . bool ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:1041,Security,access,access,1041,":mechanicalvisitor::MechanicalVReallocVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype > Class Template Reference . #include <MechanicalVReallocVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >; Reserve an auxiliary vector identified by a symbolic constant. . Public Attributes; DestMultiVecId * v;  ; bool m_propagate;  ; bool m_interactionForceField;  ; const core::VecIdProperties & m_properties;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVReallocVisitor (const sofa::core::ExecParams *params, DestMultiVecId *v, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={});  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; Result fwdMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdInteractionForceField (simulation::Node *node, sofa::core::behavior::BaseInteractionForceField *ff) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const overri",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:8949,Testability,test,testTags,8949,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor-members.html:290,Modifiability,inherit,inherited,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalSt",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor-members.html:10345,Testability,test,testTags,10345,"nicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; resultsofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vsofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:349,Modifiability,Inherit,Inheritance,349,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor Class Reference . #include <MechanicalVSizeVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor:. [legend]; Detailed Description; Get vector size . Public Attributes; sofa::core::ConstMultiVecId v;  ; size_t * result;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVSizeVisitor (const sofa::core::ExecParams *params, size_t *result, sofa::core::ConstMultiVecId v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:577,Modifiability,inherit,inherited,577,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor Class Reference . #include <MechanicalVSizeVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor:. [legend]; Detailed Description; Get vector size . Public Attributes; sofa::core::ConstMultiVecId v;  ; size_t * result;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVSizeVisitor (const sofa::core::ExecParams *params, size_t *result, sofa::core::ConstMultiVecId v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:1496,Modifiability,inherit,inherited,1496,"(const sofa::core::ExecParams *params, size_t *result, sofa::core::ConstMultiVecId v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:8175,Modifiability,inherit,inherited,8175,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:9908,Modifiability,Inherit,Inherited,9908,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:9949,Modifiability,inherit,inherited,9949,";  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:10173,Modifiability,inherit,inherited,10173,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ result. size_t* sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor::result. ◆ v. sofa::core::ConstMultiVecId sofa::simulation::mech",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:10285,Modifiability,inherit,inherited,10285,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ result. size_t* sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor::result. ◆ v. sofa::core::ConstMultiVecId sofa::simulation::mech",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:10536,Modifiability,inherit,inherited,10536,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ result. size_t* sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor::result. ◆ v. sofa::core::ConstMultiVecId sofa::simulation::mech",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:721,Security,access,access,721,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor Class Reference . #include <MechanicalVSizeVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor:. [legend]; Detailed Description; Get vector size . Public Attributes; sofa::core::ConstMultiVecId v;  ; size_t * result;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVSizeVisitor (const sofa::core::ExecParams *params, size_t *result, sofa::core::ConstMultiVecId v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:8547,Testability,test,testTags,8547,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html:1618,Availability,error,errorssofa,1618,"rited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::AttributeElement; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::xml::AttributeElement Member List . This is the complete list of members for sofa::simulation::xml::AttributeElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::AttributeElement; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::cor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html:3715,Testability,log,logError,3715,"irtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< core::objectmodel::BaseObject >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< core::objectmodel::BaseObject >; getValue() constsofa::simulation::xml::AttributeElementinline; init() overridesofa::simulation::xml::AttributeElementvirtual; initNode() overridesofa::simulation::xml::AttributeElementvirtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::BaseElementinline; setName(const std::s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html:3806,Testability,log,logErrors,3806,"sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< core::objectmodel::BaseObject >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< core::objectmodel::BaseObject >; getValue() constsofa::simulation::xml::AttributeElementinline; init() overridesofa::simulation::xml::AttributeElementvirtual; initNode() overridesofa::simulation::xml::AttributeElementvirtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::BaseElementinline; setName(const std::string &newName) overridesofa::simulation::xml::BaseElementinlinevirtual; setObject(typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html:1063,Usability,clear,clearErrors,1063,"rited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::AttributeElement; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:5435,Availability,error,errors,5435,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ AttributeElement(). sofa::simulation::xml::AttributeElement::AttributeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~AttributeElement(). sofa::simulation::xml::AttributeElement::~AttributeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::AttributeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:282,Modifiability,Inherit,Inheritance,282,"﻿. SOFA API: sofa::simulation::xml::AttributeElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::xml::AttributeElement Class Reference . #include <AttributeElement.h>. Inheritance diagram for sofa::simulation::xml::AttributeElement:. [legend]. Public Member Functions;  AttributeElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~AttributeElement () override;  ; bool init () override;  ; bool initNode () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ; void setValue (const std::string _value);  ; const std::string & getValue () const;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description w",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:791,Modifiability,inherit,inherited,791,"﻿. SOFA API: sofa::simulation::xml::AttributeElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::xml::AttributeElement Class Reference . #include <AttributeElement.h>. Inheritance diagram for sofa::simulation::xml::AttributeElement:. [legend]. Public Member Functions;  AttributeElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~AttributeElement () override;  ; bool init () override;  ; bool initNode () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ; void setValue (const std::string _value);  ; const std::string & getValue () const;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description w",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:1228,Modifiability,inherit,inherited,1228,"buteElement:. [legend]. Public Member Functions;  AttributeElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~AttributeElement () override;  ; bool init () override;  ; bool initNode () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ; void setValue (const std::string _value);  ; const std::string & getValue () const;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::string & getSrcFile () const;  ; virtual void setSrcFile (const std::string &newSrcFile);  ; int getSrcLine () const;  ; virtual void setSrcLine (const int l);  ; bool isFileRoot ();  Return true",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:3818,Modifiability,inherit,inherited,3818,"this attribute is ""name"" or ""type"". More...;  ; virtual void addReplaceAttribute (const std::string &attr, const char *val);  List of parameters to be replaced. More...;  ; virtual BaseElement * findNode (const char *nodeName, bool absolute=false);  Find a node given its name. More...;  ; BaseObjectDescription * find (const char *nodeName, bool absolute=false) override;  Find a node given its name. More...;  ; template<class Sequence > ; void pushObjects (Sequence &result);  Get all objects of a given type. More...;  ; template<class Map > ; void pushNamedObjects (Map &result);  Get all objects of a given type. More...;  ; virtual bool addChild (BaseElement *child);  ; virtual bool removeChild (BaseElement *child);  ; template<class Node > ; child_iterator< Node > begin ();  ; child_iterator< BaseElement > begin ();  ; template<class Node > ; child_iterator< Node > end ();  ; child_iterator< BaseElement > end ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObjectDescription;  BaseObjectDescription (const char *name=nullptr, const char *type=nullptr);  ; virtual ~BaseObjectDescription ();  ; virtual const AttributeMap & getAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. conca",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:5145,Modifiability,Inherit,Inherited,5145,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ AttributeElement(). sofa::simulation::xml::AttributeElement::AttributeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~AttributeElement(). sofa::simulation::xml::AttributeElement::~AttributeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::AttributeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:5186,Modifiability,inherit,inherited,5186,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ AttributeElement(). sofa::simulation::xml::AttributeElement::AttributeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~AttributeElement(). sofa::simulation::xml::AttributeElement::~AttributeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::AttributeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:5317,Modifiability,inherit,inherited,5317,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ AttributeElement(). sofa::simulation::xml::AttributeElement::AttributeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~AttributeElement(). sofa::simulation::xml::AttributeElement::~AttributeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::AttributeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:5478,Modifiability,inherit,inherited,5478,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ AttributeElement(). sofa::simulation::xml::AttributeElement::AttributeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~AttributeElement(). sofa::simulation::xml::AttributeElement::~AttributeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::AttributeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:5771,Modifiability,inherit,inherited,5771,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ AttributeElement(). sofa::simulation::xml::AttributeElement::AttributeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~AttributeElement(). sofa::simulation::xml::AttributeElement::~AttributeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::AttributeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:4943,Testability,log,logError,4943,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:4992,Testability,log,logErrors,4992,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html:5115,Usability,clear,clearErrors,5115,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_attribute_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html:1318,Availability,error,errorssofa,1318,"e framework for multi-physics simuation. sofa::simulation::xml::BaseElement Member List . This is the complete list of members for sofa::simulation::xml::BaseElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &attr, const int defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeList(T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::xml::BaseElement Member List . This is the complete list of members for sofa::simulation::xml::BaseElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &attr, const int defaultVal=0.0)sofa::core::obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html:3142,Testability,log,logError,3142,"() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; getBaseFile() overridesofa::simulation::xml::BaseElementvirtual; getClass() const =0sofa::simulation::xml::BaseElementpure virtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() override=0sofa::simulation::xml::BaseElementpure virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; init()sofa::simulation::xml::BaseElementvirtual; initNode()=0sofa::simulation::xml::BaseElementpure virtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::BaseElementinline; setName(const std::s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html:3233,Testability,log,logErrors,3233,"imulation::xml::BaseElementvirtual; getClass() const =0sofa::simulation::xml::BaseElementpure virtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() override=0sofa::simulation::xml::BaseElementpure virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; init()sofa::simulation::xml::BaseElementvirtual; initNode()=0sofa::simulation::xml::BaseElementpure virtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::BaseElementinline; setName(const std::string &newName) overridesofa::simulation::xml::BaseElementinlinevirtual; setParent(BaseElem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html:917,Usability,clear,clearErrors,917,"e framework for multi-physics simuation. sofa::simulation::xml::BaseElement Member List . This is the complete list of members for sofa::simulation::xml::BaseElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &attr, const int defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeList(T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html:700,Availability,error,errors,700,"﻿. SOFA API: sofa::simulation::xml::BaseElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::xml::BaseElement Class Referenceabstract . #include <BaseElement.h>. Inheritance diagram for sofa::simulation::xml::BaseElement:. [legend]. Classes; class  child_iterator;  . Protected Attributes; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  . Public Member Functions;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; virtual const char * getClass () const =0;  Get the node class (Scene, Mapping, ...) More...;  ; sofa::core::objectmodel::Base * getObject () override=0;  Get the associated object. More...;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::string & getSrcFile () const;  ; virtual void setSrcFile (const std::string &newSrcFile);  ; int getSrcLine () const;  ; virtual void setSrcLine (const int l);  ; bool isFileRoot ();  Return true if this element",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html:374,Modifiability,Inherit,Inheritance,374,"﻿. SOFA API: sofa::simulation::xml::BaseElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::xml::BaseElement Class Referenceabstract . #include <BaseElement.h>. Inheritance diagram for sofa::simulation::xml::BaseElement:. [legend]. Classes; class  child_iterator;  . Protected Attributes; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  . Public Member Functions;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; virtual const char * getClass () const =0;  Get the node class (Scene, Mapping, ...) More...;  ; sofa::core::objectmodel::Base * getObject () override=0;  Get the associated object. More...;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::string & getSrcFile () const;  ; virtual void setSrcFile (const std::string &newSrcFile);  ; int getSrcLine () const;  ; virtual void setSrcLine (const int l);  ; bool isFileRoot ();  Return true if this element",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html:582,Modifiability,inherit,inherited,582,"﻿. SOFA API: sofa::simulation::xml::BaseElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::xml::BaseElement Class Referenceabstract . #include <BaseElement.h>. Inheritance diagram for sofa::simulation::xml::BaseElement:. [legend]. Classes; class  child_iterator;  . Protected Attributes; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  . Public Member Functions;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; virtual const char * getClass () const =0;  Get the node class (Scene, Mapping, ...) More...;  ; sofa::core::objectmodel::Base * getObject () override=0;  Get the associated object. More...;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::string & getSrcFile () const;  ; virtual void setSrcFile (const std::string &newSrcFile);  ; int getSrcLine () const;  ; virtual void setSrcLine (const int l);  ; bool isFileRoot ();  Return true if this element",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html:3525,Modifiability,inherit,inherited,3525,"""type"". More...;  ; virtual void addReplaceAttribute (const std::string &attr, const char *val);  List of parameters to be replaced. More...;  ; virtual BaseElement * findNode (const char *nodeName, bool absolute=false);  Find a node given its name. More...;  ; BaseObjectDescription * find (const char *nodeName, bool absolute=false) override;  Find a node given its name. More...;  ; template<class Sequence > ; void pushObjects (Sequence &result);  Get all objects of a given type. More...;  ; template<class Map > ; void pushNamedObjects (Map &result);  Get all objects of a given type. More...;  ; virtual bool addChild (BaseElement *child);  ; virtual bool removeChild (BaseElement *child);  ; virtual bool initNode ()=0;  ; virtual bool init ();  ; template<class Node > ; child_iterator< Node > begin ();  ; child_iterator< BaseElement > begin ();  ; template<class Node > ; child_iterator< Node > end ();  ; child_iterator< BaseElement > end ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObjectDescription;  BaseObjectDescription (const char *name=nullptr, const char *type=nullptr);  ; virtual ~BaseObjectDescription ();  ; virtual const AttributeMap & getAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full nam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html:4650,Testability,log,logError,4650,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Static Public Member Functions; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Protected Member Functions; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Attribute details. ◆ replaceAttribute. std::map< std::string, std::string > sofa::simulation::xml::BaseElement::replaceAttribute. protected . Constructor details. ◆ BaseElement(). sofa::simulation::xml::BaseElement::BaseElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; newParent = nullptr . ). ◆ ~BaseElement(). sofa::simulation::xml::BaseElement::~BaseElement ; (; ). override . Function",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html:4699,Testability,log,logErrors,4699,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Static Public Member Functions; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Protected Member Functions; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Attribute details. ◆ replaceAttribute. std::map< std::string, std::string > sofa::simulation::xml::BaseElement::replaceAttribute. protected . Constructor details. ◆ BaseElement(). sofa::simulation::xml::BaseElement::BaseElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; newParent = nullptr . ). ◆ ~BaseElement(). sofa::simulation::xml::BaseElement::~BaseElement ; (; ). override . Function",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html:4822,Usability,clear,clearErrors,4822,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Static Public Member Functions; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Protected Member Functions; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Attribute details. ◆ replaceAttribute. std::map< std::string, std::string > sofa::simulation::xml::BaseElement::replaceAttribute. protected . Constructor details. ◆ BaseElement(). sofa::simulation::xml::BaseElement::BaseElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; newParent = nullptr . ). ◆ ~BaseElement(). sofa::simulation::xml::BaseElement::~BaseElement ; (; ). override . Function",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element_1_1child__iterator-members.html:288,Modifiability,inherit,inherited,288,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::xml::BaseElement::child_iterator< Node > Member List . This is the complete list of members for sofa::simulation::xml::BaseElement::child_iterator< Node >, including all inherited members. BaseElement classsofa::simulation::xml::BaseElement::child_iterator< Node >friend; checkIt()sofa::simulation::xml::BaseElement::child_iterator< Node >inlineprotected; child_iterator(BaseElement *parent, ChildList::iterator it)sofa::simulation::xml::BaseElement::child_iterator< Node >inlineprotected; currentsofa::simulation::xml::BaseElement::child_iterator< Node >protected; itsofa::simulation::xml::BaseElement::child_iterator< Node >protected; operator Node *()sofa::simulation::xml::BaseElement::child_iterator< Node >inline; operator++()sofa::simulation::xml::BaseElement::child_iterator< Node >inline; operator->()sofa::simulation::xml::BaseElement::child_iterator< Node >inline; operator==(const child_iterator< Node > &i) constsofa::simulation::xml::BaseElement::child_iterator< Node >inline; parentsofa::simulation::xml::BaseElement::child_iterator< Node >protected. Generated on Mon Nov 11 2024 03:34:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element_1_1child__iterator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_element_1_1child__iterator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html:1652,Availability,error,errorssofa,1652,". addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseMultiMappingElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::BaseMultiMappingElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html:5358,Deployability,update,updateSceneGraph,5358,"a::simulation::xml::BaseElement; ObjectElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::ObjectElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::BaseElementinline; setName(const std::string &newName) overridesofa::simulation::xml::BaseElementinlinevirtual; setObject(typename Object::SPtr newObject)sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >virtual; setParent(BaseElement *newParent)sofa::simulation::xml::BaseElementinlineprotectedvirtual; setSrcFile(const std::string &newSrcFile)sofa::simulation::xml::BaseElementvirtual; setSrcLine(const int l)sofa::simulation::xml::BaseElementvirtual; setType(const std::string &newType)sofa::simulation::xml::BaseElementinlinevirtual; updateSceneGraph(sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0sofa::simulation::xml::BaseMultiMappingElementprotectedpure virtual; ~BaseElement() overridesofa::simulation::xml::BaseElement; ~BaseObjectDescription()sofa::core::objectmodel::BaseObjectDescriptionvirtual; ~Element() overridesofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; ~ObjectElement() overridesofa::simulation::xml::ObjectElement.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html:264,Modifiability,inherit,inherited,264,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::xml::BaseMultiMappingElement Member List . This is the complete list of members for sofa::simulation::xml::BaseMultiMappingElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseMultiMappingElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::BaseMultiMappingElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; f",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html:3705,Testability,log,logError,3705,"t overridesofa::simulation::xml::ObjectElementvirtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; init() overridesofa::simulation::xml::ObjectElementvirtual; initNode() overridesofa::simulation::xml::BaseMultiMappingElementvirtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; ObjectElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::ObjectElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simula",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html:3796,Testability,log,logErrors,3796,"del::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; init() overridesofa::simulation::xml::ObjectElementvirtual; initNode() overridesofa::simulation::xml::BaseMultiMappingElementvirtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; ObjectElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::ObjectElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html:1091,Usability,clear,clearErrors,1091,". addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseMultiMappingElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::BaseMultiMappingElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:6165,Availability,error,errors,6165,"tring &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ BaseMultiMappingElement(). sofa::simulation::xml::BaseMultiMappingElement::BaseMultiMappingElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). Function details. ◆ initNode(). bool sofa::simulation::xml::BaseMultiMappingElement::initNode ; (; ). overridevirtual . Implements sofa::simulation::xml::BaseElement. ◆ updateSceneGraph(). virtual void sofa::simulation::xml::BaseMultiMappingElement::updateSceneGraph ; (; sofa::core::BaseMapping * ; multiMapping, . const type::vector< simulation::Node * > & ; ancestorInputs, . type::vector< simulation::Node * > & ; otherInputs, . type::vector< simulation::Node * > & ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:5377,Deployability,update,updateSceneGraph,5377,"et an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ BaseMultiMappingElement(). sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:6867,Deployability,update,updateSceneGraph,6867," void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ BaseMultiMappingElement(). sofa::simulation::xml::BaseMultiMappingElement::BaseMultiMappingElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). Function details. ◆ initNode(). bool sofa::simulation::xml::BaseMultiMappingElement::initNode ; (; ). overridevirtual . Implements sofa::simulation::xml::BaseElement. ◆ updateSceneGraph(). virtual void sofa::simulation::xml::BaseMultiMappingElement::updateSceneGraph ; (; sofa::core::BaseMapping * ; multiMapping, . const type::vector< simulation::Node * > & ; ancestorInputs, . type::vector< simulation::Node * > & ; otherInputs, . type::vector< simulation::Node * > & ; outputs . ). protectedpure virtual . sofasimulationxmlBaseMultiMappingElement; Generated on Mon Nov 11 2024 03:34:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:6948,Deployability,update,updateSceneGraph,6948," void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ BaseMultiMappingElement(). sofa::simulation::xml::BaseMultiMappingElement::BaseMultiMappingElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). Function details. ◆ initNode(). bool sofa::simulation::xml::BaseMultiMappingElement::initNode ; (; ). overridevirtual . Implements sofa::simulation::xml::BaseElement. ◆ updateSceneGraph(). virtual void sofa::simulation::xml::BaseMultiMappingElement::updateSceneGraph ; (; sofa::core::BaseMapping * ; multiMapping, . const type::vector< simulation::Node * > & ; ancestorInputs, . type::vector< simulation::Node * > & ; otherInputs, . type::vector< simulation::Node * > & ; outputs . ). protectedpure virtual . sofasimulationxmlBaseMultiMappingElement; Generated on Mon Nov 11 2024 03:34:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:341,Modifiability,Inherit,Inheritance,341,"﻿. SOFA API: sofa::simulation::xml::BaseMultiMappingElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::xml::BaseMultiMappingElement Class Referenceabstract . #include <BaseMultiMappingElement.h>. Inheritance diagram for sofa::simulation::xml::BaseMultiMappingElement:. [legend]. Public Member Functions;  BaseMultiMappingElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ; bool initNode () override;  ;  Public Member Functions inherited from sofa::simulation::xml::ObjectElement;  ObjectElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~ObjectElement () override;  ; bool initNode () override;  ; bool init () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; sofa::core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:613,Modifiability,inherit,inherited,613,"﻿. SOFA API: sofa::simulation::xml::BaseMultiMappingElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::xml::BaseMultiMappingElement Class Referenceabstract . #include <BaseMultiMappingElement.h>. Inheritance diagram for sofa::simulation::xml::BaseMultiMappingElement:. [legend]. Public Member Functions;  BaseMultiMappingElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ; bool initNode () override;  ;  Public Member Functions inherited from sofa::simulation::xml::ObjectElement;  ObjectElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~ObjectElement () override;  ; bool initNode () override;  ; bool init () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; sofa::core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:981,Modifiability,inherit,inherited,981,"ons |; Protected Member Functions |; List of all members . sofa::simulation::xml::BaseMultiMappingElement Class Referenceabstract . #include <BaseMultiMappingElement.h>. Inheritance diagram for sofa::simulation::xml::BaseMultiMappingElement:. [legend]. Public Member Functions;  BaseMultiMappingElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ; bool initNode () override;  ;  Public Member Functions inherited from sofa::simulation::xml::ObjectElement;  ObjectElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~ObjectElement () override;  ; bool initNode () override;  ; bool init () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; sofa::core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:1430,Modifiability,inherit,inherited,1430," *parent=nullptr);  ; bool initNode () override;  ;  Public Member Functions inherited from sofa::simulation::xml::ObjectElement;  ObjectElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~ObjectElement () override;  ; bool initNode () override;  ; bool init () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; sofa::core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::string & getSrcFile () const;  ; virtual void setSrcFile (const std::string &newSrcFile);  ; int getSrcLine () const;  ; virtual void setSrcLine (const int l);  ; bool isFileRoot ();  Return true",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:4020,Modifiability,inherit,inherited,4020,"this attribute is ""name"" or ""type"". More...;  ; virtual void addReplaceAttribute (const std::string &attr, const char *val);  List of parameters to be replaced. More...;  ; virtual BaseElement * findNode (const char *nodeName, bool absolute=false);  Find a node given its name. More...;  ; BaseObjectDescription * find (const char *nodeName, bool absolute=false) override;  Find a node given its name. More...;  ; template<class Sequence > ; void pushObjects (Sequence &result);  Get all objects of a given type. More...;  ; template<class Map > ; void pushNamedObjects (Map &result);  Get all objects of a given type. More...;  ; virtual bool addChild (BaseElement *child);  ; virtual bool removeChild (BaseElement *child);  ; template<class Node > ; child_iterator< Node > begin ();  ; child_iterator< BaseElement > begin ();  ; template<class Node > ; child_iterator< Node > end ();  ; child_iterator< BaseElement > end ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObjectDescription;  BaseObjectDescription (const char *name=nullptr, const char *type=nullptr);  ; virtual ~BaseObjectDescription ();  ; virtual const AttributeMap & getAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. conca",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:5620,Modifiability,inherit,inherited,5620,"et an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ BaseMultiMappingElement(). sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:5875,Modifiability,Inherit,Inherited,5875,"tring &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ BaseMultiMappingElement(). sofa::simulation::xml::BaseMultiMappingElement::BaseMultiMappingElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). Function details. ◆ initNode(). bool sofa::simulation::xml::BaseMultiMappingElement::initNode ; (; ). overridevirtual . Implements sofa::simulation::xml::BaseElement. ◆ updateSceneGraph(). virtual void sofa::simulation::xml::BaseMultiMappingElement::updateSceneGraph ; (; sofa::core::BaseMapping * ; multiMapping, . const type::vector< simulation::Node * > & ; ancestorInputs, . type::vector< simulation::Node * > & ; otherInputs, . type::vector< simulation::Node * > & ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:5916,Modifiability,inherit,inherited,5916,"tring &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ BaseMultiMappingElement(). sofa::simulation::xml::BaseMultiMappingElement::BaseMultiMappingElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). Function details. ◆ initNode(). bool sofa::simulation::xml::BaseMultiMappingElement::initNode ; (; ). overridevirtual . Implements sofa::simulation::xml::BaseElement. ◆ updateSceneGraph(). virtual void sofa::simulation::xml::BaseMultiMappingElement::updateSceneGraph ; (; sofa::core::BaseMapping * ; multiMapping, . const type::vector< simulation::Node * > & ; ancestorInputs, . type::vector< simulation::Node * > & ; otherInputs, . type::vector< simulation::Node * > & ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:6047,Modifiability,inherit,inherited,6047,"tring &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ BaseMultiMappingElement(). sofa::simulation::xml::BaseMultiMappingElement::BaseMultiMappingElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). Function details. ◆ initNode(). bool sofa::simulation::xml::BaseMultiMappingElement::initNode ; (; ). overridevirtual . Implements sofa::simulation::xml::BaseElement. ◆ updateSceneGraph(). virtual void sofa::simulation::xml::BaseMultiMappingElement::updateSceneGraph ; (; sofa::core::BaseMapping * ; multiMapping, . const type::vector< simulation::Node * > & ; ancestorInputs, . type::vector< simulation::Node * > & ; otherInputs, . type::vector< simulation::Node * > & ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:6208,Modifiability,inherit,inherited,6208,"tring &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ BaseMultiMappingElement(). sofa::simulation::xml::BaseMultiMappingElement::BaseMultiMappingElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). Function details. ◆ initNode(). bool sofa::simulation::xml::BaseMultiMappingElement::initNode ; (; ). overridevirtual . Implements sofa::simulation::xml::BaseElement. ◆ updateSceneGraph(). virtual void sofa::simulation::xml::BaseMultiMappingElement::updateSceneGraph ; (; sofa::core::BaseMapping * ; multiMapping, . const type::vector< simulation::Node * > & ; ancestorInputs, . type::vector< simulation::Node * > & ; otherInputs, . type::vector< simulation::Node * > & ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:5145,Testability,log,logError,5145,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:5194,Testability,log,logErrors,5194,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:5317,Usability,clear,clearErrors,5317,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html:1598,Availability,error,errorssofa,1598," inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; DataElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::DataElement; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::xml::DataElement Member List . This is the complete list of members for sofa::simulation::xml::DataElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; DataElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::DataElement; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html:3608,Testability,log,logError,3608,"::BaseElementvirtual; getClass() const overridesofa::simulation::xml::DataElementvirtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< core::objectmodel::BaseObject >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< core::objectmodel::BaseObject >; init()sofa::simulation::xml::BaseElementvirtual; initNode() overridesofa::simulation::xml::DataElementvirtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::BaseElementinline; setName(const std::s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html:3699,Testability,log,logErrors,3699,"tErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< core::objectmodel::BaseObject >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< core::objectmodel::BaseObject >; init()sofa::simulation::xml::BaseElementvirtual; initNode() overridesofa::simulation::xml::DataElementvirtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::BaseElementinline; setName(const std::string &newName) overridesofa::simulation::xml::BaseElementinlinevirtual; setObject(typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html:917,Usability,clear,clearErrors,917," inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; DataElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::DataElement; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:5317,Availability,error,errors,5317,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ DataElement(). sofa::simulation::xml::DataElement::DataElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~DataElement(). sofa::simulation::xml::DataElement::~DataElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::DataElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ initNode().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:267,Modifiability,Inherit,Inheritance,267,"﻿. SOFA API: sofa::simulation::xml::DataElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::xml::DataElement Class Reference . #include <DataElement.h>. Inheritance diagram for sofa::simulation::xml::DataElement:. [legend]. Public Member Functions;  DataElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~DataElement () override;  ; bool initNode () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:648,Modifiability,inherit,inherited,648,"﻿. SOFA API: sofa::simulation::xml::DataElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::xml::DataElement Class Reference . #include <DataElement.h>. Inheritance diagram for sofa::simulation::xml::DataElement:. [legend]. Public Member Functions;  DataElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~DataElement () override;  ; bool initNode () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:1085,Modifiability,inherit,inherited,1085,"a::simulation::xml::DataElement Class Reference . #include <DataElement.h>. Inheritance diagram for sofa::simulation::xml::DataElement:. [legend]. Public Member Functions;  DataElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~DataElement () override;  ; bool initNode () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::string & getSrcFile () const;  ; virtual void setSrcFile (const std::string &newSrcFile);  ; int getSrcLine () const;  ; virtual void setSrcLine (const int l);  ; bool isFileRoot ();  Return true",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:3700,Modifiability,inherit,inherited,3700,"te is ""name"" or ""type"". More...;  ; virtual void addReplaceAttribute (const std::string &attr, const char *val);  List of parameters to be replaced. More...;  ; virtual BaseElement * findNode (const char *nodeName, bool absolute=false);  Find a node given its name. More...;  ; BaseObjectDescription * find (const char *nodeName, bool absolute=false) override;  Find a node given its name. More...;  ; template<class Sequence > ; void pushObjects (Sequence &result);  Get all objects of a given type. More...;  ; template<class Map > ; void pushNamedObjects (Map &result);  Get all objects of a given type. More...;  ; virtual bool addChild (BaseElement *child);  ; virtual bool removeChild (BaseElement *child);  ; virtual bool init ();  ; template<class Node > ; child_iterator< Node > begin ();  ; child_iterator< BaseElement > begin ();  ; template<class Node > ; child_iterator< Node > end ();  ; child_iterator< BaseElement > end ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObjectDescription;  BaseObjectDescription (const char *name=nullptr, const char *type=nullptr);  ; virtual ~BaseObjectDescription ();  ; virtual const AttributeMap & getAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:5027,Modifiability,Inherit,Inherited,5027,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ DataElement(). sofa::simulation::xml::DataElement::DataElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~DataElement(). sofa::simulation::xml::DataElement::~DataElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::DataElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ initNode().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:5068,Modifiability,inherit,inherited,5068,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ DataElement(). sofa::simulation::xml::DataElement::DataElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~DataElement(). sofa::simulation::xml::DataElement::~DataElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::DataElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ initNode().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:5199,Modifiability,inherit,inherited,5199,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ DataElement(). sofa::simulation::xml::DataElement::DataElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~DataElement(). sofa::simulation::xml::DataElement::~DataElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::DataElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ initNode().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:5360,Modifiability,inherit,inherited,5360,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ DataElement(). sofa::simulation::xml::DataElement::DataElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~DataElement(). sofa::simulation::xml::DataElement::~DataElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::DataElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ initNode().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:5653,Modifiability,inherit,inherited,5653,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ DataElement(). sofa::simulation::xml::DataElement::DataElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~DataElement(). sofa::simulation::xml::DataElement::~DataElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::DataElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ initNode().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:4825,Testability,log,logError,4825,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:4874,Testability,log,logErrors,4874,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html:4997,Usability,clear,clearErrors,4997,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_data_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html:1461,Availability,error,errorssofa,1461,"e complete list of members for sofa::simulation::xml::Element< Object >, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< Object >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< Object >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &attr, const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::xml::Element< Object > Member List . This is the complete list of members for sofa::simulation::xml::Element< Object >, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< Object >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< Object >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html:3399,Testability,log,logError,3399,"tual; getBaseFile() overridesofa::simulation::xml::BaseElementvirtual; getClass() const =0sofa::simulation::xml::BaseElementpure virtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< Object >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< Object >; init()sofa::simulation::xml::BaseElementvirtual; initNode()=0sofa::simulation::xml::BaseElementpure virtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::BaseElementinline; setName(const std::s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html:3490,Testability,log,logErrors,3490,"fa::simulation::xml::BaseElementpure virtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< Object >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< Object >; init()sofa::simulation::xml::BaseElementvirtual; initNode()=0sofa::simulation::xml::BaseElementpure virtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::BaseElementinline; setName(const std::string &newName) overridesofa::simulation::xml::BaseElementinlinevirtual; setObject(typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html:929,Usability,clear,clearErrors,929,"e complete list of members for sofa::simulation::xml::Element< Object >, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< Object >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< Object >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &attr, const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:5089,Availability,error,errors,5089,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ Element(). template<class Object > . sofa::simulation::xml::Element< Object >::Element ; (; const std::string & ; name, . const std::string & ; type, . BaseElement< Object > * ; newParent = nullptr . ). ◆ ~Element(). template<class Object > . sofa::simulation::xml::Element< Object >::~Element. override . Function details. ◆ getObject(). template<class Object > . sofa::core::objectmodel::Base * sofa::simulation::xml::Element< Object >::getObject. overridevirtual . Get the as",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:293,Modifiability,Inherit,Inheritance,293,"﻿. SOFA API: sofa::simulation::xml::Element< Object > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::xml::Element< Object > Class Template Reference . #include <Element.h>. Inheritance diagram for sofa::simulation::xml::Element< Object >:. [legend]. Public Member Functions;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; Object * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; virtual const char * getClass () const =0;  Get the node class (Scene, Mapping, ...) More...;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::string & getSrcFile () const;  ; virtual void setSrcFile (const std::string &newSrcFile);  ; int getSrcLine () const;  ; virtual void setSrcLine (const int l);  ; bool isFileRoot ();  Return true if this element was the root of the file. More...;  ; IncludeNodeTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:729,Modifiability,inherit,inherited,729,"﻿. SOFA API: sofa::simulation::xml::Element< Object > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::xml::Element< Object > Class Template Reference . #include <Element.h>. Inheritance diagram for sofa::simulation::xml::Element< Object >:. [legend]. Public Member Functions;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; Object * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; virtual const char * getClass () const =0;  Get the node class (Scene, Mapping, ...) More...;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::string & getSrcFile () const;  ; virtual void setSrcFile (const std::string &newSrcFile);  ; int getSrcLine () const;  ; virtual void setSrcLine (const int l);  ; bool isFileRoot ();  Return true if this element was the root of the file. More...;  ; IncludeNodeTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:3472,Modifiability,inherit,inherited,3472,"""type"". More...;  ; virtual void addReplaceAttribute (const std::string &attr, const char *val);  List of parameters to be replaced. More...;  ; virtual BaseElement * findNode (const char *nodeName, bool absolute=false);  Find a node given its name. More...;  ; BaseObjectDescription * find (const char *nodeName, bool absolute=false) override;  Find a node given its name. More...;  ; template<class Sequence > ; void pushObjects (Sequence &result);  Get all objects of a given type. More...;  ; template<class Map > ; void pushNamedObjects (Map &result);  Get all objects of a given type. More...;  ; virtual bool addChild (BaseElement *child);  ; virtual bool removeChild (BaseElement *child);  ; virtual bool initNode ()=0;  ; virtual bool init ();  ; template<class Node > ; child_iterator< Node > begin ();  ; child_iterator< BaseElement > begin ();  ; template<class Node > ; child_iterator< Node > end ();  ; child_iterator< BaseElement > end ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObjectDescription;  BaseObjectDescription (const char *name=nullptr, const char *type=nullptr);  ; virtual ~BaseObjectDescription ();  ; virtual const AttributeMap & getAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full nam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:4799,Modifiability,Inherit,Inherited,4799,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ Element(). template<class Object > . sofa::simulation::xml::Element< Object >::Element ; (; const std::string & ; name, . const std::string & ; type, . BaseElement< Object > * ; newParent = nullptr . ). ◆ ~Element(). template<class Object > . sofa::simulation::xml::Element< Object >::~Element. override . Function details. ◆ getObject(). template<class Object > . sofa::core::objectmodel::Base * sofa::simulation::xml::Element< Object >::getObject. overridevirtual . Get the as",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:4840,Modifiability,inherit,inherited,4840,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ Element(). template<class Object > . sofa::simulation::xml::Element< Object >::Element ; (; const std::string & ; name, . const std::string & ; type, . BaseElement< Object > * ; newParent = nullptr . ). ◆ ~Element(). template<class Object > . sofa::simulation::xml::Element< Object >::~Element. override . Function details. ◆ getObject(). template<class Object > . sofa::core::objectmodel::Base * sofa::simulation::xml::Element< Object >::getObject. overridevirtual . Get the as",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:4971,Modifiability,inherit,inherited,4971,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ Element(). template<class Object > . sofa::simulation::xml::Element< Object >::Element ; (; const std::string & ; name, . const std::string & ; type, . BaseElement< Object > * ; newParent = nullptr . ). ◆ ~Element(). template<class Object > . sofa::simulation::xml::Element< Object >::~Element. override . Function details. ◆ getObject(). template<class Object > . sofa::core::objectmodel::Base * sofa::simulation::xml::Element< Object >::getObject. overridevirtual . Get the as",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:5132,Modifiability,inherit,inherited,5132,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ Element(). template<class Object > . sofa::simulation::xml::Element< Object >::Element ; (; const std::string & ; name, . const std::string & ; type, . BaseElement< Object > * ; newParent = nullptr . ). ◆ ~Element(). template<class Object > . sofa::simulation::xml::Element< Object >::~Element. override . Function details. ◆ getObject(). template<class Object > . sofa::core::objectmodel::Base * sofa::simulation::xml::Element< Object >::getObject. overridevirtual . Get the as",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:5425,Modifiability,inherit,inherited,5425,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ Element(). template<class Object > . sofa::simulation::xml::Element< Object >::Element ; (; const std::string & ; name, . const std::string & ; type, . BaseElement< Object > * ; newParent = nullptr . ). ◆ ~Element(). template<class Object > . sofa::simulation::xml::Element< Object >::~Element. override . Function details. ◆ getObject(). template<class Object > . sofa::core::objectmodel::Base * sofa::simulation::xml::Element< Object >::getObject. overridevirtual . Get the as",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:4597,Testability,log,logError,4597,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:4646,Testability,log,logErrors,4646,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html:4769,Usability,clear,clearErrors,4769,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html:1476,Availability,error,errorssofa,1476,"plete list of members for sofa::simulation::xml::NodeElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::NodeElement; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::xml::NodeElement Member List . This is the complete list of members for sofa::simulation::xml::NodeElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::NodeElement; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; g",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html:3474,Testability,log,logError,3474,"ual; getClass() const overridesofa::simulation::xml::NodeElementvirtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >; init() overridesofa::simulation::xml::NodeElementvirtual; initNode() overridesofa::simulation::xml::NodeElementvirtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::NodeElement; NodeFactory typedefsofa::simulation::xml::BaseElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html:3565,Testability,log,logErrors,3565,"fa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >; init() overridesofa::simulation::xml::NodeElementvirtual; initNode() overridesofa::simulation::xml::NodeElementvirtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::NodeElement; NodeFactory typedefsofa::simulation::xml::BaseElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html:917,Usability,clear,clearErrors,917,"plete list of members for sofa::simulation::xml::NodeElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::NodeElement; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:5520,Availability,error,errors,5520,"ributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ NodeElement(). sofa::simulation::xml::NodeElement::NodeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~NodeElement(). sofa::simulation::xml::NodeElement::~NodeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::NodeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ init(). bool sofa::simulation::xml::NodeElement::init ; (; void ; ). overridevirtual . Reimplemented from sofa::simulation::xml::BaseElement. ◆ initNode(). bool sofa::simulation::xml::NodeElement::initNode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:267,Modifiability,Inherit,Inheritance,267,"﻿. SOFA API: sofa::simulation::xml::NodeElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::xml::NodeElement Class Reference . #include <NodeElement.h>. Inheritance diagram for sofa::simulation::xml::NodeElement:. [legend]. Public Member Functions;  NodeElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~NodeElement () override;  ; bool setParent (BaseElement *newParent) override;  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  ; bool initNode () override;  ; bool init () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; sofa::core::objectmodel::BaseNode * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. Mo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:868,Modifiability,inherit,inherited,868,"ference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::xml::NodeElement Class Reference . #include <NodeElement.h>. Inheritance diagram for sofa::simulation::xml::NodeElement:. [legend]. Public Member Functions;  NodeElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~NodeElement () override;  ; bool setParent (BaseElement *newParent) override;  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  ; bool initNode () override;  ; bool init () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; sofa::core::objectmodel::BaseNode * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:1313,Modifiability,inherit,inherited,1313," &type, BaseElement *parent=nullptr);  ;  ~NodeElement () override;  ; bool setParent (BaseElement *newParent) override;  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  ; bool initNode () override;  ; bool init () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; sofa::core::objectmodel::BaseNode * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::string & getSrcFile () const;  ; virtual void setSrcFile (const std::string &newSrcFile);  ; int getSrcLine () const;  ; virtual void setSrcLine (const int l);  ; bool isFileRoot ();  Return true",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:3903,Modifiability,inherit,inherited,3903,"this attribute is ""name"" or ""type"". More...;  ; virtual void addReplaceAttribute (const std::string &attr, const char *val);  List of parameters to be replaced. More...;  ; virtual BaseElement * findNode (const char *nodeName, bool absolute=false);  Find a node given its name. More...;  ; BaseObjectDescription * find (const char *nodeName, bool absolute=false) override;  Find a node given its name. More...;  ; template<class Sequence > ; void pushObjects (Sequence &result);  Get all objects of a given type. More...;  ; template<class Map > ; void pushNamedObjects (Map &result);  Get all objects of a given type. More...;  ; virtual bool addChild (BaseElement *child);  ; virtual bool removeChild (BaseElement *child);  ; template<class Node > ; child_iterator< Node > begin ();  ; child_iterator< BaseElement > begin ();  ; template<class Node > ; child_iterator< Node > end ();  ; child_iterator< BaseElement > end ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObjectDescription;  BaseObjectDescription (const char *name=nullptr, const char *type=nullptr);  ; virtual ~BaseObjectDescription ();  ; virtual const AttributeMap & getAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. conca",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:5230,Modifiability,Inherit,Inherited,5230,"ributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ NodeElement(). sofa::simulation::xml::NodeElement::NodeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~NodeElement(). sofa::simulation::xml::NodeElement::~NodeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::NodeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ init(). bool sofa::simulation::xml::NodeElement::init ; (; void ; ). overridevirtual . Reimplemented from sofa::simulation::xml::BaseElement. ◆ initNode(). bool sofa::simulation::xml::NodeElement::initNode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:5271,Modifiability,inherit,inherited,5271,"ributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ NodeElement(). sofa::simulation::xml::NodeElement::NodeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~NodeElement(). sofa::simulation::xml::NodeElement::~NodeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::NodeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ init(). bool sofa::simulation::xml::NodeElement::init ; (; void ; ). overridevirtual . Reimplemented from sofa::simulation::xml::BaseElement. ◆ initNode(). bool sofa::simulation::xml::NodeElement::initNode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:5402,Modifiability,inherit,inherited,5402,"ributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ NodeElement(). sofa::simulation::xml::NodeElement::NodeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~NodeElement(). sofa::simulation::xml::NodeElement::~NodeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::NodeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ init(). bool sofa::simulation::xml::NodeElement::init ; (; void ; ). overridevirtual . Reimplemented from sofa::simulation::xml::BaseElement. ◆ initNode(). bool sofa::simulation::xml::NodeElement::initNode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:5563,Modifiability,inherit,inherited,5563,"ributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ NodeElement(). sofa::simulation::xml::NodeElement::NodeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~NodeElement(). sofa::simulation::xml::NodeElement::~NodeElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::NodeElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement. ◆ init(). bool sofa::simulation::xml::NodeElement::init ; (; void ; ). overridevirtual . Reimplemented from sofa::simulation::xml::BaseElement. ◆ initNode(). bool sofa::simulation::xml::NodeElement::initNode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:5028,Testability,log,logError,5028,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ NodeElement(). sofa::simulation::xml::NodeElement::NodeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~NodeElement(). sofa::simulation::xml::NodeElement::~NodeElement ; (; ). override . Function de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:5077,Testability,log,logErrors,5077,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ NodeElement(). sofa::simulation::xml::NodeElement::NodeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~NodeElement(). sofa::simulation::xml::NodeElement::~NodeElement ; (; ). override . Function de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html:5200,Usability,clear,clearErrors,5200,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ NodeElement(). sofa::simulation::xml::NodeElement::NodeElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~NodeElement(). sofa::simulation::xml::NodeElement::~NodeElement ; (; ). override . Function de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_node_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html:1482,Availability,error,errorssofa,1482,"s for sofa::simulation::xml::ObjectElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::xml::ObjectElement Member List . This is the complete list of members for sofa::simulation::xml::ObjectElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html:3525,Testability,log,logError,3525,"ass() const overridesofa::simulation::xml::ObjectElementvirtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; init() overridesofa::simulation::xml::ObjectElementvirtual; initNode() overridesofa::simulation::xml::ObjectElementvirtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; ObjectElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::ObjectElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simula",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html:3616,Testability,log,logErrors,3616,"::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getIncludeNodeType() constsofa::simulation::xml::BaseElementinline; getName() overridesofa::simulation::xml::BaseElementinlinevirtual; getObject() overridesofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >virtual; getParent() const overridesofa::simulation::xml::BaseElementinlinevirtual; getParentElement() constsofa::simulation::xml::BaseElementinline; getSrcFile() constsofa::simulation::xml::BaseElement; getSrcLine() constsofa::simulation::xml::BaseElement; getType()sofa::simulation::xml::BaseElementinline; getTypedObject()sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; init() overridesofa::simulation::xml::ObjectElementvirtual; initNode() overridesofa::simulation::xml::ObjectElementvirtual; isFileRoot()sofa::simulation::xml::BaseElement; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; NodeFactory typedefsofa::simulation::xml::BaseElement; ObjectElement(const std::string &name, const std::string &type, BaseElement *parent=nullptr)sofa::simulation::xml::ObjectElement; presenceAttribute(const std::string &s)sofa::simulation::xml::BaseElementvirtual; pushNamedObjects(Map &result)sofa::simulation::xml::BaseElementinline; pushObjects(Sequence &result)sofa::simulation::xml::BaseElementinline; removeAttribute(const std::string &attr) overridesofa::simulation::xml::BaseElementvirtual; removeChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; replaceAttributesofa::simulation::xml::BaseElementprotected; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setBaseFile(const std::string &newBaseFile)sofa::simulation::xml::BaseElementvirtual; setIncludeNodeType(IncludeNodeType t)sofa::simulation::xml::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html:921,Usability,clear,clearErrors,921,"s for sofa::simulation::xml::ObjectElement, including all inherited members. addChild(BaseElement *child)sofa::simulation::xml::BaseElementvirtual; addReplaceAttribute(const std::string &attr, const char *val)sofa::simulation::xml::BaseElementvirtual; AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseElement(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::BaseElement; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; begin()sofa::simulation::xml::BaseElementinline; begin()sofa::simulation::xml::BaseElementinline; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; create(Node *, std::pair< std::string, std::string > arg)sofa::simulation::xml::BaseElementinlinestatic; Create(const std::string &nodeClass, const std::string &name, const std::string &type)sofa::simulation::xml::BaseElementstatic; Element(const std::string &name, const std::string &type, BaseElement *newParent=nullptr)sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; end()sofa::simulation::xml::BaseElementinline; end()sofa::simulation::xml::BaseElementinline; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; Factory typedefsofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >; find(const char *nodeName, bool absolute=false) overridesofa::simulation::xml::BaseElementinlinevirtual; findNode(const char *nodeName, bool absolute=false)sofa::simulation::xml::BaseElementvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:5342,Availability,error,errors,5342,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ ObjectElement(). sofa::simulation::xml::ObjectElement::ObjectElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~ObjectElement(). sofa::simulation::xml::ObjectElement::~ObjectElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::ObjectElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:273,Modifiability,Inherit,Inheritance,273,"﻿. SOFA API: sofa::simulation::xml::ObjectElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::xml::ObjectElement Class Reference . #include <ObjectElement.h>. Inheritance diagram for sofa::simulation::xml::ObjectElement:. [legend]. Public Member Functions;  ObjectElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~ObjectElement () override;  ; bool initNode () override;  ; bool init () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; sofa::core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:686,Modifiability,inherit,inherited,686,"﻿. SOFA API: sofa::simulation::xml::ObjectElement Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::xml::ObjectElement Class Reference . #include <ObjectElement.h>. Inheritance diagram for sofa::simulation::xml::ObjectElement:. [legend]. Public Member Functions;  ObjectElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~ObjectElement () override;  ; bool initNode () override;  ; bool init () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; sofa::core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:1135,Modifiability,inherit,inherited,1135,"e . #include <ObjectElement.h>. Inheritance diagram for sofa::simulation::xml::ObjectElement:. [legend]. Public Member Functions;  ObjectElement (const std::string &name, const std::string &type, BaseElement *parent=nullptr);  ;  ~ObjectElement () override;  ; bool initNode () override;  ; bool init () override;  ; virtual const char * getClass () const override;  Get the node class (Scene, Mapping, ...) More...;  ;  Public Member Functions inherited from sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >;  Element (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~Element () override;  ; sofa::core::objectmodel::BaseObject * getTypedObject ();  ; virtual void setObject (typename Object::SPtr newObject);  ; sofa::core::objectmodel::Base * getObject () override;  Get the associated object. More...;  ;  Public Member Functions inherited from sofa::simulation::xml::BaseElement;  BaseElement (const std::string &name, const std::string &type, BaseElement *newParent=nullptr);  ;  ~BaseElement () override;  ; std::string getName () override;  Get the node instance name. More...;  ; virtual void setName (const std::string &newName) override;  Set the object instance name. More...;  ; std::string getType ();  Get the node instance type (MassObject, IdentityMapping, ...) More...;  ; virtual void setType (const std::string &newType);  ; sofa::core::objectmodel::BaseObjectDescription * getParent () const override;  Get the parent node. More...;  ; BaseElement * getParentElement () const;  Get the parent node. More...;  ; std::string getBaseFile () override;  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual void setBaseFile (const std::string &newBaseFile);  ; const std::string & getSrcFile () const;  ; virtual void setSrcFile (const std::string &newSrcFile);  ; int getSrcLine () const;  ; virtual void setSrcLine (const int l);  ; bool isFileRoot ();  Return true",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:3725,Modifiability,inherit,inherited,3725,"this attribute is ""name"" or ""type"". More...;  ; virtual void addReplaceAttribute (const std::string &attr, const char *val);  List of parameters to be replaced. More...;  ; virtual BaseElement * findNode (const char *nodeName, bool absolute=false);  Find a node given its name. More...;  ; BaseObjectDescription * find (const char *nodeName, bool absolute=false) override;  Find a node given its name. More...;  ; template<class Sequence > ; void pushObjects (Sequence &result);  Get all objects of a given type. More...;  ; template<class Map > ; void pushNamedObjects (Map &result);  Get all objects of a given type. More...;  ; virtual bool addChild (BaseElement *child);  ; virtual bool removeChild (BaseElement *child);  ; template<class Node > ; child_iterator< Node > begin ();  ; child_iterator< BaseElement > begin ();  ; template<class Node > ; child_iterator< Node > end ();  ; child_iterator< BaseElement > end ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObjectDescription;  BaseObjectDescription (const char *name=nullptr, const char *type=nullptr);  ; virtual ~BaseObjectDescription ();  ; virtual const AttributeMap & getAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. conca",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:5052,Modifiability,Inherit,Inherited,5052,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ ObjectElement(). sofa::simulation::xml::ObjectElement::ObjectElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~ObjectElement(). sofa::simulation::xml::ObjectElement::~ObjectElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::ObjectElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:5093,Modifiability,inherit,inherited,5093,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ ObjectElement(). sofa::simulation::xml::ObjectElement::ObjectElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~ObjectElement(). sofa::simulation::xml::ObjectElement::~ObjectElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::ObjectElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:5224,Modifiability,inherit,inherited,5224,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ ObjectElement(). sofa::simulation::xml::ObjectElement::ObjectElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~ObjectElement(). sofa::simulation::xml::ObjectElement::~ObjectElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::ObjectElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:5385,Modifiability,inherit,inherited,5385,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ ObjectElement(). sofa::simulation::xml::ObjectElement::ObjectElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~ObjectElement(). sofa::simulation::xml::ObjectElement::~ObjectElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::ObjectElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:5678,Modifiability,inherit,inherited,5678,"in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor details. ◆ ObjectElement(). sofa::simulation::xml::ObjectElement::ObjectElement ; (; const std::string & ; name, . const std::string & ; type, . BaseElement * ; parent = nullptr . ). ◆ ~ObjectElement(). sofa::simulation::xml::ObjectElement::~ObjectElement ; (; ). override . Function details. ◆ getClass(). const char * sofa::simulation::xml::ObjectElement::getClass ; (; ); const. overridevirtual . Get the node class (Scene, Mapping, ...) ; Implements sofa::simulation::xml::BaseElement.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:4850,Testability,log,logError,4850,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:4899,Testability,log,logErrors,4899,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html:5022,Usability,clear,clearErrors,5022,"etAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Constructor de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_object_element.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::AnimateBeginEvent Member List . This is the complete list of members for sofa::simulation::AnimateBeginEvent, including all inherited members. AnimateBeginEvent(SReal dt)sofa::simulation::AnimateBeginEvent; dtsofa::simulation::AnimateBeginEventprotected; Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::AnimateBeginEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getDt() constsofa::simulation::AnimateBeginEventinline; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~AnimateBeginEvent() overridesofa::simulation::AnimateBeginEvent; ~Event()sofa::core::objectmodel::Eventvirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html:333,Modifiability,Inherit,Inheritance,333,"﻿. SOFA API: sofa::simulation::AnimateBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateBeginEvent Class Reference . #include <AnimateBeginEvent.h>. Inheritance diagram for sofa::simulation::AnimateBeginEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() before computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateBeginEvent (SReal dt);  ;  ~AnimateBeginEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateBeginEvent::dt. protected . Constructor details. ◆ AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::AnimateBeginEvent ; (; SReal ; dt). ◆ ~AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::~AnimateBeginEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateBeginEvent::GetClassName ; (; ). inlinestati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html:583,Modifiability,inherit,inherited,583,"﻿. SOFA API: sofa::simulation::AnimateBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateBeginEvent Class Reference . #include <AnimateBeginEvent.h>. Inheritance diagram for sofa::simulation::AnimateBeginEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() before computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateBeginEvent (SReal dt);  ;  ~AnimateBeginEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateBeginEvent::dt. protected . Constructor details. ◆ AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::AnimateBeginEvent ; (; SReal ; dt). ◆ ~AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::~AnimateBeginEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateBeginEvent::GetClassName ; (; ). inlinestati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html:794,Modifiability,inherit,inherited,794,"﻿. SOFA API: sofa::simulation::AnimateBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateBeginEvent Class Reference . #include <AnimateBeginEvent.h>. Inheritance diagram for sofa::simulation::AnimateBeginEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() before computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateBeginEvent (SReal dt);  ;  ~AnimateBeginEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateBeginEvent::dt. protected . Constructor details. ◆ AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::AnimateBeginEvent ; (; SReal ; dt). ◆ ~AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::~AnimateBeginEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateBeginEvent::GetClassName ; (; ). inlinestati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html:1266,Modifiability,inherit,inherited,1266,"ons |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateBeginEvent Class Reference . #include <AnimateBeginEvent.h>. Inheritance diagram for sofa::simulation::AnimateBeginEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() before computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateBeginEvent (SReal dt);  ;  ~AnimateBeginEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateBeginEvent::dt. protected . Constructor details. ◆ AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::AnimateBeginEvent ; (; SReal ; dt). ◆ ~AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::~AnimateBeginEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateBeginEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::simulation::AnimateBeginEvent::getDt ; (; ); const. inline . sofasimulationAnimateBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html:1403,Modifiability,Inherit,Inherited,1403,"ons |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateBeginEvent Class Reference . #include <AnimateBeginEvent.h>. Inheritance diagram for sofa::simulation::AnimateBeginEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() before computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateBeginEvent (SReal dt);  ;  ~AnimateBeginEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateBeginEvent::dt. protected . Constructor details. ◆ AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::AnimateBeginEvent ; (; SReal ; dt). ◆ ~AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::~AnimateBeginEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateBeginEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::simulation::AnimateBeginEvent::getDt ; (; ); const. inline . sofasimulationAnimateBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html:1451,Modifiability,inherit,inherited,1451,"ons |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateBeginEvent Class Reference . #include <AnimateBeginEvent.h>. Inheritance diagram for sofa::simulation::AnimateBeginEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() before computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateBeginEvent (SReal dt);  ;  ~AnimateBeginEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateBeginEvent::dt. protected . Constructor details. ◆ AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::AnimateBeginEvent ; (; SReal ; dt). ◆ ~AnimateBeginEvent(). sofa::simulation::AnimateBeginEvent::~AnimateBeginEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateBeginEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::simulation::AnimateBeginEvent::getDt ; (; ); const. inline . sofasimulationAnimateBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::AnimateEndEvent Member List . This is the complete list of members for sofa::simulation::AnimateEndEvent, including all inherited members. AnimateEndEvent(SReal dt)sofa::simulation::AnimateEndEvent; dtsofa::simulation::AnimateEndEventprotected; Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::AnimateEndEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getDt() constsofa::simulation::AnimateEndEventinline; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~AnimateEndEvent() overridesofa::simulation::AnimateEndEvent; ~Event()sofa::core::objectmodel::Eventvirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html:327,Modifiability,Inherit,Inheritance,327,"﻿. SOFA API: sofa::simulation::AnimateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateEndEvent Class Reference . #include <AnimateEndEvent.h>. Inheritance diagram for sofa::simulation::AnimateEndEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() after computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateEndEvent (SReal dt);  ;  ~AnimateEndEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateEndEvent::dt. protected . Constructor details. ◆ AnimateEndEvent(). sofa::simulation::AnimateEndEvent::AnimateEndEvent ; (; SReal ; dt). ◆ ~AnimateEndEvent(). sofa::simulation::AnimateEndEvent::~AnimateEndEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateEndEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html:574,Modifiability,inherit,inherited,574,"﻿. SOFA API: sofa::simulation::AnimateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateEndEvent Class Reference . #include <AnimateEndEvent.h>. Inheritance diagram for sofa::simulation::AnimateEndEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() after computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateEndEvent (SReal dt);  ;  ~AnimateEndEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateEndEvent::dt. protected . Constructor details. ◆ AnimateEndEvent(). sofa::simulation::AnimateEndEvent::AnimateEndEvent ; (; SReal ; dt). ◆ ~AnimateEndEvent(). sofa::simulation::AnimateEndEvent::~AnimateEndEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateEndEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html:781,Modifiability,inherit,inherited,781,"﻿. SOFA API: sofa::simulation::AnimateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateEndEvent Class Reference . #include <AnimateEndEvent.h>. Inheritance diagram for sofa::simulation::AnimateEndEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() after computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateEndEvent (SReal dt);  ;  ~AnimateEndEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateEndEvent::dt. protected . Constructor details. ◆ AnimateEndEvent(). sofa::simulation::AnimateEndEvent::AnimateEndEvent ; (; SReal ; dt). ◆ ~AnimateEndEvent(). sofa::simulation::AnimateEndEvent::~AnimateEndEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateEndEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html:1253,Modifiability,inherit,inherited,1253,"ributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateEndEvent Class Reference . #include <AnimateEndEvent.h>. Inheritance diagram for sofa::simulation::AnimateEndEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() after computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateEndEvent (SReal dt);  ;  ~AnimateEndEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateEndEvent::dt. protected . Constructor details. ◆ AnimateEndEvent(). sofa::simulation::AnimateEndEvent::AnimateEndEvent ; (; SReal ; dt). ◆ ~AnimateEndEvent(). sofa::simulation::AnimateEndEvent::~AnimateEndEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateEndEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::simulation::AnimateEndEvent::getDt ; (; ); const. inline . sofasimulationAnimateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html:1390,Modifiability,Inherit,Inherited,1390,"ributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateEndEvent Class Reference . #include <AnimateEndEvent.h>. Inheritance diagram for sofa::simulation::AnimateEndEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() after computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateEndEvent (SReal dt);  ;  ~AnimateEndEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateEndEvent::dt. protected . Constructor details. ◆ AnimateEndEvent(). sofa::simulation::AnimateEndEvent::AnimateEndEvent ; (; SReal ; dt). ◆ ~AnimateEndEvent(). sofa::simulation::AnimateEndEvent::~AnimateEndEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateEndEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::simulation::AnimateEndEvent::getDt ; (; ); const. inline . sofasimulationAnimateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html:1438,Modifiability,inherit,inherited,1438,"ributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::AnimateEndEvent Class Reference . #include <AnimateEndEvent.h>. Inheritance diagram for sofa::simulation::AnimateEndEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() after computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  AnimateEndEvent (SReal dt);  ;  ~AnimateEndEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateEndEvent::dt. protected . Constructor details. ◆ AnimateEndEvent(). sofa::simulation::AnimateEndEvent::AnimateEndEvent ; (; SReal ; dt). ◆ ~AnimateEndEvent(). sofa::simulation::AnimateEndEvent::~AnimateEndEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::AnimateEndEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::simulation::AnimateEndEvent::getDt ; (; ); const. inline . sofasimulationAnimateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor-members.html:3007,Deployability,Pipeline,Pipeline,3007,"ach(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; fwdInteractionForceField(simulation::Node *node, core::behavior::BaseInteractionForceField *obj)sofa::simulation::AnimateVisitorvirtual; getCategoryName() const overridesofa::simulation::AnimateVisitorinlinevirtual; getClassName() const overridesofa::simulation::AnimateVisitorinlinevirtual; getDt() constsofa::simulation::AnimateVisitorinline; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::AnimateVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processCollisionPipeline(simulation::Node *node, core::collision::Pipeline *obj)sofa::simulation::AnimateVisitorvirtual; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::AnimateVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Resu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::AnimateVisitor Member List . This is the complete list of members for sofa::simulation::AnimateVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; AnimateVisitor(const core::ExecParams *params, SReal dt)sofa::simulation::AnimateVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; dtsofa::simulation::AnimateVisitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; firstNodeVisitedsofa::simulation::AnimateVisitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor-members.html:4395,Testability,test,testTags,4395,"mulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::AnimateVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processCollisionPipeline(simulation::Node *node, core::collision::Pipeline *obj)sofa::simulation::AnimateVisitorvirtual; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::AnimateVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setDt(SReal v)sofa::simulation::AnimateVisitorinline; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html:744,Deployability,Pipeline,Pipeline,744,"﻿. SOFA API: sofa::simulation::AnimateVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::AnimateVisitor Class Reference . #include <AnimateVisitor.h>. Inheritance diagram for sofa::simulation::AnimateVisitor:. [legend]. Protected Attributes; SReal dt;  ; bool firstNodeVisited;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  AnimateVisitor (const core::ExecParams *params, SReal dt);  ; void setDt (SReal v);  ; SReal getDt () const;  ; virtual void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj);  ; virtual void fwdInteractionForceField (simulation::Node *node, core::behavior::BaseInteractionForceField *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool prec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html:6396,Deployability,Pipeline,Pipeline,6396,"ypeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateVisitor::dt. protected . ◆ firstNodeVisited. bool sofa::simulation::AnimateVisitor::firstNodeVisited. protected . Constructor details. ◆ AnimateVisitor(). sofa::simulation::AnimateVisitor::AnimateVisitor ; (; const core::ExecParams * ; params, . SReal ; dt . ). Function details. ◆ fwdInteractionForceField(). void sofa::simulation::AnimateVisitor::fwdInteractionForceField ; (; simulation::Node * ; node, . core::behavior::BaseInteractionForceField * ; obj . ). virtual . ◆ getCategoryName(). const char* sofa::simulation::AnimateVisitor::getCategoryName ; (; ); const. inlineoverridevirtual . Return a category name for this action. Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getClassName(). const char* sofa::simulation::AnimateVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getDt(). SReal sofa::simulation::AnimateVisitor::getDt ; (; ); const. inline . ◆ isThreadSafe(). bool sofa::simulation::AnimateVisitor::isThreadSafe ; (; ); const. inlineoverridevirtual . Specify whether this action can be parallelized. ; Reimplemented from sofa::simulation::Visitor. ◆ processCollisionPipeline(). void sofa::simulation::AnimateVisitor::processCollisionPipeline ; (; simulation::Node * ; node, . core::collision::Pipeline * ; obj . ). virtual . ◆ processNodeTopDown(). Visitor::Result sofa::simulation::AnimateVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::Visitor. ◆ setDt(). void sofa::simulation::AnimateVisitor::setDt ; (; SReal ; v). inline . sofasimulationAnimateVisitor; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html:290,Modifiability,Inherit,Inheritance,290,"﻿. SOFA API: sofa::simulation::AnimateVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::AnimateVisitor Class Reference . #include <AnimateVisitor.h>. Inheritance diagram for sofa::simulation::AnimateVisitor:. [legend]. Protected Attributes; SReal dt;  ; bool firstNodeVisited;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  AnimateVisitor (const core::ExecParams *params, SReal dt);  ; void setDt (SReal v);  ; SReal getDt () const;  ; virtual void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj);  ; virtual void fwdInteractionForceField (simulation::Node *node, core::behavior::BaseInteractionForceField *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool prec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html:442,Modifiability,inherit,inherited,442,"﻿. SOFA API: sofa::simulation::AnimateVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::AnimateVisitor Class Reference . #include <AnimateVisitor.h>. Inheritance diagram for sofa::simulation::AnimateVisitor:. [legend]. Protected Attributes; SReal dt;  ; bool firstNodeVisited;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  AnimateVisitor (const core::ExecParams *params, SReal dt);  ; void setDt (SReal v);  ; SReal getDt () const;  ; virtual void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj);  ; virtual void fwdInteractionForceField (simulation::Node *node, core::behavior::BaseInteractionForceField *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool prec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html:1286,Modifiability,inherit,inherited,1286," dt;  ; bool firstNodeVisited;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  AnimateVisitor (const core::ExecParams *params, SReal dt);  ; void setDt (SReal v);  ; SReal getDt () const;  ; virtual void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj);  ; virtual void fwdInteractionForceField (simulation::Node *node, core::behavior::BaseInteractionForceField *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html:3402,Modifiability,Inherit,Inherited,3402,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html:3440,Modifiability,inherit,inherited,3440,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html:3647,Modifiability,inherit,inherited,3647,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::AnimateVisitor::dt. protected . ◆ firstNodeVisited. bool sofa::simulation::AnimateVisitor::firstNodeVisited. protected . Constructor details. ◆ AnimateVisitor(). sofa::simulation::AnimateVisitor::AnimateVisitor ; (; const core::ExecParams * ; params, . SReal ; dt . ). Function details. ◆ fw",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html:3584,Security,access,access,3584,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html:1870,Testability,test,testTags,1870,"ation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_animate_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::BaseMechanicalVisitor Member List . This is the complete list of members for sofa::simulation::BaseMechanicalVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor-members.html:9814,Testability,test,testTags,9814,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:542,Availability,down,down,542,"﻿. SOFA API: sofa::simulation::BaseMechanicalVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::BaseMechanicalVisitor Class Reference . #include <BaseMechanicalVisitor.h>. Inheritance diagram for sofa::simulation::BaseMechanicalVisitor:. [legend]; Detailed Description; Base class for easily creating new actions for mechanical simulation.; During the first traversal (top-down), method processNodeTopDown(simulation::Node*) is applied to each simulation::Node. Each component attached to this node is processed using the appropriate method, prefixed by fwd. During the second traversal (bottom-up), method processNodeBottomUp(simulation::Node*) is applied to each simulation::Node. Each component attached to this node is processed using the appropriate method, prefixed by bwd. The default behavior of the fwd* and bwd* is to do nothing. Derived actions typically overload these methods to implement the desired processing. . Protected Attributes; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getClassName () const override;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Forward processing; Methods called during the forward (top-down) traversal of the data stru",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:1969,Availability,down,down,1969,"he appropriate method, prefixed by fwd. During the second traversal (bottom-up), method processNodeBottomUp(simulation::Node*) is applied to each simulation::Node. Each component attached to this node is processed using the appropriate method, prefixed by bwd. The default behavior of the fwd* and bwd* is to do nothing. Derived actions typically overload these methods to implement the desired processing. . Protected Attributes; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getClassName () const override;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Forward processing; Methods called during the forward (top-down) traversal of the data structure. Method processNodeTopDown(simulation::Node*) calls the fwd* methods in the order given here. When there is a mapping, it is processed first, then method fwdMappedMechanicalState is applied to the BaseMechanicalState. When there is no mapping, the BaseMechanicalState is processed first using method fwdMechanicalState. Then, the other fwd* methods are applied in the given order. . Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolve",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:341,Modifiability,Inherit,Inheritance,341,"﻿. SOFA API: sofa::simulation::BaseMechanicalVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::BaseMechanicalVisitor Class Reference . #include <BaseMechanicalVisitor.h>. Inheritance diagram for sofa::simulation::BaseMechanicalVisitor:. [legend]; Detailed Description; Base class for easily creating new actions for mechanical simulation.; During the first traversal (top-down), method processNodeTopDown(simulation::Node*) is applied to each simulation::Node. Each component attached to this node is processed using the appropriate method, prefixed by fwd. During the second traversal (bottom-up), method processNodeBottomUp(simulation::Node*) is applied to each simulation::Node. Each component attached to this node is processed using the appropriate method, prefixed by bwd. The default behavior of the fwd* and bwd* is to do nothing. Derived actions typically overload these methods to implement the desired processing. . Protected Attributes; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getClassName () const override;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Forward processing; Methods called during the forward (top-down) traversal of the data stru",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:1287,Modifiability,inherit,inherited,1287,"BaseMechanicalVisitor.h>. Inheritance diagram for sofa::simulation::BaseMechanicalVisitor:. [legend]; Detailed Description; Base class for easily creating new actions for mechanical simulation.; During the first traversal (top-down), method processNodeTopDown(simulation::Node*) is applied to each simulation::Node. Each component attached to this node is processed using the appropriate method, prefixed by fwd. During the second traversal (bottom-up), method processNodeBottomUp(simulation::Node*) is applied to each simulation::Node. Each component attached to this node is processed using the appropriate method, prefixed by bwd. The default behavior of the fwd* and bwd* is to do nothing. Derived actions typically overload these methods to implement the desired processing. . Protected Attributes; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getClassName () const override;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Forward processing; Methods called during the forward (top-down) traversal of the data structure. Method processNodeTopDown(simulation::Node*) calls the fwd* methods in the order given here. When there is a mapping, it is processed first, then method fwdMappedMechanicalState is applied to the BaseMechanicalState. When there is no mapping, the BaseMechanicalState is processed first using method fwdMecha",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:9370,Modifiability,inherit,inherited,9370,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:11456,Modifiability,inherit,inherited,11456," , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Protected Member Functions; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute detail",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:12754,Modifiability,Inherit,Inherited,12754,"ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ root. simulation::Node* sofa::simulation::BaseMechanicalVisitor::root. protected . root node from which the visitor was executed . ◆ rootData. SReal* sofa::simulation::BaseMechanicalVisitor::rootData { nullptr }. protected . data for root node . Constructor details. ◆ BaseMechanicalVisitor(). sofa::simulation::BaseMechanicalVisitor::BaseMechanicalVisitor ; (; const sofa::core::ExecParams * ; params). Function details. ◆ addNodeData(). virtual void sofa::simulation::BaseMechanicalVisitor::addNodeData ; (; simulation::Node * ; , . SReal * ; , . const SReal * ;  . ). virtualdelete . ◆ bwdConstraintSet() [1/2]. void sofa::simulation::BaseMechanicalVisitor::bwdConstraintSet ; (; simulation::Node * ; , . sofa::core::behavior::BaseConstraintSet * ;  . ). virtual . Process all the BaseConstraintSet. . ◆ bwdConstraintS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:12792,Modifiability,inherit,inherited,12792,"ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ root. simulation::Node* sofa::simulation::BaseMechanicalVisitor::root. protected . root node from which the visitor was executed . ◆ rootData. SReal* sofa::simulation::BaseMechanicalVisitor::rootData { nullptr }. protected . data for root node . Constructor details. ◆ BaseMechanicalVisitor(). sofa::simulation::BaseMechanicalVisitor::BaseMechanicalVisitor ; (; const sofa::core::ExecParams * ; params). Function details. ◆ addNodeData(). virtual void sofa::simulation::BaseMechanicalVisitor::addNodeData ; (; simulation::Node * ; , . SReal * ; , . const SReal * ;  . ). virtualdelete . ◆ bwdConstraintSet() [1/2]. void sofa::simulation::BaseMechanicalVisitor::bwdConstraintSet ; (; simulation::Node * ; , . sofa::core::behavior::BaseConstraintSet * ;  . ). virtual . Process all the BaseConstraintSet. . ◆ bwdConstraintS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:12936,Security,access,access,12936,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ root. simulation::Node* sofa::simulation::BaseMechanicalVisitor::root. protected . root node from which the visitor was executed . ◆ rootData. SReal* sofa::simulation::BaseMechanicalVisitor::rootData { nullptr }. protected . data for root node . Constructor details. ◆ BaseMechanicalVisitor(). sofa::simulation::BaseMechanicalVisitor::BaseMechanicalVisitor ; (; const sofa::core::ExecParams * ; params). Function details. ◆ addNodeData(). virtual void sofa::simulation::BaseMechanicalVisitor::addNodeData ; (; simulation::Node * ; , . SReal * ; , . const SReal * ;  . ). virtualdelete . ◆ bwdConstraintSet() [1/2]. void sofa::simulation::BaseMechanicalVisitor::bwdConstraintSet ; (; simulation::Node * ; , . sofa::core::behavior::BaseConstraintSet * ;  . ). virtual . Process all the BaseConstraintSet. . ◆ bwdConstraintSet() [2/2]. void sofa::simulation::BaseMechanicalVisitor::bwdConstraintSet ; (; VisitorContext * ; ctx, . sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:9784,Testability,test,testTags,9784," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor-members.html:266,Modifiability,inherit,inherited,266,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::BehaviorUpdatePositionVisitor Member List . This is the complete list of members for sofa::simulation::BehaviorUpdatePositionVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; BehaviorUpdatePositionVisitor(const core::ExecParams *params, SReal _dt)sofa::simulation::BehaviorUpdatePositionVisitorinline; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; dtsofa::simulation::BehaviorUpdatePositionVisitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor-members.html:4363,Testability,test,testTags,4363,"e() const overridesofa::simulation::BehaviorUpdatePositionVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processBehaviorModel(simulation::Node *node, core::BehaviorModel *b)sofa::simulation::BehaviorUpdatePositionVisitor; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BehaviorUpdatePositionVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setDt(SReal _dt)sofa::simulation::BehaviorUpdatePositionVisitorinline; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html:441,Deployability,Update,Update,441,"﻿. SOFA API: sofa::simulation::BehaviorUpdatePositionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::BehaviorUpdatePositionVisitor Class Reference . #include <BehaviorUpdatePositionVisitor.h>. Inheritance diagram for sofa::simulation::BehaviorUpdatePositionVisitor:. [legend]; Detailed Description; Update the position of a new simulation step . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  BehaviorUpdatePositionVisitor (const core::ExecParams *params, SReal _dt);  ; void processBehaviorModel (simulation::Node *node, core::BehaviorModel *b);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; void setDt (SReal _dt);  ; SReal getDt ();  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html:335,Modifiability,Inherit,Inheritance,335,"﻿. SOFA API: sofa::simulation::BehaviorUpdatePositionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::BehaviorUpdatePositionVisitor Class Reference . #include <BehaviorUpdatePositionVisitor.h>. Inheritance diagram for sofa::simulation::BehaviorUpdatePositionVisitor:. [legend]; Detailed Description; Update the position of a new simulation step . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  BehaviorUpdatePositionVisitor (const core::ExecParams *params, SReal _dt);  ; void processBehaviorModel (simulation::Node *node, core::BehaviorModel *b);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; void setDt (SReal _dt);  ; SReal getDt ();  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html:545,Modifiability,inherit,inherited,545,"﻿. SOFA API: sofa::simulation::BehaviorUpdatePositionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::BehaviorUpdatePositionVisitor Class Reference . #include <BehaviorUpdatePositionVisitor.h>. Inheritance diagram for sofa::simulation::BehaviorUpdatePositionVisitor:. [legend]; Detailed Description; Update the position of a new simulation step . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  BehaviorUpdatePositionVisitor (const core::ExecParams *params, SReal _dt);  ; void processBehaviorModel (simulation::Node *node, core::BehaviorModel *b);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; void setDt (SReal _dt);  ; SReal getDt ();  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html:1266,Modifiability,inherit,inherited,1266,"nce diagram for sofa::simulation::BehaviorUpdatePositionVisitor:. [legend]; Detailed Description; Update the position of a new simulation step . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  BehaviorUpdatePositionVisitor (const core::ExecParams *params, SReal _dt);  ; void processBehaviorModel (simulation::Node *node, core::BehaviorModel *b);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; void setDt (SReal _dt);  ; SReal getDt ();  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::Vis",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html:3382,Modifiability,Inherit,Inherited,3382,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html:3420,Modifiability,inherit,inherited,3420,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html:3627,Modifiability,inherit,inherited,3627,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ dt. SReal sofa::simulation::BehaviorUpdatePositionVisitor::dt. protected . Constructor details. ◆ BehaviorUpdatePositionVisitor(). sofa::simulation::BehaviorUpdatePositionVisitor::BehaviorUpdatePositionVisitor ; (; const core::ExecParams * ; params, . SReal ; _dt . ). inline . Function details. ◆ getCategoryName(). co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html:3564,Security,access,access,3564,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html:1850,Testability,test,testTags,1850,"called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; void setDt (SReal _dt);  ; SReal getDt ();  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_behavior_update_position_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event-members.html:266,Modifiability,inherit,inherited,266,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::BuildConstraintSystemEndEvent Member List . This is the complete list of members for sofa::simulation::BuildConstraintSystemEndEvent, including all inherited members. BuildConstraintSystemEndEvent()sofa::simulation::BuildConstraintSystemEndEventinline; Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::BuildConstraintSystemEndEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~BuildConstraintSystemEndEvent() overridesofa::simulation::BuildConstraintSystemEndEventinline; ~Event()sofa::core::objectmodel::Eventvirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html:345,Modifiability,Inherit,Inheritance,345,"﻿. SOFA API: sofa::simulation::BuildConstraintSystemEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::BuildConstraintSystemEndEvent Class Reference . #include <BuildConstraintSystemEndEvent.h>. Inheritance diagram for sofa::simulation::BuildConstraintSystemEndEvent:. [legend]. Public Member Functions;  BuildConstraintSystemEndEvent ();  ;  ~BuildConstraintSystemEndEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::BuildConstraintSystemEndEvent ; (; ). inline . ◆ ~BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::~BuildConstraintSystemEndEvent ; (; ). inlineoverride . Function details. ◆ GetClassName(). static const char* sofa::simulation::BuildConstraintSystemEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationBuildConstraintSystemEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html:565,Modifiability,inherit,inherited,565,"﻿. SOFA API: sofa::simulation::BuildConstraintSystemEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::BuildConstraintSystemEndEvent Class Reference . #include <BuildConstraintSystemEndEvent.h>. Inheritance diagram for sofa::simulation::BuildConstraintSystemEndEvent:. [legend]. Public Member Functions;  BuildConstraintSystemEndEvent ();  ;  ~BuildConstraintSystemEndEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::BuildConstraintSystemEndEvent ; (; ). inline . ◆ ~BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::~BuildConstraintSystemEndEvent ; (; ). inlineoverride . Function details. ◆ GetClassName(). static const char* sofa::simulation::BuildConstraintSystemEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationBuildConstraintSystemEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html:1037,Modifiability,inherit,inherited,1037,"﻿. SOFA API: sofa::simulation::BuildConstraintSystemEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::BuildConstraintSystemEndEvent Class Reference . #include <BuildConstraintSystemEndEvent.h>. Inheritance diagram for sofa::simulation::BuildConstraintSystemEndEvent:. [legend]. Public Member Functions;  BuildConstraintSystemEndEvent ();  ;  ~BuildConstraintSystemEndEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::BuildConstraintSystemEndEvent ; (; ). inline . ◆ ~BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::~BuildConstraintSystemEndEvent ; (; ). inlineoverride . Function details. ◆ GetClassName(). static const char* sofa::simulation::BuildConstraintSystemEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationBuildConstraintSystemEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html:1174,Modifiability,Inherit,Inherited,1174,"﻿. SOFA API: sofa::simulation::BuildConstraintSystemEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::BuildConstraintSystemEndEvent Class Reference . #include <BuildConstraintSystemEndEvent.h>. Inheritance diagram for sofa::simulation::BuildConstraintSystemEndEvent:. [legend]. Public Member Functions;  BuildConstraintSystemEndEvent ();  ;  ~BuildConstraintSystemEndEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::BuildConstraintSystemEndEvent ; (; ). inline . ◆ ~BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::~BuildConstraintSystemEndEvent ; (; ). inlineoverride . Function details. ◆ GetClassName(). static const char* sofa::simulation::BuildConstraintSystemEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationBuildConstraintSystemEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html:1215,Modifiability,inherit,inherited,1215,"﻿. SOFA API: sofa::simulation::BuildConstraintSystemEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::BuildConstraintSystemEndEvent Class Reference . #include <BuildConstraintSystemEndEvent.h>. Inheritance diagram for sofa::simulation::BuildConstraintSystemEndEvent:. [legend]. Public Member Functions;  BuildConstraintSystemEndEvent ();  ;  ~BuildConstraintSystemEndEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::BuildConstraintSystemEndEvent ; (; ). inline . ◆ ~BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::~BuildConstraintSystemEndEvent ; (; ). inlineoverride . Function details. ◆ GetClassName(). static const char* sofa::simulation::BuildConstraintSystemEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationBuildConstraintSystemEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html:1310,Modifiability,inherit,inherited,1310,"﻿. SOFA API: sofa::simulation::BuildConstraintSystemEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::BuildConstraintSystemEndEvent Class Reference . #include <BuildConstraintSystemEndEvent.h>. Inheritance diagram for sofa::simulation::BuildConstraintSystemEndEvent:. [legend]. Public Member Functions;  BuildConstraintSystemEndEvent ();  ;  ~BuildConstraintSystemEndEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::BuildConstraintSystemEndEvent ; (; ). inline . ◆ ~BuildConstraintSystemEndEvent(). sofa::simulation::BuildConstraintSystemEndEvent::~BuildConstraintSystemEndEvent ; (; ). inlineoverride . Function details. ◆ GetClassName(). static const char* sofa::simulation::BuildConstraintSystemEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationBuildConstraintSystemEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_build_constraint_system_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::CleanupVisitor Member List . This is the complete list of members for sofa::simulation::CleanupVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; CleanupVisitor(const core::ExecParams *params)sofa::simulation::CleanupVisitorinline; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor-members.html:3907,Testability,test,testTags,3907,"::Visitor; getCategoryName() constsofa::simulation::Visitorinlinevirtual; getClassName() const overridesofa::simulation::CleanupVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() constsofa::simulation::Visitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(Node *node) overridesofa::simulation::CleanupVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(Node *node) overridesofa::simulation::CleanupVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html:266,Modifiability,Inherit,Inheritance,266,"﻿. SOFA API: sofa::simulation::CleanupVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::CleanupVisitor Class Reference . #include <CleanupVisitor.h>. Inheritance diagram for sofa::simulation::CleanupVisitor:. [legend]. Public Member Functions;  CleanupVisitor (const core::ExecParams *params);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctim",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html:822,Modifiability,inherit,inherited,822,"﻿. SOFA API: sofa::simulation::CleanupVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::CleanupVisitor Class Reference . #include <CleanupVisitor.h>. Inheritance diagram for sofa::simulation::CleanupVisitor:. [legend]. Public Member Functions;  CleanupVisitor (const core::ExecParams *params);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctim",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html:2917,Modifiability,Inherit,Inherited,2917,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html:2955,Modifiability,inherit,inherited,2955,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html:3156,Modifiability,inherit,inherited,3156,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ CleanupVisitor(). sofa::simulation::CleanupVisitor::CleanupVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::CleanupVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a clas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html:3268,Modifiability,inherit,inherited,3268,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ CleanupVisitor(). sofa::simulation::CleanupVisitor::CleanupVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::CleanupVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a clas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html:3099,Security,access,access,3099,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html:1286,Testability,test,testTags,1286,"ation::CleanupVisitor:. [legend]. Public Member Functions;  CleanupVisitor (const core::ExecParams *params);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cleanup_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:7356,Deployability,integrat,integrate,7356,"ataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::BaseAnimationLoopvirtual; integrate(const core::ExecParams *params, SReal dt)sofa::simulation::CollisionAnimationLoopprotectedvirtual; internalCollisionComputation(const core::ExecParams *params=core::execparams::defaultInstance())sofa::simulation::CollisionAnimationLoopprotectedvirtual; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_nodesofa::core::behavior::BaseAnimationLoop; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:9140,Deployability,Pipeline,Pipeline,9140,"::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_resetTimesofa::core::behavior::BaseAnimationLoopprotected; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg) overridesofa::core::objectmodel::BaseObjectvirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Pipeline typedefsofa::simulation::CollisionAnimationLoopprotected; postCollisionComputation(const core::ExecParams *params=core::execparams::defaultInstance())sofa::simulation::CollisionAnimationLoopprotectedvirtual; preCollisionComputation(const core::ExecParams *params=core::execparams::defaultInstance())sofa::simulation::CollisionAnimationLoopprotectedvirtual; Ptr typedefsofa::core::objectmodel::Base; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::BaseAnimationLoopvirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFil",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:11298,Deployability,update,updateInternal,11298,"SourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseAnimationLoop, objectmodel::BaseObject)sofa::core::behavior::BaseAnimationLoop; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; Solvers typedefsofa::simulation::CollisionAnimationLoopprotected; SPtr typedefsofa::core::objectmodel::Base; step(const core::ExecParams *params, SReal dt)=0sofa::core::behavior::BaseAnimationLooppure virtual; storeResetState() overridesofa::core::behavior::BaseAnimationLoopprotectedvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseAnimationLoop() overridesofa::core::behavior::BaseAnimationLoopprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CollisionAnimationLoop() overridesofa::simulation::CollisionAnimationLoopprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:11351,Deployability,update,updateLinks,11351,"SourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseAnimationLoop, objectmodel::BaseObject)sofa::core::behavior::BaseAnimationLoop; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; Solvers typedefsofa::simulation::CollisionAnimationLoopprotected; SPtr typedefsofa::core::objectmodel::Base; step(const core::ExecParams *params, SReal dt)=0sofa::core::behavior::BaseAnimationLooppure virtual; storeResetState() overridesofa::core::behavior::BaseAnimationLoopprotectedvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseAnimationLoop() overridesofa::core::behavior::BaseAnimationLoopprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CollisionAnimationLoop() overridesofa::simulation::CollisionAnimationLoopprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:729,Integrability,Message,Message,729," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseContext typedefsofa::simulation::CollisionAnimationLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:2513,Integrability,Message,Message,2513,"n typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; CollisionAnimationLoop()sofa::simulation::CollisionAnimationLoopprotected; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollision(const core::ExecParams *params=core::execparams::defaultInstance())sofa::simulation::CollisionAnimationLoopprotectedvirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_computeBoundingBoxsofa::core::behavior::BaseAnimationLoop; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:2555,Integrability,Message,Message,2555,"ionLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; CollisionAnimationLoop()sofa::simulation::CollisionAnimationLoopprotected; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollision(const core::ExecParams *params=core::execparams::defaultInstance())sofa::simulation::CollisionAnimationLoopprotectedvirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_computeBoundingBoxsofa::core::behavior::BaseAnimationLoop; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:4800,Integrability,Message,Message,4800,t std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getResetTime() constsofa::core::behavior::BaseAnimationLoop; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getSolverSequence()sofa::simulation::CollisionAnimationLoopprotected; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTo,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:4842,Integrability,Message,Message,4842,ctmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getResetTime() constsofa::core::behavior::BaseAnimationLoop; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getSolverSequence()sofa::simulation::CollisionAnimationLoopprotected; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)s,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:7356,Integrability,integrat,integrate,7356,"ataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::BaseAnimationLoopvirtual; integrate(const core::ExecParams *params, SReal dt)sofa::simulation::CollisionAnimationLoopprotectedvirtual; internalCollisionComputation(const core::ExecParams *params=core::execparams::defaultInstance())sofa::simulation::CollisionAnimationLoopprotectedvirtual; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_nodesofa::core::behavior::BaseAnimationLoop; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::CollisionAnimationLoop Member List . This is the complete list of members for sofa::simulation::CollisionAnimationLoop, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseContext typedefsofa::simulation::CollisionAnimationLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:6103,Modifiability,Inherit,Inherit,6103,"etPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getResetTime() constsofa::core::behavior::BaseAnimationLoop; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getSolverSequence()sofa::simulation::CollisionAnimationLoopprotected; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; Inherit typedefsofa::simulation::CollisionAnimationLoop; init() overridesofa::core::behavior::BaseAnimationLoopvirtual; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitDat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:10549,Performance,load,loader,10549,"it()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::BaseAnimationLoopvirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseAnimationLoop, objectmodel::BaseObject)sofa::core::behavior::BaseAnimationLoop; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; Solvers typedefsofa::simulation::CollisionAnimationLoopprotected; SPtr typedefsofa::core::objectmodel::Base; step(const core::ExecParams *params, SReal dt)=0sofa::core::behavior::BaseAnimationLooppure virtual; storeResetState() overridesofa::core::behavior::BaseAnimationLoopprotectedvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:720,Testability,log,logging,720," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseContext typedefsofa::simulation::CollisionAnimationLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:2504,Testability,log,logging,2504,"escription typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; CollisionAnimationLoop()sofa::simulation::CollisionAnimationLoopprotected; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollision(const core::ExecParams *params=core::execparams::defaultInstance())sofa::simulation::CollisionAnimationLoopprotectedvirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_computeBoundingBoxsofa::core::behavior::BaseAnimationLoop; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:2546,Testability,log,logging,2546,"ionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; CollisionAnimationLoop()sofa::simulation::CollisionAnimationLoopprotected; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollision(const core::ExecParams *params=core::execparams::defaultInstance())sofa::simulation::CollisionAnimationLoopprotectedvirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_computeBoundingBoxsofa::core::behavior::BaseAnimationLoop; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkD",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:4791,Testability,log,logging,4791,inks(const std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getResetTime() constsofa::core::behavior::BaseAnimationLoop; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getSolverSequence()sofa::simulation::CollisionAnimationLoopprotected; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual;,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:4833,Testability,log,logging,4833,ore::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getResetTime() constsofa::core::behavior::BaseAnimationLoop; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getSolverSequence()sofa::simulation::CollisionAnimationLoopprotected; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topo,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:11368,Testability,log,logErrors,11368,"SourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseAnimationLoop, objectmodel::BaseObject)sofa::core::behavior::BaseAnimationLoop; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; Solvers typedefsofa::simulation::CollisionAnimationLoopprotected; SPtr typedefsofa::core::objectmodel::Base; step(const core::ExecParams *params, SReal dt)=0sofa::core::behavior::BaseAnimationLooppure virtual; storeResetState() overridesofa::core::behavior::BaseAnimationLoopprotectedvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseAnimationLoop() overridesofa::core::behavior::BaseAnimationLoopprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CollisionAnimationLoop() overridesofa::simulation::CollisionAnimationLoopprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:2096,Usability,clear,clearLoggedMessages,2096,"function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseContext typedefsofa::simulation::CollisionAnimationLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; CollisionAnimationLoop()sofa::simulation::CollisionAnimationLoopprotected; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollision(const core::ExecParams *params=core::execparams::defaultInstance())sofa::simulation::CollisionAnimationLoopprotectedvirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_computeBoundingBoxsofa::core::behavior::BaseAnimationLoop; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::ob",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:6224,Availability,down,down,6224,"_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SReal m_resetTime;  Stores starting time of the simulation. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  SOFA_ABSTRACT_CLASS (BaseAnimationLoop, objectmodel::BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void step (const core::ExecParams *params, SReal dt)=0;  ; SReal getResetTime () const;  Returns starting time of the simulation. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:384,Deployability,integrat,integrations,384,"﻿. SOFA API: sofa::simulation::CollisionAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::simulation::CollisionAnimationLoop Class Reference . #include <CollisionAnimationLoop.h>; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:618,Deployability,integrat,integrations,618,"﻿. SOFA API: sofa::simulation::CollisionAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::simulation::CollisionAnimationLoop Class Reference . #include <CollisionAnimationLoop.h>; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:757,Deployability,integrat,integration,757,"﻿. SOFA API: sofa::simulation::CollisionAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::simulation::CollisionAnimationLoop Class Reference . #include <CollisionAnimationLoop.h>; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:1416,Deployability,update,update,1416,"ain simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:2941,Deployability,Pipeline,Pipeline,2941,"ofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Visitors; These methods provides an abstract view of the mechanical system to animate. They are implemented by executing Visitors in the subtree of the scene-graph below this solver. . typedef simulation::Node::Sequence< core::behavior::OdeSolver > Solvers;  ; typedef core::collision::Pipeline Pipeline;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STORE",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:2950,Deployability,Pipeline,Pipeline,2950,"ofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Visitors; These methods provides an abstract view of the mechanical system to animate. They are implemented by executing Visitors in the subtree of the scene-graph below this solver. . typedef simulation::Node::Sequence< core::behavior::OdeSolver > Solvers;  ; typedef core::collision::Pipeline Pipeline;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STORE",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:3640,Deployability,pipeline,pipeline,3640,"e, bool isReadOnly=false);  Helper method used by initData() More...;  . Visitors; These methods provides an abstract view of the mechanical system to animate. They are implemented by executing Visitors in the subtree of the scene-graph below this solver. . typedef simulation::Node::Sequence< core::behavior::OdeSolver > Solvers;  ; typedef core::collision::Pipeline Pipeline;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:3675,Deployability,integrat,integrate,3675,"w of the mechanical system to animate. They are implemented by executing Visitors in the subtree of the scene-graph below this solver. . typedef simulation::Node::Sequence< core::behavior::OdeSolver > Solvers;  ; typedef core::collision::Pipeline Pipeline;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object be",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:8223,Deployability,Update,Update,8223," getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:8313,Deployability,update,updateInternal,8313,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:8333,Deployability,Update,Update,8333,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:12713,Deployability,update,updateLinks,12713,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:12749,Deployability,Update,Update,12749,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:15759,Deployability,pipeline,pipeline,15759,"> ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::CollisionAnimationLoop ; (; ). protected . ◆ ~CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::~CollisionAnimationLoop ; (; ). overrideprotected . Function details. ◆ computeCollision(). void sofa::simulation::CollisionAnimationLoop::computeCollision ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Activate collision pipeline. . ◆ getSolverSequence(). const CollisionAnimationLoop::Solvers & sofa::simulation::CollisionAnimationLoop::getSolverSequence ; (; ). protected . ◆ integrate(). void sofa::simulation::CollisionAnimationLoop::integrate ; (; const core::ExecParams * ; params, . SReal ; dt . ). protectedvirtual . Activate OdeSolvers. . ◆ internalCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::internalCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function performing the actual collision computation. . ◆ postCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::postCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called after the actual collision computation. . ◆ preCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::preCollisionComputation ; (; const core::ExecParams * ; pa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:15916,Deployability,integrat,integrate,15916,"c T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::CollisionAnimationLoop ; (; ). protected . ◆ ~CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::~CollisionAnimationLoop ; (; ). overrideprotected . Function details. ◆ computeCollision(). void sofa::simulation::CollisionAnimationLoop::computeCollision ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Activate collision pipeline. . ◆ getSolverSequence(). const CollisionAnimationLoop::Solvers & sofa::simulation::CollisionAnimationLoop::getSolverSequence ; (; ). protected . ◆ integrate(). void sofa::simulation::CollisionAnimationLoop::integrate ; (; const core::ExecParams * ; params, . SReal ; dt . ). protectedvirtual . Activate OdeSolvers. . ◆ internalCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::internalCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function performing the actual collision computation. . ◆ postCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::postCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called after the actual collision computation. . ◆ preCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::preCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called before the actual collision computation. . sofasimulationCollisionAnimation",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:15976,Deployability,integrat,integrate,15976,"scription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::CollisionAnimationLoop ; (; ). protected . ◆ ~CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::~CollisionAnimationLoop ; (; ). overrideprotected . Function details. ◆ computeCollision(). void sofa::simulation::CollisionAnimationLoop::computeCollision ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Activate collision pipeline. . ◆ getSolverSequence(). const CollisionAnimationLoop::Solvers & sofa::simulation::CollisionAnimationLoop::getSolverSequence ; (; ). protected . ◆ integrate(). void sofa::simulation::CollisionAnimationLoop::integrate ; (; const core::ExecParams * ; params, . SReal ; dt . ). protectedvirtual . Activate OdeSolvers. . ◆ internalCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::internalCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function performing the actual collision computation. . ◆ postCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::postCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called after the actual collision computation. . ◆ preCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::preCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called before the actual collision computation. . sofasimulationCollisionAnimationLoop; Generated on Mon Nov 11 2024 03:33:58 for SOFA API ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:384,Integrability,integrat,integrations,384,"﻿. SOFA API: sofa::simulation::CollisionAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::simulation::CollisionAnimationLoop Class Reference . #include <CollisionAnimationLoop.h>; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:618,Integrability,integrat,integrations,618,"﻿. SOFA API: sofa::simulation::CollisionAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::simulation::CollisionAnimationLoop Class Reference . #include <CollisionAnimationLoop.h>; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:757,Integrability,integrat,integration,757,"﻿. SOFA API: sofa::simulation::CollisionAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::simulation::CollisionAnimationLoop Class Reference . #include <CollisionAnimationLoop.h>; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:3675,Integrability,integrat,integrate,3675,"w of the mechanical system to animate. They are implemented by executing Visitors in the subtree of the scene-graph below this solver. . typedef simulation::Node::Sequence< core::behavior::OdeSolver > Solvers;  ; typedef core::collision::Pipeline Pipeline;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object be",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:4589,Integrability,message,messages,4589," *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SReal m_resetTime;  Stores starting time of the simulation. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:6968,Integrability,depend,dependent,6968,"s. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  SOFA_ABSTRACT_CLASS (BaseAnimationLoop, objectmodel::BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void step (const core::ExecParams *params, SReal dt)=0;  ; SReal getResetTime () const;  Returns starting time of the simulation. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10578,Integrability,Message,Message,10578," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10651,Integrability,Message,Message,10651," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10693,Integrability,Message,Message,10693," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10763,Integrability,Message,Message,10763," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10874,Integrability,Message,Message,10874," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10916,Integrability,Message,Message,10916," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:15916,Integrability,integrat,integrate,15916,"c T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::CollisionAnimationLoop ; (; ). protected . ◆ ~CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::~CollisionAnimationLoop ; (; ). overrideprotected . Function details. ◆ computeCollision(). void sofa::simulation::CollisionAnimationLoop::computeCollision ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Activate collision pipeline. . ◆ getSolverSequence(). const CollisionAnimationLoop::Solvers & sofa::simulation::CollisionAnimationLoop::getSolverSequence ; (; ). protected . ◆ integrate(). void sofa::simulation::CollisionAnimationLoop::integrate ; (; const core::ExecParams * ; params, . SReal ; dt . ). protectedvirtual . Activate OdeSolvers. . ◆ internalCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::internalCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function performing the actual collision computation. . ◆ postCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::postCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called after the actual collision computation. . ◆ preCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::preCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called before the actual collision computation. . sofasimulationCollisionAnimation",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:15976,Integrability,integrat,integrate,15976,"scription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::CollisionAnimationLoop ; (; ). protected . ◆ ~CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::~CollisionAnimationLoop ; (; ). overrideprotected . Function details. ◆ computeCollision(). void sofa::simulation::CollisionAnimationLoop::computeCollision ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Activate collision pipeline. . ◆ getSolverSequence(). const CollisionAnimationLoop::Solvers & sofa::simulation::CollisionAnimationLoop::getSolverSequence ; (; ). protected . ◆ integrate(). void sofa::simulation::CollisionAnimationLoop::integrate ; (; const core::ExecParams * ; params, . SReal ; dt . ). protectedvirtual . Activate OdeSolvers. . ◆ internalCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::internalCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function performing the actual collision computation. . ◆ postCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::postCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called after the actual collision computation. . ◆ preCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::preCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called before the actual collision computation. . sofasimulationCollisionAnimationLoop; Generated on Mon Nov 11 2024 03:33:58 for SOFA API ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:428,Modifiability,Inherit,Inheritance,428,"﻿. SOFA API: sofa::simulation::CollisionAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::simulation::CollisionAnimationLoop Class Reference . #include <CollisionAnimationLoop.h>; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:1008,Modifiability,inherit,inherited,1008,"onLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::simulation::CollisionAnimationLoop Class Reference . #include <CollisionAnimationLoop.h>; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:1250,Modifiability,inherit,inherited,1250,"ain simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:1973,Modifiability,inherit,inherited,1973,";  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Visitors; These methods provides an abstract view of the mechanical system to animate. They are implemented by executing Visitors in the subtree of the scene-graph below this solver. . typedef simulation::Node::Sequence< core::behavior::OdeSolver > Solvers;  ; typedef core::collision::Pipeline Pipeline;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:3815,Modifiability,Inherit,Inherited,3815,"  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:3853,Modifiability,inherit,inherited,3853,"  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:4174,Modifiability,inherit,inherited,4174,"execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SReal m_resetT",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:4340,Modifiability,inherit,inherited,4340,"aultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SReal m_resetTime;  Stores starting time of the simulation. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLEL",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:5162,Modifiability,inherit,inherited,5162,"Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SReal m_resetTime;  Stores starting time of the simulation. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  SOFA_ABSTRACT_CLASS (BaseAnimationLoop, objectmodel::BaseObje",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:5312,Modifiability,inherit,inherited,5312,"f the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SReal m_resetTime;  Stores starting time of the simulation. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  SOFA_ABSTRACT_CLASS (BaseAnimationLoop, objectmodel::BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void step (const core::ExecParams *params, SReal dt)=0;  ; SReal getResetTime () const;  Returns starting time of the simulation. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) overr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:5566,Modifiability,inherit,inherited,5566,"f the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SReal m_resetTime;  Stores starting time of the simulation. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  SOFA_ABSTRACT_CLASS (BaseAnimationLoop, objectmodel::BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void step (const core::ExecParams *params, SReal dt)=0;  ; SReal getResetTime () const;  Returns starting time of the simulation. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) overr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:5998,Modifiability,inherit,inherited,5998,"_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SReal m_resetTime;  Stores starting time of the simulation. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  SOFA_ABSTRACT_CLASS (BaseAnimationLoop, objectmodel::BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void step (const core::ExecParams *params, SReal dt)=0;  ; SReal getResetTime () const;  Returns starting time of the simulation. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:6549,Modifiability,inherit,inherited,6549," from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  SOFA_ABSTRACT_CLASS (BaseAnimationLoop, objectmodel::BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void step (const core::ExecParams *params, SReal dt)=0;  ; SReal getResetTime () const;  Returns starting time of the simulation. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:8249,Modifiability,variab,variables,8249," getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:8359,Modifiability,variab,variables,8359,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:8401,Modifiability,variab,variables,8401,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:8551,Modifiability,inherit,inherited,8551,"d handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:14684,Modifiability,inherit,inherited,14684,"id addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::CollisionAnimationLoop ; (; ). protected . ◆ ~CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::~CollisionAnimationLoop ; (; ). overrideprotected . Function details. ◆ computeCollision(). void sofa::simulation::CollisionAnimationLoop::computeCollision ; (; const core::ExecPa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:15084,Modifiability,inherit,inherited,15084,"e map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::CollisionAnimationLoop ; (; ). protected . ◆ ~CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::~CollisionAnimationLoop ; (; ). overrideprotected . Function details. ◆ computeCollision(). void sofa::simulation::CollisionAnimationLoop::computeCollision ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Activate collision pipeline. . ◆ getSolverSequence(). const CollisionAnimationLoop::Solvers & sofa::simulation::CollisionAnimationLoop::getSolverSequence ; (; ). protected . ◆ integrate(). void sofa::simulation::CollisionAnimationLoop::integrate ; (; const core::ExecParams * ; params, . SReal ; dt . ). protectedvirtual . Activate OdeSolvers. . ◆ internalCollisionComputation(). void sofa::simulation::CollisionAnimationLoo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:3274,Performance,perform,performing,3274,"More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Visitors; These methods provides an abstract view of the mechanical system to animate. They are implemented by executing Visitors in the subtree of the scene-graph below this solver. . typedef simulation::Node::Sequence< core::behavior::OdeSolver > Solvers;  ; typedef core::collision::Pipeline Pipeline;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< b",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:4929,Performance,Load,Loading,4929,"::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SReal m_resetTime;  Stores starting time of the simulation. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:7049,Performance,load,loader,7049,"lization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void step (const core::ExecParams *params, SReal dt)=0;  ; SReal getResetTime () const;  Returns starting time of the simulation. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modificatio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:16303,Performance,perform,performing,16303,"rg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::CollisionAnimationLoop ; (; ). protected . ◆ ~CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::~CollisionAnimationLoop ; (; ). overrideprotected . Function details. ◆ computeCollision(). void sofa::simulation::CollisionAnimationLoop::computeCollision ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Activate collision pipeline. . ◆ getSolverSequence(). const CollisionAnimationLoop::Solvers & sofa::simulation::CollisionAnimationLoop::getSolverSequence ; (; ). protected . ◆ integrate(). void sofa::simulation::CollisionAnimationLoop::integrate ; (; const core::ExecParams * ; params, . SReal ; dt . ). protectedvirtual . Activate OdeSolvers. . ◆ internalCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::internalCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function performing the actual collision computation. . ◆ postCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::postCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called after the actual collision computation. . ◆ preCollisionComputation(). void sofa::simulation::CollisionAnimationLoop::preCollisionComputation ; (; const core::ExecParams * ; params = core::execparams::defaultInstance()). protectedvirtual . Function meant to be called before the actual collision computation. . sofasimulationCollisionAnimationLoop; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:9085,Security,Access,Accessor,9085,"d handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:14030,Security,Access,Accessor,14030," initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:14149,Security,Access,Accessor,14149,"ta (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * Ge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:14260,Security,Access,Accessor,14260,"thod used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=null",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:14379,Security,Access,Accessor,14379,"Data initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ CollisionAnimationLoop(). sofa::simulation::CollisionAnimationLoop::CollisionAnimat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10569,Testability,log,logging,10569," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10642,Testability,log,logging,10642," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10684,Testability,log,logging,10684," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10754,Testability,log,logging,10754," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10865,Testability,log,logging,10865," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10907,Testability,log,logging,10907," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:12731,Testability,log,logErrors,12731,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:10950,Usability,clear,clearLoggedMessages,10950," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event-members.html:246,Modifiability,inherit,inherited,246,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::CollisionBeginEvent Member List . This is the complete list of members for sofa::simulation::CollisionBeginEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::CollisionBeginEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html:288,Modifiability,Inherit,Inheritance,288,"﻿. SOFA API: sofa::simulation::CollisionBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::CollisionBeginEvent Class Reference . #include <CollisionBeginEvent.h>. Inheritance diagram for sofa::simulation::CollisionBeginEvent:. [legend]; Detailed Description; Event fired by CollisionVisitor before performing the collision detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::CollisionBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationCollisionBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html:570,Modifiability,inherit,inherited,570,"﻿. SOFA API: sofa::simulation::CollisionBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::CollisionBeginEvent Class Reference . #include <CollisionBeginEvent.h>. Inheritance diagram for sofa::simulation::CollisionBeginEvent:. [legend]; Detailed Description; Event fired by CollisionVisitor before performing the collision detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::CollisionBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationCollisionBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html:707,Modifiability,Inherit,Inherited,707,"﻿. SOFA API: sofa::simulation::CollisionBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::CollisionBeginEvent Class Reference . #include <CollisionBeginEvent.h>. Inheritance diagram for sofa::simulation::CollisionBeginEvent:. [legend]; Detailed Description; Event fired by CollisionVisitor before performing the collision detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::CollisionBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationCollisionBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html:748,Modifiability,inherit,inherited,748,"﻿. SOFA API: sofa::simulation::CollisionBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::CollisionBeginEvent Class Reference . #include <CollisionBeginEvent.h>. Inheritance diagram for sofa::simulation::CollisionBeginEvent:. [legend]; Detailed Description; Event fired by CollisionVisitor before performing the collision detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::CollisionBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationCollisionBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html:843,Modifiability,inherit,inherited,843,"﻿. SOFA API: sofa::simulation::CollisionBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::CollisionBeginEvent Class Reference . #include <CollisionBeginEvent.h>. Inheritance diagram for sofa::simulation::CollisionBeginEvent:. [legend]; Detailed Description; Event fired by CollisionVisitor before performing the collision detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::CollisionBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationCollisionBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html:994,Modifiability,inherit,inherited,994,"﻿. SOFA API: sofa::simulation::CollisionBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::CollisionBeginEvent Class Reference . #include <CollisionBeginEvent.h>. Inheritance diagram for sofa::simulation::CollisionBeginEvent:. [legend]; Detailed Description; Event fired by CollisionVisitor before performing the collision detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::CollisionBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationCollisionBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html:423,Performance,perform,performing,423,"﻿. SOFA API: sofa::simulation::CollisionBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::CollisionBeginEvent Class Reference . #include <CollisionBeginEvent.h>. Inheritance diagram for sofa::simulation::CollisionBeginEvent:. [legend]; Detailed Description; Event fired by CollisionVisitor before performing the collision detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::CollisionBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationCollisionBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html:448,Safety,detect,detection,448,"﻿. SOFA API: sofa::simulation::CollisionBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::CollisionBeginEvent Class Reference . #include <CollisionBeginEvent.h>. Inheritance diagram for sofa::simulation::CollisionBeginEvent:. [legend]; Detailed Description; Event fired by CollisionVisitor before performing the collision detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::CollisionBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationCollisionBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html:3035,Deployability,Pipeline,Pipeline,3035,"h(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; fwdConstraintSet(simulation::Node *node, core::behavior::BaseConstraintSet *cSet)sofa::simulation::CollisionVisitorvirtual; getCategoryName() const overridesofa::simulation::CollisionVisitorinlinevirtual; getClassName() const overridesofa::simulation::CollisionDetectionVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; getPrimitiveTestCount() constsofa::simulation::CollisionVisitorinline; isThreadSafe() constsofa::simulation::Visitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processCollisionPipeline(simulation::Node *node, core::collision::Pipeline *obj) overridesofa::simulation::CollisionDetectionVisitorvirtual; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::CollisionVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visito",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html:258,Modifiability,inherit,inherited,258,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::CollisionDetectionVisitor Member List . This is the complete list of members for sofa::simulation::CollisionDetectionVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; CollisionDetectionVisitor(const core::ExecParams *params)sofa::simulation::CollisionDetectionVisitorinline; CollisionVisitor(const core::ExecParams *params)sofa::simulation::CollisionVisitorinline; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html:4391,Testability,test,testTags,4391,"virtual; getPrimitiveTestCount() constsofa::simulation::CollisionVisitorinline; isThreadSafe() constsofa::simulation::Visitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processCollisionPipeline(simulation::Node *node, core::collision::Pipeline *obj) overridesofa::simulation::CollisionDetectionVisitorvirtual; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::CollisionVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:623,Deployability,Pipeline,Pipeline,623,"﻿. SOFA API: sofa::simulation::CollisionDetectionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::CollisionDetectionVisitor Class Reference . #include <CollisionVisitor.h>; Compute collision detection. ; More... Inheritance diagram for sofa::simulation::CollisionDetectionVisitor:. [legend]; Detailed Description; Compute collision detection. . Public Member Functions;  CollisionDetectionVisitor (const core::ExecParams *params);  ; void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::CollisionVisitor;  CollisionVisitor (const core::ExecParams *params);  ; virtual void fwdConstraintSet (simulation::Node *node, core::behavior::BaseConstraintSet *cSet);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; size_t getPrimitiveTestCount () const;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:5699,Deployability,Pipeline,Pipeline,5699,"BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ CollisionDetectionVisitor(). sofa::simulation::CollisionDetectionVisitor::CollisionDetectionVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::CollisionDetectionVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::CollisionVisitor. ◆ processCollisionPipeline(). void sofa::simulation::CollisionDetectionVisitor::processCollisionPipeline ; (; simulation::Node * ; node, . core::collision::Pipeline * ; obj . ). overridevirtual . Reimplemented from sofa::simulation::CollisionVisitor. sofasimulationCollisionDetectionVisitor; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:329,Modifiability,Inherit,Inheritance,329,"﻿. SOFA API: sofa::simulation::CollisionDetectionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::CollisionDetectionVisitor Class Reference . #include <CollisionVisitor.h>; Compute collision detection. ; More... Inheritance diagram for sofa::simulation::CollisionDetectionVisitor:. [legend]; Detailed Description; Compute collision detection. . Public Member Functions;  CollisionDetectionVisitor (const core::ExecParams *params);  ; void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::CollisionVisitor;  CollisionVisitor (const core::ExecParams *params);  ; virtual void fwdConstraintSet (simulation::Node *node, core::behavior::BaseConstraintSet *cSet);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; size_t getPrimitiveTestCount () const;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:724,Modifiability,inherit,inherited,724,"﻿. SOFA API: sofa::simulation::CollisionDetectionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::CollisionDetectionVisitor Class Reference . #include <CollisionVisitor.h>; Compute collision detection. ; More... Inheritance diagram for sofa::simulation::CollisionDetectionVisitor:. [legend]; Detailed Description; Compute collision detection. . Public Member Functions;  CollisionDetectionVisitor (const core::ExecParams *params);  ; void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::CollisionVisitor;  CollisionVisitor (const core::ExecParams *params);  ; virtual void fwdConstraintSet (simulation::Node *node, core::behavior::BaseConstraintSet *cSet);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; size_t getPrimitiveTestCount () const;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:1233,Modifiability,inherit,inherited,1233,"ance diagram for sofa::simulation::CollisionDetectionVisitor:. [legend]; Detailed Description; Compute collision detection. . Public Member Functions;  CollisionDetectionVisitor (const core::ExecParams *params);  ; void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::CollisionVisitor;  CollisionVisitor (const core::ExecParams *params);  ; virtual void fwdConstraintSet (simulation::Node *node, core::behavior::BaseConstraintSet *cSet);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; size_t getPrimitiveTestCount () const;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:3448,Modifiability,Inherit,Inherited,3448,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:3486,Modifiability,inherit,inherited,3486,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:3687,Modifiability,inherit,inherited,3687,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ CollisionDetectionVisitor(). sofa::simulation::CollisionDetectionVisitor::CollisionDetectionVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::CollisionDetectionVisitor::getClassName ; (; ); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:3799,Modifiability,inherit,inherited,3799,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ CollisionDetectionVisitor(). sofa::simulation::CollisionDetectionVisitor::CollisionDetectionVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::CollisionDetectionVisitor::getClassName ; (; ); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:308,Safety,detect,detection,308,"﻿. SOFA API: sofa::simulation::CollisionDetectionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::CollisionDetectionVisitor Class Reference . #include <CollisionVisitor.h>; Compute collision detection. ; More... Inheritance diagram for sofa::simulation::CollisionDetectionVisitor:. [legend]; Detailed Description; Compute collision detection. . Public Member Functions;  CollisionDetectionVisitor (const core::ExecParams *params);  ; void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::CollisionVisitor;  CollisionVisitor (const core::ExecParams *params);  ; virtual void fwdConstraintSet (simulation::Node *node, core::behavior::BaseConstraintSet *cSet);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; size_t getPrimitiveTestCount () const;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:449,Safety,detect,detection,449,"﻿. SOFA API: sofa::simulation::CollisionDetectionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::CollisionDetectionVisitor Class Reference . #include <CollisionVisitor.h>; Compute collision detection. ; More... Inheritance diagram for sofa::simulation::CollisionDetectionVisitor:. [legend]; Detailed Description; Compute collision detection. . Public Member Functions;  CollisionDetectionVisitor (const core::ExecParams *params);  ; void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::CollisionVisitor;  CollisionVisitor (const core::ExecParams *params);  ; virtual void fwdConstraintSet (simulation::Node *node, core::behavior::BaseConstraintSet *cSet);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; size_t getPrimitiveTestCount () const;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:3630,Security,access,access,3630,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html
