id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/issues/332#issuecomment-205789744:57,Availability,error,error,57,"@bwb314 Confirmed this is fixed, I was seeing a separate error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-205789744
https://github.com/psi4/psi4/pull/334#issuecomment-205388501:71,Usability,feedback,feedback,71,"@kratman Great. This is fine for now, but it would be nice to get some feedback on that topic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/334#issuecomment-205388501
https://github.com/psi4/psi4/pull/335#issuecomment-205399523:18,Testability,test,tests,18,"It looks like the tests are failing because for some reason the `6-31G*` basis is being used as a spherical basis and not cartesian. However, I'm not sure where `puream` option is being changed since you placed `cartesian` in the gbs file correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-205399523
https://github.com/psi4/psi4/pull/335#issuecomment-205789593:429,Availability,error,errors,429,"@drhaney I made a few comments to your work, a few notes:; - Your comments only have the new basis sets, was the new G3 module intended as well?; - Most of the comments are aimed at removing global options. Globals are now semi-deprecated within Psi4 and will be completely removed in an update. ; - This is one of the first modules that will take extensive use of our option passing update, you will probably collide with a few errors. Let us know and we will get them fixed up.; - Thanks for writing this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-205789593
https://github.com/psi4/psi4/pull/335#issuecomment-205789593:288,Deployability,update,update,288,"@drhaney I made a few comments to your work, a few notes:; - Your comments only have the new basis sets, was the new G3 module intended as well?; - Most of the comments are aimed at removing global options. Globals are now semi-deprecated within Psi4 and will be completely removed in an update. ; - This is one of the first modules that will take extensive use of our option passing update, you will probably collide with a few errors. Let us know and we will get them fixed up.; - Thanks for writing this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-205789593
https://github.com/psi4/psi4/pull/335#issuecomment-205789593:384,Deployability,update,update,384,"@drhaney I made a few comments to your work, a few notes:; - Your comments only have the new basis sets, was the new G3 module intended as well?; - Most of the comments are aimed at removing global options. Globals are now semi-deprecated within Psi4 and will be completely removed in an update. ; - This is one of the first modules that will take extensive use of our option passing update, you will probably collide with a few errors. Let us know and we will get them fixed up.; - Thanks for writing this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-205789593
https://github.com/psi4/psi4/pull/335#issuecomment-208366940:55,Testability,test,test,55,@drhaney Everything is looking good. Can you add a few test cases that run in about 30 seconds?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-208366940
https://github.com/psi4/psi4/pull/335#issuecomment-211552490:105,Availability,down,down,105,"There's a large psi4 work day gathering tomorrow. So probably no comments on this PR until things settle down. But yes, PR is the best way for code review. And thanks for the lithium oddity report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-211552490
https://github.com/psi4/psi4/pull/335#issuecomment-212439352:113,Integrability,rout,routinely,113,"Landing on the correct SCF solution is tricky, and guaranteeing it is trickier still. I hear that in psi3, users routinely supplied docc/socc arrays to guide to the intended solution. Fortunately, psi4 has a variety of guesses to obtain the right solution, and someday, as @dgasmith mentioned, a next-generation SAD guess will assure correctness for the ground states of elements, at least. But without a root-finding driver over the SCF code that attempts and discards guesses/ does basis projections/ evaluates the nature of the system (which can be computational expensive), we cannot fix some system and method combinations without injuring others. It should be noted that no QC methodology to date is completely black box and no program always obtains the correct minima with default options. We are glad to have the lithium report at hand and will be pleased to use them to test the future SAD guess, but this is not an issue that will be fixed by 1.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212439352
https://github.com/psi4/psi4/pull/335#issuecomment-212439352:880,Testability,test,test,880,"Landing on the correct SCF solution is tricky, and guaranteeing it is trickier still. I hear that in psi3, users routinely supplied docc/socc arrays to guide to the intended solution. Fortunately, psi4 has a variety of guesses to obtain the right solution, and someday, as @dgasmith mentioned, a next-generation SAD guess will assure correctness for the ground states of elements, at least. But without a root-finding driver over the SCF code that attempts and discards guesses/ does basis projections/ evaluates the nature of the system (which can be computational expensive), we cannot fix some system and method combinations without injuring others. It should be noted that no QC methodology to date is completely black box and no program always obtains the correct minima with default options. We are glad to have the lithium report at hand and will be pleased to use them to test the future SAD guess, but this is not an issue that will be fixed by 1.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212439352
https://github.com/psi4/psi4/pull/335#issuecomment-212439352:152,Usability,guid,guide,152,"Landing on the correct SCF solution is tricky, and guaranteeing it is trickier still. I hear that in psi3, users routinely supplied docc/socc arrays to guide to the intended solution. Fortunately, psi4 has a variety of guesses to obtain the right solution, and someday, as @dgasmith mentioned, a next-generation SAD guess will assure correctness for the ground states of elements, at least. But without a root-finding driver over the SCF code that attempts and discards guesses/ does basis projections/ evaluates the nature of the system (which can be computational expensive), we cannot fix some system and method combinations without injuring others. It should be noted that no QC methodology to date is completely black box and no program always obtains the correct minima with default options. We are glad to have the lithium report at hand and will be pleased to use them to test the future SAD guess, but this is not an issue that will be fixed by 1.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212439352
https://github.com/psi4/psi4/pull/335#issuecomment-212443074:326,Integrability,rout,routinely,326,"If a guess basis cleans up most of the discrepancies, then I think we're ok; for now, until the revamped SAD guess can go in. On Wed, Apr 20, 2016 at 10:04 AM, Lori A. Burns notifications@github.com; wrote:. > Landing on the correct SCF solution is tricky, and guaranteeing it is; > trickier still. I hear that in psi3, users routinely supplied docc/socc; > arrays to guide to the intended solution. Fortunately, psi4 has a variety; > of guesses to obtain the right solution, and someday, as @dgasmith; > https://github.com/dgasmith mentioned, a next-generation SAD guess will; > assure correctness for the ground states of elements, at least. But without; > a root-finding driver over the SCF code that attempts and discards guesses/; > does basis projections/ evaluates the nature of the system (which can be; > computational expensive), we cannot fix some system and method combinations; > without injuring others. It should be noted that no QC methodology to date; > is completely black box and no program always obtains the correct minima; > with default options. We are glad to have the lithium report at hand and; > will be pleased to use them to test the future SAD guess, but this is not a; > n issue that will be fixed by 1.0.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/335#issuecomment-212439352",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212443074
https://github.com/psi4/psi4/pull/335#issuecomment-212443074:1154,Testability,test,test,1154,"If a guess basis cleans up most of the discrepancies, then I think we're ok; for now, until the revamped SAD guess can go in. On Wed, Apr 20, 2016 at 10:04 AM, Lori A. Burns notifications@github.com; wrote:. > Landing on the correct SCF solution is tricky, and guaranteeing it is; > trickier still. I hear that in psi3, users routinely supplied docc/socc; > arrays to guide to the intended solution. Fortunately, psi4 has a variety; > of guesses to obtain the right solution, and someday, as @dgasmith; > https://github.com/dgasmith mentioned, a next-generation SAD guess will; > assure correctness for the ground states of elements, at least. But without; > a root-finding driver over the SCF code that attempts and discards guesses/; > does basis projections/ evaluates the nature of the system (which can be; > computational expensive), we cannot fix some system and method combinations; > without injuring others. It should be noted that no QC methodology to date; > is completely black box and no program always obtains the correct minima; > with default options. We are glad to have the lithium report at hand and; > will be pleased to use them to test the future SAD guess, but this is not a; > n issue that will be fixed by 1.0.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/335#issuecomment-212439352",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212443074
https://github.com/psi4/psi4/pull/335#issuecomment-212443074:368,Usability,guid,guide,368,"If a guess basis cleans up most of the discrepancies, then I think we're ok; for now, until the revamped SAD guess can go in. On Wed, Apr 20, 2016 at 10:04 AM, Lori A. Burns notifications@github.com; wrote:. > Landing on the correct SCF solution is tricky, and guaranteeing it is; > trickier still. I hear that in psi3, users routinely supplied docc/socc; > arrays to guide to the intended solution. Fortunately, psi4 has a variety; > of guesses to obtain the right solution, and someday, as @dgasmith; > https://github.com/dgasmith mentioned, a next-generation SAD guess will; > assure correctness for the ground states of elements, at least. But without; > a root-finding driver over the SCF code that attempts and discards guesses/; > does basis projections/ evaluates the nature of the system (which can be; > computational expensive), we cannot fix some system and method combinations; > without injuring others. It should be noted that no QC methodology to date; > is completely black box and no program always obtains the correct minima; > with default options. We are glad to have the lithium report at hand and; > will be pleased to use them to test the future SAD guess, but this is not a; > n issue that will be fixed by 1.0.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/335#issuecomment-212439352",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212443074
https://github.com/psi4/psi4/pull/339#issuecomment-209208010:29,Usability,guid,guidance,29,"@robparrish, any warnings or guidance on the major question above?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209208010
https://github.com/psi4/psi4/pull/339#issuecomment-209236558:708,Performance,perform,perform,708,"Was just discussing this with Lori. The underlying primitive functional; were implemented according to the excellent notes at the density functional; repository:. http://www.cse.scitech.ac.uk/ccg/dft/xc-b3lyp.pdf (contains the definition; for vwn3rpa); http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5.pdf; http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5rpa.pdf. We also refer to the VWN paper (; http://www.nrcresearchpress.com/doi/pdf/10.1139/p80-159). In VWN, any; functional with ""RPA"" means that the parameters of their Pade interpolation; formula across r_s are fit to RPA computations, any functional without; means that the same parameters are fit to the QMC data of Ceperley and; Alder. For RPA/non-RPA, VWN perform one Pade fit across r_s for; ferromagnetic limit (EcP), one for the paramagnetic limit (EcF). The RPA; fit is given in the middle of page 1207 in the left column (parameter c =; EcP4 = 42.7198), while the QMC fit is given in Table I on page 1207; (parameter c = EcP4 = 12.9352). The remaining question of the paper is the issue of interpolation across; spin polarization z. This is where VWN 1-5 are defined - they have; different spin-interpolation formulae, and all give the same results for; closed-shell systems. That B3LYP and B3LYP5 differ for closed-shell systems means that the; notation has been bastardized. Clearly B3LYP uses the RPA parameters while; B3LYP5 uses the QMC parameters. But then the question of which VWN is to be; used is less clear. The one currently used in PSI4 comes from the density; functional repository above, which is actually VWN1 with the RPA; parameters. Lori has generously agreed to provide some reference data from other codes; for open-shell systems so we can double-check the choice of VWN for; spin-polarized cases. We'll get this fully cleared up as soon as those; numbers come in. Best,. -Rob. On Tue, Apr 12, 2016 at 8:13 PM, Lori A. Burns notifications@github.com; wrote:. > @robparrish https://github.com/robparrish, any warnings or gui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209236558
https://github.com/psi4/psi4/pull/339#issuecomment-209236558:1334,Usability,Clear,Clearly,1334,"ains the definition; for vwn3rpa); http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5.pdf; http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5rpa.pdf. We also refer to the VWN paper (; http://www.nrcresearchpress.com/doi/pdf/10.1139/p80-159). In VWN, any; functional with ""RPA"" means that the parameters of their Pade interpolation; formula across r_s are fit to RPA computations, any functional without; means that the same parameters are fit to the QMC data of Ceperley and; Alder. For RPA/non-RPA, VWN perform one Pade fit across r_s for; ferromagnetic limit (EcP), one for the paramagnetic limit (EcF). The RPA; fit is given in the middle of page 1207 in the left column (parameter c =; EcP4 = 42.7198), while the QMC fit is given in Table I on page 1207; (parameter c = EcP4 = 12.9352). The remaining question of the paper is the issue of interpolation across; spin polarization z. This is where VWN 1-5 are defined - they have; different spin-interpolation formulae, and all give the same results for; closed-shell systems. That B3LYP and B3LYP5 differ for closed-shell systems means that the; notation has been bastardized. Clearly B3LYP uses the RPA parameters while; B3LYP5 uses the QMC parameters. But then the question of which VWN is to be; used is less clear. The one currently used in PSI4 comes from the density; functional repository above, which is actually VWN1 with the RPA; parameters. Lori has generously agreed to provide some reference data from other codes; for open-shell systems so we can double-check the choice of VWN for; spin-polarized cases. We'll get this fully cleared up as soon as those; numbers come in. Best,. -Rob. On Tue, Apr 12, 2016 at 8:13 PM, Lori A. Burns notifications@github.com; wrote:. > @robparrish https://github.com/robparrish, any warnings or guidance on; > the major question above?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/339#issuecomment-209208010",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209236558
https://github.com/psi4/psi4/pull/339#issuecomment-209236558:1469,Usability,clear,clear,1469,"ains the definition; for vwn3rpa); http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5.pdf; http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5rpa.pdf. We also refer to the VWN paper (; http://www.nrcresearchpress.com/doi/pdf/10.1139/p80-159). In VWN, any; functional with ""RPA"" means that the parameters of their Pade interpolation; formula across r_s are fit to RPA computations, any functional without; means that the same parameters are fit to the QMC data of Ceperley and; Alder. For RPA/non-RPA, VWN perform one Pade fit across r_s for; ferromagnetic limit (EcP), one for the paramagnetic limit (EcF). The RPA; fit is given in the middle of page 1207 in the left column (parameter c =; EcP4 = 42.7198), while the QMC fit is given in Table I on page 1207; (parameter c = EcP4 = 12.9352). The remaining question of the paper is the issue of interpolation across; spin polarization z. This is where VWN 1-5 are defined - they have; different spin-interpolation formulae, and all give the same results for; closed-shell systems. That B3LYP and B3LYP5 differ for closed-shell systems means that the; notation has been bastardized. Clearly B3LYP uses the RPA parameters while; B3LYP5 uses the QMC parameters. But then the question of which VWN is to be; used is less clear. The one currently used in PSI4 comes from the density; functional repository above, which is actually VWN1 with the RPA; parameters. Lori has generously agreed to provide some reference data from other codes; for open-shell systems so we can double-check the choice of VWN for; spin-polarized cases. We'll get this fully cleared up as soon as those; numbers come in. Best,. -Rob. On Tue, Apr 12, 2016 at 8:13 PM, Lori A. Burns notifications@github.com; wrote:. > @robparrish https://github.com/robparrish, any warnings or guidance on; > the major question above?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/339#issuecomment-209208010",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209236558
https://github.com/psi4/psi4/pull/339#issuecomment-209236558:1797,Usability,clear,cleared,1797,"ains the definition; for vwn3rpa); http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5.pdf; http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5rpa.pdf. We also refer to the VWN paper (; http://www.nrcresearchpress.com/doi/pdf/10.1139/p80-159). In VWN, any; functional with ""RPA"" means that the parameters of their Pade interpolation; formula across r_s are fit to RPA computations, any functional without; means that the same parameters are fit to the QMC data of Ceperley and; Alder. For RPA/non-RPA, VWN perform one Pade fit across r_s for; ferromagnetic limit (EcP), one for the paramagnetic limit (EcF). The RPA; fit is given in the middle of page 1207 in the left column (parameter c =; EcP4 = 42.7198), while the QMC fit is given in Table I on page 1207; (parameter c = EcP4 = 12.9352). The remaining question of the paper is the issue of interpolation across; spin polarization z. This is where VWN 1-5 are defined - they have; different spin-interpolation formulae, and all give the same results for; closed-shell systems. That B3LYP and B3LYP5 differ for closed-shell systems means that the; notation has been bastardized. Clearly B3LYP uses the RPA parameters while; B3LYP5 uses the QMC parameters. But then the question of which VWN is to be; used is less clear. The one currently used in PSI4 comes from the density; functional repository above, which is actually VWN1 with the RPA; parameters. Lori has generously agreed to provide some reference data from other codes; for open-shell systems so we can double-check the choice of VWN for; spin-polarized cases. We'll get this fully cleared up as soon as those; numbers come in. Best,. -Rob. On Tue, Apr 12, 2016 at 8:13 PM, Lori A. Burns notifications@github.com; wrote:. > @robparrish https://github.com/robparrish, any warnings or guidance on; > the major question above?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/339#issuecomment-209208010",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209236558
https://github.com/psi4/psi4/pull/339#issuecomment-209236558:1998,Usability,guid,guidance,1998,"ains the definition; for vwn3rpa); http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5.pdf; http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5rpa.pdf. We also refer to the VWN paper (; http://www.nrcresearchpress.com/doi/pdf/10.1139/p80-159). In VWN, any; functional with ""RPA"" means that the parameters of their Pade interpolation; formula across r_s are fit to RPA computations, any functional without; means that the same parameters are fit to the QMC data of Ceperley and; Alder. For RPA/non-RPA, VWN perform one Pade fit across r_s for; ferromagnetic limit (EcP), one for the paramagnetic limit (EcF). The RPA; fit is given in the middle of page 1207 in the left column (parameter c =; EcP4 = 42.7198), while the QMC fit is given in Table I on page 1207; (parameter c = EcP4 = 12.9352). The remaining question of the paper is the issue of interpolation across; spin polarization z. This is where VWN 1-5 are defined - they have; different spin-interpolation formulae, and all give the same results for; closed-shell systems. That B3LYP and B3LYP5 differ for closed-shell systems means that the; notation has been bastardized. Clearly B3LYP uses the RPA parameters while; B3LYP5 uses the QMC parameters. But then the question of which VWN is to be; used is less clear. The one currently used in PSI4 comes from the density; functional repository above, which is actually VWN1 with the RPA; parameters. Lori has generously agreed to provide some reference data from other codes; for open-shell systems so we can double-check the choice of VWN for; spin-polarized cases. We'll get this fully cleared up as soon as those; numbers come in. Best,. -Rob. On Tue, Apr 12, 2016 at 8:13 PM, Lori A. Burns notifications@github.com; wrote:. > @robparrish https://github.com/robparrish, any warnings or guidance on; > the major question above?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/339#issuecomment-209208010",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209236558
https://github.com/psi4/psi4/pull/339#issuecomment-209252377:43,Energy Efficiency,energy,energy,43,"NW-Chem. ```; closed-shell vwn_3 Total DFT energy = -76.407526614389; closde-shell vwn_1_rpa (def.) Total DFT energy = -76.444577160243; open-shell vwn_3 Total DFT energy = -75.940741067166; open-shell vwn_1_rpa (def.) Total DFT energy = -75.974154693676; ```. Psi4. ```; closed-shell VWN3RPA_C -76.4445772372 # matches NW closed VWN_1_RPA; closed-shell VWN5RPA_C -76.4445772372 # """"; closed-shell VWN3_C -76.4075266923 # matches NW closed VWN3; closed-shell VWN5_C -76.4075266923 # """". open-shell VWN3RPA_C -75.9741548527 # matches NW open VWN_1_RPA; open-shell VWN5RPA_C -75.9744079442; open-shell VWN3_C -75.9404785496; open-shell VWN5_C -75.9407528036 # ~matches NW open VWN_3; ```. Conditions. ```; aug-cc-pvdz. #0 1 # closed; 1 2 # open; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; ```. Summary; Looks like psi's b3lyp3 should remain with `VWN3RPA_C` and its b3lyp5 should use `VWN5_C` in order to match NW-Chem with both open- and closed-shell.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209252377
https://github.com/psi4/psi4/pull/339#issuecomment-209252377:110,Energy Efficiency,energy,energy,110,"NW-Chem. ```; closed-shell vwn_3 Total DFT energy = -76.407526614389; closde-shell vwn_1_rpa (def.) Total DFT energy = -76.444577160243; open-shell vwn_3 Total DFT energy = -75.940741067166; open-shell vwn_1_rpa (def.) Total DFT energy = -75.974154693676; ```. Psi4. ```; closed-shell VWN3RPA_C -76.4445772372 # matches NW closed VWN_1_RPA; closed-shell VWN5RPA_C -76.4445772372 # """"; closed-shell VWN3_C -76.4075266923 # matches NW closed VWN3; closed-shell VWN5_C -76.4075266923 # """". open-shell VWN3RPA_C -75.9741548527 # matches NW open VWN_1_RPA; open-shell VWN5RPA_C -75.9744079442; open-shell VWN3_C -75.9404785496; open-shell VWN5_C -75.9407528036 # ~matches NW open VWN_3; ```. Conditions. ```; aug-cc-pvdz. #0 1 # closed; 1 2 # open; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; ```. Summary; Looks like psi's b3lyp3 should remain with `VWN3RPA_C` and its b3lyp5 should use `VWN5_C` in order to match NW-Chem with both open- and closed-shell.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209252377
https://github.com/psi4/psi4/pull/339#issuecomment-209252377:164,Energy Efficiency,energy,energy,164,"NW-Chem. ```; closed-shell vwn_3 Total DFT energy = -76.407526614389; closde-shell vwn_1_rpa (def.) Total DFT energy = -76.444577160243; open-shell vwn_3 Total DFT energy = -75.940741067166; open-shell vwn_1_rpa (def.) Total DFT energy = -75.974154693676; ```. Psi4. ```; closed-shell VWN3RPA_C -76.4445772372 # matches NW closed VWN_1_RPA; closed-shell VWN5RPA_C -76.4445772372 # """"; closed-shell VWN3_C -76.4075266923 # matches NW closed VWN3; closed-shell VWN5_C -76.4075266923 # """". open-shell VWN3RPA_C -75.9741548527 # matches NW open VWN_1_RPA; open-shell VWN5RPA_C -75.9744079442; open-shell VWN3_C -75.9404785496; open-shell VWN5_C -75.9407528036 # ~matches NW open VWN_3; ```. Conditions. ```; aug-cc-pvdz. #0 1 # closed; 1 2 # open; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; ```. Summary; Looks like psi's b3lyp3 should remain with `VWN3RPA_C` and its b3lyp5 should use `VWN5_C` in order to match NW-Chem with both open- and closed-shell.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209252377
https://github.com/psi4/psi4/pull/339#issuecomment-209252377:229,Energy Efficiency,energy,energy,229,"NW-Chem. ```; closed-shell vwn_3 Total DFT energy = -76.407526614389; closde-shell vwn_1_rpa (def.) Total DFT energy = -76.444577160243; open-shell vwn_3 Total DFT energy = -75.940741067166; open-shell vwn_1_rpa (def.) Total DFT energy = -75.974154693676; ```. Psi4. ```; closed-shell VWN3RPA_C -76.4445772372 # matches NW closed VWN_1_RPA; closed-shell VWN5RPA_C -76.4445772372 # """"; closed-shell VWN3_C -76.4075266923 # matches NW closed VWN3; closed-shell VWN5_C -76.4075266923 # """". open-shell VWN3RPA_C -75.9741548527 # matches NW open VWN_1_RPA; open-shell VWN5RPA_C -75.9744079442; open-shell VWN3_C -75.9404785496; open-shell VWN5_C -75.9407528036 # ~matches NW open VWN_3; ```. Conditions. ```; aug-cc-pvdz. #0 1 # closed; 1 2 # open; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; ```. Summary; Looks like psi's b3lyp3 should remain with `VWN3RPA_C` and its b3lyp5 should use `VWN5_C` in order to match NW-Chem with both open- and closed-shell.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209252377
https://github.com/psi4/psi4/pull/339#issuecomment-209503911:618,Energy Efficiency,energy,energy,618,"People at the forum have kindly supplied Turbomole and G\* values for further comparison. They are encoded into the test case below, which passes using this PR branch (that reenables b3lyp5 with `VWN5_C`). The open-shell b3lyp5 in psi4 matches turbochem rather better than nwchem. ```; set scf_type pk; set e_convergence 9; set basis aug-cc-pvdz; set dft_spherical_points 590; set dft_radial_points 99. molecule cswater {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; }. oswater = cswater.clone(); oswater.set_multiplicity(2); oswater.set_molecular_charge(1). e = energy('b3lyp', molecule=cswater); compare_values(-76.444577160243, e, 5, 'clsd-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'). set reference uhf; e = energy('b3lyp', molecule=oswater); compare_values(-75.974154693676, e, 5, 'open-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'); compare_values(-75.97415476252, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Turbomole (vwn3)'); compare_values(-75.9741544303, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Gaussian (default)'). set reference rks; e = energy('b3lyp5', molecule=cswater); compare_values(-76.407526614389, e, 5, 'clsd-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'). set reference uks; e = energy('b3lyp5', molecule=oswater); compare_values(-75.940741067166, e, 4, 'open-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'); compare_values(-75.94075271487, e, 5, 'open-shell: b3lyp5 (vwn5) vs Turbomole (vwn5; default)'); # this one doesn't match quite so well; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209503911
https://github.com/psi4/psi4/pull/339#issuecomment-209503911:778,Energy Efficiency,energy,energy,778,"People at the forum have kindly supplied Turbomole and G\* values for further comparison. They are encoded into the test case below, which passes using this PR branch (that reenables b3lyp5 with `VWN5_C`). The open-shell b3lyp5 in psi4 matches turbochem rather better than nwchem. ```; set scf_type pk; set e_convergence 9; set basis aug-cc-pvdz; set dft_spherical_points 590; set dft_radial_points 99. molecule cswater {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; }. oswater = cswater.clone(); oswater.set_multiplicity(2); oswater.set_molecular_charge(1). e = energy('b3lyp', molecule=cswater); compare_values(-76.444577160243, e, 5, 'clsd-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'). set reference uhf; e = energy('b3lyp', molecule=oswater); compare_values(-75.974154693676, e, 5, 'open-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'); compare_values(-75.97415476252, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Turbomole (vwn3)'); compare_values(-75.9741544303, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Gaussian (default)'). set reference rks; e = energy('b3lyp5', molecule=cswater); compare_values(-76.407526614389, e, 5, 'clsd-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'). set reference uks; e = energy('b3lyp5', molecule=oswater); compare_values(-75.940741067166, e, 4, 'open-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'); compare_values(-75.94075271487, e, 5, 'open-shell: b3lyp5 (vwn5) vs Turbomole (vwn5; default)'); # this one doesn't match quite so well; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209503911
https://github.com/psi4/psi4/pull/339#issuecomment-209503911:1119,Energy Efficiency,energy,energy,1119,"People at the forum have kindly supplied Turbomole and G\* values for further comparison. They are encoded into the test case below, which passes using this PR branch (that reenables b3lyp5 with `VWN5_C`). The open-shell b3lyp5 in psi4 matches turbochem rather better than nwchem. ```; set scf_type pk; set e_convergence 9; set basis aug-cc-pvdz; set dft_spherical_points 590; set dft_radial_points 99. molecule cswater {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; }. oswater = cswater.clone(); oswater.set_multiplicity(2); oswater.set_molecular_charge(1). e = energy('b3lyp', molecule=cswater); compare_values(-76.444577160243, e, 5, 'clsd-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'). set reference uhf; e = energy('b3lyp', molecule=oswater); compare_values(-75.974154693676, e, 5, 'open-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'); compare_values(-75.97415476252, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Turbomole (vwn3)'); compare_values(-75.9741544303, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Gaussian (default)'). set reference rks; e = energy('b3lyp5', molecule=cswater); compare_values(-76.407526614389, e, 5, 'clsd-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'). set reference uks; e = energy('b3lyp5', molecule=oswater); compare_values(-75.940741067166, e, 4, 'open-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'); compare_values(-75.94075271487, e, 5, 'open-shell: b3lyp5 (vwn5) vs Turbomole (vwn5; default)'); # this one doesn't match quite so well; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209503911
https://github.com/psi4/psi4/pull/339#issuecomment-209503911:1265,Energy Efficiency,energy,energy,1265,"People at the forum have kindly supplied Turbomole and G\* values for further comparison. They are encoded into the test case below, which passes using this PR branch (that reenables b3lyp5 with `VWN5_C`). The open-shell b3lyp5 in psi4 matches turbochem rather better than nwchem. ```; set scf_type pk; set e_convergence 9; set basis aug-cc-pvdz; set dft_spherical_points 590; set dft_radial_points 99. molecule cswater {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; }. oswater = cswater.clone(); oswater.set_multiplicity(2); oswater.set_molecular_charge(1). e = energy('b3lyp', molecule=cswater); compare_values(-76.444577160243, e, 5, 'clsd-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'). set reference uhf; e = energy('b3lyp', molecule=oswater); compare_values(-75.974154693676, e, 5, 'open-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'); compare_values(-75.97415476252, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Turbomole (vwn3)'); compare_values(-75.9741544303, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Gaussian (default)'). set reference rks; e = energy('b3lyp5', molecule=cswater); compare_values(-76.407526614389, e, 5, 'clsd-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'). set reference uks; e = energy('b3lyp5', molecule=oswater); compare_values(-75.940741067166, e, 4, 'open-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'); compare_values(-75.94075271487, e, 5, 'open-shell: b3lyp5 (vwn5) vs Turbomole (vwn5; default)'); # this one doesn't match quite so well; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209503911
https://github.com/psi4/psi4/pull/339#issuecomment-209503911:116,Testability,test,test,116,"People at the forum have kindly supplied Turbomole and G\* values for further comparison. They are encoded into the test case below, which passes using this PR branch (that reenables b3lyp5 with `VWN5_C`). The open-shell b3lyp5 in psi4 matches turbochem rather better than nwchem. ```; set scf_type pk; set e_convergence 9; set basis aug-cc-pvdz; set dft_spherical_points 590; set dft_radial_points 99. molecule cswater {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; }. oswater = cswater.clone(); oswater.set_multiplicity(2); oswater.set_molecular_charge(1). e = energy('b3lyp', molecule=cswater); compare_values(-76.444577160243, e, 5, 'clsd-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'). set reference uhf; e = energy('b3lyp', molecule=oswater); compare_values(-75.974154693676, e, 5, 'open-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'); compare_values(-75.97415476252, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Turbomole (vwn3)'); compare_values(-75.9741544303, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Gaussian (default)'). set reference rks; e = energy('b3lyp5', molecule=cswater); compare_values(-76.407526614389, e, 5, 'clsd-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'). set reference uks; e = energy('b3lyp5', molecule=oswater); compare_values(-75.940741067166, e, 4, 'open-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'); compare_values(-75.94075271487, e, 5, 'open-shell: b3lyp5 (vwn5) vs Turbomole (vwn5; default)'); # this one doesn't match quite so well; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209503911
https://github.com/psi4/psi4/pull/339#issuecomment-209700278:79,Testability,test,test,79,"Ok, elaborated on the `set print 2` descriptions of the four VWNs, and added a test case vs. other packages in https://github.com/psi4/psi4/pull/339/commits/f535e22afefbaeac65c78e95788c5f211f85b11c . When you're satisfied with the labeling, etc. @robparrish, I think this is good to go. I'll add you as a collaborator to my fork so that you can do any simple editing directly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209700278
https://github.com/psi4/psi4/pull/339#issuecomment-209700278:352,Usability,simpl,simple,352,"Ok, elaborated on the `set print 2` descriptions of the four VWNs, and added a test case vs. other packages in https://github.com/psi4/psi4/pull/339/commits/f535e22afefbaeac65c78e95788c5f211f85b11c . When you're satisfied with the labeling, etc. @robparrish, I think this is good to go. I'll add you as a collaborator to my fork so that you can do any simple editing directly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209700278
https://github.com/psi4/psi4/pull/339#issuecomment-210083202:113,Safety,avoid,avoid,113,"OK, agreed, B3LYP is defined with VWN1RPA, B3LYP5 is with VWN5. I think this is good to go. One thing that might avoid unnecessary clarification in future is to rename PSI4's VWN3\* to VWN1*. Thanks to everyone for all your efforts in this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-210083202
https://github.com/psi4/psi4/pull/339#issuecomment-210126325:336,Integrability,bridg,bridge,336,"Great! Provided the stability instability doesn't pop up again, this is ready. If you definitely want VWN3 renamed, I'll do it. But since the functional repository names it VWN3 and the coding of the functional is a lot harder to check than the assembly of the superfunctional, I think the extra notes I added to `set_description` will bridge the clarity gap.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-210126325
https://github.com/psi4/psi4/issues/340#issuecomment-209218271:114,Performance,perform,performance,114,"All converge in about 8 iterations with `set guess sad`. SAD is generally the best guess. Were it not for awkward performance issues with really large basis sets, it would be the default. Someday we'll fix those performance issues and make it the default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/340#issuecomment-209218271
https://github.com/psi4/psi4/issues/340#issuecomment-209218271:212,Performance,perform,performance,212,"All converge in about 8 iterations with `set guess sad`. SAD is generally the best guess. Were it not for awkward performance issues with really large basis sets, it would be the default. Someday we'll fix those performance issues and make it the default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/340#issuecomment-209218271
https://github.com/psi4/psi4/issues/341#issuecomment-208966398:76,Energy Efficiency,charge,charges,76,"Psi4 is primarily a QM program. We have a ""qmmm"" module for adding external charges into a QM calc, http://psicode.org/psi4manual/master/scf.html#external-potentials-and-qm-mm . There's support for single-point calculations of EFP fragments alone or embedded into QM calcs, http://psicode.org/psi4manual/master/libefp.html . And there are a couple pure-MM projects simmering. But right now we don't support any particular MM software packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-208966398
https://github.com/psi4/psi4/issues/341#issuecomment-209534925:82,Availability,avail,available,82,"As mentioned in the documentation @loriab quotes above, there is also a test case available of a QM computation in an MM point-charge field, the extern1 test case (psi4/tests/extern1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-209534925
https://github.com/psi4/psi4/issues/341#issuecomment-209534925:127,Energy Efficiency,charge,charge,127,"As mentioned in the documentation @loriab quotes above, there is also a test case available of a QM computation in an MM point-charge field, the extern1 test case (psi4/tests/extern1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-209534925
https://github.com/psi4/psi4/issues/341#issuecomment-209534925:72,Testability,test,test,72,"As mentioned in the documentation @loriab quotes above, there is also a test case available of a QM computation in an MM point-charge field, the extern1 test case (psi4/tests/extern1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-209534925
https://github.com/psi4/psi4/issues/341#issuecomment-209534925:153,Testability,test,test,153,"As mentioned in the documentation @loriab quotes above, there is also a test case available of a QM computation in an MM point-charge field, the extern1 test case (psi4/tests/extern1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-209534925
https://github.com/psi4/psi4/issues/341#issuecomment-209534925:169,Testability,test,tests,169,"As mentioned in the documentation @loriab quotes above, there is also a test case available of a QM computation in an MM point-charge field, the extern1 test case (psi4/tests/extern1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-209534925
https://github.com/psi4/psi4/issues/342#issuecomment-209994658:69,Availability,reliab,reliably,69,"It's possible the problem is with the DNS servers. It happens pretty reliably if I google psi4 and click on the top hit. It happens on my desktop and mobile, including if I disconnect from the wireless and use T-Mobile's network.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-209994658
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:596,Availability,error,errors,596,"I am also being re-directed from search engines. The top site shows psicode.org but will redirect if I click on it. Typing psicode.org into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:406,Performance,load,loaded,406,"I am also being re-directed from search engines. The top site shows psicode.org but will redirect if I click on it. Typing psicode.org into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:684,Performance,load,load,684,"I am also being re-directed from search engines. The top site shows psicode.org but will redirect if I click on it. Typing psicode.org into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:822,Performance,load,load,822,"I am also being re-directed from search engines. The top site shows psicode.org but will redirect if I click on it. Typing psicode.org into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:959,Performance,load,load,959,"I am also being re-directed from search engines. The top site shows psicode.org but will redirect if I click on it. Typing psicode.org into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1098,Performance,load,load,1098," into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1240,Performance,load,load,1240,d I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1375,Performance,load,load,1375,d properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css F,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1519,Performance,load,load,1519,ole in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On Ap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1665,Performance,load,load,1665,"e server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: doe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1808,Performance,load,load,1808,"ver responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; G",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1948,Performance,load,load,1948,"erver responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:2148,Performance,load,load,2148,"org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for the Wikipedia; page on ""Psi4 Aurigae""). And yes, we have control of the domain via; godaddy.com. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notificat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:2286,Performance,load,load,2286,"ode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for the Wikipedia; page on ""Psi4 Aurigae""). And yes, we have control of the domain via; godaddy.com. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; wrote:. > Also confirming here, also on yahoo/bing. Can someone make sure we still; > have control of the domain name? Wh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210015028:2420,Performance,load,load,2420,"master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for the Wikipedia; page on ""Psi4 Aurigae""). And yes, we have control of the domain via; godaddy.com. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; wrote:. > Also confirming here, also on yahoo/bing. Can someone make sure we still; > have control of the domain name? Whois is still showing it registered to; > David Sherrill, and it still shows it going to godaddy, but it won't hurt; > to make sure; > ; > —; > You are re",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1049,Availability,error,errors,1049," I click the link to; www.psicode.org (top hit), www.psicode.org/labs.php (2nd hit), or; github.com/psi4/psi4 (3rd hit). It is really weird that github is also being intercepted. I could imagine; how our DNS might have been hijacked, etc., but not how the github link; could have been... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server respon",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:849,Performance,load,loaded,849,"If I do a Yahoo search, I get redirected if I click the link to; www.psicode.org (top hit), www.psicode.org/labs.php (2nd hit), or; github.com/psi4/psi4 (3rd hit). It is really weird that github is also being intercepted. I could imagine; how our DNS might have been hijacked, etc., but not how the github link; could have been... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1143,Performance,load,load,1143,"d that github is also being intercepted. I could imagine; how our DNS might have been hijacked, etc., but not how the github link; could have been... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1286,Performance,load,load,1286,"een... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1428,Performance,load,load,1428,"es. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resourc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1572,Performance,load,load,1572,", but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1722,Performance,load,load,1722, does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1859,Performance,load,load,1859,lain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2011,Performance,load,load,2011,04 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this prob,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2162,Performance,load,load,2162,"f 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not obse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2310,Performance,load,load,2310," (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2455,Performance,load,load,2455,"04 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our corre",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2662,Performance,load,load,2662,"y.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our correct site for the first page of hits (except for the Wikipedia; > page on ""Psi4 Aurigae""). And yes, we have control of the domain via; > godaddy.com.; > ; > -TDC; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2802,Performance,load,load,2802,"query.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our correct site for the first page of hits (except for the Wikipedia; > page on ""Psi4 Aurigae""). And yes, we have control of the domain via; > godaddy.com.; > ; > -TDC; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawdad@vt.edu; > ; > On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; > wrote:; > ; > > Also confirming here, also on yaho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2941,Performance,load,load,2941," the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our correct site for the first page of hits (except for the Wikipedia; > page on ""Psi4 Aurigae""). And yes, we have control of the domain via; > godaddy.com.; > ; > -TDC; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawdad@vt.edu; > ; > On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; > wrote:; > ; > > Also confirming here, also on yahoo/bing. Can someone make sure we still; > > have control of the domain name? Whois is still showing it registered to; > > David Sherrill, and it still shows it going to godaddy, but it w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774
https://github.com/psi4/psi4/issues/342#issuecomment-210019282:118,Availability,down,down,118,"The direct link was initially problematic for me, but no longer. I suspect a DNS server got compromised, it was taken down, and now you're dealing with having to wait for the malicious information to clear out of all the various caches...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210019282
https://github.com/psi4/psi4/issues/342#issuecomment-210019282:229,Performance,cache,caches,229,"The direct link was initially problematic for me, but no longer. I suspect a DNS server got compromised, it was taken down, and now you're dealing with having to wait for the malicious information to clear out of all the various caches...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210019282
https://github.com/psi4/psi4/issues/342#issuecomment-210019282:200,Usability,clear,clear,200,"The direct link was initially problematic for me, but no longer. I suspect a DNS server got compromised, it was taken down, and now you're dealing with having to wait for the malicious information to clear out of all the various caches...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210019282
https://github.com/psi4/psi4/issues/342#issuecomment-210023458:294,Availability,down,download,294,I'm suspecting that also. One odd thing is that it only did it for me (and others) from a search engine. It's hijacking based on the referer in the header (no idea if this is common). compare:. ```; wget --referer www.google.com psicode.org; ```. vs. ```; wget psicode.org; ```. The first will download an html document that is just a redirect. The second gets me the real psicode.org,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210023458
https://github.com/psi4/psi4/issues/342#issuecomment-210026465:114,Availability,down,downloading,114,"Actually, if what I said was correct, that's not quite DNS hijacking. It's still resolving to the correct IP, but downloading a different document based on referer. This would point to a godaddy server hijacking (I would think)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210026465
https://github.com/psi4/psi4/issues/342#issuecomment-210189946:383,Availability,down,down,383,"The github links (when clicking on them from a search) seem to work ok. It's the links to psicode.org. The two main possibilities are:. 1.) Hacked php file on psicode.org. (Involves multiple php files. The link to labs.php also redirects). 2.) Hacked godaddy server itself, causing redirects. I see other domains on that server have been compromised. That doesn't narrow the problem down at all, and it looks like the others are slightly different. Some have already been marked as malicious by google. (https://www.google.com/#q=scottwandersonphotography.com)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210189946
https://github.com/psi4/psi4/issues/342#issuecomment-210202336:29,Availability,down,down,29,"Great work tracking that one down, @bennybp et al. and thanks for the heads-up, @dkoes. Does anybody know why the CSS elements are fubared in the manual? The issues mentioned by @amjames still persist - perhaps it's a result of those modified directory permissions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210202336
https://github.com/psi4/psi4/issues/342#issuecomment-210224190:353,Availability,down,down,353,"Well done, Ben!. Regarding the manual, I note that the psi4manual/master/_static; subdirectory, where the css files should reside, is missing. @loriab, is; that automatically generated?. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Apr 14, 2016 at 7:31 PM, Andy Simmonett notifications@github.com; wrote:. > Great work tracking that one down, @bennybp https://github.com/bennybp; > et al. and thanks for the heads-up, @dkoes https://github.com/dkoes.; > Does anybody know why the CSS elements are fubared in the manual? The; > issues mentioned by @amjames https://github.com/amjames still persist -; > perhaps it's a result of those modified directory permissions?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/342#issuecomment-210202336",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210224190
https://github.com/psi4/psi4/issues/345#issuecomment-210846873:282,Integrability,depend,dependent,282,"I found this partly non-quantum mechanical look at this issue helpful:; http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3079527/; At least in our context, in which users are selecting certain isotopies intentionally, and corresponding vibrational frequencies are being recomputed (mass-dependent), and the molecules are typically small and relatively rigid, the symmetry number should be included and lowered by isotopic substitutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/345#issuecomment-210846873
https://github.com/psi4/psi4/issues/345#issuecomment-210924924:10,Usability,simpl,simply,10,"One could simply add a ROTATIONAL_SYMMETRY_NUMBER keyword (which it appears; I failed to do) and, if it exists, use that value. On Sat, Apr 16, 2016 at 3:27 PM, Lori A. Burns notifications@github.com; wrote:. > Thanks for the paper @psi-rking https://github.com/psi-rking. After; > reading it, I agree that with system fully specified, psi4 is doing it; > right. Though it does mention isotopolog cases where one wants sigma to; > equal that of the parent. What do you think of an option like Molpro has; > where can run the analysis in a different point group? That way if truly; > want only vibrational differences in isotopic substitution, not rotational; > differences, can easily order them up (and provide a way to match Molpro &; > Q-Chem).; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/345#issuecomment-210890978",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/345#issuecomment-210924924
https://github.com/psi4/psi4/issues/345#issuecomment-210979527:112,Integrability,wrap,wraps,112,"So be it, https://github.com/psi4/psi4/pull/348/commits/2fb0d6ba85dc30392cf2c2f2213244221160eae0 . I think that wraps this issue up. Will close it when the relevant docs get checked in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/345#issuecomment-210979527
https://github.com/psi4/psi4/issues/347#issuecomment-210848325:201,Usability,simpl,simplest,201,"Yes, the SALCs we are using now for displacements already have rotations and translations projected out, so the Hessian is internal naturally so to speak. In the event of a full cartesian Hessian, the simplest thing to do would be to carry out the vibrational analysis directly in cartesians.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-210848325
https://github.com/psi4/psi4/issues/347#issuecomment-347215160:470,Energy Efficiency,charge,charge,470,"@psi-rking, great, thanks for the prototype. Maybe put your post at https://github.com/psi4/psi4/issues/402 and mention it in the newdev slack channel. Also,; * is there anything particular to MP2 or is that just what you tested against?; * general fyi is that there's multi-QC-package vib outputs in the isotope-1 test cases that also may have some intensities; * how rigorous is that c1/no_com/no_reorient req. in your input file. Absolutely required to get the right charge origin? Or could we run with symmetry if we knew how to transform the Hessian or perturbation vectors into better frame? Is it different for charged species?; * why ""roa""? Just because it brings dipole derivatives for free?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347215160
https://github.com/psi4/psi4/issues/347#issuecomment-347215160:618,Energy Efficiency,charge,charged,618,"@psi-rking, great, thanks for the prototype. Maybe put your post at https://github.com/psi4/psi4/issues/402 and mention it in the newdev slack channel. Also,; * is there anything particular to MP2 or is that just what you tested against?; * general fyi is that there's multi-QC-package vib outputs in the isotope-1 test cases that also may have some intensities; * how rigorous is that c1/no_com/no_reorient req. in your input file. Absolutely required to get the right charge origin? Or could we run with symmetry if we knew how to transform the Hessian or perturbation vectors into better frame? Is it different for charged species?; * why ""roa""? Just because it brings dipole derivatives for free?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347215160
https://github.com/psi4/psi4/issues/347#issuecomment-347215160:222,Testability,test,tested,222,"@psi-rking, great, thanks for the prototype. Maybe put your post at https://github.com/psi4/psi4/issues/402 and mention it in the newdev slack channel. Also,; * is there anything particular to MP2 or is that just what you tested against?; * general fyi is that there's multi-QC-package vib outputs in the isotope-1 test cases that also may have some intensities; * how rigorous is that c1/no_com/no_reorient req. in your input file. Absolutely required to get the right charge origin? Or could we run with symmetry if we knew how to transform the Hessian or perturbation vectors into better frame? Is it different for charged species?; * why ""roa""? Just because it brings dipole derivatives for free?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347215160
https://github.com/psi4/psi4/issues/347#issuecomment-347215160:315,Testability,test,test,315,"@psi-rking, great, thanks for the prototype. Maybe put your post at https://github.com/psi4/psi4/issues/402 and mention it in the newdev slack channel. Also,; * is there anything particular to MP2 or is that just what you tested against?; * general fyi is that there's multi-QC-package vib outputs in the isotope-1 test cases that also may have some intensities; * how rigorous is that c1/no_com/no_reorient req. in your input file. Absolutely required to get the right charge origin? Or could we run with symmetry if we knew how to transform the Hessian or perturbation vectors into better frame? Is it different for charged species?; * why ""roa""? Just because it brings dipole derivatives for free?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347215160
https://github.com/psi4/psi4/issues/347#issuecomment-347240852:1275,Energy Efficiency,charge,charge,1275,"No reason it needs to be 'roa'. The point is that the code which executes; right now when one selects 'roa' is already doing the IR intensities; correctly. If we otherwise have IR intensities working, then just ignore; this post. I did MP2 because Spartan and Psi could. Presumably with the; new CCSD gradient with fields check-in last weekend, the CCSD intensities; would work too, but I haven't checked that. The input file could certainly; be simplified, including trying to eliminate some of the restrictions and; seeing if there is any impact on the IR intensities. I thought it might be; helpful if someone else would like to start from that point. On Mon, Nov 27, 2017 at 9:22 AM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, great, thanks for the; > prototype. Maybe put your post at #402; > <https://github.com/psi4/psi4/issues/402> and mention it in the newdev; > slack channel. Also,; >; > - is there anything particular to MP2 or is that just what you tested; > against?; > - general fyi is that there's multi-QC-package vib outputs in the; > isotope-1 test cases that also may have some intensities; > - how rigorous is that c1/no_com/no_reorient req. in your input file.; > Absolutely required to get the right charge origin? Or could we run with; > symmetry if we knew how to transform the Hessian or perturbation vectors; > into better frame? Is it different for charged species?; > - why ""roa""? Just because it brings dipole derivatives for free?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/347#issuecomment-347215160>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMMsKLuYghtYIPsfAYOmbk9WBCBXks5s6tPSgaJpZM4II2n7>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347240852
https://github.com/psi4/psi4/issues/347#issuecomment-347240852:1429,Energy Efficiency,charge,charged,1429,"No reason it needs to be 'roa'. The point is that the code which executes; right now when one selects 'roa' is already doing the IR intensities; correctly. If we otherwise have IR intensities working, then just ignore; this post. I did MP2 because Spartan and Psi could. Presumably with the; new CCSD gradient with fields check-in last weekend, the CCSD intensities; would work too, but I haven't checked that. The input file could certainly; be simplified, including trying to eliminate some of the restrictions and; seeing if there is any impact on the IR intensities. I thought it might be; helpful if someone else would like to start from that point. On Mon, Nov 27, 2017 at 9:22 AM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, great, thanks for the; > prototype. Maybe put your post at #402; > <https://github.com/psi4/psi4/issues/402> and mention it in the newdev; > slack channel. Also,; >; > - is there anything particular to MP2 or is that just what you tested; > against?; > - general fyi is that there's multi-QC-package vib outputs in the; > isotope-1 test cases that also may have some intensities; > - how rigorous is that c1/no_com/no_reorient req. in your input file.; > Absolutely required to get the right charge origin? Or could we run with; > symmetry if we knew how to transform the Hessian or perturbation vectors; > into better frame? Is it different for charged species?; > - why ""roa""? Just because it brings dipole derivatives for free?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/347#issuecomment-347215160>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMMsKLuYghtYIPsfAYOmbk9WBCBXks5s6tPSgaJpZM4II2n7>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347240852
https://github.com/psi4/psi4/issues/347#issuecomment-347240852:1014,Testability,test,tested,1014,"No reason it needs to be 'roa'. The point is that the code which executes; right now when one selects 'roa' is already doing the IR intensities; correctly. If we otherwise have IR intensities working, then just ignore; this post. I did MP2 because Spartan and Psi could. Presumably with the; new CCSD gradient with fields check-in last weekend, the CCSD intensities; would work too, but I haven't checked that. The input file could certainly; be simplified, including trying to eliminate some of the restrictions and; seeing if there is any impact on the IR intensities. I thought it might be; helpful if someone else would like to start from that point. On Mon, Nov 27, 2017 at 9:22 AM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, great, thanks for the; > prototype. Maybe put your post at #402; > <https://github.com/psi4/psi4/issues/402> and mention it in the newdev; > slack channel. Also,; >; > - is there anything particular to MP2 or is that just what you tested; > against?; > - general fyi is that there's multi-QC-package vib outputs in the; > isotope-1 test cases that also may have some intensities; > - how rigorous is that c1/no_com/no_reorient req. in your input file.; > Absolutely required to get the right charge origin? Or could we run with; > symmetry if we knew how to transform the Hessian or perturbation vectors; > into better frame? Is it different for charged species?; > - why ""roa""? Just because it brings dipole derivatives for free?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/347#issuecomment-347215160>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMMsKLuYghtYIPsfAYOmbk9WBCBXks5s6tPSgaJpZM4II2n7>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347240852
https://github.com/psi4/psi4/issues/347#issuecomment-347240852:1115,Testability,test,test,1115,"No reason it needs to be 'roa'. The point is that the code which executes; right now when one selects 'roa' is already doing the IR intensities; correctly. If we otherwise have IR intensities working, then just ignore; this post. I did MP2 because Spartan and Psi could. Presumably with the; new CCSD gradient with fields check-in last weekend, the CCSD intensities; would work too, but I haven't checked that. The input file could certainly; be simplified, including trying to eliminate some of the restrictions and; seeing if there is any impact on the IR intensities. I thought it might be; helpful if someone else would like to start from that point. On Mon, Nov 27, 2017 at 9:22 AM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, great, thanks for the; > prototype. Maybe put your post at #402; > <https://github.com/psi4/psi4/issues/402> and mention it in the newdev; > slack channel. Also,; >; > - is there anything particular to MP2 or is that just what you tested; > against?; > - general fyi is that there's multi-QC-package vib outputs in the; > isotope-1 test cases that also may have some intensities; > - how rigorous is that c1/no_com/no_reorient req. in your input file.; > Absolutely required to get the right charge origin? Or could we run with; > symmetry if we knew how to transform the Hessian or perturbation vectors; > into better frame? Is it different for charged species?; > - why ""roa""? Just because it brings dipole derivatives for free?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/347#issuecomment-347215160>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMMsKLuYghtYIPsfAYOmbk9WBCBXks5s6tPSgaJpZM4II2n7>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347240852
https://github.com/psi4/psi4/issues/347#issuecomment-347240852:446,Usability,simpl,simplified,446,"No reason it needs to be 'roa'. The point is that the code which executes; right now when one selects 'roa' is already doing the IR intensities; correctly. If we otherwise have IR intensities working, then just ignore; this post. I did MP2 because Spartan and Psi could. Presumably with the; new CCSD gradient with fields check-in last weekend, the CCSD intensities; would work too, but I haven't checked that. The input file could certainly; be simplified, including trying to eliminate some of the restrictions and; seeing if there is any impact on the IR intensities. I thought it might be; helpful if someone else would like to start from that point. On Mon, Nov 27, 2017 at 9:22 AM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, great, thanks for the; > prototype. Maybe put your post at #402; > <https://github.com/psi4/psi4/issues/402> and mention it in the newdev; > slack channel. Also,; >; > - is there anything particular to MP2 or is that just what you tested; > against?; > - general fyi is that there's multi-QC-package vib outputs in the; > isotope-1 test cases that also may have some intensities; > - how rigorous is that c1/no_com/no_reorient req. in your input file.; > Absolutely required to get the right charge origin? Or could we run with; > symmetry if we knew how to transform the Hessian or perturbation vectors; > into better frame? Is it different for charged species?; > - why ""roa""? Just because it brings dipole derivatives for free?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/347#issuecomment-347215160>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMMsKLuYghtYIPsfAYOmbk9WBCBXks5s6tPSgaJpZM4II2n7>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347240852
https://github.com/psi4/psi4/issues/353#issuecomment-211380881:179,Energy Efficiency,energy,energy,179,"`bypass_scf` _should_ not work as there is no longer a global wavefunction. So this simply need to be purged from docs/driver/etc and replaced with:. ``` python; scf_e, scf_wfn = energy('SCF', return_wfn = True); energy('other_method', ref_wfn=scf_wfn); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/353#issuecomment-211380881
https://github.com/psi4/psi4/issues/353#issuecomment-211380881:213,Energy Efficiency,energy,energy,213,"`bypass_scf` _should_ not work as there is no longer a global wavefunction. So this simply need to be purged from docs/driver/etc and replaced with:. ``` python; scf_e, scf_wfn = energy('SCF', return_wfn = True); energy('other_method', ref_wfn=scf_wfn); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/353#issuecomment-211380881
https://github.com/psi4/psi4/issues/353#issuecomment-211380881:84,Usability,simpl,simply,84,"`bypass_scf` _should_ not work as there is no longer a global wavefunction. So this simply need to be purged from docs/driver/etc and replaced with:. ``` python; scf_e, scf_wfn = energy('SCF', return_wfn = True); energy('other_method', ref_wfn=scf_wfn); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/353#issuecomment-211380881
https://github.com/psi4/psi4/issues/355#issuecomment-211638331:613,Energy Efficiency,green,green,613,"I compiled psi4, got coffee, and cmake decided it was time to recompile from scratch in case someone ninja edited my build. Cmake always has your back. . -Daniel Smith; Sent from my iPhone. . > On Apr 18, 2016, at 19:16, Lori A. Burns notifications@github.com wrote:; > ; > It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!; > ; > Who dares to decouple libint from our build system such that it could become a detectable ExternalProject_Add CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-211638331
https://github.com/psi4/psi4/issues/355#issuecomment-211638331:648,Energy Efficiency,energy,energy,648,"I compiled psi4, got coffee, and cmake decided it was time to recompile from scratch in case someone ninja edited my build. Cmake always has your back. . -Daniel Smith; Sent from my iPhone. . > On Apr 18, 2016, at 19:16, Lori A. Burns notifications@github.com wrote:; > ; > It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!; > ; > Who dares to decouple libint from our build system such that it could become a detectable ExternalProject_Add CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-211638331
https://github.com/psi4/psi4/issues/355#issuecomment-211638331:750,Safety,detect,detectable,750,"I compiled psi4, got coffee, and cmake decided it was time to recompile from scratch in case someone ninja edited my build. Cmake always has your back. . -Daniel Smith; Sent from my iPhone. . > On Apr 18, 2016, at 19:16, Lori A. Burns notifications@github.com wrote:; > ; > It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!; > ; > Who dares to decouple libint from our build system such that it could become a detectable ExternalProject_Add CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-211638331
https://github.com/psi4/psi4/issues/355#issuecomment-211638331:333,Testability,test,testing,333,"I compiled psi4, got coffee, and cmake decided it was time to recompile from scratch in case someone ninja edited my build. Cmake always has your back. . -Daniel Smith; Sent from my iPhone. . > On Apr 18, 2016, at 19:16, Lori A. Burns notifications@github.com wrote:; > ; > It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!; > ; > Who dares to decouple libint from our build system such that it could become a detectable ExternalProject_Add CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-211638331
https://github.com/psi4/psi4/issues/355#issuecomment-211638331:539,Testability,test,test,539,"I compiled psi4, got coffee, and cmake decided it was time to recompile from scratch in case someone ninja edited my build. Cmake always has your back. . -Daniel Smith; Sent from my iPhone. . > On Apr 18, 2016, at 19:16, Lori A. Burns notifications@github.com wrote:; > ; > It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!; > ; > Who dares to decouple libint from our build system such that it could become a detectable ExternalProject_Add CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-211638331
https://github.com/psi4/psi4/issues/355#issuecomment-221837384:18,Deployability,patch,patching,18,"FWIW, I'm crudely patching out the internal libint on Debian/Ubuntu: http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/system_libint.patch?view=markup. I wasn't 100% sure this was kosher, but am glad it's going to (properly) happen upstream as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-221837384
https://github.com/psi4/psi4/issues/355#issuecomment-221837384:132,Deployability,patch,patches,132,"FWIW, I'm crudely patching out the internal libint on Debian/Ubuntu: http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/system_libint.patch?view=markup. I wasn't 100% sure this was kosher, but am glad it's going to (properly) happen upstream as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-221837384
https://github.com/psi4/psi4/issues/355#issuecomment-221837384:154,Deployability,patch,patch,154,"FWIW, I'm crudely patching out the internal libint on Debian/Ubuntu: http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/system_libint.patch?view=markup. I wasn't 100% sure this was kosher, but am glad it's going to (properly) happen upstream as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-221837384
https://github.com/psi4/psi4/issues/355#issuecomment-232778952:53,Testability,test,tests,53,"Any progress on this? We're hitting some problems in tests, because the analytic Hessians require higher angular momentum. Rather than recompile a large libint for every travis run, it'd be good to pull it in as a precompiled package.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232778952
https://github.com/psi4/psi4/issues/355#issuecomment-232780003:199,Modifiability,rewrite,rewrite,199,@andysim #442 has it finished for both libint and libderiv. Also included are `libintConfig.cmake` and `libderivConfig.cmake` files needed for `find_package`. That obviously won't help you until the rewrite is accepted though....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232780003
https://github.com/psi4/psi4/issues/355#issuecomment-232780828:89,Testability,test,test,89,"Excellent! I'll hang tight. In the mean time, I can just use finite differences for that test, as we used to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232780828
https://github.com/psi4/psi4/issues/355#issuecomment-232783460:271,Modifiability,config,configured,271,"That's a good idea, @mbanck, but I think it could be quite a lot of work. We only use Travis to run quick tests on each new PR (which will all use the new CMake infrastructure). Older builds can be tested more extensively on a separate nightly build server, which can be configured to build with higher angular momentum.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783460
https://github.com/psi4/psi4/issues/355#issuecomment-232783460:106,Testability,test,tests,106,"That's a good idea, @mbanck, but I think it could be quite a lot of work. We only use Travis to run quick tests on each new PR (which will all use the new CMake infrastructure). Older builds can be tested more extensively on a separate nightly build server, which can be configured to build with higher angular momentum.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783460
https://github.com/psi4/psi4/issues/355#issuecomment-232783460:198,Testability,test,tested,198,"That's a good idea, @mbanck, but I think it could be quite a lot of work. We only use Travis to run quick tests on each new PR (which will all use the new CMake infrastructure). Older builds can be tested more extensively on a separate nightly build server, which can be configured to build with higher angular momentum.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783460
https://github.com/psi4/psi4/issues/355#issuecomment-232783553:44,Availability,down,down,44,"For what its worth 1.1 shouldn't be too far down the pipeline. This year at the very latest, but hopefully 2-3 months.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783553
https://github.com/psi4/psi4/issues/355#issuecomment-232783553:53,Deployability,pipeline,pipeline,53,"For what its worth 1.1 shouldn't be too far down the pipeline. This year at the very latest, but hopefully 2-3 months.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783553
https://github.com/psi4/psi4/pull/360#issuecomment-212550131:109,Energy Efficiency,energy,energy,109,"@fevangelista, I noticed that neither `psimrcc` nor `psimrcc_scf` are in the table of eligible arguments to `energy()` that generates this page: http://psicode.org/psi4manual/master/energy.html . Are they excluded for a reason or would you like them added?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/360#issuecomment-212550131
https://github.com/psi4/psi4/pull/360#issuecomment-212550131:182,Energy Efficiency,energy,energy,182,"@fevangelista, I noticed that neither `psimrcc` nor `psimrcc_scf` are in the table of eligible arguments to `energy()` that generates this page: http://psicode.org/psi4manual/master/energy.html . Are they excluded for a reason or would you like them added?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/360#issuecomment-212550131
https://github.com/psi4/psi4/pull/361#issuecomment-212251160:470,Availability,echo,echo,470,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160
https://github.com/psi4/psi4/pull/361#issuecomment-212251160:905,Availability,echo,echo,905,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160
https://github.com/psi4/psi4/pull/361#issuecomment-212251160:807,Deployability,install,install,807,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160
https://github.com/psi4/psi4/pull/361#issuecomment-212251160:8,Energy Efficiency,reduce,reduced,8,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160
https://github.com/psi4/psi4/pull/361#issuecomment-212251160:204,Testability,test,tested,204,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160
https://github.com/psi4/psi4/pull/361#issuecomment-212422557:502,Deployability,Configurat,Configuration,502,"Huh, never mind the jobname bit then. I was changing various things so I must have been mistaken on that point. Ah, in tutorial.rst, there's a sentence below. That `sec:install_III_7` link is to a long-deceased file. Please replace that link with one to the ""7."" on the wiki page or anywhere else you think best covers the subject. ```; ""For your convenience, the above example can be found in :srcsample:`tu1-h2o-energy`. You can run it if you wish. Once |PSIfour| is in your path (see the :ref:`User Configuration <sec:install_III_7>` section""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212422557
https://github.com/psi4/psi4/pull/361#issuecomment-212422557:414,Energy Efficiency,energy,energy,414,"Huh, never mind the jobname bit then. I was changing various things so I must have been mistaken on that point. Ah, in tutorial.rst, there's a sentence below. That `sec:install_III_7` link is to a long-deceased file. Please replace that link with one to the ""7."" on the wiki page or anywhere else you think best covers the subject. ```; ""For your convenience, the above example can be found in :srcsample:`tu1-h2o-energy`. You can run it if you wish. Once |PSIfour| is in your path (see the :ref:`User Configuration <sec:install_III_7>` section""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212422557
https://github.com/psi4/psi4/pull/361#issuecomment-212422557:502,Modifiability,Config,Configuration,502,"Huh, never mind the jobname bit then. I was changing various things so I must have been mistaken on that point. Ah, in tutorial.rst, there's a sentence below. That `sec:install_III_7` link is to a long-deceased file. Please replace that link with one to the ""7."" on the wiki page or anywhere else you think best covers the subject. ```; ""For your convenience, the above example can be found in :srcsample:`tu1-h2o-energy`. You can run it if you wish. Once |PSIfour| is in your path (see the :ref:`User Configuration <sec:install_III_7>` section""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212422557
https://github.com/psi4/psi4/issues/367#issuecomment-214211172:91,Energy Efficiency,energy,energy,91,For new methods list we should include followings (all of them were completed):; - DF-CCSD energy and gradient (RHF) ; - DF-CCD energy and gradient (RHF) ; - DF-\LambdaCCSD(T) energy; - DF-MP2.5 energy and gradient (RHF and UHF); - DF-MP3 energy and gradient (RHF and UHF); - DF-LCCD energy and gradient (RHF and UHF); - DF-OMP2.5 energy and gradient (RHF and UHF); - DF-OMP3 energy and gradient (RHF and UHF); - DF-OLCCD energy and gradient (RHF and UHF),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-214211172
https://github.com/psi4/psi4/issues/367#issuecomment-214211172:128,Energy Efficiency,energy,energy,128,For new methods list we should include followings (all of them were completed):; - DF-CCSD energy and gradient (RHF) ; - DF-CCD energy and gradient (RHF) ; - DF-\LambdaCCSD(T) energy; - DF-MP2.5 energy and gradient (RHF and UHF); - DF-MP3 energy and gradient (RHF and UHF); - DF-LCCD energy and gradient (RHF and UHF); - DF-OMP2.5 energy and gradient (RHF and UHF); - DF-OMP3 energy and gradient (RHF and UHF); - DF-OLCCD energy and gradient (RHF and UHF),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-214211172
https://github.com/psi4/psi4/issues/367#issuecomment-214211172:176,Energy Efficiency,energy,energy,176,For new methods list we should include followings (all of them were completed):; - DF-CCSD energy and gradient (RHF) ; - DF-CCD energy and gradient (RHF) ; - DF-\LambdaCCSD(T) energy; - DF-MP2.5 energy and gradient (RHF and UHF); - DF-MP3 energy and gradient (RHF and UHF); - DF-LCCD energy and gradient (RHF and UHF); - DF-OMP2.5 energy and gradient (RHF and UHF); - DF-OMP3 energy and gradient (RHF and UHF); - DF-OLCCD energy and gradient (RHF and UHF),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-214211172
https://github.com/psi4/psi4/issues/367#issuecomment-214211172:195,Energy Efficiency,energy,energy,195,For new methods list we should include followings (all of them were completed):; - DF-CCSD energy and gradient (RHF) ; - DF-CCD energy and gradient (RHF) ; - DF-\LambdaCCSD(T) energy; - DF-MP2.5 energy and gradient (RHF and UHF); - DF-MP3 energy and gradient (RHF and UHF); - DF-LCCD energy and gradient (RHF and UHF); - DF-OMP2.5 energy and gradient (RHF and UHF); - DF-OMP3 energy and gradient (RHF and UHF); - DF-OLCCD energy and gradient (RHF and UHF),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-214211172
https://github.com/psi4/psi4/issues/367#issuecomment-214211172:239,Energy Efficiency,energy,energy,239,For new methods list we should include followings (all of them were completed):; - DF-CCSD energy and gradient (RHF) ; - DF-CCD energy and gradient (RHF) ; - DF-\LambdaCCSD(T) energy; - DF-MP2.5 energy and gradient (RHF and UHF); - DF-MP3 energy and gradient (RHF and UHF); - DF-LCCD energy and gradient (RHF and UHF); - DF-OMP2.5 energy and gradient (RHF and UHF); - DF-OMP3 energy and gradient (RHF and UHF); - DF-OLCCD energy and gradient (RHF and UHF),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-214211172
https://github.com/psi4/psi4/issues/367#issuecomment-214211172:284,Energy Efficiency,energy,energy,284,For new methods list we should include followings (all of them were completed):; - DF-CCSD energy and gradient (RHF) ; - DF-CCD energy and gradient (RHF) ; - DF-\LambdaCCSD(T) energy; - DF-MP2.5 energy and gradient (RHF and UHF); - DF-MP3 energy and gradient (RHF and UHF); - DF-LCCD energy and gradient (RHF and UHF); - DF-OMP2.5 energy and gradient (RHF and UHF); - DF-OMP3 energy and gradient (RHF and UHF); - DF-OLCCD energy and gradient (RHF and UHF),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-214211172
https://github.com/psi4/psi4/issues/367#issuecomment-214211172:331,Energy Efficiency,energy,energy,331,For new methods list we should include followings (all of them were completed):; - DF-CCSD energy and gradient (RHF) ; - DF-CCD energy and gradient (RHF) ; - DF-\LambdaCCSD(T) energy; - DF-MP2.5 energy and gradient (RHF and UHF); - DF-MP3 energy and gradient (RHF and UHF); - DF-LCCD energy and gradient (RHF and UHF); - DF-OMP2.5 energy and gradient (RHF and UHF); - DF-OMP3 energy and gradient (RHF and UHF); - DF-OLCCD energy and gradient (RHF and UHF),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-214211172
https://github.com/psi4/psi4/issues/367#issuecomment-214211172:376,Energy Efficiency,energy,energy,376,For new methods list we should include followings (all of them were completed):; - DF-CCSD energy and gradient (RHF) ; - DF-CCD energy and gradient (RHF) ; - DF-\LambdaCCSD(T) energy; - DF-MP2.5 energy and gradient (RHF and UHF); - DF-MP3 energy and gradient (RHF and UHF); - DF-LCCD energy and gradient (RHF and UHF); - DF-OMP2.5 energy and gradient (RHF and UHF); - DF-OMP3 energy and gradient (RHF and UHF); - DF-OLCCD energy and gradient (RHF and UHF),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-214211172
https://github.com/psi4/psi4/issues/367#issuecomment-214211172:422,Energy Efficiency,energy,energy,422,For new methods list we should include followings (all of them were completed):; - DF-CCSD energy and gradient (RHF) ; - DF-CCD energy and gradient (RHF) ; - DF-\LambdaCCSD(T) energy; - DF-MP2.5 energy and gradient (RHF and UHF); - DF-MP3 energy and gradient (RHF and UHF); - DF-LCCD energy and gradient (RHF and UHF); - DF-OMP2.5 energy and gradient (RHF and UHF); - DF-OMP3 energy and gradient (RHF and UHF); - DF-OLCCD energy and gradient (RHF and UHF),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-214211172
https://github.com/psi4/psi4/issues/367#issuecomment-220827431:66,Deployability,release,release,66,"From the text on this issue, it is not entirely clear to what the release notes are relative to. Is this 3.4.0 or 4.0beta2? This should be mentioned in the opening paragraph of the final version I think",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220827431
https://github.com/psi4/psi4/issues/367#issuecomment-220827431:48,Usability,clear,clear,48,"From the text on this issue, it is not entirely clear to what the release notes are relative to. Is this 3.4.0 or 4.0beta2? This should be mentioned in the opening paragraph of the final version I think",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220827431
https://github.com/psi4/psi4/issues/367#issuecomment-220846631:200,Availability,down,downloads,200,"Good point, @mbanck. These release notes will be relative to 4.0beta5 from July 2013. Incremental release notes for earlier betas (though not all the way back to psi3 3.4.0) are at http://psicode.org/downloads.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220846631
https://github.com/psi4/psi4/issues/367#issuecomment-220846631:27,Deployability,release,release,27,"Good point, @mbanck. These release notes will be relative to 4.0beta5 from July 2013. Incremental release notes for earlier betas (though not all the way back to psi3 3.4.0) are at http://psicode.org/downloads.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220846631
https://github.com/psi4/psi4/issues/367#issuecomment-220846631:98,Deployability,release,release,98,"Good point, @mbanck. These release notes will be relative to 4.0beta5 from July 2013. Incremental release notes for earlier betas (though not all the way back to psi3 3.4.0) are at http://psicode.org/downloads.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220846631
https://github.com/psi4/psi4/issues/367#issuecomment-221834969:39,Performance,optimiz,optimized-orbital,39,"> Added Cholesky-decomposition MP2 and optimized-orbital MP2. That should be ""orbital-optimized MP2"" instead I think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-221834969
https://github.com/psi4/psi4/issues/367#issuecomment-221834969:86,Performance,optimiz,optimized,86,"> Added Cholesky-decomposition MP2 and optimized-orbital MP2. That should be ""orbital-optimized MP2"" instead I think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-221834969
https://github.com/psi4/psi4/issues/367#issuecomment-221835606:75,Performance,optimiz,optimized,75,"ı think it should be ""Added density-fitted and Cholesky decomposed orbital-optimized MP2"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-221835606
https://github.com/psi4/psi4/issues/367#issuecomment-232776501:65,Deployability,Release,Release,65,Thanks to everyone for their feedback. I put all this on the 1.0 Release Notes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232776501
https://github.com/psi4/psi4/issues/367#issuecomment-232776501:29,Usability,feedback,feedback,29,Thanks to everyone for their feedback. I put all this on the 1.0 Release Notes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232776501
https://github.com/psi4/psi4/issues/367#issuecomment-232778689:8,Deployability,release,release,8,"> These release notes will be relative to 4.0beta5 from July 2013. I think it would also be beneficial to have a high-level list of additional methods since PSI3, not necessarily in the Release Notes though, but possible close to the table of methods in the documentation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232778689
https://github.com/psi4/psi4/issues/367#issuecomment-232778689:186,Deployability,Release,Release,186,"> These release notes will be relative to 4.0beta5 from July 2013. I think it would also be beneficial to have a high-level list of additional methods since PSI3, not necessarily in the Release Notes though, but possible close to the table of methods in the documentation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232778689
https://github.com/psi4/psi4/issues/367#issuecomment-232781392:36,Availability,down,downloads,36,Added the releasenotes from psicode downloads page to the github release: https://github.com/psi4/psi4/releases/tag/1.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232781392
https://github.com/psi4/psi4/issues/367#issuecomment-232781392:10,Deployability,release,releasenotes,10,Added the releasenotes from psicode downloads page to the github release: https://github.com/psi4/psi4/releases/tag/1.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232781392
https://github.com/psi4/psi4/issues/367#issuecomment-232781392:65,Deployability,release,release,65,Added the releasenotes from psicode downloads page to the github release: https://github.com/psi4/psi4/releases/tag/1.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232781392
https://github.com/psi4/psi4/issues/367#issuecomment-232781392:103,Deployability,release,releases,103,Added the releasenotes from psicode downloads page to the github release: https://github.com/psi4/psi4/releases/tag/1.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232781392
https://github.com/psi4/psi4/issues/367#issuecomment-232787398:96,Deployability,release,release,96,"By the way, and I realize that this is quickly getting off-topic, but I am baffled that the 1.0 release wasn't tweeted from @psi_code... I'm following the commit feed, but there was no obvious ""release 1.0"" or ""bump version to 1.1devel"" commits, so I totally missed it until now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232787398
https://github.com/psi4/psi4/issues/367#issuecomment-232787398:194,Deployability,release,release,194,"By the way, and I realize that this is quickly getting off-topic, but I am baffled that the 1.0 release wasn't tweeted from @psi_code... I'm following the commit feed, but there was no obvious ""release 1.0"" or ""bump version to 1.1devel"" commits, so I totally missed it until now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232787398
https://github.com/psi4/psi4/issues/367#issuecomment-232790462:25,Deployability,release,release,25,"You could call it a soft release thats still not quite official. The code base has been tagged 1.0 and frozen; however, the accompanying distribution networks (binaries and conda channels) have not quite caught up. The release notes are among the very last things on the check list. Cheers,; Daniel Smith. > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com wrote:; > ; > By the way, and I realize that this is quickly getting off-topic, but I am baffled that the 1.0 release wasn't tweeted from @psi_code...; > ; > I'm following the commit feed, but there was no obvious ""release 1.0"" or ""bump version to 1.1devel"" commits, so I totally missed it until now.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/issues/367#issuecomment-232787398, or mute the thread https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232790462
https://github.com/psi4/psi4/issues/367#issuecomment-232790462:219,Deployability,release,release,219,"You could call it a soft release thats still not quite official. The code base has been tagged 1.0 and frozen; however, the accompanying distribution networks (binaries and conda channels) have not quite caught up. The release notes are among the very last things on the check list. Cheers,; Daniel Smith. > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com wrote:; > ; > By the way, and I realize that this is quickly getting off-topic, but I am baffled that the 1.0 release wasn't tweeted from @psi_code...; > ; > I'm following the commit feed, but there was no obvious ""release 1.0"" or ""bump version to 1.1devel"" commits, so I totally missed it until now.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/issues/367#issuecomment-232787398, or mute the thread https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232790462
https://github.com/psi4/psi4/issues/367#issuecomment-232790462:486,Deployability,release,release,486,"You could call it a soft release thats still not quite official. The code base has been tagged 1.0 and frozen; however, the accompanying distribution networks (binaries and conda channels) have not quite caught up. The release notes are among the very last things on the check list. Cheers,; Daniel Smith. > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com wrote:; > ; > By the way, and I realize that this is quickly getting off-topic, but I am baffled that the 1.0 release wasn't tweeted from @psi_code...; > ; > I'm following the commit feed, but there was no obvious ""release 1.0"" or ""bump version to 1.1devel"" commits, so I totally missed it until now.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/issues/367#issuecomment-232787398, or mute the thread https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232790462
https://github.com/psi4/psi4/issues/367#issuecomment-232790462:591,Deployability,release,release,591,"You could call it a soft release thats still not quite official. The code base has been tagged 1.0 and frozen; however, the accompanying distribution networks (binaries and conda channels) have not quite caught up. The release notes are among the very last things on the check list. Cheers,; Daniel Smith. > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com wrote:; > ; > By the way, and I realize that this is quickly getting off-topic, but I am baffled that the 1.0 release wasn't tweeted from @psi_code...; > ; > I'm following the commit feed, but there was no obvious ""release 1.0"" or ""bump version to 1.1devel"" commits, so I totally missed it until now.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/issues/367#issuecomment-232787398, or mute the thread https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232790462
https://github.com/psi4/psi4/issues/367#issuecomment-232799162:245,Deployability,release,release,245,"Good point about summarizing changes since Psi3. Maybe I can work that in; very briefly somewhere. 1.0 announcement will be tweeted soon. On Thu, Jul 14, 2016 at 4:58 PM, Daniel Smith notifications@github.com; wrote:. > You could call it a soft release thats still not quite official. The code; > base has been tagged 1.0 and frozen; however, the accompanying distribution; > networks (binaries and conda channels) have not quite caught up. The; > release notes are among the very last things on the check list.; > ; > Cheers,; > Daniel Smith; > ; > > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com; > > wrote:; > > ; > > By the way, and I realize that this is quickly getting off-topic, but I; > > am baffled that the 1.0 release wasn't tweeted from @psi_code...; > > ; > > I'm following the commit feed, but there was no obvious ""release 1.0"" or; > > ""bump version to 1.1devel"" commits, so I totally missed it until now.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub <; > > https://github.com/psi4/psi4/issues/367#issuecomment-232787398>, or mute; > > the thread <; > > https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ; > > .; > ; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/367#issuecomment-232790462, or mute; > the thread; > https://github.com/notifications/unsubscribe/AC9QdmfHboo-xz1xgQ43fJ4qeZhIXBogks5qVqL-gaJpZM4INszQ; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232799162
https://github.com/psi4/psi4/issues/367#issuecomment-232799162:448,Deployability,release,release,448,"Good point about summarizing changes since Psi3. Maybe I can work that in; very briefly somewhere. 1.0 announcement will be tweeted soon. On Thu, Jul 14, 2016 at 4:58 PM, Daniel Smith notifications@github.com; wrote:. > You could call it a soft release thats still not quite official. The code; > base has been tagged 1.0 and frozen; however, the accompanying distribution; > networks (binaries and conda channels) have not quite caught up. The; > release notes are among the very last things on the check list.; > ; > Cheers,; > Daniel Smith; > ; > > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com; > > wrote:; > > ; > > By the way, and I realize that this is quickly getting off-topic, but I; > > am baffled that the 1.0 release wasn't tweeted from @psi_code...; > > ; > > I'm following the commit feed, but there was no obvious ""release 1.0"" or; > > ""bump version to 1.1devel"" commits, so I totally missed it until now.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub <; > > https://github.com/psi4/psi4/issues/367#issuecomment-232787398>, or mute; > > the thread <; > > https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ; > > .; > ; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/367#issuecomment-232790462, or mute; > the thread; > https://github.com/notifications/unsubscribe/AC9QdmfHboo-xz1xgQ43fJ4qeZhIXBogks5qVqL-gaJpZM4INszQ; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232799162
https://github.com/psi4/psi4/issues/367#issuecomment-232799162:744,Deployability,release,release,744,"Good point about summarizing changes since Psi3. Maybe I can work that in; very briefly somewhere. 1.0 announcement will be tweeted soon. On Thu, Jul 14, 2016 at 4:58 PM, Daniel Smith notifications@github.com; wrote:. > You could call it a soft release thats still not quite official. The code; > base has been tagged 1.0 and frozen; however, the accompanying distribution; > networks (binaries and conda channels) have not quite caught up. The; > release notes are among the very last things on the check list.; > ; > Cheers,; > Daniel Smith; > ; > > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com; > > wrote:; > > ; > > By the way, and I realize that this is quickly getting off-topic, but I; > > am baffled that the 1.0 release wasn't tweeted from @psi_code...; > > ; > > I'm following the commit feed, but there was no obvious ""release 1.0"" or; > > ""bump version to 1.1devel"" commits, so I totally missed it until now.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub <; > > https://github.com/psi4/psi4/issues/367#issuecomment-232787398>, or mute; > > the thread <; > > https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ; > > .; > ; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/367#issuecomment-232790462, or mute; > the thread; > https://github.com/notifications/unsubscribe/AC9QdmfHboo-xz1xgQ43fJ4qeZhIXBogks5qVqL-gaJpZM4INszQ; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232799162
https://github.com/psi4/psi4/issues/367#issuecomment-232799162:853,Deployability,release,release,853,"Good point about summarizing changes since Psi3. Maybe I can work that in; very briefly somewhere. 1.0 announcement will be tweeted soon. On Thu, Jul 14, 2016 at 4:58 PM, Daniel Smith notifications@github.com; wrote:. > You could call it a soft release thats still not quite official. The code; > base has been tagged 1.0 and frozen; however, the accompanying distribution; > networks (binaries and conda channels) have not quite caught up. The; > release notes are among the very last things on the check list.; > ; > Cheers,; > Daniel Smith; > ; > > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com; > > wrote:; > > ; > > By the way, and I realize that this is quickly getting off-topic, but I; > > am baffled that the 1.0 release wasn't tweeted from @psi_code...; > > ; > > I'm following the commit feed, but there was no obvious ""release 1.0"" or; > > ""bump version to 1.1devel"" commits, so I totally missed it until now.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub <; > > https://github.com/psi4/psi4/issues/367#issuecomment-232787398>, or mute; > > the thread <; > > https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ; > > .; > ; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/367#issuecomment-232790462, or mute; > the thread; > https://github.com/notifications/unsubscribe/AC9QdmfHboo-xz1xgQ43fJ4qeZhIXBogks5qVqL-gaJpZM4INszQ; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232799162
https://github.com/psi4/psi4/pull/369#issuecomment-215009614:12,Modifiability,plugin,plugin,12,"sointegrals plugin works smoothly now, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/369#issuecomment-215009614
https://github.com/psi4/psi4/issues/371#issuecomment-215879353:41,Availability,failure,failure,41,"Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; bad eigenvalue in the DF metric, though I have traps in for this. Compiling; a fork to check this out. -Rob. On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; wrote:. > The following either gives NaN energy or (positive) 60,000 [Eh] depending; > on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ; > seem to check out, did not try larger.; > ; > molecule mol {; > 0 2; > C -2.83891 -0.84747 -0.20778; > N -2.06959 -0.27604 0.77905; > C -0.85937 -0.82512 0.74757; > N -0.82980 -1.74677 -0.21226; > C -2.05910 -1.77487 -0.83179; > C -2.45490 0.86620 1.59959; > C 0.35903 -2.49473 -0.61265; > F -1.01767 1.46174 -1.11980; > B 0.28985 1.63764 -0.63648; > F 0.23738 1.82826 0.77419; > F 0.89453 2.73957 -1.24020; > F 1.05039 0.46734 -0.88673; > H -0.02604 -0.54755 1.38339; > H -2.27287 -2.45330 -1.64959; > H -3.86751 -0.55086 -0.37733; > H -3.45079 0.68580 2.01748; > H -1.72185 0.98138 2.40249; > H -2.44673 1.75972 0.96603; > H 0.98379 -1.85263 -1.24323; > H 0.91655 -2.78676 0.28358; > H 0.03922 -3.39046 -1.15377; > C 2.81822 0.12352 1.52490; > C 3.26768 -0.78277 0.56145; > H 3.28632 0.11977 2.50813; > H 2.01109 0.81253 1.27433; > N 3.64537 -1.55240 -0.23308; > }; > ; > set {; > basis cc-pVQZ; > scf_type df; > guess gwh; > reference rohf; > }; > ; > energy('SCF'); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215879353
https://github.com/psi4/psi4/issues/371#issuecomment-215879353:298,Energy Efficiency,energy,energy,298,"Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; bad eigenvalue in the DF metric, though I have traps in for this. Compiling; a fork to check this out. -Rob. On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; wrote:. > The following either gives NaN energy or (positive) 60,000 [Eh] depending; > on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ; > seem to check out, did not try larger.; > ; > molecule mol {; > 0 2; > C -2.83891 -0.84747 -0.20778; > N -2.06959 -0.27604 0.77905; > C -0.85937 -0.82512 0.74757; > N -0.82980 -1.74677 -0.21226; > C -2.05910 -1.77487 -0.83179; > C -2.45490 0.86620 1.59959; > C 0.35903 -2.49473 -0.61265; > F -1.01767 1.46174 -1.11980; > B 0.28985 1.63764 -0.63648; > F 0.23738 1.82826 0.77419; > F 0.89453 2.73957 -1.24020; > F 1.05039 0.46734 -0.88673; > H -0.02604 -0.54755 1.38339; > H -2.27287 -2.45330 -1.64959; > H -3.86751 -0.55086 -0.37733; > H -3.45079 0.68580 2.01748; > H -1.72185 0.98138 2.40249; > H -2.44673 1.75972 0.96603; > H 0.98379 -1.85263 -1.24323; > H 0.91655 -2.78676 0.28358; > H 0.03922 -3.39046 -1.15377; > C 2.81822 0.12352 1.52490; > C 3.26768 -0.78277 0.56145; > H 3.28632 0.11977 2.50813; > H 2.01109 0.81253 1.27433; > N 3.64537 -1.55240 -0.23308; > }; > ; > set {; > basis cc-pVQZ; > scf_type df; > guess gwh; > reference rohf; > }; > ; > energy('SCF'); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215879353
https://github.com/psi4/psi4/issues/371#issuecomment-215879353:1378,Energy Efficiency,energy,energy,1378,"Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; bad eigenvalue in the DF metric, though I have traps in for this. Compiling; a fork to check this out. -Rob. On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; wrote:. > The following either gives NaN energy or (positive) 60,000 [Eh] depending; > on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ; > seem to check out, did not try larger.; > ; > molecule mol {; > 0 2; > C -2.83891 -0.84747 -0.20778; > N -2.06959 -0.27604 0.77905; > C -0.85937 -0.82512 0.74757; > N -0.82980 -1.74677 -0.21226; > C -2.05910 -1.77487 -0.83179; > C -2.45490 0.86620 1.59959; > C 0.35903 -2.49473 -0.61265; > F -1.01767 1.46174 -1.11980; > B 0.28985 1.63764 -0.63648; > F 0.23738 1.82826 0.77419; > F 0.89453 2.73957 -1.24020; > F 1.05039 0.46734 -0.88673; > H -0.02604 -0.54755 1.38339; > H -2.27287 -2.45330 -1.64959; > H -3.86751 -0.55086 -0.37733; > H -3.45079 0.68580 2.01748; > H -1.72185 0.98138 2.40249; > H -2.44673 1.75972 0.96603; > H 0.98379 -1.85263 -1.24323; > H 0.91655 -2.78676 0.28358; > H 0.03922 -3.39046 -1.15377; > C 2.81822 0.12352 1.52490; > C 3.26768 -0.78277 0.56145; > H 3.28632 0.11977 2.50813; > H 2.01109 0.81253 1.27433; > N 3.64537 -1.55240 -0.23308; > }; > ; > set {; > basis cc-pVQZ; > scf_type df; > guess gwh; > reference rohf; > }; > ; > energy('SCF'); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215879353
https://github.com/psi4/psi4/issues/371#issuecomment-215879353:331,Integrability,depend,depending,331,"Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; bad eigenvalue in the DF metric, though I have traps in for this. Compiling; a fork to check this out. -Rob. On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; wrote:. > The following either gives NaN energy or (positive) 60,000 [Eh] depending; > on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ; > seem to check out, did not try larger.; > ; > molecule mol {; > 0 2; > C -2.83891 -0.84747 -0.20778; > N -2.06959 -0.27604 0.77905; > C -0.85937 -0.82512 0.74757; > N -0.82980 -1.74677 -0.21226; > C -2.05910 -1.77487 -0.83179; > C -2.45490 0.86620 1.59959; > C 0.35903 -2.49473 -0.61265; > F -1.01767 1.46174 -1.11980; > B 0.28985 1.63764 -0.63648; > F 0.23738 1.82826 0.77419; > F 0.89453 2.73957 -1.24020; > F 1.05039 0.46734 -0.88673; > H -0.02604 -0.54755 1.38339; > H -2.27287 -2.45330 -1.64959; > H -3.86751 -0.55086 -0.37733; > H -3.45079 0.68580 2.01748; > H -1.72185 0.98138 2.40249; > H -2.44673 1.75972 0.96603; > H 0.98379 -1.85263 -1.24323; > H 0.91655 -2.78676 0.28358; > H 0.03922 -3.39046 -1.15377; > C 2.81822 0.12352 1.52490; > C 3.26768 -0.78277 0.56145; > H 3.28632 0.11977 2.50813; > H 2.01109 0.81253 1.27433; > N 3.64537 -1.55240 -0.23308; > }; > ; > set {; > basis cc-pVQZ; > scf_type df; > guess gwh; > reference rohf; > }; > ; > energy('SCF'); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215879353
https://github.com/psi4/psi4/issues/371#issuecomment-215889548:312,Availability,failure,failure,312,"Cannot replicate this bug. Iterations are oscillating like crazy, but no; singularity. I get similar oscillations for singlet cation in cc-pVDZ; (eventually converges) with both DF and ID. -Rob. On Fri, Apr 29, 2016 at 1:54 PM, Rob Parrish robparrish@gmail.com wrote:. > Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; > bad eigenvalue in the DF metric, though I have traps in for this. Compiling; > a fork to check this out.; > ; > -Rob; > ; > On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > The following either gives NaN energy or (positive) 60,000 [Eh]; > > depending on MKL version and compile options. All basis sets smaller than; > > aug-cc-pVQZ seem to check out, did not try larger.; > > ; > > molecule mol {; > > 0 2; > > C -2.83891 -0.84747 -0.20778; > > N -2.06959 -0.27604 0.77905; > > C -0.85937 -0.82512 0.74757; > > N -0.82980 -1.74677 -0.21226; > > C -2.05910 -1.77487 -0.83179; > > C -2.45490 0.86620 1.59959; > > C 0.35903 -2.49473 -0.61265; > > F -1.01767 1.46174 -1.11980; > > B 0.28985 1.63764 -0.63648; > > F 0.23738 1.82826 0.77419; > > F 0.89453 2.73957 -1.24020; > > F 1.05039 0.46734 -0.88673; > > H -0.02604 -0.54755 1.38339; > > H -2.27287 -2.45330 -1.64959; > > H -3.86751 -0.55086 -0.37733; > > H -3.45079 0.68580 2.01748; > > H -1.72185 0.98138 2.40249; > > H -2.44673 1.75972 0.96603; > > H 0.98379 -1.85263 -1.24323; > > H 0.91655 -2.78676 0.28358; > > H 0.03922 -3.39046 -1.15377; > > C 2.81822 0.12352 1.52490; > > C 3.26768 -0.78277 0.56145; > > H 3.28632 0.11977 2.50813; > > H 2.01109 0.81253 1.27433; > > N 3.64537 -1.55240 -0.23308; > > }; > > ; > > set {; > > basis cc-pVQZ; > > scf_type df; > > guess gwh; > > reference rohf; > > }; > > ; > > energy('SCF'); > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215889548
https://github.com/psi4/psi4/issues/371#issuecomment-215889548:594,Energy Efficiency,energy,energy,594,"Cannot replicate this bug. Iterations are oscillating like crazy, but no; singularity. I get similar oscillations for singlet cation in cc-pVDZ; (eventually converges) with both DF and ID. -Rob. On Fri, Apr 29, 2016 at 1:54 PM, Rob Parrish robparrish@gmail.com wrote:. > Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; > bad eigenvalue in the DF metric, though I have traps in for this. Compiling; > a fork to check this out.; > ; > -Rob; > ; > On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > The following either gives NaN energy or (positive) 60,000 [Eh]; > > depending on MKL version and compile options. All basis sets smaller than; > > aug-cc-pVQZ seem to check out, did not try larger.; > > ; > > molecule mol {; > > 0 2; > > C -2.83891 -0.84747 -0.20778; > > N -2.06959 -0.27604 0.77905; > > C -0.85937 -0.82512 0.74757; > > N -0.82980 -1.74677 -0.21226; > > C -2.05910 -1.77487 -0.83179; > > C -2.45490 0.86620 1.59959; > > C 0.35903 -2.49473 -0.61265; > > F -1.01767 1.46174 -1.11980; > > B 0.28985 1.63764 -0.63648; > > F 0.23738 1.82826 0.77419; > > F 0.89453 2.73957 -1.24020; > > F 1.05039 0.46734 -0.88673; > > H -0.02604 -0.54755 1.38339; > > H -2.27287 -2.45330 -1.64959; > > H -3.86751 -0.55086 -0.37733; > > H -3.45079 0.68580 2.01748; > > H -1.72185 0.98138 2.40249; > > H -2.44673 1.75972 0.96603; > > H 0.98379 -1.85263 -1.24323; > > H 0.91655 -2.78676 0.28358; > > H 0.03922 -3.39046 -1.15377; > > C 2.81822 0.12352 1.52490; > > C 3.26768 -0.78277 0.56145; > > H 3.28632 0.11977 2.50813; > > H 2.01109 0.81253 1.27433; > > N 3.64537 -1.55240 -0.23308; > > }; > > ; > > set {; > > basis cc-pVQZ; > > scf_type df; > > guess gwh; > > reference rohf; > > }; > > ; > > energy('SCF'); > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215889548
https://github.com/psi4/psi4/issues/371#issuecomment-215889548:1756,Energy Efficiency,energy,energy,1756,"Cannot replicate this bug. Iterations are oscillating like crazy, but no; singularity. I get similar oscillations for singlet cation in cc-pVDZ; (eventually converges) with both DF and ID. -Rob. On Fri, Apr 29, 2016 at 1:54 PM, Rob Parrish robparrish@gmail.com wrote:. > Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; > bad eigenvalue in the DF metric, though I have traps in for this. Compiling; > a fork to check this out.; > ; > -Rob; > ; > On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > The following either gives NaN energy or (positive) 60,000 [Eh]; > > depending on MKL version and compile options. All basis sets smaller than; > > aug-cc-pVQZ seem to check out, did not try larger.; > > ; > > molecule mol {; > > 0 2; > > C -2.83891 -0.84747 -0.20778; > > N -2.06959 -0.27604 0.77905; > > C -0.85937 -0.82512 0.74757; > > N -0.82980 -1.74677 -0.21226; > > C -2.05910 -1.77487 -0.83179; > > C -2.45490 0.86620 1.59959; > > C 0.35903 -2.49473 -0.61265; > > F -1.01767 1.46174 -1.11980; > > B 0.28985 1.63764 -0.63648; > > F 0.23738 1.82826 0.77419; > > F 0.89453 2.73957 -1.24020; > > F 1.05039 0.46734 -0.88673; > > H -0.02604 -0.54755 1.38339; > > H -2.27287 -2.45330 -1.64959; > > H -3.86751 -0.55086 -0.37733; > > H -3.45079 0.68580 2.01748; > > H -1.72185 0.98138 2.40249; > > H -2.44673 1.75972 0.96603; > > H 0.98379 -1.85263 -1.24323; > > H 0.91655 -2.78676 0.28358; > > H 0.03922 -3.39046 -1.15377; > > C 2.81822 0.12352 1.52490; > > C 3.26768 -0.78277 0.56145; > > H 3.28632 0.11977 2.50813; > > H 2.01109 0.81253 1.27433; > > N 3.64537 -1.55240 -0.23308; > > }; > > ; > > set {; > > basis cc-pVQZ; > > scf_type df; > > guess gwh; > > reference rohf; > > }; > > ; > > energy('SCF'); > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215889548
https://github.com/psi4/psi4/issues/371#issuecomment-215889548:632,Integrability,depend,depending,632,"Cannot replicate this bug. Iterations are oscillating like crazy, but no; singularity. I get similar oscillations for singlet cation in cc-pVDZ; (eventually converges) with both DF and ID. -Rob. On Fri, Apr 29, 2016 at 1:54 PM, Rob Parrish robparrish@gmail.com wrote:. > Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; > bad eigenvalue in the DF metric, though I have traps in for this. Compiling; > a fork to check this out.; > ; > -Rob; > ; > On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > The following either gives NaN energy or (positive) 60,000 [Eh]; > > depending on MKL version and compile options. All basis sets smaller than; > > aug-cc-pVQZ seem to check out, did not try larger.; > > ; > > molecule mol {; > > 0 2; > > C -2.83891 -0.84747 -0.20778; > > N -2.06959 -0.27604 0.77905; > > C -0.85937 -0.82512 0.74757; > > N -0.82980 -1.74677 -0.21226; > > C -2.05910 -1.77487 -0.83179; > > C -2.45490 0.86620 1.59959; > > C 0.35903 -2.49473 -0.61265; > > F -1.01767 1.46174 -1.11980; > > B 0.28985 1.63764 -0.63648; > > F 0.23738 1.82826 0.77419; > > F 0.89453 2.73957 -1.24020; > > F 1.05039 0.46734 -0.88673; > > H -0.02604 -0.54755 1.38339; > > H -2.27287 -2.45330 -1.64959; > > H -3.86751 -0.55086 -0.37733; > > H -3.45079 0.68580 2.01748; > > H -1.72185 0.98138 2.40249; > > H -2.44673 1.75972 0.96603; > > H 0.98379 -1.85263 -1.24323; > > H 0.91655 -2.78676 0.28358; > > H 0.03922 -3.39046 -1.15377; > > C 2.81822 0.12352 1.52490; > > C 3.26768 -0.78277 0.56145; > > H 3.28632 0.11977 2.50813; > > H 2.01109 0.81253 1.27433; > > N 3.64537 -1.55240 -0.23308; > > }; > > ; > > set {; > > basis cc-pVQZ; > > scf_type df; > > guess gwh; > > reference rohf; > > }; > > ; > > energy('SCF'); > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215889548
https://github.com/psi4/psi4/issues/371#issuecomment-215894127:113,Availability,error,error,113,"Ok, curious. Ours are 15.0.3. @dgasmith tried it on a couple architectures and executables, but good to know the error isn't seen everywhere. May have to wait for a calmer development environment here to examine again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215894127
https://github.com/psi4/psi4/issues/371#issuecomment-215894587:369,Availability,error,error,369,"Lovely. @dgasmith do you have an outfile? Would be also interested to see; the eigenspectrum of the DF metric from the failing case. -Rob. On Fri, Apr 29, 2016 at 3:04 PM, Lori A. Burns notifications@github.com; wrote:. > Ok, curious. Ours are 15.0.3. @dgasmith https://github.com/dgasmith; > tried it on a couple architectures and executables, but good to know the; > error isn't seen everywhere. May have to wait for a calmer development; > environment here to examine again.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371#issuecomment-215894127",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215894587
https://github.com/psi4/psi4/issues/371#issuecomment-215913351:138,Testability,test,test,138,@robparrish I can no longer reproduce this on any hardware and with any combinations of keywords. Sent you the results of the only failed test case results that I saved. @loriab Can you run this on your box again? Located in `dsmith/TEST`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215913351
https://github.com/psi4/psi4/issues/371#issuecomment-215913351:233,Testability,TEST,TEST,233,@robparrish I can no longer reproduce this on any hardware and with any combinations of keywords. Sent you the results of the only failed test case results that I saved. @loriab Can you run this on your box again? Located in `dsmith/TEST`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215913351
https://github.com/psi4/psi4/pull/372#issuecomment-217654331:194,Availability,avail,available,194,"Ah, I run a lot of the CI code that hasn't been touched since Psi3 through clang-format with google style options so that I can read it a bit better. I do wish the ignore white-space option was available online as well. I do like the idea of a style guide for the code, but it isn't particularly high on any list.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/372#issuecomment-217654331
https://github.com/psi4/psi4/pull/372#issuecomment-217654331:250,Usability,guid,guide,250,"Ah, I run a lot of the CI code that hasn't been touched since Psi3 through clang-format with google style options so that I can read it a bit better. I do wish the ignore white-space option was available online as well. I do like the idea of a style guide for the code, but it isn't particularly high on any list.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/372#issuecomment-217654331
https://github.com/psi4/psi4/pull/372#issuecomment-217657023:439,Availability,avail,available,439,"Google's style is starting to become C++ standard from what I've seen and; would be my vote. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 7, 2016 1:32 PM, ""Daniel Smith"" notifications@github.com wrote:. > Ah, I run a lot of the CI code that hasn't been touched since Psi3 through; > clang-format with google style options so that I can read it a bit better.; > I do wish the ignore white-space option was available online as well.; > ; > I do like the idea of a style guide for the code, but it isn't; > particularly high on any list.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/372#issuecomment-217654331",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/372#issuecomment-217657023
https://github.com/psi4/psi4/pull/372#issuecomment-217657023:502,Usability,guid,guide,502,"Google's style is starting to become C++ standard from what I've seen and; would be my vote. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 7, 2016 1:32 PM, ""Daniel Smith"" notifications@github.com wrote:. > Ah, I run a lot of the CI code that hasn't been touched since Psi3 through; > clang-format with google style options so that I can read it a bit better.; > I do wish the ignore white-space option was available online as well.; > ; > I do like the idea of a style guide for the code, but it isn't; > particularly high on any list.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/372#issuecomment-217654331",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/372#issuecomment-217657023
https://github.com/psi4/psi4/pull/374#issuecomment-217932178:27,Energy Efficiency,energy,energy,27,"extra open parenthesis in `energy('MP2/cc-pV([TQ]Z + D:CCSD(T)/cc-pVDZ')` above?. Yay, I'll have to try out the alternate syntax in pywrap-all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/374#issuecomment-217932178
https://github.com/psi4/psi4/pull/374#issuecomment-217934117:137,Integrability,wrap,wrapper,137,"@loriab Ah, no. Was trying to do a `+d` basis example. Everything that I messed with seemed to work and since we rely heavily on the CBS wrapper this should mostly be syntactic sugar at this point. Let me know if you hit any issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/374#issuecomment-217934117
https://github.com/psi4/psi4/pull/376#issuecomment-218387805:114,Deployability,install,installing,114,"@jturney , @edeprince3 , @ryanmrichard, @dgasmith should look over a0a8c2b and see if it's ok. Basically, we were installing headers `src/lib/libmodule/*.h` to `includes/psi4/libmodule/*.h`, which is fine. But then we were installing headers `src/bin/module/*.h` to `includes/psi4/libmodule/*.h`, which meant that a header couldn't be referred to through the same path from both a source and installed file tree. Cue problems for compiling plugins against both. . This commit installs bin headers to `includes/psi4/module/*.h`. Then since the intermediate lib or bin dir is gone, can't do `#include <../bin/fnocc/blas.h>` anymore, so added the bin dirs to the CMake includes path. Then also installed `FCMangle.h` since Fortran plugins needed it. . The above gets Eugene's v2rdm built for me. Have I introduced any bad practices?. @dgasmith , contrary to what I wrote you, please hold off on merging this PR until this issue gets resolved",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218387805
https://github.com/psi4/psi4/pull/376#issuecomment-218387805:223,Deployability,install,installing,223,"@jturney , @edeprince3 , @ryanmrichard, @dgasmith should look over a0a8c2b and see if it's ok. Basically, we were installing headers `src/lib/libmodule/*.h` to `includes/psi4/libmodule/*.h`, which is fine. But then we were installing headers `src/bin/module/*.h` to `includes/psi4/libmodule/*.h`, which meant that a header couldn't be referred to through the same path from both a source and installed file tree. Cue problems for compiling plugins against both. . This commit installs bin headers to `includes/psi4/module/*.h`. Then since the intermediate lib or bin dir is gone, can't do `#include <../bin/fnocc/blas.h>` anymore, so added the bin dirs to the CMake includes path. Then also installed `FCMangle.h` since Fortran plugins needed it. . The above gets Eugene's v2rdm built for me. Have I introduced any bad practices?. @dgasmith , contrary to what I wrote you, please hold off on merging this PR until this issue gets resolved",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218387805
https://github.com/psi4/psi4/pull/376#issuecomment-218387805:392,Deployability,install,installed,392,"@jturney , @edeprince3 , @ryanmrichard, @dgasmith should look over a0a8c2b and see if it's ok. Basically, we were installing headers `src/lib/libmodule/*.h` to `includes/psi4/libmodule/*.h`, which is fine. But then we were installing headers `src/bin/module/*.h` to `includes/psi4/libmodule/*.h`, which meant that a header couldn't be referred to through the same path from both a source and installed file tree. Cue problems for compiling plugins against both. . This commit installs bin headers to `includes/psi4/module/*.h`. Then since the intermediate lib or bin dir is gone, can't do `#include <../bin/fnocc/blas.h>` anymore, so added the bin dirs to the CMake includes path. Then also installed `FCMangle.h` since Fortran plugins needed it. . The above gets Eugene's v2rdm built for me. Have I introduced any bad practices?. @dgasmith , contrary to what I wrote you, please hold off on merging this PR until this issue gets resolved",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218387805
https://github.com/psi4/psi4/pull/376#issuecomment-218387805:476,Deployability,install,installs,476,"@jturney , @edeprince3 , @ryanmrichard, @dgasmith should look over a0a8c2b and see if it's ok. Basically, we were installing headers `src/lib/libmodule/*.h` to `includes/psi4/libmodule/*.h`, which is fine. But then we were installing headers `src/bin/module/*.h` to `includes/psi4/libmodule/*.h`, which meant that a header couldn't be referred to through the same path from both a source and installed file tree. Cue problems for compiling plugins against both. . This commit installs bin headers to `includes/psi4/module/*.h`. Then since the intermediate lib or bin dir is gone, can't do `#include <../bin/fnocc/blas.h>` anymore, so added the bin dirs to the CMake includes path. Then also installed `FCMangle.h` since Fortran plugins needed it. . The above gets Eugene's v2rdm built for me. Have I introduced any bad practices?. @dgasmith , contrary to what I wrote you, please hold off on merging this PR until this issue gets resolved",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218387805
https://github.com/psi4/psi4/pull/376#issuecomment-218387805:691,Deployability,install,installed,691,"@jturney , @edeprince3 , @ryanmrichard, @dgasmith should look over a0a8c2b and see if it's ok. Basically, we were installing headers `src/lib/libmodule/*.h` to `includes/psi4/libmodule/*.h`, which is fine. But then we were installing headers `src/bin/module/*.h` to `includes/psi4/libmodule/*.h`, which meant that a header couldn't be referred to through the same path from both a source and installed file tree. Cue problems for compiling plugins against both. . This commit installs bin headers to `includes/psi4/module/*.h`. Then since the intermediate lib or bin dir is gone, can't do `#include <../bin/fnocc/blas.h>` anymore, so added the bin dirs to the CMake includes path. Then also installed `FCMangle.h` since Fortran plugins needed it. . The above gets Eugene's v2rdm built for me. Have I introduced any bad practices?. @dgasmith , contrary to what I wrote you, please hold off on merging this PR until this issue gets resolved",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218387805
https://github.com/psi4/psi4/pull/376#issuecomment-218387805:440,Modifiability,plugin,plugins,440,"@jturney , @edeprince3 , @ryanmrichard, @dgasmith should look over a0a8c2b and see if it's ok. Basically, we were installing headers `src/lib/libmodule/*.h` to `includes/psi4/libmodule/*.h`, which is fine. But then we were installing headers `src/bin/module/*.h` to `includes/psi4/libmodule/*.h`, which meant that a header couldn't be referred to through the same path from both a source and installed file tree. Cue problems for compiling plugins against both. . This commit installs bin headers to `includes/psi4/module/*.h`. Then since the intermediate lib or bin dir is gone, can't do `#include <../bin/fnocc/blas.h>` anymore, so added the bin dirs to the CMake includes path. Then also installed `FCMangle.h` since Fortran plugins needed it. . The above gets Eugene's v2rdm built for me. Have I introduced any bad practices?. @dgasmith , contrary to what I wrote you, please hold off on merging this PR until this issue gets resolved",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218387805
https://github.com/psi4/psi4/pull/376#issuecomment-218387805:728,Modifiability,plugin,plugins,728,"@jturney , @edeprince3 , @ryanmrichard, @dgasmith should look over a0a8c2b and see if it's ok. Basically, we were installing headers `src/lib/libmodule/*.h` to `includes/psi4/libmodule/*.h`, which is fine. But then we were installing headers `src/bin/module/*.h` to `includes/psi4/libmodule/*.h`, which meant that a header couldn't be referred to through the same path from both a source and installed file tree. Cue problems for compiling plugins against both. . This commit installs bin headers to `includes/psi4/module/*.h`. Then since the intermediate lib or bin dir is gone, can't do `#include <../bin/fnocc/blas.h>` anymore, so added the bin dirs to the CMake includes path. Then also installed `FCMangle.h` since Fortran plugins needed it. . The above gets Eugene's v2rdm built for me. Have I introduced any bad practices?. @dgasmith , contrary to what I wrote you, please hold off on merging this PR until this issue gets resolved",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218387805
https://github.com/psi4/psi4/pull/376#issuecomment-218417480:86,Modifiability,plugin,plugin,86,"If there is something bad about this, I could always duplicate those blas files in my plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218417480
https://github.com/psi4/psi4/pull/376#issuecomment-218519582:16,Deployability,install,install,16,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582
https://github.com/psi4/psi4/pull/376#issuecomment-218519582:98,Deployability,install,installing,98,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582
https://github.com/psi4/psi4/pull/376#issuecomment-218519582:538,Deployability,install,installing,538,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582
https://github.com/psi4/psi4/pull/376#issuecomment-218519582:655,Deployability,install,installing,655,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582
https://github.com/psi4/psi4/pull/376#issuecomment-218519582:832,Deployability,install,installed,832,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582
https://github.com/psi4/psi4/pull/376#issuecomment-218519582:925,Deployability,install,installs,925,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582
https://github.com/psi4/psi4/pull/376#issuecomment-218519582:1152,Deployability,install,installed,1152,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582
https://github.com/psi4/psi4/pull/376#issuecomment-218519582:884,Modifiability,plugin,plugins,884,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582
https://github.com/psi4/psi4/pull/376#issuecomment-218519582:1189,Modifiability,plugin,plugins,1189,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582
https://github.com/psi4/psi4/pull/376#issuecomment-218530852:83,Deployability,install,installed,83,"`src` is pretty common in a source tree, but I don't think I've ever seen it in an installed `include` tree. I could live with separate `lib` and `bin` underneath `include` if that's the consensus instead of adding `includes/bin` to the includes path.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218530852
https://github.com/psi4/psi4/pull/376#issuecomment-218550316:48,Deployability,install,installed,48,"Thanks, @jturney . So add `lib` and `bin` under installed `include` rather than add `${PROJECT_SOURCE_DIR}/src/bin` & `${PROJECT_BINARY_DIR}/src/bin` to cmake includes_directories? If so, I'll patch that up tonight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218550316
https://github.com/psi4/psi4/pull/376#issuecomment-218550316:193,Deployability,patch,patch,193,"Thanks, @jturney . So add `lib` and `bin` under installed `include` rather than add `${PROJECT_SOURCE_DIR}/src/bin` & `${PROJECT_BINARY_DIR}/src/bin` to cmake includes_directories? If so, I'll patch that up tonight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218550316
https://github.com/psi4/psi4/pull/378#issuecomment-218798873:196,Testability,test,test,196,"Sure. Those two are usually the same– for curiosity, is your setup where you're not passing `setup --python=sldfjsl` to the psi4 build?. Will merge after the travis build, unless you're trying to test it right away, in which case I'm glad to accept immediately, since that line can't hurt anything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/378#issuecomment-218798873
https://github.com/psi4/psi4/pull/378#issuecomment-218800184:33,Modifiability,config,configure,33,"No, I didn’t specify --python at configure time. No need to rush … my fork works!. On May 12, 2016, at 11:45 AM, Lori A. Burns notifications@github.com wrote:. > Sure. Those two are usually the same– for curiosity, is your setup where you're not passing setup --python=sldfjsl to the psi4 build?; > ; > Will merge after the travis build, unless you're trying to test it right away, in which case I'm glad to accept immediately, since that line can't hurt anything.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/378#issuecomment-218800184
https://github.com/psi4/psi4/pull/378#issuecomment-218800184:362,Testability,test,test,362,"No, I didn’t specify --python at configure time. No need to rush … my fork works!. On May 12, 2016, at 11:45 AM, Lori A. Burns notifications@github.com wrote:. > Sure. Those two are usually the same– for curiosity, is your setup where you're not passing setup --python=sldfjsl to the psi4 build?; > ; > Will merge after the travis build, unless you're trying to test it right away, in which case I'm glad to accept immediately, since that line can't hurt anything.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/378#issuecomment-218800184
https://github.com/psi4/psi4/pull/378#issuecomment-218800322:60,Modifiability,Config,ConfigPython,60,`PYTHON_INTERPRETER` is specific to our `setup` script and `ConfigPython`. The `cmake` value is `PYTHON_EXECUTABLE`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/378#issuecomment-218800322
https://github.com/psi4/psi4/pull/382#issuecomment-220310110:8,Deployability,update,update,8,"Can you update the description of the PR to say what it does? Plus, if it is ready to merge when the testing is complete please click ""Ready to go"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220310110
https://github.com/psi4/psi4/pull/382#issuecomment-220310110:101,Testability,test,testing,101,"Can you update the description of the PR to say what it does? Plus, if it is ready to merge when the testing is complete please click ""Ready to go"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220310110
https://github.com/psi4/psi4/pull/382#issuecomment-220406272:307,Availability,mainten,maintenance,307,"Looks good. This is background work, not ready-to-go method algorithm, right?. Sometimes the code in dfocc tends to repeat (e.g., below <10 lines of the 138 added really differ between newly added and existing member functions). Would you want to consider consolidating such functions in future for ease of maintenance? It might also help the module's build time. ``` cpp; 2c2; < // CD-WabefT2: ; ---; > // WabefT2 ; 4c4; < void DFOCC::ccsd_WabefT2_cd(); ---; > void DFOCC::ccsd_WabefT2(); 6,8d5; < ; < timer_on(""WabefT2"");; < ; 11c8; < SharedTensor2d V, Vs, Ts, Va, Ta, bQ;; ---; > SharedTensor2d V, Vs, Ts, Va, Ta;; 12a10; > timer_on(""WabefT2"");; 44,48c42,44; < bQ = SharedTensor2d(new Tensor2d(""L <Q|AB>"", nQ_cd, navirA, navirA));; < bQ->read(psio_, PSIF_DFOCC_INTS, true, true);; < K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ_cd));; < K = bQ->transpose();; < bQ.reset();; ---; > K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ));; > K = bQabA->transpose();; > bQabA.reset();; 65c61; < I->contract(false, true, navirA*nb, navirA, nQ_cd, K, K, 0, a*navirA*nQ_cd, 1.0, 0.0);; ---; > I->contract(false, true, navirA*nb, navirA, nQ, K, K, 0, a*navirA*nQ, 1.0, 0.0);; 134a131,134; > // Read B(Q,ab); > bQabA = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (Q|AB)"", nQ, navirA, navirA));; > bQabA->read(psio_, PSIF_DFOCC_INTS, true, true);; > ; 137c137; < }// end ccsd_WabefT2_cd; ---; > }// end ccsd_WabefT2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220406272
https://github.com/psi4/psi4/pull/382#issuecomment-220406272:1052,Integrability,contract,contract,1052,"Looks good. This is background work, not ready-to-go method algorithm, right?. Sometimes the code in dfocc tends to repeat (e.g., below <10 lines of the 138 added really differ between newly added and existing member functions). Would you want to consider consolidating such functions in future for ease of maintenance? It might also help the module's build time. ``` cpp; 2c2; < // CD-WabefT2: ; ---; > // WabefT2 ; 4c4; < void DFOCC::ccsd_WabefT2_cd(); ---; > void DFOCC::ccsd_WabefT2(); 6,8d5; < ; < timer_on(""WabefT2"");; < ; 11c8; < SharedTensor2d V, Vs, Ts, Va, Ta, bQ;; ---; > SharedTensor2d V, Vs, Ts, Va, Ta;; 12a10; > timer_on(""WabefT2"");; 44,48c42,44; < bQ = SharedTensor2d(new Tensor2d(""L <Q|AB>"", nQ_cd, navirA, navirA));; < bQ->read(psio_, PSIF_DFOCC_INTS, true, true);; < K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ_cd));; < K = bQ->transpose();; < bQ.reset();; ---; > K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ));; > K = bQabA->transpose();; > bQabA.reset();; 65c61; < I->contract(false, true, navirA*nb, navirA, nQ_cd, K, K, 0, a*navirA*nQ_cd, 1.0, 0.0);; ---; > I->contract(false, true, navirA*nb, navirA, nQ, K, K, 0, a*navirA*nQ, 1.0, 0.0);; 134a131,134; > // Read B(Q,ab); > bQabA = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (Q|AB)"", nQ, navirA, navirA));; > bQabA->read(psio_, PSIF_DFOCC_INTS, true, true);; > ; 137c137; < }// end ccsd_WabefT2_cd; ---; > }// end ccsd_WabefT2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220406272
https://github.com/psi4/psi4/pull/382#issuecomment-220406272:1147,Integrability,contract,contract,1147,"Looks good. This is background work, not ready-to-go method algorithm, right?. Sometimes the code in dfocc tends to repeat (e.g., below <10 lines of the 138 added really differ between newly added and existing member functions). Would you want to consider consolidating such functions in future for ease of maintenance? It might also help the module's build time. ``` cpp; 2c2; < // CD-WabefT2: ; ---; > // WabefT2 ; 4c4; < void DFOCC::ccsd_WabefT2_cd(); ---; > void DFOCC::ccsd_WabefT2(); 6,8d5; < ; < timer_on(""WabefT2"");; < ; 11c8; < SharedTensor2d V, Vs, Ts, Va, Ta, bQ;; ---; > SharedTensor2d V, Vs, Ts, Va, Ta;; 12a10; > timer_on(""WabefT2"");; 44,48c42,44; < bQ = SharedTensor2d(new Tensor2d(""L <Q|AB>"", nQ_cd, navirA, navirA));; < bQ->read(psio_, PSIF_DFOCC_INTS, true, true);; < K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ_cd));; < K = bQ->transpose();; < bQ.reset();; ---; > K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ));; > K = bQabA->transpose();; > bQabA.reset();; 65c61; < I->contract(false, true, navirA*nb, navirA, nQ_cd, K, K, 0, a*navirA*nQ_cd, 1.0, 0.0);; ---; > I->contract(false, true, navirA*nb, navirA, nQ, K, K, 0, a*navirA*nQ, 1.0, 0.0);; 134a131,134; > // Read B(Q,ab); > bQabA = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (Q|AB)"", nQ, navirA, navirA));; > bQabA->read(psio_, PSIF_DFOCC_INTS, true, true);; > ; 137c137; < }// end ccsd_WabefT2_cd; ---; > }// end ccsd_WabefT2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220406272
https://github.com/psi4/psi4/pull/382#issuecomment-220426701:1236,Availability,mainten,maintenance,1236,"Hi Lori,. In one of the functions, ccsd_WabefT2_cd(), I use CD factors for (ab|cd) integrals while for all the other 4-index integrals DF factors are used. In the second function, ccsd_WabefT2(), I use only DF factors for all 4-index integrals. Further, the explicit form of W_abef tensors are different for each functions. Hence, although both functions looks repeating each other, they are not in fact. At the theoretical point of view, there are significant differences between them. Hence, I prefer to keep them separate. However, it is possible to merge them. But in that case I will need if-else blocks at several places. Of course, I create common functions if I need something repeatedly. However, if I see theoretically significant difference between two functions, then I prefer separate functions. For example, instead of merged CCD and CCSD codes, I prefer to keep them separate, which looks me better organised. Alternatively, it is possible to merge all MP2, MP3, MP2.5, LCCD, and CCD into CCSD code with many if-else blocks or switch-case blocks. For each different method creating different functions appears to me more systematic and better organised. . I agree with you about avoiding repetitive codes for the sake of maintenance and build time. Presently, I am busy with CCSD(T) gradients. When I get some free time I will try to reduce repetitive codes if there are any, except for the similarities between high-order and lower-order methods, such as CCSD and MP3. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220426701
https://github.com/psi4/psi4/pull/382#issuecomment-220426701:1349,Energy Efficiency,reduce,reduce,1349,"Hi Lori,. In one of the functions, ccsd_WabefT2_cd(), I use CD factors for (ab|cd) integrals while for all the other 4-index integrals DF factors are used. In the second function, ccsd_WabefT2(), I use only DF factors for all 4-index integrals. Further, the explicit form of W_abef tensors are different for each functions. Hence, although both functions looks repeating each other, they are not in fact. At the theoretical point of view, there are significant differences between them. Hence, I prefer to keep them separate. However, it is possible to merge them. But in that case I will need if-else blocks at several places. Of course, I create common functions if I need something repeatedly. However, if I see theoretically significant difference between two functions, then I prefer separate functions. For example, instead of merged CCD and CCSD codes, I prefer to keep them separate, which looks me better organised. Alternatively, it is possible to merge all MP2, MP3, MP2.5, LCCD, and CCD into CCSD code with many if-else blocks or switch-case blocks. For each different method creating different functions appears to me more systematic and better organised. . I agree with you about avoiding repetitive codes for the sake of maintenance and build time. Presently, I am busy with CCSD(T) gradients. When I get some free time I will try to reduce repetitive codes if there are any, except for the similarities between high-order and lower-order methods, such as CCSD and MP3. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220426701
https://github.com/psi4/psi4/pull/382#issuecomment-220426701:1194,Safety,avoid,avoiding,1194,"Hi Lori,. In one of the functions, ccsd_WabefT2_cd(), I use CD factors for (ab|cd) integrals while for all the other 4-index integrals DF factors are used. In the second function, ccsd_WabefT2(), I use only DF factors for all 4-index integrals. Further, the explicit form of W_abef tensors are different for each functions. Hence, although both functions looks repeating each other, they are not in fact. At the theoretical point of view, there are significant differences between them. Hence, I prefer to keep them separate. However, it is possible to merge them. But in that case I will need if-else blocks at several places. Of course, I create common functions if I need something repeatedly. However, if I see theoretically significant difference between two functions, then I prefer separate functions. For example, instead of merged CCD and CCSD codes, I prefer to keep them separate, which looks me better organised. Alternatively, it is possible to merge all MP2, MP3, MP2.5, LCCD, and CCD into CCSD code with many if-else blocks or switch-case blocks. For each different method creating different functions appears to me more systematic and better organised. . I agree with you about avoiding repetitive codes for the sake of maintenance and build time. Presently, I am busy with CCSD(T) gradients. When I get some free time I will try to reduce repetitive codes if there are any, except for the similarities between high-order and lower-order methods, such as CCSD and MP3. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220426701
https://github.com/psi4/psi4/pull/382#issuecomment-221157526:1214,Integrability,contract,contraction,1214,"Dear Daniel,. I think you misunderstood the discussion. In the DFOCC module there are many methods and all of them have both DF and CD versions. All DF and CD methods are implemented in the exactly the same source codes. There is no separate programming for DF and CD methods and there is no any repetition. What we are discussing with Lori is something else. DF-CCSD code has many terms, the most expensive term is called PPL. For the PPL the default algorithm with the ""pure"" DF approach is:. D_ij^ab t_ij^ab = Tau_ij^ef W_abef. where W_abef tensor includes <ab|ef>_DF integrals (Einstein summation convention is used). Additionally, I have implemented the following hybrid approach recently:. D_ij^ab t_ij^ab = Tau_ij^ef <ab|ef>_DF/CD + W_ijam t_m^a. In the above formula <ab|ef>_DF/CD integrals are obtained using a DF/CD hybrid approach. I do not want to write too much details. CDS knows what I am doing and why I am trying it. Further, as you can see the explicit formulas are used are not identical with the default PPL algorithm. . DFOCC::ccsd_WabefT2() function computes: . D_ij^ab t_ij^ab = Tau_ij^ef W_abef. while DFOCC::ccsd_WabefT2_cd() function computes:. D_ij^ab t_ij^ab = Tau_ij^ef <ab|ef>_DF/CD. contraction. Hence, each function compute a different term indeed. The difference is not just the DF vs CD. Therefore, there is no repetition of codes, but there are similarities in both functions of course. @dgasmith @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221157526
https://github.com/psi4/psi4/pull/382#issuecomment-221353542:490,Modifiability,refactor,refactoring,490,"Hi @bozkaya, I agree that if/else blocks everywhere are not something anyone wants to see for your code. But I believe the trend with C++ code is toward greater abstraction so that the same code can cover more uses. Perhaps I didn't choose a fitting example above, but various people who have looked into DFOCC have been alarmed at the seemingly repeated code and numerous data structures. So maybe, as you say, when the individual methods are working as you want them, a consolidation and refactoring step could be useful. CCSD(T) gradients sound exciting!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221353542
https://github.com/psi4/psi4/pull/382#issuecomment-221381893:269,Availability,redundant,redundant,269,"Hi @loriab,. I promise I will find a consolidation way to reduce the source code as much as possible when I find a free time to work on it. Presently, I am more focused on the implementation and adding some new features to DFOCC. Even If we suppose that there are some redundant codes in DFOCC, it is a not big problem. It may just take a few more minutes of building time and a slightly additional storage. Further, I think the relatively large body of DFOCC w.r.t. some other modules is understandable since DFOCC includes many post-HF methods (standard and OO) including energies and gradients, and most of them are implemented for RHF and UHF refs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221381893
https://github.com/psi4/psi4/pull/382#issuecomment-221381893:58,Energy Efficiency,reduce,reduce,58,"Hi @loriab,. I promise I will find a consolidation way to reduce the source code as much as possible when I find a free time to work on it. Presently, I am more focused on the implementation and adding some new features to DFOCC. Even If we suppose that there are some redundant codes in DFOCC, it is a not big problem. It may just take a few more minutes of building time and a slightly additional storage. Further, I think the relatively large body of DFOCC w.r.t. some other modules is understandable since DFOCC includes many post-HF methods (standard and OO) including energies and gradients, and most of them are implemented for RHF and UHF refs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221381893
https://github.com/psi4/psi4/pull/382#issuecomment-221381893:269,Safety,redund,redundant,269,"Hi @loriab,. I promise I will find a consolidation way to reduce the source code as much as possible when I find a free time to work on it. Presently, I am more focused on the implementation and adding some new features to DFOCC. Even If we suppose that there are some redundant codes in DFOCC, it is a not big problem. It may just take a few more minutes of building time and a slightly additional storage. Further, I think the relatively large body of DFOCC w.r.t. some other modules is understandable since DFOCC includes many post-HF methods (standard and OO) including energies and gradients, and most of them are implemented for RHF and UHF refs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221381893
https://github.com/psi4/psi4/pull/383#issuecomment-220617126:203,Deployability,patch,patch,203,"1) I would lean towards a Psi compiled one so that we know exactly what its doing and how it works. I think if anyone is tweaking `dftd3` they can handle a python-based system call.; 2) No reason not to patch it IMO, only difference between the two is more keywords after the patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220617126
https://github.com/psi4/psi4/pull/383#issuecomment-220617126:276,Deployability,patch,patch,276,"1) I would lean towards a Psi compiled one so that we know exactly what its doing and how it works. I think if anyone is tweaking `dftd3` they can handle a python-based system call.; 2) No reason not to patch it IMO, only difference between the two is more keywords after the patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220617126
https://github.com/psi4/psi4/pull/383#issuecomment-220698751:347,Deployability,install,install,347,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751
https://github.com/psi4/psi4/pull/383#issuecomment-220698751:361,Deployability,install,installs,361,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751
https://github.com/psi4/psi4/pull/383#issuecomment-220698751:149,Integrability,depend,depends,149,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751
https://github.com/psi4/psi4/pull/383#issuecomment-220698751:193,Modifiability,variab,variables,193,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751
https://github.com/psi4/psi4/pull/383#issuecomment-220698751:95,Safety,avoid,avoid,95,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751
https://github.com/psi4/psi4/issues/384#issuecomment-220613816:291,Deployability,release,release,291,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816
https://github.com/psi4/psi4/issues/384#issuecomment-220613816:475,Deployability,release,release,475,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816
https://github.com/psi4/psi4/issues/384#issuecomment-220613816:558,Deployability,release,release,558,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816
https://github.com/psi4/psi4/issues/384#issuecomment-220613816:100,Integrability,depend,depend,100,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816
https://github.com/psi4/psi4/issues/384#issuecomment-220613816:619,Modifiability,plugin,plugin,619,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816
https://github.com/psi4/psi4/issues/384#issuecomment-220670249:104,Availability,avail,available,104,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249
https://github.com/psi4/psi4/issues/384#issuecomment-220670249:632,Deployability,release,release,632,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249
https://github.com/psi4/psi4/issues/384#issuecomment-220670249:837,Deployability,release,release,837,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249
https://github.com/psi4/psi4/issues/384#issuecomment-220670249:931,Deployability,release,release,931,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249
https://github.com/psi4/psi4/issues/384#issuecomment-220670249:430,Integrability,depend,depend,430,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249
https://github.com/psi4/psi4/issues/384#issuecomment-220670249:21,Modifiability,plugin,plugin,21,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249
https://github.com/psi4/psi4/issues/384#issuecomment-220670249:994,Modifiability,plugin,plugin,994,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249
https://github.com/psi4/psi4/issues/384#issuecomment-220990273:37,Integrability,depend,depend,37,By the way: chemps2 v1.7-rc3 doesn't depend on GSL anymore. I have my own Wigner-nj generator now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220990273
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:178,Availability,down,down,178,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:63,Testability,test,tests,63,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:124,Testability,test,test,124,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:221,Testability,test,test,221,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:238,Testability,Test,Test,238,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:275,Testability,test,tests,275,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:310,Testability,Test,Test,310,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:401,Testability,Test,Test,401,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:496,Testability,Test,Test,496,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:566,Testability,test,tests,566,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222313007:582,Testability,test,tests,582,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007
https://github.com/psi4/psi4/issues/384#issuecomment-222506368:128,Deployability,patch,patches,128,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368
https://github.com/psi4/psi4/issues/384#issuecomment-222506368:159,Deployability,patch,patch,159,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368
https://github.com/psi4/psi4/issues/384#issuecomment-222506368:2,Energy Efficiency,reduce,reduced,2,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368
https://github.com/psi4/psi4/issues/384#issuecomment-222506368:247,Energy Efficiency,power,powerpc,247,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368
https://github.com/psi4/psi4/issues/384#issuecomment-222506368:271,Energy Efficiency,Energy,Energy,271,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368
https://github.com/psi4/psi4/issues/384#issuecomment-222506368:348,Energy Efficiency,Energy,Energy,348,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368
https://github.com/psi4/psi4/issues/384#issuecomment-222506368:504,Energy Efficiency,power,powerpc,504,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368
https://github.com/psi4/psi4/issues/384#issuecomment-222506368:51,Testability,test,testcase,51,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368
https://github.com/psi4/psi4/issues/384#issuecomment-222506368:559,Testability,log,log,559,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368
https://github.com/psi4/psi4/issues/384#issuecomment-222644633:10,Deployability,install,installed,10,"Hello,; I installed Psi4 and chemps2 from Miniconda. How can I interface Chemps2 with Psi4? Thanks in advance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222644633
https://github.com/psi4/psi4/issues/384#issuecomment-222644633:63,Integrability,interface,interface,63,"Hello,; I installed Psi4 and chemps2 from Miniconda. How can I interface Chemps2 with Psi4? Thanks in advance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222644633
https://github.com/psi4/psi4/issues/384#issuecomment-222653883:57,Testability,test,test,57,"Hi @Hassenky. You should be able to use (and modify) the test files. https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/natural-orbital/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/scf-n2/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/ci-h2o/input.dat. Just leave out the last two lines from these files and give it try?. Once Daniel's pull request to chemps v1.7 is also accepted, you should be able to use dmrg-caspt2:. https://github.com/dgasmith/psi4/blob/13b56a618a17f57eeeacf66ef0a2a020daacdbb9/tests/dmrg/caspt2-n2/input.dat. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222653883
https://github.com/psi4/psi4/issues/384#issuecomment-222653883:144,Testability,test,tests,144,"Hi @Hassenky. You should be able to use (and modify) the test files. https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/natural-orbital/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/scf-n2/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/ci-h2o/input.dat. Just leave out the last two lines from these files and give it try?. Once Daniel's pull request to chemps v1.7 is also accepted, you should be able to use dmrg-caspt2:. https://github.com/dgasmith/psi4/blob/13b56a618a17f57eeeacf66ef0a2a020daacdbb9/tests/dmrg/caspt2-n2/input.dat. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222653883
https://github.com/psi4/psi4/issues/384#issuecomment-222653883:257,Testability,test,tests,257,"Hi @Hassenky. You should be able to use (and modify) the test files. https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/natural-orbital/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/scf-n2/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/ci-h2o/input.dat. Just leave out the last two lines from these files and give it try?. Once Daniel's pull request to chemps v1.7 is also accepted, you should be able to use dmrg-caspt2:. https://github.com/dgasmith/psi4/blob/13b56a618a17f57eeeacf66ef0a2a020daacdbb9/tests/dmrg/caspt2-n2/input.dat. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222653883
https://github.com/psi4/psi4/issues/384#issuecomment-222653883:361,Testability,test,tests,361,"Hi @Hassenky. You should be able to use (and modify) the test files. https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/natural-orbital/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/scf-n2/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/ci-h2o/input.dat. Just leave out the last two lines from these files and give it try?. Once Daniel's pull request to chemps v1.7 is also accepted, you should be able to use dmrg-caspt2:. https://github.com/dgasmith/psi4/blob/13b56a618a17f57eeeacf66ef0a2a020daacdbb9/tests/dmrg/caspt2-n2/input.dat. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222653883
https://github.com/psi4/psi4/issues/384#issuecomment-222653883:638,Testability,test,tests,638,"Hi @Hassenky. You should be able to use (and modify) the test files. https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/natural-orbital/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/scf-n2/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/ci-h2o/input.dat. Just leave out the last two lines from these files and give it try?. Once Daniel's pull request to chemps v1.7 is also accepted, you should be able to use dmrg-caspt2:. https://github.com/dgasmith/psi4/blob/13b56a618a17f57eeeacf66ef0a2a020daacdbb9/tests/dmrg/caspt2-n2/input.dat. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222653883
https://github.com/psi4/psi4/issues/384#issuecomment-222663666:102,Availability,error,error,102,"Hi Sebastian,. Something is wrong with my DMRG-CASPT2 and DMRG-natural-orbital calculattion. This the error. Error: option WFN_IRREP is not contained in the list of available options. Did you mean? . An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 33, in <module>. RuntimeError: ; Fatal Error: WFN_IRREP is not a valid option.; Error occurred in file: /scratch/cdsgroup/conda-builds/work/src/lib/liboptions/liboptions.h on line: 59; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::Options::use(std::string&); py_psi_set_local_option_int(std::string const&, std::string const&, int); boost::python::objects::caller_py_function_impl<boost::python::detail::caller<bool (_)(std::string const&, std::string const&, int), boost::python::default_call_policies, boost::mpl::vector4<bool, std::string const&, std::string const&, int> > >::operator()(_object_, _object_); boost::python::objects::function::call(_object_, _object_) . For DMRG-SCF and DMRG-CI, all are fine. Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222663666
https://github.com/psi4/psi4/issues/384#issuecomment-222663666:109,Availability,Error,Error,109,"Hi Sebastian,. Something is wrong with my DMRG-CASPT2 and DMRG-natural-orbital calculattion. This the error. Error: option WFN_IRREP is not contained in the list of available options. Did you mean? . An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 33, in <module>. RuntimeError: ; Fatal Error: WFN_IRREP is not a valid option.; Error occurred in file: /scratch/cdsgroup/conda-builds/work/src/lib/liboptions/liboptions.h on line: 59; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::Options::use(std::string&); py_psi_set_local_option_int(std::string const&, std::string const&, int); boost::python::objects::caller_py_function_impl<boost::python::detail::caller<bool (_)(std::string const&, std::string const&, int), boost::python::default_call_policies, boost::mpl::vector4<bool, std::string const&, std::string const&, int> > >::operator()(_object_, _object_); boost::python::objects::function::call(_object_, _object_) . For DMRG-SCF and DMRG-CI, all are fine. Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222663666
https://github.com/psi4/psi4/issues/384#issuecomment-222663666:165,Availability,avail,available,165,"Hi Sebastian,. Something is wrong with my DMRG-CASPT2 and DMRG-natural-orbital calculattion. This the error. Error: option WFN_IRREP is not contained in the list of available options. Did you mean? . An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 33, in <module>. RuntimeError: ; Fatal Error: WFN_IRREP is not a valid option.; Error occurred in file: /scratch/cdsgroup/conda-builds/work/src/lib/liboptions/liboptions.h on line: 59; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::Options::use(std::string&); py_psi_set_local_option_int(std::string const&, std::string const&, int); boost::python::objects::caller_py_function_impl<boost::python::detail::caller<bool (_)(std::string const&, std::string const&, int), boost::python::default_call_policies, boost::mpl::vector4<bool, std::string const&, std::string const&, int> > >::operator()(_object_, _object_); boost::python::objects::function::call(_object_, _object_) . For DMRG-SCF and DMRG-CI, all are fine. Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222663666
https://github.com/psi4/psi4/issues/384#issuecomment-222663666:203,Availability,error,error,203,"Hi Sebastian,. Something is wrong with my DMRG-CASPT2 and DMRG-natural-orbital calculattion. This the error. Error: option WFN_IRREP is not contained in the list of available options. Did you mean? . An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 33, in <module>. RuntimeError: ; Fatal Error: WFN_IRREP is not a valid option.; Error occurred in file: /scratch/cdsgroup/conda-builds/work/src/lib/liboptions/liboptions.h on line: 59; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::Options::use(std::string&); py_psi_set_local_option_int(std::string const&, std::string const&, int); boost::python::objects::caller_py_function_impl<boost::python::detail::caller<bool (_)(std::string const&, std::string const&, int), boost::python::default_call_policies, boost::mpl::vector4<bool, std::string const&, std::string const&, int> > >::operator()(_object_, _object_); boost::python::objects::function::call(_object_, _object_) . For DMRG-SCF and DMRG-CI, all are fine. Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222663666
https://github.com/psi4/psi4/issues/384#issuecomment-222663666:332,Availability,Error,Error,332,"Hi Sebastian,. Something is wrong with my DMRG-CASPT2 and DMRG-natural-orbital calculattion. This the error. Error: option WFN_IRREP is not contained in the list of available options. Did you mean? . An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 33, in <module>. RuntimeError: ; Fatal Error: WFN_IRREP is not a valid option.; Error occurred in file: /scratch/cdsgroup/conda-builds/work/src/lib/liboptions/liboptions.h on line: 59; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::Options::use(std::string&); py_psi_set_local_option_int(std::string const&, std::string const&, int); boost::python::objects::caller_py_function_impl<boost::python::detail::caller<bool (_)(std::string const&, std::string const&, int), boost::python::default_call_policies, boost::mpl::vector4<bool, std::string const&, std::string const&, int> > >::operator()(_object_, _object_); boost::python::objects::function::call(_object_, _object_) . For DMRG-SCF and DMRG-CI, all are fine. Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222663666
https://github.com/psi4/psi4/issues/384#issuecomment-222663666:373,Availability,Error,Error,373,"Hi Sebastian,. Something is wrong with my DMRG-CASPT2 and DMRG-natural-orbital calculattion. This the error. Error: option WFN_IRREP is not contained in the list of available options. Did you mean? . An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 33, in <module>. RuntimeError: ; Fatal Error: WFN_IRREP is not a valid option.; Error occurred in file: /scratch/cdsgroup/conda-builds/work/src/lib/liboptions/liboptions.h on line: 59; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::Options::use(std::string&); py_psi_set_local_option_int(std::string const&, std::string const&, int); boost::python::objects::caller_py_function_impl<boost::python::detail::caller<bool (_)(std::string const&, std::string const&, int), boost::python::default_call_policies, boost::mpl::vector4<bool, std::string const&, std::string const&, int> > >::operator()(_object_, _object_); boost::python::objects::function::call(_object_, _object_) . For DMRG-SCF and DMRG-CI, all are fine. Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222663666
https://github.com/psi4/psi4/issues/384#issuecomment-222666109:14,Testability,test,tests,14,"Are the other tests fine?. If so, then, as said, the caspt2 calculations will work once Daniel's pull request is also incorporated. You will have to wait until then...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222666109
https://github.com/psi4/psi4/issues/384#issuecomment-222666388:55,Availability,error,error,55,"The DMRG-natural-orbital calculation also has the same error. DMRC-SCF and DRG-CI (water, N2) are passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222666388
https://github.com/psi4/psi4/issues/384#issuecomment-222667765:360,Availability,error,error,360,"It should be noted that the keywords did change slightly and all tests had to be tweaked. I am guessing that the Psi4 and ChemPS2 binary versions are out of sync at the moment. Ill look into this today. Cheers,; Daniel Smith. > On May 31, 2016, at 7:51 AM, Hassenky notifications@github.com wrote:; > ; > The DMRG-natural-orbital calculation also has the same error.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/issues/384#issuecomment-222666388, or mute the thread https://github.com/notifications/unsubscribe/ABsBcX6MG6G0p8O-MC63teMY64rE_uWKks5qHCDcgaJpZM4IjFna.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222667765
https://github.com/psi4/psi4/issues/384#issuecomment-222667765:65,Testability,test,tests,65,"It should be noted that the keywords did change slightly and all tests had to be tweaked. I am guessing that the Psi4 and ChemPS2 binary versions are out of sync at the moment. Ill look into this today. Cheers,; Daniel Smith. > On May 31, 2016, at 7:51 AM, Hassenky notifications@github.com wrote:; > ; > The DMRG-natural-orbital calculation also has the same error.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/issues/384#issuecomment-222666388, or mute the thread https://github.com/notifications/unsubscribe/ABsBcX6MG6G0p8O-MC63teMY64rE_uWKks5qHCDcgaJpZM4IjFna.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222667765
https://github.com/psi4/psi4/issues/384#issuecomment-229992074:61,Deployability,update,update,61,"@Hassenky , I now have considerable confidence that a `conda update/install psi4 pychemps2 hdf5=1.8.16` will work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-229992074
https://github.com/psi4/psi4/issues/384#issuecomment-229992074:68,Deployability,install,install,68,"@Hassenky , I now have considerable confidence that a `conda update/install psi4 pychemps2 hdf5=1.8.16` will work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-229992074
https://github.com/psi4/psi4/issues/384#issuecomment-230110866:23,Deployability,update,updated,23,Thanks @loriab. I have updated both PSI4 and Chemps2. Everything is working well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-230110866
https://github.com/psi4/psi4/issues/385#issuecomment-224908411:46,Availability,toler,tolerance,46,"@jgonthier In the latest SAD PR I reduced the tolerance to `1.e-2` up from `1.e-4`. ""Failing"" is a strong word here as the eigenvalue is still positive. Im guessing this is just small flutter in the Davidson iterations which are not converged strongly to begin with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/385#issuecomment-224908411
https://github.com/psi4/psi4/issues/385#issuecomment-224908411:34,Energy Efficiency,reduce,reduced,34,"@jgonthier In the latest SAD PR I reduced the tolerance to `1.e-2` up from `1.e-4`. ""Failing"" is a strong word here as the eigenvalue is still positive. Im guessing this is just small flutter in the Davidson iterations which are not converged strongly to begin with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/385#issuecomment-224908411
https://github.com/psi4/psi4/pull/386#issuecomment-225031319:37,Deployability,update,updates,37,"Sorry, I’m still not used to pulling updates to my fork. You are added. On Jun 9, 2016, at 5:21 PM, Lori A. Burns notifications@github.com wrote:. > Hi Eugene, you may have noticed the commit history for this PR has gone mad. I believe what's happened is that (1) this PR is coming from master of your fork rather than a branch of your fork and (2) you merged upstream into master of your fork but because there were the commits from this PR interleaved, the histories of upstream master and your fork master don't perfectly overlap so as to identify just your few commits as the entirely of this PR. Instead the PR includes most of the recent history of psi4.; > ; > It could be that you could just rebase wrt upstream master and this would all resolve. But I'm not a git expert so I just don't know. Could you make me a collaborator on your psi4 fork, and I'll experiment?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/386#issuecomment-225031319
https://github.com/psi4/psi4/pull/386#issuecomment-225038318:91,Availability,down,down,91,"I went ahead and resubmitted the PR from that other branch, so this one can just be closed down. That way we're not force pushing to your fork master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/386#issuecomment-225038318
https://github.com/psi4/psi4/pull/387#issuecomment-222250883:72,Availability,error,error,72,"Well thats fun. Passes just fine on my local box, but fails without any error on Travis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222250883
https://github.com/psi4/psi4/pull/387#issuecomment-222257195:248,Testability,test,test,248,My current hypothesis: the OpenMP stuff I added in sointegral_twobody.h may be screwed up. It could be wiser to just completely remove all OpenMP reference in there and just set nthread = 0 for now.; As soon as the build is done on my machine I'll test it...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222257195
https://github.com/psi4/psi4/pull/387#issuecomment-222263701:170,Availability,error,errors,170,"On my machine, the tests fail with a segfault. Using gdb it seems to originate somewhere in Python. Backtrace below for test case adc1, fails right after the SCF without errors, looks similar to Travis failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222263701
https://github.com/psi4/psi4/pull/387#issuecomment-222263701:202,Availability,failure,failure,202,"On my machine, the tests fail with a segfault. Using gdb it seems to originate somewhere in Python. Backtrace below for test case adc1, fails right after the SCF without errors, looks similar to Travis failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222263701
https://github.com/psi4/psi4/pull/387#issuecomment-222263701:19,Testability,test,tests,19,"On my machine, the tests fail with a segfault. Using gdb it seems to originate somewhere in Python. Backtrace below for test case adc1, fails right after the SCF without errors, looks similar to Travis failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222263701
https://github.com/psi4/psi4/pull/387#issuecomment-222263701:120,Testability,test,test,120,"On my machine, the tests fail with a segfault. Using gdb it seems to originate somewhere in Python. Backtrace below for test case adc1, fails right after the SCF without errors, looks similar to Travis failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222263701
https://github.com/psi4/psi4/pull/387#issuecomment-222881740:29,Deployability,update,update,29,"@dgasmith, do you need me to update the branch to the current master ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222881740
https://github.com/psi4/psi4/pull/387#issuecomment-222883780:129,Availability,fault,fault,129,"This looks fantastic - great work! I am fully in favor of pulling it in, as long as we're certain it's not the source of the seg fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222883780
https://github.com/psi4/psi4/pull/388#issuecomment-223824090:277,Deployability,patch,patch,277,"@dgasmith, what do you think of going ahead and merging this in now, with a follow-up in a couple days addressing 150, the binary, and keyword tweaks? This PR itself works nicely in its own right, and it'd be easier to test the outlying binary w/o having to apply this PR as a patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223824090
https://github.com/psi4/psi4/pull/388#issuecomment-223824090:219,Testability,test,test,219,"@dgasmith, what do you think of going ahead and merging this in now, with a follow-up in a couple days addressing 150, the binary, and keyword tweaks? This PR itself works nicely in its own right, and it'd be easier to test the outlying binary w/o having to apply this PR as a patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223824090
https://github.com/psi4/psi4/pull/388#issuecomment-223824404:73,Deployability,update,updated,73,"@loriab Sure, can we turn off nightly builds until the ChemPS2 module is updated as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223824404
https://github.com/psi4/psi4/pull/388#issuecomment-223825766:55,Testability,test,tests,55,"Ah good, you're already updating wrt upstream. Should `tests/dmrg/natural-orbital` be added to ctest?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223825766
https://github.com/psi4/psi4/pull/388#issuecomment-223826600:259,Deployability,update,updates,259,"Ok, I'll pull in that test case in the chemps2 follow-up PR. So, [1] I'll accept this after travis re-certifies it, [2] I'll re-rebase #383 , [3] anytime after that one re-certifies, I think it's ready for merging. For anyone following this thread for binary updates, there are now mac versions of 1.7 chemps (libs and bin) and pychemps (py interface) at https://anaconda.org/psi4 . They're untested until either (a) this PR merges into psi4 or (b) I find a small enough test case w/i the chemps2 repo. @SebWouters , I'd like to find a < 30 s test case, but the compiled or py tests churn away for several minutes on my laptop before I kill them. Does this sound like incorrect behavior? Or, if correct, is a shorter test case manageable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223826600
https://github.com/psi4/psi4/pull/388#issuecomment-223826600:341,Integrability,interface,interface,341,"Ok, I'll pull in that test case in the chemps2 follow-up PR. So, [1] I'll accept this after travis re-certifies it, [2] I'll re-rebase #383 , [3] anytime after that one re-certifies, I think it's ready for merging. For anyone following this thread for binary updates, there are now mac versions of 1.7 chemps (libs and bin) and pychemps (py interface) at https://anaconda.org/psi4 . They're untested until either (a) this PR merges into psi4 or (b) I find a small enough test case w/i the chemps2 repo. @SebWouters , I'd like to find a < 30 s test case, but the compiled or py tests churn away for several minutes on my laptop before I kill them. Does this sound like incorrect behavior? Or, if correct, is a shorter test case manageable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223826600
https://github.com/psi4/psi4/pull/388#issuecomment-223826600:22,Testability,test,test,22,"Ok, I'll pull in that test case in the chemps2 follow-up PR. So, [1] I'll accept this after travis re-certifies it, [2] I'll re-rebase #383 , [3] anytime after that one re-certifies, I think it's ready for merging. For anyone following this thread for binary updates, there are now mac versions of 1.7 chemps (libs and bin) and pychemps (py interface) at https://anaconda.org/psi4 . They're untested until either (a) this PR merges into psi4 or (b) I find a small enough test case w/i the chemps2 repo. @SebWouters , I'd like to find a < 30 s test case, but the compiled or py tests churn away for several minutes on my laptop before I kill them. Does this sound like incorrect behavior? Or, if correct, is a shorter test case manageable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223826600
https://github.com/psi4/psi4/pull/388#issuecomment-223826600:471,Testability,test,test,471,"Ok, I'll pull in that test case in the chemps2 follow-up PR. So, [1] I'll accept this after travis re-certifies it, [2] I'll re-rebase #383 , [3] anytime after that one re-certifies, I think it's ready for merging. For anyone following this thread for binary updates, there are now mac versions of 1.7 chemps (libs and bin) and pychemps (py interface) at https://anaconda.org/psi4 . They're untested until either (a) this PR merges into psi4 or (b) I find a small enough test case w/i the chemps2 repo. @SebWouters , I'd like to find a < 30 s test case, but the compiled or py tests churn away for several minutes on my laptop before I kill them. Does this sound like incorrect behavior? Or, if correct, is a shorter test case manageable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223826600
https://github.com/psi4/psi4/pull/388#issuecomment-223826600:543,Testability,test,test,543,"Ok, I'll pull in that test case in the chemps2 follow-up PR. So, [1] I'll accept this after travis re-certifies it, [2] I'll re-rebase #383 , [3] anytime after that one re-certifies, I think it's ready for merging. For anyone following this thread for binary updates, there are now mac versions of 1.7 chemps (libs and bin) and pychemps (py interface) at https://anaconda.org/psi4 . They're untested until either (a) this PR merges into psi4 or (b) I find a small enough test case w/i the chemps2 repo. @SebWouters , I'd like to find a < 30 s test case, but the compiled or py tests churn away for several minutes on my laptop before I kill them. Does this sound like incorrect behavior? Or, if correct, is a shorter test case manageable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223826600
https://github.com/psi4/psi4/pull/388#issuecomment-223826600:577,Testability,test,tests,577,"Ok, I'll pull in that test case in the chemps2 follow-up PR. So, [1] I'll accept this after travis re-certifies it, [2] I'll re-rebase #383 , [3] anytime after that one re-certifies, I think it's ready for merging. For anyone following this thread for binary updates, there are now mac versions of 1.7 chemps (libs and bin) and pychemps (py interface) at https://anaconda.org/psi4 . They're untested until either (a) this PR merges into psi4 or (b) I find a small enough test case w/i the chemps2 repo. @SebWouters , I'd like to find a < 30 s test case, but the compiled or py tests churn away for several minutes on my laptop before I kill them. Does this sound like incorrect behavior? Or, if correct, is a shorter test case manageable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223826600
https://github.com/psi4/psi4/pull/388#issuecomment-223826600:717,Testability,test,test,717,"Ok, I'll pull in that test case in the chemps2 follow-up PR. So, [1] I'll accept this after travis re-certifies it, [2] I'll re-rebase #383 , [3] anytime after that one re-certifies, I think it's ready for merging. For anyone following this thread for binary updates, there are now mac versions of 1.7 chemps (libs and bin) and pychemps (py interface) at https://anaconda.org/psi4 . They're untested until either (a) this PR merges into psi4 or (b) I find a small enough test case w/i the chemps2 repo. @SebWouters , I'd like to find a < 30 s test case, but the compiled or py tests churn away for several minutes on my laptop before I kill them. Does this sound like incorrect behavior? Or, if correct, is a shorter test case manageable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223826600
https://github.com/psi4/psi4/pull/388#issuecomment-223890082:219,Availability,toler,tolerance,219,"Hi everyone,. You can use my CASPT2 test test13 (; https://github.com/SebWouters/CheMPS2/blob/master/tests/test13.cpp.in ),; but with DMRG instead of FCI as solver. Just make sure to use a very small; Davidson residual tolerance for the last sweep (1e-9 or 1e-10). Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223890082
https://github.com/psi4/psi4/pull/388#issuecomment-223890082:36,Testability,test,test,36,"Hi everyone,. You can use my CASPT2 test test13 (; https://github.com/SebWouters/CheMPS2/blob/master/tests/test13.cpp.in ),; but with DMRG instead of FCI as solver. Just make sure to use a very small; Davidson residual tolerance for the last sweep (1e-9 or 1e-10). Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223890082
https://github.com/psi4/psi4/pull/388#issuecomment-223890082:101,Testability,test,tests,101,"Hi everyone,. You can use my CASPT2 test test13 (; https://github.com/SebWouters/CheMPS2/blob/master/tests/test13.cpp.in ),; but with DMRG instead of FCI as solver. Just make sure to use a very small; Davidson residual tolerance for the last sweep (1e-9 or 1e-10). Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223890082
https://github.com/psi4/psi4/pull/388#issuecomment-223891395:1021,Energy Efficiency,energy,energy,1021,"So for the record, this would be:. ```; molecule N2 {; N 0.0000 0.0000 0.0000; N 0.0000 0.0000 2.1180; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12. set dmrg wfn_irrep 0; set dmrg wfn_multp 1; set dmrg frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrg active [ 2 , 0 , 1 , 1 , 0 , 2 , 1 , 1 ]. set dmrg dmrg_states [ 500, 1000]; set dmrg dmrg_e_convergence [ 1e-10, 1e-10]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-10]; set dmrg dmrg_maxsweeps [ 5, 5]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_d_convergence 1e-6; set dmrg dmrg_store_unit true; set dmrg dmrg_do_diis true; set dmrg dmrg_diis_branch 1e-2; set dmrg dmrg_store_diis false. set dmrg dmrg_which_root 1 # Ground state; set dmrg dmrg_state_avg false; set dmrg dmrg_active_space NO # INPUT; NO; LOC; set dmrg dmrg_loc_random false. set dmrg dmrg_caspt2_orb pseudocanonical; set dmrg dmrg_ipea 0.0; set dmrg dmrg_imag_shift 0.0. energy(""dmrg-caspt2""). compare_values(-109.103502335253, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; compare_values(-109.311041321133, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223891395
https://github.com/psi4/psi4/pull/388#issuecomment-223891395:1101,Energy Efficiency,ENERGY,ENERGY,1101,"So for the record, this would be:. ```; molecule N2 {; N 0.0000 0.0000 0.0000; N 0.0000 0.0000 2.1180; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12. set dmrg wfn_irrep 0; set dmrg wfn_multp 1; set dmrg frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrg active [ 2 , 0 , 1 , 1 , 0 , 2 , 1 , 1 ]. set dmrg dmrg_states [ 500, 1000]; set dmrg dmrg_e_convergence [ 1e-10, 1e-10]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-10]; set dmrg dmrg_maxsweeps [ 5, 5]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_d_convergence 1e-6; set dmrg dmrg_store_unit true; set dmrg dmrg_do_diis true; set dmrg dmrg_diis_branch 1e-2; set dmrg dmrg_store_diis false. set dmrg dmrg_which_root 1 # Ground state; set dmrg dmrg_state_avg false; set dmrg dmrg_active_space NO # INPUT; NO; LOC; set dmrg dmrg_loc_random false. set dmrg dmrg_caspt2_orb pseudocanonical; set dmrg dmrg_ipea 0.0; set dmrg dmrg_imag_shift 0.0. energy(""dmrg-caspt2""). compare_values(-109.103502335253, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; compare_values(-109.311041321133, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223891395
https://github.com/psi4/psi4/pull/388#issuecomment-223891395:1124,Energy Efficiency,Energy,Energy,1124,"So for the record, this would be:. ```; molecule N2 {; N 0.0000 0.0000 0.0000; N 0.0000 0.0000 2.1180; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12. set dmrg wfn_irrep 0; set dmrg wfn_multp 1; set dmrg frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrg active [ 2 , 0 , 1 , 1 , 0 , 2 , 1 , 1 ]. set dmrg dmrg_states [ 500, 1000]; set dmrg dmrg_e_convergence [ 1e-10, 1e-10]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-10]; set dmrg dmrg_maxsweeps [ 5, 5]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_d_convergence 1e-6; set dmrg dmrg_store_unit true; set dmrg dmrg_do_diis true; set dmrg dmrg_diis_branch 1e-2; set dmrg dmrg_store_diis false. set dmrg dmrg_which_root 1 # Ground state; set dmrg dmrg_state_avg false; set dmrg dmrg_active_space NO # INPUT; NO; LOC; set dmrg dmrg_loc_random false. set dmrg dmrg_caspt2_orb pseudocanonical; set dmrg dmrg_ipea 0.0; set dmrg dmrg_imag_shift 0.0. energy(""dmrg-caspt2""). compare_values(-109.103502335253, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; compare_values(-109.311041321133, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223891395
https://github.com/psi4/psi4/pull/388#issuecomment-223891395:1196,Energy Efficiency,ENERGY,ENERGY,1196,"So for the record, this would be:. ```; molecule N2 {; N 0.0000 0.0000 0.0000; N 0.0000 0.0000 2.1180; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12. set dmrg wfn_irrep 0; set dmrg wfn_multp 1; set dmrg frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrg active [ 2 , 0 , 1 , 1 , 0 , 2 , 1 , 1 ]. set dmrg dmrg_states [ 500, 1000]; set dmrg dmrg_e_convergence [ 1e-10, 1e-10]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-10]; set dmrg dmrg_maxsweeps [ 5, 5]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_d_convergence 1e-6; set dmrg dmrg_store_unit true; set dmrg dmrg_do_diis true; set dmrg dmrg_diis_branch 1e-2; set dmrg dmrg_store_diis false. set dmrg dmrg_which_root 1 # Ground state; set dmrg dmrg_state_avg false; set dmrg dmrg_active_space NO # INPUT; NO; LOC; set dmrg dmrg_loc_random false. set dmrg dmrg_caspt2_orb pseudocanonical; set dmrg dmrg_ipea 0.0; set dmrg dmrg_imag_shift 0.0. energy(""dmrg-caspt2""). compare_values(-109.103502335253, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; compare_values(-109.311041321133, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223891395
https://github.com/psi4/psi4/pull/388#issuecomment-223891395:1222,Energy Efficiency,Energy,Energy,1222,"So for the record, this would be:. ```; molecule N2 {; N 0.0000 0.0000 0.0000; N 0.0000 0.0000 2.1180; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12. set dmrg wfn_irrep 0; set dmrg wfn_multp 1; set dmrg frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrg active [ 2 , 0 , 1 , 1 , 0 , 2 , 1 , 1 ]. set dmrg dmrg_states [ 500, 1000]; set dmrg dmrg_e_convergence [ 1e-10, 1e-10]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-10]; set dmrg dmrg_maxsweeps [ 5, 5]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_d_convergence 1e-6; set dmrg dmrg_store_unit true; set dmrg dmrg_do_diis true; set dmrg dmrg_diis_branch 1e-2; set dmrg dmrg_store_diis false. set dmrg dmrg_which_root 1 # Ground state; set dmrg dmrg_state_avg false; set dmrg dmrg_active_space NO # INPUT; NO; LOC; set dmrg dmrg_loc_random false. set dmrg dmrg_caspt2_orb pseudocanonical; set dmrg dmrg_ipea 0.0; set dmrg dmrg_imag_shift 0.0. energy(""dmrg-caspt2""). compare_values(-109.103502335253, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; compare_values(-109.311041321133, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223891395
https://github.com/psi4/psi4/pull/388#issuecomment-223891395:1134,Testability,TEST,TEST,1134,"So for the record, this would be:. ```; molecule N2 {; N 0.0000 0.0000 0.0000; N 0.0000 0.0000 2.1180; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12. set dmrg wfn_irrep 0; set dmrg wfn_multp 1; set dmrg frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrg active [ 2 , 0 , 1 , 1 , 0 , 2 , 1 , 1 ]. set dmrg dmrg_states [ 500, 1000]; set dmrg dmrg_e_convergence [ 1e-10, 1e-10]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-10]; set dmrg dmrg_maxsweeps [ 5, 5]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_d_convergence 1e-6; set dmrg dmrg_store_unit true; set dmrg dmrg_do_diis true; set dmrg dmrg_diis_branch 1e-2; set dmrg dmrg_store_diis false. set dmrg dmrg_which_root 1 # Ground state; set dmrg dmrg_state_avg false; set dmrg dmrg_active_space NO # INPUT; NO; LOC; set dmrg dmrg_loc_random false. set dmrg dmrg_caspt2_orb pseudocanonical; set dmrg dmrg_ipea 0.0; set dmrg dmrg_imag_shift 0.0. energy(""dmrg-caspt2""). compare_values(-109.103502335253, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; compare_values(-109.311041321133, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223891395
https://github.com/psi4/psi4/pull/388#issuecomment-223891395:1232,Testability,TEST,TEST,1232,"So for the record, this would be:. ```; molecule N2 {; N 0.0000 0.0000 0.0000; N 0.0000 0.0000 2.1180; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12. set dmrg wfn_irrep 0; set dmrg wfn_multp 1; set dmrg frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrg active [ 2 , 0 , 1 , 1 , 0 , 2 , 1 , 1 ]. set dmrg dmrg_states [ 500, 1000]; set dmrg dmrg_e_convergence [ 1e-10, 1e-10]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-10]; set dmrg dmrg_maxsweeps [ 5, 5]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_d_convergence 1e-6; set dmrg dmrg_store_unit true; set dmrg dmrg_do_diis true; set dmrg dmrg_diis_branch 1e-2; set dmrg dmrg_store_diis false. set dmrg dmrg_which_root 1 # Ground state; set dmrg dmrg_state_avg false; set dmrg dmrg_active_space NO # INPUT; NO; LOC; set dmrg dmrg_loc_random false. set dmrg dmrg_caspt2_orb pseudocanonical; set dmrg dmrg_ipea 0.0; set dmrg dmrg_imag_shift 0.0. energy(""dmrg-caspt2""). compare_values(-109.103502335253, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; compare_values(-109.311041321133, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223891395
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:62,Energy Efficiency,energy,energy,62,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:201,Energy Efficiency,Energy,Energy,201,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:244,Energy Efficiency,Energy,Energy,244,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:287,Energy Efficiency,Energy,Energy,287,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:510,Energy Efficiency,Energy,Energy,510,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:568,Energy Efficiency,Energy,Energy,568,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:621,Energy Efficiency,Energy,Energy,621,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:677,Energy Efficiency,Energy,Energy,677,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:734,Energy Efficiency,Energy,Energy,734,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:792,Energy Efficiency,Energy,Energy,792,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:842,Energy Efficiency,Energy,Energy,842,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:899,Energy Efficiency,Energy,Energy,899,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:942,Energy Efficiency,Energy,Energy,942,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:985,Energy Efficiency,Energy,Energy,985,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:1208,Energy Efficiency,Energy,Energy,1208,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:1266,Energy Efficiency,Energy,Energy,1266,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:1319,Energy Efficiency,Energy,Energy,1319,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:1375,Energy Efficiency,Energy,Energy,1375,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:1432,Energy Efficiency,Energy,Energy,1432,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:1490,Energy Efficiency,Energy,Energy,1490,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:1540,Energy Efficiency,Energy,Energy,1540,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222312734:1837,Testability,test,tests,1837,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734
https://github.com/psi4/psi4/issues/391#issuecomment-222314966:52,Testability,test,test,52,"On my mac with Psi4 1.0rc3 (71ea2ea), the cd-omp2-2 test normally terminates. I can not reproduce the problem. What kind of blas you have on the Debian?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222314966
https://github.com/psi4/psi4/issues/391#issuecomment-222316099:179,Testability,test,testcase,179,"Hrm, I would've sworn it's refblas, but after checking it seems the Debian chemps-1.7 build pulled in ATLAS (base version). It's still curious that this would be the only failing testcase if there's an issue with the linear algebra packages...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222316099
https://github.com/psi4/psi4/issues/391#issuecomment-222317064:377,Availability,error,error,377,"Most of tests include well-behaved molecules such as H2O. However, cd-omp2-2 includes the NO molecule, which has a problematic electronic structure. I tried it both on may mac and linux cluster (centos 6.3). In linux I used intel compiler and MKL. It is difficult to guess the source problem unless debugging the source code. I would debug the code but I can not reproduce the error on my machines. Therefore, I suspect that it might be related to the blas library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222317064
https://github.com/psi4/psi4/issues/391#issuecomment-222317064:8,Testability,test,tests,8,"Most of tests include well-behaved molecules such as H2O. However, cd-omp2-2 includes the NO molecule, which has a problematic electronic structure. I tried it both on may mac and linux cluster (centos 6.3). In linux I used intel compiler and MKL. It is difficult to guess the source problem unless debugging the source code. I would debug the code but I can not reproduce the error on my machines. Therefore, I suspect that it might be related to the blas library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222317064
https://github.com/psi4/psi4/issues/391#issuecomment-222325997:168,Energy Efficiency,Energy,Energy,168,"OK, I can confirm it only fails with ATLAS - works fine with refblas. If I run it with `mpirun -n 1`, it does not crash, but the result is bad:. ```; Nuclear Repulsion Energy (a.u.)...................................PASSED; CD-HF Energy (a.u.)...............................................PASSED; CD-OMP2 Total Energy (a.u.): computed value (-129.5432868) does not match (-129.5897884) to 6 decimal places.; ```. If I switch to `mpirun -n 2`, it crashes as indicated before, so that might be a hint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222325997
https://github.com/psi4/psi4/issues/391#issuecomment-222325997:230,Energy Efficiency,Energy,Energy,230,"OK, I can confirm it only fails with ATLAS - works fine with refblas. If I run it with `mpirun -n 1`, it does not crash, but the result is bad:. ```; Nuclear Repulsion Energy (a.u.)...................................PASSED; CD-HF Energy (a.u.)...............................................PASSED; CD-OMP2 Total Energy (a.u.): computed value (-129.5432868) does not match (-129.5897884) to 6 decimal places.; ```. If I switch to `mpirun -n 2`, it crashes as indicated before, so that might be a hint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222325997
https://github.com/psi4/psi4/issues/391#issuecomment-222325997:312,Energy Efficiency,Energy,Energy,312,"OK, I can confirm it only fails with ATLAS - works fine with refblas. If I run it with `mpirun -n 1`, it does not crash, but the result is bad:. ```; Nuclear Repulsion Energy (a.u.)...................................PASSED; CD-HF Energy (a.u.)...............................................PASSED; CD-OMP2 Total Energy (a.u.): computed value (-129.5432868) does not match (-129.5897884) to 6 decimal places.; ```. If I switch to `mpirun -n 2`, it crashes as indicated before, so that might be a hint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222325997
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:744,Availability,error,error,744,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:885,Availability,Down,Downloads,885,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:251,Deployability,Update,Update,251,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:400,Deployability,install,installing,400,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:450,Energy Efficiency,energy,energy,450,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:518,Energy Efficiency,energy,energy,518,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:28,Testability,test,tested,28,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:78,Testability,test,tests,78,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:314,Testability,test,tests,314,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:974,Testability,Test,TestComparisonError,974,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:1007,Testability,Test,TestComparisonError,1007,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-223730550:1136,Testability,Test,Test,1136,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550
https://github.com/psi4/psi4/issues/391#issuecomment-277545780:31,Deployability,install,installed,31,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780
https://github.com/psi4/psi4/issues/391#issuecomment-277545780:356,Deployability,update,update,356,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780
https://github.com/psi4/psi4/issues/391#issuecomment-277545780:641,Energy Efficiency,energy,energy,641,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780
https://github.com/psi4/psi4/issues/391#issuecomment-277545780:729,Energy Efficiency,energy,energy,729,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780
https://github.com/psi4/psi4/issues/391#issuecomment-277545780:618,Safety,Timeout,Timeout,618,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780
https://github.com/psi4/psi4/issues/391#issuecomment-277545780:174,Testability,test,test,174,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780
https://github.com/psi4/psi4/issues/391#issuecomment-277545780:406,Testability,test,test,406,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780
https://github.com/psi4/psi4/issues/391#issuecomment-277546386:16,Availability,failure,failure,16,"mints9 is known failure – it's the only test case failure remaining after KtB-INV, my fault. When the python & json tests alone fail, it's probably because the `which python` python is of a different version than that with which psi4 was compiled. All other test cases have the compilation python baked in to `bin/psi4` shebang, but python & json tests are using the library directly and hence the `which python` python. More to the point, good to know this problem further confirmed with ATLAS. Absent changes to dfocc, and since OpenBLAS seems free and sound, perhaps we should just discourage ATLAS and promote OpenBLAS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277546386
https://github.com/psi4/psi4/issues/391#issuecomment-277546386:50,Availability,failure,failure,50,"mints9 is known failure – it's the only test case failure remaining after KtB-INV, my fault. When the python & json tests alone fail, it's probably because the `which python` python is of a different version than that with which psi4 was compiled. All other test cases have the compilation python baked in to `bin/psi4` shebang, but python & json tests are using the library directly and hence the `which python` python. More to the point, good to know this problem further confirmed with ATLAS. Absent changes to dfocc, and since OpenBLAS seems free and sound, perhaps we should just discourage ATLAS and promote OpenBLAS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277546386
https://github.com/psi4/psi4/issues/391#issuecomment-277546386:86,Availability,fault,fault,86,"mints9 is known failure – it's the only test case failure remaining after KtB-INV, my fault. When the python & json tests alone fail, it's probably because the `which python` python is of a different version than that with which psi4 was compiled. All other test cases have the compilation python baked in to `bin/psi4` shebang, but python & json tests are using the library directly and hence the `which python` python. More to the point, good to know this problem further confirmed with ATLAS. Absent changes to dfocc, and since OpenBLAS seems free and sound, perhaps we should just discourage ATLAS and promote OpenBLAS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277546386
https://github.com/psi4/psi4/issues/391#issuecomment-277546386:40,Testability,test,test,40,"mints9 is known failure – it's the only test case failure remaining after KtB-INV, my fault. When the python & json tests alone fail, it's probably because the `which python` python is of a different version than that with which psi4 was compiled. All other test cases have the compilation python baked in to `bin/psi4` shebang, but python & json tests are using the library directly and hence the `which python` python. More to the point, good to know this problem further confirmed with ATLAS. Absent changes to dfocc, and since OpenBLAS seems free and sound, perhaps we should just discourage ATLAS and promote OpenBLAS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277546386
https://github.com/psi4/psi4/issues/391#issuecomment-277546386:116,Testability,test,tests,116,"mints9 is known failure – it's the only test case failure remaining after KtB-INV, my fault. When the python & json tests alone fail, it's probably because the `which python` python is of a different version than that with which psi4 was compiled. All other test cases have the compilation python baked in to `bin/psi4` shebang, but python & json tests are using the library directly and hence the `which python` python. More to the point, good to know this problem further confirmed with ATLAS. Absent changes to dfocc, and since OpenBLAS seems free and sound, perhaps we should just discourage ATLAS and promote OpenBLAS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277546386
https://github.com/psi4/psi4/issues/391#issuecomment-277546386:258,Testability,test,test,258,"mints9 is known failure – it's the only test case failure remaining after KtB-INV, my fault. When the python & json tests alone fail, it's probably because the `which python` python is of a different version than that with which psi4 was compiled. All other test cases have the compilation python baked in to `bin/psi4` shebang, but python & json tests are using the library directly and hence the `which python` python. More to the point, good to know this problem further confirmed with ATLAS. Absent changes to dfocc, and since OpenBLAS seems free and sound, perhaps we should just discourage ATLAS and promote OpenBLAS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277546386
https://github.com/psi4/psi4/issues/391#issuecomment-277546386:347,Testability,test,tests,347,"mints9 is known failure – it's the only test case failure remaining after KtB-INV, my fault. When the python & json tests alone fail, it's probably because the `which python` python is of a different version than that with which psi4 was compiled. All other test cases have the compilation python baked in to `bin/psi4` shebang, but python & json tests are using the library directly and hence the `which python` python. More to the point, good to know this problem further confirmed with ATLAS. Absent changes to dfocc, and since OpenBLAS seems free and sound, perhaps we should just discourage ATLAS and promote OpenBLAS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277546386
https://github.com/psi4/psi4/issues/391#issuecomment-277547014:21,Testability,test,test,21,"@loriab Okay, I will test with Intel MKL and OpenBLAS and let you know how this goes. I also confirm that `which python` is Python 2.7 whereas CMake found Python 3.5 and built with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277547014
https://github.com/psi4/psi4/issues/391#issuecomment-278449042:692,Deployability,release,release,692,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042
https://github.com/psi4/psi4/issues/391#issuecomment-278449042:678,Performance,optimiz,optimization,678,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042
https://github.com/psi4/psi4/issues/391#issuecomment-278449042:458,Safety,Timeout,Timeout,458,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042
https://github.com/psi4/psi4/issues/391#issuecomment-278449042:500,Safety,Timeout,Timeout,500,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042
https://github.com/psi4/psi4/issues/391#issuecomment-278449042:603,Safety,Timeout,Timeout,603,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042
https://github.com/psi4/psi4/issues/391#issuecomment-278449042:645,Safety,Timeout,Timeout,645,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042
https://github.com/psi4/psi4/issues/391#issuecomment-278449042:232,Testability,test,tests,232,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042
https://github.com/psi4/psi4/issues/391#issuecomment-278449042:856,Testability,test,tests,856,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042
https://github.com/psi4/psi4/issues/391#issuecomment-301264467:98,Modifiability,config,configure-blas-lapack-for-building-,98,There is now a note in the [docs](http://psicode.org/psi4manual/master/build_planning.html#how-to-configure-blas-lapack-for-building-psi4) suggesting to use openBLAS or the like over ATLAS due to the above issues. Not sure there is anything else for us to do here.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-301264467
https://github.com/psi4/psi4/issues/394#issuecomment-222842020:19,Availability,failure,failure,19,"Sure, we can add a failure just like SCF if DETCI does not converge. We can also increase the number of default iterations. At the same time, this is a fairly difficult CI case with the hydrogens very extended, I'm not sure we want defaults to cover this area as in many other cases 100 CI iterations would indicate some sort of failure. . In two-step MCSCF exact CI iterations are not really all that desirable. Unless a user loosens the MCSCF gradient threshold significantly this likely has no bearing on MCSCF computations as the previous guess CI vector is nearly exact with respect to energy near solution. Even then, delta energy convergence conditions should pick this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/394#issuecomment-222842020
https://github.com/psi4/psi4/issues/394#issuecomment-222842020:329,Availability,failure,failure,329,"Sure, we can add a failure just like SCF if DETCI does not converge. We can also increase the number of default iterations. At the same time, this is a fairly difficult CI case with the hydrogens very extended, I'm not sure we want defaults to cover this area as in many other cases 100 CI iterations would indicate some sort of failure. . In two-step MCSCF exact CI iterations are not really all that desirable. Unless a user loosens the MCSCF gradient threshold significantly this likely has no bearing on MCSCF computations as the previous guess CI vector is nearly exact with respect to energy near solution. Even then, delta energy convergence conditions should pick this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/394#issuecomment-222842020
https://github.com/psi4/psi4/issues/394#issuecomment-222842020:591,Energy Efficiency,energy,energy,591,"Sure, we can add a failure just like SCF if DETCI does not converge. We can also increase the number of default iterations. At the same time, this is a fairly difficult CI case with the hydrogens very extended, I'm not sure we want defaults to cover this area as in many other cases 100 CI iterations would indicate some sort of failure. . In two-step MCSCF exact CI iterations are not really all that desirable. Unless a user loosens the MCSCF gradient threshold significantly this likely has no bearing on MCSCF computations as the previous guess CI vector is nearly exact with respect to energy near solution. Even then, delta energy convergence conditions should pick this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/394#issuecomment-222842020
https://github.com/psi4/psi4/issues/394#issuecomment-222842020:630,Energy Efficiency,energy,energy,630,"Sure, we can add a failure just like SCF if DETCI does not converge. We can also increase the number of default iterations. At the same time, this is a fairly difficult CI case with the hydrogens very extended, I'm not sure we want defaults to cover this area as in many other cases 100 CI iterations would indicate some sort of failure. . In two-step MCSCF exact CI iterations are not really all that desirable. Unless a user loosens the MCSCF gradient threshold significantly this likely has no bearing on MCSCF computations as the previous guess CI vector is nearly exact with respect to energy near solution. Even then, delta energy convergence conditions should pick this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/394#issuecomment-222842020
https://github.com/psi4/psi4/issues/394#issuecomment-222842020:201,Modifiability,extend,extended,201,"Sure, we can add a failure just like SCF if DETCI does not converge. We can also increase the number of default iterations. At the same time, this is a fairly difficult CI case with the hydrogens very extended, I'm not sure we want defaults to cover this area as in many other cases 100 CI iterations would indicate some sort of failure. . In two-step MCSCF exact CI iterations are not really all that desirable. Unless a user loosens the MCSCF gradient threshold significantly this likely has no bearing on MCSCF computations as the previous guess CI vector is nearly exact with respect to energy near solution. Even then, delta energy convergence conditions should pick this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/394#issuecomment-222842020
https://github.com/psi4/psi4/pull/395#issuecomment-222983339:33,Availability,failure,failure,33,"I am pretty sure this is a false failure in travis due to a server being down (see log below). Can someone from @psi4/p4pub-rw restart the travis tests? I don't think I should need to push a commit just to get the build to run. . ```; $ git checkout -qf FETCH_HEAD; Adding APT Sources (BETA); $ export DEBIAN_FRONTEND=noninteractive; 0.18s$ curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -; gpg: no valid OpenPGP data found.; The command ""curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -"" failed and exited with 2 during .; Your build has been stopped. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-222983339
https://github.com/psi4/psi4/pull/395#issuecomment-222983339:73,Availability,down,down,73,"I am pretty sure this is a false failure in travis due to a server being down (see log below). Can someone from @psi4/p4pub-rw restart the travis tests? I don't think I should need to push a commit just to get the build to run. . ```; $ git checkout -qf FETCH_HEAD; Adding APT Sources (BETA); $ export DEBIAN_FRONTEND=noninteractive; 0.18s$ curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -; gpg: no valid OpenPGP data found.; The command ""curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -"" failed and exited with 2 during .; Your build has been stopped. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-222983339
https://github.com/psi4/psi4/pull/395#issuecomment-222983339:83,Testability,log,log,83,"I am pretty sure this is a false failure in travis due to a server being down (see log below). Can someone from @psi4/p4pub-rw restart the travis tests? I don't think I should need to push a commit just to get the build to run. . ```; $ git checkout -qf FETCH_HEAD; Adding APT Sources (BETA); $ export DEBIAN_FRONTEND=noninteractive; 0.18s$ curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -; gpg: no valid OpenPGP data found.; The command ""curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -"" failed and exited with 2 during .; Your build has been stopped. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-222983339
https://github.com/psi4/psi4/pull/395#issuecomment-222983339:146,Testability,test,tests,146,"I am pretty sure this is a false failure in travis due to a server being down (see log below). Can someone from @psi4/p4pub-rw restart the travis tests? I don't think I should need to push a commit just to get the build to run. . ```; $ git checkout -qf FETCH_HEAD; Adding APT Sources (BETA); $ export DEBIAN_FRONTEND=noninteractive; 0.18s$ curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -; gpg: no valid OpenPGP data found.; The command ""curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -"" failed and exited with 2 during .; Your build has been stopped. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-222983339
https://github.com/psi4/psi4/pull/395#issuecomment-223043529:34,Availability,error,error,34,"The log-file still looks like the error occurs before the build is even started, so I don't know if there is anything I can do about this. . It looks like this is an issue with all travis builds w/ clang they are aware of it, I don't know if we can do anything about that travis-ci/travis-ci#6120",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-223043529
https://github.com/psi4/psi4/pull/395#issuecomment-223043529:4,Testability,log,log-file,4,"The log-file still looks like the error occurs before the build is even started, so I don't know if there is anything I can do about this. . It looks like this is an issue with all travis builds w/ clang they are aware of it, I don't know if we can do anything about that travis-ci/travis-ci#6120",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-223043529
https://github.com/psi4/psi4/pull/395#issuecomment-223085146:336,Availability,down,down,336,"I pushed changes to address the discussions on the original diffs. If you look through [this discussion](http://lists.llvm.org/pipermail/llvm-foundation/2016-May/000020.html) from the llvm mailing list. It looks like their servers are being overwhelmed with requests (which I suspect are originating from travis) so they have shut them down. Anyway, all travis builds using clang are going to fail until that gets resolved. . Whenever the clang builds are working again this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-223085146
https://github.com/psi4/psi4/pull/400#issuecomment-223718861:270,Availability,avail,available,270,"The way I understand SAD as described in DOI 10.1002/jcc.20393 is that one uses the SAD density matrix as input to a spin-restricted Fock build, and then uses those orbitals for whatever method. There's no reason SAD shouldn't work for ROHF or UHF, because orbitals are available. Another way to get orbitals for ROHF is to diagonalize the SAD matrix, but this is not as good as an approach because the density changes in the purification.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223718861
https://github.com/psi4/psi4/pull/400#issuecomment-223724073:73,Testability,test,test,73,"@susilehtola Right, thats why I was a little surprised that ~10 ROHF/UHF test cases failed with a SAD guess. Im guessing one can fiddle with the code and figure out how to do this a bit better than currently implemented, but it is worrying when we are going for consistency. With RHF its pretty well tested and we cannot find a case where it hurts rather than helps. Looks like we are hitting ERI AM limitation in Travis. Everything should pass when we roll over to direct when the AM of the auxiliary exceeds compiled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223724073
https://github.com/psi4/psi4/pull/400#issuecomment-223724073:300,Testability,test,tested,300,"@susilehtola Right, thats why I was a little surprised that ~10 ROHF/UHF test cases failed with a SAD guess. Im guessing one can fiddle with the code and figure out how to do this a bit better than currently implemented, but it is worrying when we are going for consistency. With RHF its pretty well tested and we cannot find a case where it hurts rather than helps. Looks like we are hitting ERI AM limitation in Travis. Everything should pass when we roll over to direct when the AM of the auxiliary exceeds compiled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223724073
https://github.com/psi4/psi4/pull/400#issuecomment-223727271:28,Integrability,rout,routines,28,"Btw you don't have Cholesky routines as an alternative to RI? Seems like you do have CD for CC, you could just take the B matrices from the CD and use them for the SCF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223727271
https://github.com/psi4/psi4/pull/400#issuecomment-223759128:186,Safety,avoid,avoid,186,"Aha, Psi's CD algorithm is not parallelized and is probably why I was seeing CD tensor generation taking longer than the iterations in some cases. We could fix that, it would be nice to avoid an auxiliary basis. Yea, thats something to consider; however, one thing I have noted is that projecting orbitals that result from a partial Cholesky of the SAD density results in some degradation in the accuracy of the SAD guess itself. This is kind of weird, but might come from the interplay of the projection and how Cholesky weights vectors. Right now the SAD guess takes a small fraction of the SCF time (even for dimers) so I didnt see a need to look into this. Ill add this functionality back in so someone can play with it if they want.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223759128
https://github.com/psi4/psi4/pull/400#issuecomment-223774180:358,Safety,avoid,avoid,358,"Oh I meant project up atom by atom. This is just like doing the sad guess; in the big basis.; On Jun 4, 2016 10:40, ""Daniel Smith"" notifications@github.com wrote:. > Aha, Psi's CD algorithm is not parallelized and is probably why I was; > seeing CD tensor generation taking longer than the iterations in some; > cases. We could fix that, it would be nice to avoid an auxiliary basis.; > ; > Yea, thats something to consider; however, one thing I have noted is that; > projecting orbitals that result from a partial Cholesky of the SAD density; > results in some degradation in the accuracy of the SAD guess itself. This; > is kind of weird, but might come from the interplay of the projection and; > how Cholesky weights vectors. Right now the SAD guess takes a small; > fraction of the SCF time (even for dimers) so I didnt see a need to look; > into this. Ill add this functionality back in so someone can play with it; > if they want.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/400#issuecomment-223759128, or mute; > the thread; > https://github.com/notifications/unsubscribe/ACizP-uzAbBMjA_-PXb1rOPqHc6uBk6Dks5qIY5ZgaJpZM4It9wO; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223774180
https://github.com/psi4/psi4/pull/400#issuecomment-224376772:737,Performance,bottleneck,bottlenecks,737,"I have found a few cases (Cr2) where DF kills CD. For the most part, I found that CD takes more time (3-4x) compared to conventional integrals. For the most part, if you are dealing with transition metals, computing the integrals seems to take a large amount of time and CD requires you to randomly compute different integrals, so the code becomes pretty slow. If anybody has any ideas of how to speed up this process please tell me. Right now, I am trying to run a system with 340 basis functions and the cholesky procedure has been running for 70 hours already. There exists very few DF basis sets with large enough AM for Chromium so I am forced to use Cholesky. . I have a branch in my fork where I am trying to figure out the major bottlenecks of cholesky and speed it up. The simplest idea, which is already done, is to compute the cholesky integrals only once and read them from disk. I basically allow cholesky to read the df_ints_io keyword. Previously, the CDJK and lib3index do not interact with this keyword, so it would compute the cholesky integrals if choleskify was ever called. . I agree with @dgasmith to use conventional integrals for the SAD guess. Cholesky seems to slower than conventional integrals. Generation of the cholesky integrals is known to be a slow process as shown by Lindh and Aquilante in many of their papers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224376772
https://github.com/psi4/psi4/pull/400#issuecomment-224376772:782,Usability,simpl,simplest,782,"I have found a few cases (Cr2) where DF kills CD. For the most part, I found that CD takes more time (3-4x) compared to conventional integrals. For the most part, if you are dealing with transition metals, computing the integrals seems to take a large amount of time and CD requires you to randomly compute different integrals, so the code becomes pretty slow. If anybody has any ideas of how to speed up this process please tell me. Right now, I am trying to run a system with 340 basis functions and the cholesky procedure has been running for 70 hours already. There exists very few DF basis sets with large enough AM for Chromium so I am forced to use Cholesky. . I have a branch in my fork where I am trying to figure out the major bottlenecks of cholesky and speed it up. The simplest idea, which is already done, is to compute the cholesky integrals only once and read them from disk. I basically allow cholesky to read the df_ints_io keyword. Previously, the CDJK and lib3index do not interact with this keyword, so it would compute the cholesky integrals if choleskify was ever called. . I agree with @dgasmith to use conventional integrals for the SAD guess. Cholesky seems to slower than conventional integrals. Generation of the cholesky integrals is known to be a slow process as shown by Lindh and Aquilante in many of their papers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224376772
https://github.com/psi4/psi4/pull/400#issuecomment-224448359:248,Integrability,contract,contraction,248,"Stupid question, you do reuse integrals on the same shell, don't you? As in J. Chem. Phys. 2003, 118, 9481. The other issue is that for Cr2 the integrals are horribly slow probably because the integrals engine isn't taking advantage of the general contraction. E.g. cc-pVDZ is [20s16p8d2f|6s5p3d1f] for Cr so you'll end up doing a whole lot of extra work to get those integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224448359
https://github.com/psi4/psi4/pull/400#issuecomment-224450826:189,Usability,simpl,simple,189,"@susilehtola, @robparrish was the original author of the code, but I believe that the integrals are recomputed whenever needed. Rob can correct me if I am wrong. The algorithm is extremely simple and could use much more improvements.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224450826
https://github.com/psi4/psi4/pull/400#issuecomment-224486539:765,Usability,simpl,simple,765,"Yeah this code recomputes based on the function pivot pair. I am aware of; the many advantages of resolving the full shell pair at once, but just; needed a quick reference code to check compressibility when I wrote this.; It could easily be fixed but I have to this point only ever needed df for; production computations. I'm sojourning in lugano next week and can check a; new algorithm in when I've a free hour then. Cheers; Rob; On Jun 8, 2016 2:06 AM, ""Kevin Hannon"" notifications@github.com wrote:. > @susilehtola https://github.com/susilehtola, @robparrish; > https://github.com/robparrish was the original author of the code, but; > I believe that the integrals are recomputed whenever needed. Rob can; > correct me if I am wrong. The algorithm is extremely simple and could use; > much more improvements.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/400#issuecomment-224450826, or mute; > the thread; > https://github.com/notifications/unsubscribe/ACizP8-ZuGGRnE3-m4QdDPyzmFIFGOvXks5qJgeQgaJpZM4It9wO; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224486539
https://github.com/psi4/psi4/pull/400#issuecomment-224644390:286,Availability,error,errors,286,"Since we are only interested in the density with a SAD guess we can lower our expectations in terms of accuracy. So lets just do the easy solution: I trimmed `AM=5` out of the Weigend basis to make a `SAD-FIT` basis. While the energy of a given atom can deviate up to 1% (!) due to the errors in the fitting basis the densities look similar. For example, hydrobromic acid/aug-cc-pV5Z:. ```; SAD DF-basis aug-cc-pV5Z-jkfit; @DF-RHF iter 0: -2573.11546127243219 -2.57312e+03 1.30325e-02; @DF-RHF iter 6: -2573.05212026634626 -9.92310e-06 3.01845e-06 DIIS; ```. ```; SAD DF-basis SAD-FIT; @DF-RHF iter 0: -2572.77288633232229 -2.57277e+03 2.28224e-02; @DF-RHF iter 6: -2573.05212044674045 -2.02440e-07 7.83243e-07 DIIS; ```. This represents a worst-case example as the `SAD-FIT` basis is 10x smaller than `aug-cc-pV5Z-jkfit` for bromine. I think this represents a happy medium, 150 orbital basis functions on a single atom runs in about 3 seconds and we neatly circumvent the AM issues (Psi4 minimal AM is 4). As a note this optimization takes 11 iterations with a CORE guess to achieve the same level of convergence. Going to run with this for now. Unless someone has ideas of what went wrong with the CDJK spherical vs cartesian issue I'm just going to rip this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224644390
https://github.com/psi4/psi4/pull/400#issuecomment-224644390:227,Energy Efficiency,energy,energy,227,"Since we are only interested in the density with a SAD guess we can lower our expectations in terms of accuracy. So lets just do the easy solution: I trimmed `AM=5` out of the Weigend basis to make a `SAD-FIT` basis. While the energy of a given atom can deviate up to 1% (!) due to the errors in the fitting basis the densities look similar. For example, hydrobromic acid/aug-cc-pV5Z:. ```; SAD DF-basis aug-cc-pV5Z-jkfit; @DF-RHF iter 0: -2573.11546127243219 -2.57312e+03 1.30325e-02; @DF-RHF iter 6: -2573.05212026634626 -9.92310e-06 3.01845e-06 DIIS; ```. ```; SAD DF-basis SAD-FIT; @DF-RHF iter 0: -2572.77288633232229 -2.57277e+03 2.28224e-02; @DF-RHF iter 6: -2573.05212044674045 -2.02440e-07 7.83243e-07 DIIS; ```. This represents a worst-case example as the `SAD-FIT` basis is 10x smaller than `aug-cc-pV5Z-jkfit` for bromine. I think this represents a happy medium, 150 orbital basis functions on a single atom runs in about 3 seconds and we neatly circumvent the AM issues (Psi4 minimal AM is 4). As a note this optimization takes 11 iterations with a CORE guess to achieve the same level of convergence. Going to run with this for now. Unless someone has ideas of what went wrong with the CDJK spherical vs cartesian issue I'm just going to rip this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224644390
https://github.com/psi4/psi4/pull/400#issuecomment-224644390:1022,Performance,optimiz,optimization,1022,"Since we are only interested in the density with a SAD guess we can lower our expectations in terms of accuracy. So lets just do the easy solution: I trimmed `AM=5` out of the Weigend basis to make a `SAD-FIT` basis. While the energy of a given atom can deviate up to 1% (!) due to the errors in the fitting basis the densities look similar. For example, hydrobromic acid/aug-cc-pV5Z:. ```; SAD DF-basis aug-cc-pV5Z-jkfit; @DF-RHF iter 0: -2573.11546127243219 -2.57312e+03 1.30325e-02; @DF-RHF iter 6: -2573.05212026634626 -9.92310e-06 3.01845e-06 DIIS; ```. ```; SAD DF-basis SAD-FIT; @DF-RHF iter 0: -2572.77288633232229 -2.57277e+03 2.28224e-02; @DF-RHF iter 6: -2573.05212044674045 -2.02440e-07 7.83243e-07 DIIS; ```. This represents a worst-case example as the `SAD-FIT` basis is 10x smaller than `aug-cc-pV5Z-jkfit` for bromine. I think this represents a happy medium, 150 orbital basis functions on a single atom runs in about 3 seconds and we neatly circumvent the AM issues (Psi4 minimal AM is 4). As a note this optimization takes 11 iterations with a CORE guess to achieve the same level of convergence. Going to run with this for now. Unless someone has ideas of what went wrong with the CDJK spherical vs cartesian issue I'm just going to rip this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224644390
https://github.com/psi4/psi4/issues/402#issuecomment-224057906:211,Energy Efficiency,Reduce,Reduce,211,## Medium; - [ ] Parallelize the mints integral generation:; Needs to use asynchronous I/O to have one process writing to disk while others compute. Basic technology to do that is in the new PKJK object.; - [ ] Reduce PKJK I/O; Preliminary experiment shows that storing only the ordered supermatrix for J and reordering it on the fly when forming K is faster than I/O for storing/reading ordered supermatrix for K.; - [ ] Sieve PKJK ; Currently PKJK only uses sieving for integral computations. Could use it to only I/O significant integrals. We would probably need a specialized iterator that goes only through significant integrals and gives us back the absolute indices for building J and K.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-224057906
https://github.com/psi4/psi4/issues/402#issuecomment-230368446:141,Availability,avail,available,141,## Medium; - [ ] Design and implement a memory manager. It should keep track of the memory allocated and provide the user with the currently available memory.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-230368446
https://github.com/psi4/psi4/issues/402#issuecomment-230368446:91,Energy Efficiency,allocate,allocated,91,## Medium; - [ ] Design and implement a memory manager. It should keep track of the memory allocated and provide the user with the currently available memory.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-230368446
https://github.com/psi4/psi4/issues/402#issuecomment-251571266:535,Availability,avail,available,535,"Moved from #476 so as to not clutter issues.; - [ ] Here lie uses for general Cholesky machinery.; - [ ] Fock-type terms in DF-SAPT, particularly higher-order, see #317 ; - [ ] If you care about 6-zeta accuracy, you probably oughtn't to be using density fitting. Nevertheless, having orbital basis sets for which _no_ auxiliary is appropriate (even as overkill, like QZ for sto-3g) is troubling for the auxiliary defaulting machinery. On-the-fly construction could help. Maybe a more plausible case is when auxiliary basis sets aren't available for a particular element or for tight functions. Moreover, Susi Lehtola comments:. Well, you could do compact atomic Cholesky to construct a fitting basis for an arbitrary orbital basis set on-the-fly. [doi 10.1063/1.3116784]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-251571266
https://github.com/psi4/psi4/issues/402#issuecomment-284798071:245,Energy Efficiency,energy,energy,245,"- [ ] Implement logging for PsiAPI mode so that output files (currently w/o Psi4 header or any record of input commands or options) aren't so mysterious. At minimum, print to output the `psi4.header()` at file creation and e.g. `>>> aggh = psi4.energy(""scf"")` and `>>> psi4.set_options({""scf_type"": ""pk""})` to track what was done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-284798071
https://github.com/psi4/psi4/issues/402#issuecomment-284798071:16,Testability,log,logging,16,"- [ ] Implement logging for PsiAPI mode so that output files (currently w/o Psi4 header or any record of input commands or options) aren't so mysterious. At minimum, print to output the `psi4.header()` at file creation and e.g. `>>> aggh = psi4.energy(""scf"")` and `>>> psi4.set_options({""scf_type"": ""pk""})` to track what was done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-284798071
https://github.com/psi4/psi4/issues/402#issuecomment-286672049:15,Performance,load,loading,15,"- [ ] API-like loading of basis sets. If one has the coef and the exp, shouldn't have to write them out to a .gbs, should be a constructor to take them directly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-286672049
https://github.com/psi4/psi4/issues/402#issuecomment-298973221:6,Energy Efficiency,Adapt,Adapt,6,* [ ] Adapt CC* modules to take in Wfn so that truncated virtual space proceeds transparently. Feature request (http://forum.psicode.org/t/rvs-approximations-for-cc2-or-adc-2/504),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-298973221
https://github.com/psi4/psi4/issues/402#issuecomment-298973221:6,Modifiability,Adapt,Adapt,6,* [ ] Adapt CC* modules to take in Wfn so that truncated virtual space proceeds transparently. Feature request (http://forum.psicode.org/t/rvs-approximations-for-cc2-or-adc-2/504),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-298973221
https://github.com/psi4/psi4/issues/402#issuecomment-301541037:91,Performance,perform,performance,91,- [ ] Matt Schieber has info on KMP affinity and thread binding schemes that hurt and help performance. See if the one that helps can be encoded at runtime (knowing some /proc/cpuinfo) or otherwise advise in docs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-301541037
https://github.com/psi4/psi4/issues/402#issuecomment-303823433:73,Energy Efficiency,energy,energy,73,- [ ] . ```; sp = single_point('scf'); sp.compute() # ?; wfn = sp.wfn(); energy = sp.energy(); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-303823433
https://github.com/psi4/psi4/issues/402#issuecomment-303823433:85,Energy Efficiency,energy,energy,85,- [ ] . ```; sp = single_point('scf'); sp.compute() # ?; wfn = sp.wfn(); energy = sp.energy(); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-303823433
https://github.com/psi4/psi4/issues/402#issuecomment-304083131:40,Performance,optimiz,optimized,40,"- [ ] Implement O2 method, i.e. orbital-optimized scaled opposite-spin MP2 [R. C. Lochan and M. Head-Gordon, J. Chem. Phys. 126, 164101 (2007)]. (Looks like there is a scaled opposite-spin MP2 method in dfocc?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-304083131
https://github.com/psi4/psi4/issues/402#issuecomment-330926737:449,Energy Efficiency,charge,charge,449,"- [ ] Unify origin-setting for properties/integrals. Properties by oeprop get their origin from options (https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L775-L808). Mints integrals get their origin from default 0,0,0 or from options. But with Mints, you sometimes want to set the origin by argument (default 0,0,0) in API. Unification so that useful from both input file and API would be nice. Also maybe an easy center-of-charge spec.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-330926737
https://github.com/psi4/psi4/issues/402#issuecomment-334617561:231,Availability,error,error,231,"- [x] Can libmints get away with not having `MAX_AM_ERI` passed to it? That way one could switch out `libint.so`s on the fly (conda can do this). Would have to find a way to still exit gracefully if insufficient AM and give decent error messages. EDIT: Can't be done, as the header sets data structure sizes as well. Settling on AM=8 for conda linux instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-334617561
https://github.com/psi4/psi4/issues/402#issuecomment-334617561:237,Integrability,message,messages,237,"- [x] Can libmints get away with not having `MAX_AM_ERI` passed to it? That way one could switch out `libint.so`s on the fly (conda can do this). Would have to find a way to still exit gracefully if insufficient AM and give decent error messages. EDIT: Can't be done, as the header sets data structure sizes as well. Settling on AM=8 for conda linux instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-334617561
https://github.com/psi4/psi4/issues/402#issuecomment-341899122:238,Integrability,interface,interface,238,- [ ] Examine `properties` function in driver (that encodes the extended workflows beyond sp or time-trivial keyword needed to compute CC properties) and the `oeprop` syntax that most all other methods use. Devise and implement a unified interface that still works with the code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-341899122
https://github.com/psi4/psi4/issues/402#issuecomment-341899122:64,Modifiability,extend,extended,64,- [ ] Examine `properties` function in driver (that encodes the extended workflows beyond sp or time-trivial keyword needed to compute CC properties) and the `oeprop` syntax that most all other methods use. Devise and implement a unified interface that still works with the code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-341899122
https://github.com/psi4/psi4/issues/402#issuecomment-341901567:81,Modifiability,plugin,plugins,81,- [x] Add FCIDUMP capabilities within Psi4. There are currently many third-party plugins that do that and it seems needed enough to have it within the main code. Done in #872,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-341901567
https://github.com/psi4/psi4/issues/402#issuecomment-342892121:264,Testability,test,test,264,"### Beginner-Friendly (after py-side SCF). Renovate SCF damping capabilities; - [ ] right now we're only damping `D`. There are rumors that should also damp `F` or there's an iteration mismatch between `D` & `F`. Make sure damping is working right (presently only test case is scf-coverage and damping severely _hurts_ convergence; - [ ] right now we damp to the very end of iterations. Maybe damp only to 1e-4 (after which soscf might be better choice, now that DGAS has implemented) controlled by DAMPING_CONVERGENCE.; - [ ] here's a paper with potentially useful schemes https://arxiv.org/pdf/1302.6099.pdf; - [ ] consider (this may be separate project) more advanced driver logic. perhaps something along the lines of (DGAS) ""Damp first iteration, then DIIS, if density is stuck take stability step, if grad < 1.e-4 and target < 1.e-8 take SOSCF, else DIIS. if density oscillation (dRMS/oscilation) > 1.e2 add damping""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-342892121
https://github.com/psi4/psi4/issues/402#issuecomment-342892121:678,Testability,log,logic,678,"### Beginner-Friendly (after py-side SCF). Renovate SCF damping capabilities; - [ ] right now we're only damping `D`. There are rumors that should also damp `F` or there's an iteration mismatch between `D` & `F`. Make sure damping is working right (presently only test case is scf-coverage and damping severely _hurts_ convergence; - [ ] right now we damp to the very end of iterations. Maybe damp only to 1e-4 (after which soscf might be better choice, now that DGAS has implemented) controlled by DAMPING_CONVERGENCE.; - [ ] here's a paper with potentially useful schemes https://arxiv.org/pdf/1302.6099.pdf; - [ ] consider (this may be separate project) more advanced driver logic. perhaps something along the lines of (DGAS) ""Damp first iteration, then DIIS, if density is stuck take stability step, if grad < 1.e-4 and target < 1.e-8 take SOSCF, else DIIS. if density oscillation (dRMS/oscilation) > 1.e2 add damping""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-342892121
https://github.com/psi4/psi4/issues/402#issuecomment-362457407:111,Usability,simpl,simplify,111,#### things we can do after dumping py27 (just to keep track). - [ ] delete all `__future__` statements; - [ ] simplify molutil and qcdb/molecule.py raw_* functions,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-362457407
https://github.com/psi4/psi4/issues/402#issuecomment-397656501:0,Modifiability,Plugin,Plugin,0,"Plugin wish list:. - [ ] allow compiled `pluginname.so` to have a name other than matching `import pluginname`, so that python import system can't mistake the `.so` for the actual module. (see https://github.com/edeprince3/gpu_dfcc/issues/2#issuecomment-397649361)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-397656501
https://github.com/psi4/psi4/issues/402#issuecomment-397656501:41,Modifiability,plugin,pluginname,41,"Plugin wish list:. - [ ] allow compiled `pluginname.so` to have a name other than matching `import pluginname`, so that python import system can't mistake the `.so` for the actual module. (see https://github.com/edeprince3/gpu_dfcc/issues/2#issuecomment-397649361)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-397656501
https://github.com/psi4/psi4/issues/402#issuecomment-397656501:99,Modifiability,plugin,pluginname,99,"Plugin wish list:. - [ ] allow compiled `pluginname.so` to have a name other than matching `import pluginname`, so that python import system can't mistake the `.so` for the actual module. (see https://github.com/edeprince3/gpu_dfcc/issues/2#issuecomment-397649361)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-397656501
https://github.com/psi4/psi4/issues/402#issuecomment-433542414:147,Security,access,access,147,"- [ ] `-D(abc)` work needs to continue, see https://github.com/psi4/psi4/pull/1151#issuecomment-417101476 and below; - [ ] add named per-parameter access to DFT functionals now that we can get names from libxc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-433542414
https://github.com/psi4/psi4/issues/402#issuecomment-451608021:26,Energy Efficiency,charge,charge,26,* possibility to override charge states of individual atoms in SAD guess,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-451608021
https://github.com/psi4/psi4/issues/402#issuecomment-473124117:176,Energy Efficiency,energy,energy,176,"been adding some things that are correct but not full-stack hooked up. here are the reminders to do so:; - [ ] after #1491, add the ability to call ATM from functional., e.g. `energy('b3lyp-d3-atm`)`; - [ ] after #1491, MP2D gradients still need addressing; - [ ] after #1490, set up a `energy(sapt0inf)` call (if component anaylysis deems suitable) and add it to the qcvar parade. Also, figure out why it's only in fisapt and is called through dft-sapt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-473124117
https://github.com/psi4/psi4/issues/402#issuecomment-473124117:287,Energy Efficiency,energy,energy,287,"been adding some things that are correct but not full-stack hooked up. here are the reminders to do so:; - [ ] after #1491, add the ability to call ATM from functional., e.g. `energy('b3lyp-d3-atm`)`; - [ ] after #1491, MP2D gradients still need addressing; - [ ] after #1490, set up a `energy(sapt0inf)` call (if component anaylysis deems suitable) and add it to the qcvar parade. Also, figure out why it's only in fisapt and is called through dft-sapt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-473124117
https://github.com/psi4/psi4/issues/402#issuecomment-473124434:101,Safety,safe,safety,101,"save one-electron ints in wfn so that (1) not writing to disk, thus freeing SCF from disk and thread-safety issues, and (2) better carry around external potentials btwn modules.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-473124434
https://github.com/psi4/psi4/issues/402#issuecomment-485650099:165,Safety,avoid,avoiding,165,"- [ ] dft functionals in https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft/libxc_functionals.py pull all their citation metadata from libxc, thus avoiding duplicated work. Functionals that need separate X & C from libxc currently have metadata redefined in psi. Change this so that where X & C pulled separately from libxc have the same citation, this gets adopted as total citation. discussed a bit in https://github.com/psi4/psi4/pull/1597",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-485650099
https://github.com/psi4/psi4/issues/402#issuecomment-508700421:393,Modifiability,variab,variables,393,"- [ ] Implement potential-based small-basis guess as described in [Chem Phys Lett 531, 229 (2012)](http://dx.doi.org/10.1016/j.cplett.2012.02.012). The method avoids doing projections altogether, but the main problem is that one needs cross-basis Coulomb and exchange integrals (IJ|kl) and (Ik|Jl) where IJ are in the new, large basis and kl are in the small input basis. For DFT, the density variables would be evaluated in the small basis, and the quadrature would be done in the new basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-508700421
https://github.com/psi4/psi4/issues/402#issuecomment-508700421:159,Safety,avoid,avoids,159,"- [ ] Implement potential-based small-basis guess as described in [Chem Phys Lett 531, 229 (2012)](http://dx.doi.org/10.1016/j.cplett.2012.02.012). The method avoids doing projections altogether, but the main problem is that one needs cross-basis Coulomb and exchange integrals (IJ|kl) and (Ik|Jl) where IJ are in the new, large basis and kl are in the small input basis. For DFT, the density variables would be evaluated in the small basis, and the quadrature would be done in the new basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-508700421
https://github.com/psi4/psi4/issues/402#issuecomment-1228529965:24,Deployability,release,release,24,"- [ ] Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible.; - [ ] Investigate the possibility of building everything with LTO. Possible benefits: smaller binary sizes, performance improvement, unused functions are automatically stripped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228529965
https://github.com/psi4/psi4/issues/402#issuecomment-1228529965:100,Performance,optimiz,optimization,100,"- [ ] Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible.; - [ ] Investigate the possibility of building everything with LTO. Possible benefits: smaller binary sizes, performance improvement, unused functions are automatically stripped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228529965
https://github.com/psi4/psi4/issues/402#issuecomment-1228529965:287,Performance,optimiz,optimizations,287,"- [ ] Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible.; - [ ] Investigate the possibility of building everything with LTO. Possible benefits: smaller binary sizes, performance improvement, unused functions are automatically stripped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228529965
https://github.com/psi4/psi4/issues/402#issuecomment-1228529965:454,Performance,perform,performance,454,"- [ ] Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible.; - [ ] Investigate the possibility of building everything with LTO. Possible benefits: smaller binary sizes, performance improvement, unused functions are automatically stripped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228529965
https://github.com/psi4/psi4/issues/402#issuecomment-1228536374:22,Deployability,release,release,22,"> * Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible. Before making a custom option, perhaps `RelWithDebInfo` is enough?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228536374
https://github.com/psi4/psi4/issues/402#issuecomment-1228536374:98,Performance,optimiz,optimization,98,"> * Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible. Before making a custom option, perhaps `RelWithDebInfo` is enough?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228536374
https://github.com/psi4/psi4/issues/402#issuecomment-1228536374:285,Performance,optimiz,optimizations,285,"> * Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible. Before making a custom option, perhaps `RelWithDebInfo` is enough?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228536374
https://github.com/psi4/psi4/issues/402#issuecomment-1509131763:55,Deployability,Update,Update,55,"Some things to add to the wishlist from my end:. - [ ] Update COSX to support arbitrary grids via modification of X-matrix handling (see https://github.com/psi4/psi4/issues/2890 for further details).; * Susi notes: I don’t think one needs a separate formulation, just propagating the sign to the A tensor would suffice since it carries a grid index; * Further update: this wish is now addressed in https://github.com/psi4/psi4/pull/2931.; - [ ] Add CFMM and/or DF-CFMM to Psi4 officially. These already exist in Psi4 development branches, but need to be updated to match modern Psi4 developments (e.g., current formulations of CompositeJK) and actually put into Psi4. The first PR for these methods already exists (https://github.com/psi4/psi4/pull/2665).; - [ ] Support for [J-Engine](https://doi.org/10.1063/1.470986). J-Engine is a nice algorithm by the Head-Gordon group to help reduce the prefactor of J-build calculations via reformulation of how integral intermediates are formed and contracted with the density matrix to form Coulomb matrix elements. As it deals with shuffling around how integral intermediates are formed and combined with the density, any J-Engine effort will likely require coordination with the Valeev group and development within Libint2 itself (although the Valeev group did seem interested in J-Engine from what discussions I had with their researchers). ; - [ ] Support for mixed basis sets in TwoBodyAOInt sieving.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763
https://github.com/psi4/psi4/issues/402#issuecomment-1509131763:360,Deployability,update,update,360,"Some things to add to the wishlist from my end:. - [ ] Update COSX to support arbitrary grids via modification of X-matrix handling (see https://github.com/psi4/psi4/issues/2890 for further details).; * Susi notes: I don’t think one needs a separate formulation, just propagating the sign to the A tensor would suffice since it carries a grid index; * Further update: this wish is now addressed in https://github.com/psi4/psi4/pull/2931.; - [ ] Add CFMM and/or DF-CFMM to Psi4 officially. These already exist in Psi4 development branches, but need to be updated to match modern Psi4 developments (e.g., current formulations of CompositeJK) and actually put into Psi4. The first PR for these methods already exists (https://github.com/psi4/psi4/pull/2665).; - [ ] Support for [J-Engine](https://doi.org/10.1063/1.470986). J-Engine is a nice algorithm by the Head-Gordon group to help reduce the prefactor of J-build calculations via reformulation of how integral intermediates are formed and contracted with the density matrix to form Coulomb matrix elements. As it deals with shuffling around how integral intermediates are formed and combined with the density, any J-Engine effort will likely require coordination with the Valeev group and development within Libint2 itself (although the Valeev group did seem interested in J-Engine from what discussions I had with their researchers). ; - [ ] Support for mixed basis sets in TwoBodyAOInt sieving.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763
https://github.com/psi4/psi4/issues/402#issuecomment-1509131763:554,Deployability,update,updated,554,"Some things to add to the wishlist from my end:. - [ ] Update COSX to support arbitrary grids via modification of X-matrix handling (see https://github.com/psi4/psi4/issues/2890 for further details).; * Susi notes: I don’t think one needs a separate formulation, just propagating the sign to the A tensor would suffice since it carries a grid index; * Further update: this wish is now addressed in https://github.com/psi4/psi4/pull/2931.; - [ ] Add CFMM and/or DF-CFMM to Psi4 officially. These already exist in Psi4 development branches, but need to be updated to match modern Psi4 developments (e.g., current formulations of CompositeJK) and actually put into Psi4. The first PR for these methods already exists (https://github.com/psi4/psi4/pull/2665).; - [ ] Support for [J-Engine](https://doi.org/10.1063/1.470986). J-Engine is a nice algorithm by the Head-Gordon group to help reduce the prefactor of J-build calculations via reformulation of how integral intermediates are formed and contracted with the density matrix to form Coulomb matrix elements. As it deals with shuffling around how integral intermediates are formed and combined with the density, any J-Engine effort will likely require coordination with the Valeev group and development within Libint2 itself (although the Valeev group did seem interested in J-Engine from what discussions I had with their researchers). ; - [ ] Support for mixed basis sets in TwoBodyAOInt sieving.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763
https://github.com/psi4/psi4/issues/402#issuecomment-1509131763:883,Energy Efficiency,reduce,reduce,883,"Some things to add to the wishlist from my end:. - [ ] Update COSX to support arbitrary grids via modification of X-matrix handling (see https://github.com/psi4/psi4/issues/2890 for further details).; * Susi notes: I don’t think one needs a separate formulation, just propagating the sign to the A tensor would suffice since it carries a grid index; * Further update: this wish is now addressed in https://github.com/psi4/psi4/pull/2931.; - [ ] Add CFMM and/or DF-CFMM to Psi4 officially. These already exist in Psi4 development branches, but need to be updated to match modern Psi4 developments (e.g., current formulations of CompositeJK) and actually put into Psi4. The first PR for these methods already exists (https://github.com/psi4/psi4/pull/2665).; - [ ] Support for [J-Engine](https://doi.org/10.1063/1.470986). J-Engine is a nice algorithm by the Head-Gordon group to help reduce the prefactor of J-build calculations via reformulation of how integral intermediates are formed and contracted with the density matrix to form Coulomb matrix elements. As it deals with shuffling around how integral intermediates are formed and combined with the density, any J-Engine effort will likely require coordination with the Valeev group and development within Libint2 itself (although the Valeev group did seem interested in J-Engine from what discussions I had with their researchers). ; - [ ] Support for mixed basis sets in TwoBodyAOInt sieving.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763
https://github.com/psi4/psi4/issues/402#issuecomment-1509131763:991,Integrability,contract,contracted,991,"Some things to add to the wishlist from my end:. - [ ] Update COSX to support arbitrary grids via modification of X-matrix handling (see https://github.com/psi4/psi4/issues/2890 for further details).; * Susi notes: I don’t think one needs a separate formulation, just propagating the sign to the A tensor would suffice since it carries a grid index; * Further update: this wish is now addressed in https://github.com/psi4/psi4/pull/2931.; - [ ] Add CFMM and/or DF-CFMM to Psi4 officially. These already exist in Psi4 development branches, but need to be updated to match modern Psi4 developments (e.g., current formulations of CompositeJK) and actually put into Psi4. The first PR for these methods already exists (https://github.com/psi4/psi4/pull/2665).; - [ ] Support for [J-Engine](https://doi.org/10.1063/1.470986). J-Engine is a nice algorithm by the Head-Gordon group to help reduce the prefactor of J-build calculations via reformulation of how integral intermediates are formed and contracted with the density matrix to form Coulomb matrix elements. As it deals with shuffling around how integral intermediates are formed and combined with the density, any J-Engine effort will likely require coordination with the Valeev group and development within Libint2 itself (although the Valeev group did seem interested in J-Engine from what discussions I had with their researchers). ; - [ ] Support for mixed basis sets in TwoBodyAOInt sieving.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:5,Availability,error,errors,5,"More errors if I continue. In file included from /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:29:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:147: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, int, int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘)’ before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘+’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Tab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:639,Availability,error,error,639,"More errors if I continue. In file included from /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:29:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:147: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, int, int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘)’ before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘+’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Tab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:831,Availability,error,error,831,"More errors if I continue. In file included from /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:29:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:147: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, int, int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘)’ before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘+’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Tab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:939,Availability,error,error,939,"re errors if I continue. In file included from /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:29:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:147: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, int, int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘)’ before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘+’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Tabl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:1087,Availability,error,error,1087,"Util/Implementations/../Table.h:147: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, int, int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘)’ before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘+’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected unqualified-id before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expect",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:1819,Availability,error,error,1819,"token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘+’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected unqualified-id before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘)’ before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: invalid type in declaration before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColum",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:2011,Availability,error,error,2011,"tations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘+’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected unqualified-id before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘)’ before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: invalid type in declaration before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:2137,Availability,error,error,2137,"/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected unqualified-id before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘)’ before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: invalid type in declaration before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:2551,Availability,error,error,2551,"e/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected unqualified-id before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘)’ before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: invalid type in declaration before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:173: instantiated from here; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: no matching function for call to ‘psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData()’; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:279: note: candidates are: psi::TableData<T>::TableData(const T&, int, int, int, char, ch",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:3285,Availability,error,error,3285,"e.h:251: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: invalid type in declaration before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:173: instantiated from here; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: no matching function for call to ‘psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData()’; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:279: note: candidates are: psi::TableData<T>::TableData(const T&, int, int, int, char, char, char, char) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:189: note: psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData(const psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&); /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:4720,Availability,error,error,4720,"r, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:173: instantiated from here; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: no matching function for call to ‘psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData()’; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:279: note: candidates are: psi::TableData<T>::TableData(const T&, int, int, int, char, char, char, char) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:189: note: psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData(const psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&); /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:174: instantiated from here; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: initializer expression list treated as compound expression; make[2]: **\* [src/lib/libPsiUtil/CMakeFiles/PsiUtil.dir/Implementations/Timer.cc.o] Error 1; make[1]: **\* [src/lib/libPsiUtil/CMakeFiles/PsiUtil.dir/all] Error 2; make: **\* [all] Error 2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:4872,Availability,Error,Error,4872,"r, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:173: instantiated from here; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: no matching function for call to ‘psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData()’; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:279: note: candidates are: psi::TableData<T>::TableData(const T&, int, int, int, char, char, char, char) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:189: note: psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData(const psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&); /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:174: instantiated from here; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: initializer expression list treated as compound expression; make[2]: **\* [src/lib/libPsiUtil/CMakeFiles/PsiUtil.dir/Implementations/Timer.cc.o] Error 1; make[1]: **\* [src/lib/libPsiUtil/CMakeFiles/PsiUtil.dir/all] Error 2; make: **\* [all] Error 2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:4943,Availability,Error,Error,4943,"r, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:173: instantiated from here; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: no matching function for call to ‘psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData()’; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:279: note: candidates are: psi::TableData<T>::TableData(const T&, int, int, int, char, char, char, char) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:189: note: psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData(const psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&); /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:174: instantiated from here; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: initializer expression list treated as compound expression; make[2]: **\* [src/lib/libPsiUtil/CMakeFiles/PsiUtil.dir/Implementations/Timer.cc.o] Error 1; make[1]: **\* [src/lib/libPsiUtil/CMakeFiles/PsiUtil.dir/all] Error 2; make: **\* [all] Error 2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224865906:4969,Availability,Error,Error,4969,"r, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:173: instantiated from here; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: no matching function for call to ‘psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData()’; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:279: note: candidates are: psi::TableData<T>::TableData(const T&, int, int, int, char, char, char, char) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:189: note: psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::TableData(const psi::TableData<psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&); /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:174: instantiated from here; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: initializer expression list treated as compound expression; make[2]: **\* [src/lib/libPsiUtil/CMakeFiles/PsiUtil.dir/Implementations/Timer.cc.o] Error 1; make[1]: **\* [src/lib/libPsiUtil/CMakeFiles/PsiUtil.dir/all] Error 2; make: **\* [all] Error 2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906
https://github.com/psi4/psi4/issues/404#issuecomment-224869764:177,Deployability,update,update,177,"Thank you for your help. I was using intel compiler but its license expired, hence I tried GCC. Now, I see that Intel provides free compilers for open-source developers. I will update my system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224869764
https://github.com/psi4/psi4/pull/405#issuecomment-225004764:96,Testability,benchmark,benchmarks,96,"I've found storing Cholesky vectors on disk is hugely advantageous when running e.g. functional benchmarks. Does the code also handle range-separated functionals? In that case you also need the short-range integrals, and the separation constant may be different between functionals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225004764
https://github.com/psi4/psi4/pull/405#issuecomment-225029668:154,Availability,error,error,154,"@loriab, with the new DMRG changes, I am not able to compile this directory anymore. Hold off on merging. It seems that CheMPS2 has not updated. I get an error that it can't find chemps2/caspt2.h and when I look at the chemps2 directory, there does not exist a CASPT2 file. However, the new CheMPS2 has this include file. . Well, it looks like the new DMRG detection ran into some trouble. I forgot to remove a usr/local instance of libchemps2 that I have not used in a very long time. The cmake build would not build CheMPS2 if it found this library so I believe this was the root of my problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225029668
https://github.com/psi4/psi4/pull/405#issuecomment-225029668:136,Deployability,update,updated,136,"@loriab, with the new DMRG changes, I am not able to compile this directory anymore. Hold off on merging. It seems that CheMPS2 has not updated. I get an error that it can't find chemps2/caspt2.h and when I look at the chemps2 directory, there does not exist a CASPT2 file. However, the new CheMPS2 has this include file. . Well, it looks like the new DMRG detection ran into some trouble. I forgot to remove a usr/local instance of libchemps2 that I have not used in a very long time. The cmake build would not build CheMPS2 if it found this library so I believe this was the root of my problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225029668
https://github.com/psi4/psi4/pull/405#issuecomment-225029668:357,Safety,detect,detection,357,"@loriab, with the new DMRG changes, I am not able to compile this directory anymore. Hold off on merging. It seems that CheMPS2 has not updated. I get an error that it can't find chemps2/caspt2.h and when I look at the chemps2 directory, there does not exist a CASPT2 file. However, the new CheMPS2 has this include file. . Well, it looks like the new DMRG detection ran into some trouble. I forgot to remove a usr/local instance of libchemps2 that I have not used in a very long time. The cmake build would not build CheMPS2 if it found this library so I believe this was the root of my problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225029668
https://github.com/psi4/psi4/pull/405#issuecomment-225905942:65,Availability,fault,fault,65,"By headers you mean DMRG, that problem is fixed. That was my own fault. Everything is ready.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225905942
https://github.com/psi4/psi4/pull/405#issuecomment-225907973:38,Deployability,patch,patching,38,_license_ headers are what still need patching up.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225907973
https://github.com/psi4/psi4/pull/406#issuecomment-226802345:96,Integrability,wrap,wrapper,96,"@edeprince3 @jturney @loriab After playing with it I though the very simple Deriv ""binary"" call wrapper was a bit antagonistic to how we are pushing Psi. I removed this and exported the Deriv library so that python side you now do the following:; - Build a deriv object; - Tweak it; - Ask it to compute a gradient. It is a few more lines python side, but now you can have ultimate control over the deriv object in python as well as C++ without adding a bunch of global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/406#issuecomment-226802345
https://github.com/psi4/psi4/pull/406#issuecomment-226802345:69,Usability,simpl,simple,69,"@edeprince3 @jturney @loriab After playing with it I though the very simple Deriv ""binary"" call wrapper was a bit antagonistic to how we are pushing Psi. I removed this and exported the Deriv library so that python side you now do the following:; - Build a deriv object; - Tweak it; - Ask it to compute a gradient. It is a few more lines python side, but now you can have ultimate control over the deriv object in python as well as C++ without adding a bunch of global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/406#issuecomment-226802345
https://github.com/psi4/psi4/issues/407#issuecomment-225172815:60,Integrability,depend,dependency,60,"Per this [discussion](http://forum.psicode.org/t/numpy-psi4-dependency/199), there was talk of requiring numpy. However, I can't seem to find the announcement of it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225172815
https://github.com/psi4/psi4/issues/407#issuecomment-225173266:78,Deployability,install,install,78,"Many thanks! I do not remember any announcement. Perhaps, I missed it. I have install numpy and psi4 works now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225173266
https://github.com/psi4/psi4/issues/407#issuecomment-225178276:125,Integrability,depend,dependencies-strictly-required-for-building-,125,"Yes, NumPy is officially required at runtime see [here](https://github.com/psi4/psi4/wiki/2_Planning#-what-are-the-tools-and-dependencies-strictly-required-for-building-psi4) for requirement list. We'll accept PRs that rely on NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225178276
https://github.com/psi4/psi4/issues/407#issuecomment-225233909:140,Availability,error,error,140,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909
https://github.com/psi4/psi4/issues/407#issuecomment-225233909:211,Availability,error,error,211,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909
https://github.com/psi4/psi4/issues/407#issuecomment-225233909:153,Deployability,configurat,configuration,153,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909
https://github.com/psi4/psi4/issues/407#issuecomment-225233909:153,Modifiability,config,configuration,153,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909
https://github.com/psi4/psi4/issues/407#issuecomment-225233909:184,Testability,test,tests,184,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909
https://github.com/psi4/psi4/issues/408#issuecomment-225929051:172,Energy Efficiency,energy,energy,172,"Hmm, well thats interesting. Would you mind running the boroxine test case with the DF-MP2 module and post the result? Best way to access this module is to simply request 'energy('MP2')`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225929051
https://github.com/psi4/psi4/issues/408#issuecomment-225929051:131,Security,access,access,131,"Hmm, well thats interesting. Would you mind running the boroxine test case with the DF-MP2 module and post the result? Best way to access this module is to simply request 'energy('MP2')`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225929051
https://github.com/psi4/psi4/issues/408#issuecomment-225929051:65,Testability,test,test,65,"Hmm, well thats interesting. Would you mind running the boroxine test case with the DF-MP2 module and post the result? Best way to access this module is to simply request 'energy('MP2')`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225929051
https://github.com/psi4/psi4/issues/408#issuecomment-225929051:156,Usability,simpl,simply,156,"Hmm, well thats interesting. Would you mind running the boroxine test case with the DF-MP2 module and post the result? Best way to access this module is to simply request 'energy('MP2')`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225929051
https://github.com/psi4/psi4/issues/408#issuecomment-225937045:168,Performance,load,loaded,168,"I've just checked, and all the orbital and fitting basis sets have boron. Could you run with `set print 3`? That should trigger printing of exactly what basis sets are loaded and from where in lines like. ```; => Loading Basis Set <=. Role: BASIS; Keyword: BASIS; Name: STO-3G; atoms 1 entry O line 80 file /home/dsmith/Gits/dgas_psi/share/basis/sto-3g.gbs; atoms 2-3 entry H line 18 file /home/dsmith/Gits/dgas_psi/share/basis/sto-3g.gbs; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225937045
https://github.com/psi4/psi4/issues/408#issuecomment-225937045:213,Performance,Load,Loading,213,"I've just checked, and all the orbital and fitting basis sets have boron. Could you run with `set print 3`? That should trigger printing of exactly what basis sets are loaded and from where in lines like. ```; => Loading Basis Set <=. Role: BASIS; Keyword: BASIS; Name: STO-3G; atoms 1 entry O line 80 file /home/dsmith/Gits/dgas_psi/share/basis/sto-3g.gbs; atoms 2-3 entry H line 18 file /home/dsmith/Gits/dgas_psi/share/basis/sto-3g.gbs; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225937045
https://github.com/psi4/psi4/issues/408#issuecomment-226172089:294,Availability,down,down,294,"For dunning basis sets Psi4 and MOLPRO should be using the same fitting basis set. For 99% of cases Psi will choose the ""correct"" fitting basis, especially for first row atoms and Dunning orbital bases. The differences are still a bit larger than I am comfortable with so id like to track this down. Can you post the MOLPRO output as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-226172089
https://github.com/psi4/psi4/issues/408#issuecomment-226272722:184,Energy Efficiency,energy,energy,184,"@dgasmith Here's the MOLPRO output; [dfmp2.out.txt](https://github.com/psi4/psi4/files/316840/dfmp2.out.txt). @bozkaya Here's the output for DFOCC. Interestingly, the canonical DF-MP2 energy is now -603.599 (which is close to the MOLPRO value). The DF-OMP2 energy reported is -603.628; [dfomp2.out.txt](https://github.com/psi4/psi4/files/316848/dfomp2.out.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-226272722
https://github.com/psi4/psi4/issues/408#issuecomment-226272722:257,Energy Efficiency,energy,energy,257,"@dgasmith Here's the MOLPRO output; [dfmp2.out.txt](https://github.com/psi4/psi4/files/316840/dfmp2.out.txt). @bozkaya Here's the output for DFOCC. Interestingly, the canonical DF-MP2 energy is now -603.599 (which is close to the MOLPRO value). The DF-OMP2 energy reported is -603.628; [dfomp2.out.txt](https://github.com/psi4/psi4/files/316848/dfomp2.out.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-226272722
https://github.com/psi4/psi4/issues/408#issuecomment-226325532:402,Availability,error,error,402,"Forgot that MOLPRO used non-augmented basis sets always for HF. Switching to `cc-pvtz-jkfit` we get:. ```; MOLPRO: -601.627052047; Psi4: -601.627052093; ```. Much better!. Now the MP2 issues comes due to the fact that Psi4 was enforcing symmetry while MOLPRO was not. Running both Psi4 and MOLPRO in C1 symmetry returns the following:. ```; MOLPRO: -603.5988606; Psi4: -603.5988594; ```. So an overall error of `1e-6`, roughly on the order of the convergence thresholds. So there is some kind of symmetry breaking operation going on here. Could be physical or could be a bug. If I recall correctly @bozkaya's code is not ""symmetry tolerant"" so it forces C1 symmetry from the start. This would explain why DFOCC is returning a result close to MOLPRO, the different SCF fitting basis sets would explain the rest. . Short version: Its a symmetry issue, specify C1 symmetry and it should fix the errors that you see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-226325532
https://github.com/psi4/psi4/issues/408#issuecomment-226325532:631,Availability,toler,tolerant,631,"Forgot that MOLPRO used non-augmented basis sets always for HF. Switching to `cc-pvtz-jkfit` we get:. ```; MOLPRO: -601.627052047; Psi4: -601.627052093; ```. Much better!. Now the MP2 issues comes due to the fact that Psi4 was enforcing symmetry while MOLPRO was not. Running both Psi4 and MOLPRO in C1 symmetry returns the following:. ```; MOLPRO: -603.5988606; Psi4: -603.5988594; ```. So an overall error of `1e-6`, roughly on the order of the convergence thresholds. So there is some kind of symmetry breaking operation going on here. Could be physical or could be a bug. If I recall correctly @bozkaya's code is not ""symmetry tolerant"" so it forces C1 symmetry from the start. This would explain why DFOCC is returning a result close to MOLPRO, the different SCF fitting basis sets would explain the rest. . Short version: Its a symmetry issue, specify C1 symmetry and it should fix the errors that you see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-226325532
https://github.com/psi4/psi4/issues/408#issuecomment-226325532:892,Availability,error,errors,892,"Forgot that MOLPRO used non-augmented basis sets always for HF. Switching to `cc-pvtz-jkfit` we get:. ```; MOLPRO: -601.627052047; Psi4: -601.627052093; ```. Much better!. Now the MP2 issues comes due to the fact that Psi4 was enforcing symmetry while MOLPRO was not. Running both Psi4 and MOLPRO in C1 symmetry returns the following:. ```; MOLPRO: -603.5988606; Psi4: -603.5988594; ```. So an overall error of `1e-6`, roughly on the order of the convergence thresholds. So there is some kind of symmetry breaking operation going on here. Could be physical or could be a bug. If I recall correctly @bozkaya's code is not ""symmetry tolerant"" so it forces C1 symmetry from the start. This would explain why DFOCC is returning a result close to MOLPRO, the different SCF fitting basis sets would explain the rest. . Short version: Its a symmetry issue, specify C1 symmetry and it should fix the errors that you see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-226325532
https://github.com/psi4/psi4/pull/409#issuecomment-225985713:112,Deployability,Upgrade,Upgrade,112,"As a matter of fact, I was confused too :smile: What is the policy you plan on following for external projects? Upgrade the `GIT_TAG` anytime the external project is updated or a more conservative approach? I assumed the latter, hence the lack of changes in Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225985713
https://github.com/psi4/psi4/pull/409#issuecomment-225985713:166,Deployability,update,updated,166,"As a matter of fact, I was confused too :smile: What is the policy you plan on following for external projects? Upgrade the `GIT_TAG` anytime the external project is updated or a more conservative approach? I assumed the latter, hence the lack of changes in Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225985713
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:91,Availability,down,down,91,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:1675,Availability,avail,available,1675,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:452,Deployability,release,release,452,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:1039,Deployability,release,release,1039,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:1849,Deployability,install,installs,1849,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:818,Integrability,interface,interface,818,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:1510,Integrability,interface,interface,1510,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:590,Modifiability,plugin,plugins,590,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:1247,Modifiability,plugin,plugins,1247,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:1570,Testability,test,tests,1570,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-225993854:355,Usability,clear,clear,355,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854
https://github.com/psi4/psi4/pull/409#issuecomment-226109331:161,Testability,test,test,161,"@loriab The external projects versioning policy is clear, but I am still confused. Am I not doing (1)? It is no problem for me to take care of fixing Psi4 build/test for new PCMSolver version and then let you know _via_ a PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226109331
https://github.com/psi4/psi4/pull/409#issuecomment-226109331:51,Usability,clear,clear,51,"@loriab The external projects versioning policy is clear, but I am still confused. Am I not doing (1)? It is no problem for me to take care of fixing Psi4 build/test for new PCMSolver version and then let you know _via_ a PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226109331
https://github.com/psi4/psi4/pull/409#issuecomment-226419237:207,Safety,safe,safer,207,"@loriab OK, cool. I am now wondering how the problem came to be in the first place. Is the conda builder automatically checking out the latest commit from PCMSolver's own GitHub repository? It might then be safer (and save you some headaches) to hook it up to a given tag or commit you know works with Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226419237
https://github.com/psi4/psi4/pull/409#issuecomment-226555751:577,Safety,detect,detected,577,"The problem came about just because, in parallel, I'm (i) learning to build Mac conda packages for the half-dozen add-ons, (ii) bumping all the add-ons to their latest tag, (iii) determining a good package set (boost, libgcc, etc.) for a full-featured psi4 Mac binary for both users and developers, and (iv) trying out some new conda packaging and distribution tools. The conda package _does_ point to a git tag (hopefully the same git tag as in psi4's externalproject), but I had bumped the conda tag to `1.1.2`, got the conda pkg working, then fixed up psi4 to work with the detected conda pkg. Unfortunately, by the time I worked through some library issues and tried to build pcmsolver internally to psi4, with the `int` fix, I had forgotten the tagging details, leading to this whole mistaken first place. :-). So yes, in future when someone informs me of a new version or bumps the externalproject tag, I'll bump the conda tags in sync.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226555751
https://github.com/psi4/psi4/pull/409#issuecomment-226555751:58,Usability,learn,learning,58,"The problem came about just because, in parallel, I'm (i) learning to build Mac conda packages for the half-dozen add-ons, (ii) bumping all the add-ons to their latest tag, (iii) determining a good package set (boost, libgcc, etc.) for a full-featured psi4 Mac binary for both users and developers, and (iv) trying out some new conda packaging and distribution tools. The conda package _does_ point to a git tag (hopefully the same git tag as in psi4's externalproject), but I had bumped the conda tag to `1.1.2`, got the conda pkg working, then fixed up psi4 to work with the detected conda pkg. Unfortunately, by the time I worked through some library issues and tried to build pcmsolver internally to psi4, with the `int` fix, I had forgotten the tagging details, leading to this whole mistaken first place. :-). So yes, in future when someone informs me of a new version or bumps the externalproject tag, I'll bump the conda tags in sync.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226555751
https://github.com/psi4/psi4/issues/410#issuecomment-226000498:165,Deployability,install,installation,165,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498
https://github.com/psi4/psi4/issues/410#issuecomment-226000498:223,Deployability,install,installed,223,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498
https://github.com/psi4/psi4/issues/410#issuecomment-226000498:315,Deployability,install,installed,315,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498
https://github.com/psi4/psi4/issues/410#issuecomment-226000498:378,Deployability,install,installed,378,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498
https://github.com/psi4/psi4/issues/410#issuecomment-226000498:721,Deployability,patch,patch,721,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498
https://github.com/psi4/psi4/issues/410#issuecomment-226000498:812,Deployability,install,install,812,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498
https://github.com/psi4/psi4/issues/410#issuecomment-226000498:362,Modifiability,plugin,plugins,362,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498
https://github.com/psi4/psi4/issues/410#issuecomment-226000498:632,Modifiability,plugin,plugin,632,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498
https://github.com/psi4/psi4/issues/410#issuecomment-226000498:775,Modifiability,plugin,plugin,775,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498
https://github.com/psi4/psi4/issues/410#issuecomment-226000498:864,Modifiability,plugin,plugins,864,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498
https://github.com/psi4/psi4/issues/410#issuecomment-226007667:300,Deployability,install,installed,300,"Ooh, I like option 2. Thanks for the suggestion! I guess most other packages don't have this problem because they don't generate Makefiles for you. Another solution could be using a relative path so that it always finds the include files relative to the binary, regardless of whether or not they are installed. I guess it depends on how you guys want users to run things. But I think in general, most users will be confused by the current behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226007667
https://github.com/psi4/psi4/issues/410#issuecomment-226007667:322,Integrability,depend,depends,322,"Ooh, I like option 2. Thanks for the suggestion! I guess most other packages don't have this problem because they don't generate Makefiles for you. Another solution could be using a relative path so that it always finds the include files relative to the binary, regardless of whether or not they are installed. I guess it depends on how you guys want users to run things. But I think in general, most users will be confused by the current behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226007667
https://github.com/psi4/psi4/issues/410#issuecomment-227006245:253,Deployability,install,installed,253,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245
https://github.com/psi4/psi4/issues/410#issuecomment-227006245:515,Deployability,install,install,515,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245
https://github.com/psi4/psi4/issues/410#issuecomment-227006245:132,Integrability,depend,dependency,132,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245
https://github.com/psi4/psi4/issues/410#issuecomment-227006245:291,Modifiability,plugin,plugins,291,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245
https://github.com/psi4/psi4/issues/410#issuecomment-227006245:421,Modifiability,plugin,plugins,421,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245
https://github.com/psi4/psi4/issues/410#issuecomment-227006245:523,Modifiability,plugin,plugins,523,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245
https://github.com/psi4/psi4/issues/410#issuecomment-227006245:279,Security,access,accessed,279,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245
https://github.com/psi4/psi4/issues/410#issuecomment-227006245:435,Security,access,access,435,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245
https://github.com/psi4/psi4/issues/410#issuecomment-227006245:544,Security,access,access,544,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245
https://github.com/psi4/psi4/issues/411#issuecomment-226007585:102,Modifiability,plugin,plugins,102,"@loriab @adamjstewart I think there is some mpi enabled code in gtfock, and I know that you can write plugins that use mpi, Ashutosh and I played around with that a little last year. In general though I don't think it really gets you that much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226007585
https://github.com/psi4/psi4/issues/411#issuecomment-226008003:36,Deployability,install,installation,36,"Anyway, does this look like a Boost installation problem? If so I would certainly want to fix that for my other users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226008003
https://github.com/psi4/psi4/issues/411#issuecomment-226015782:1674,Availability,error,error,1674,"Hmm, the build with internal Boost failed for other reasons. Nothing was printed to STDOUT, but the `$build-dir/CMakeFiles/CmakeError.log` file contains:. ```; Determining if the function MKL_Free_Buffers exists failed with the following output:; Change Dir: /scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp. Run Build Command:""/usr/bin/gmake"" ""cmTC_13b4e/fast""; /usr/bin/gmake -f CMakeFiles/cmTC_13b4e.dir/build.make CMakeFiles/cmTC_13b4e.dir/build; gmake[1]: Entering directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers -o CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -c /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/share/cmake-3.5/Modules/CheckFunctionExists.c; Linking C executable cmTC_13b4e; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/bin/cmake -E cmake_link_script CMakeFiles/cmTC_13b4e.dir/link.txt --verbose=1; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -o cmTC_13b4e -rdynamic; CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o: In function `main':; CheckFunctionExists.c:(.text+0x15): undefined reference to `MKL_Free_Buffers'; collect2: error: ld returned 1 exit status; gmake[1]: *** [cmTC_13b4e] Error 1; gmake[1]: Leaving directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; gmake: *** [cmTC_13b4e/fast] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226015782
https://github.com/psi4/psi4/issues/411#issuecomment-226015782:1735,Availability,Error,Error,1735,"Hmm, the build with internal Boost failed for other reasons. Nothing was printed to STDOUT, but the `$build-dir/CMakeFiles/CmakeError.log` file contains:. ```; Determining if the function MKL_Free_Buffers exists failed with the following output:; Change Dir: /scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp. Run Build Command:""/usr/bin/gmake"" ""cmTC_13b4e/fast""; /usr/bin/gmake -f CMakeFiles/cmTC_13b4e.dir/build.make CMakeFiles/cmTC_13b4e.dir/build; gmake[1]: Entering directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers -o CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -c /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/share/cmake-3.5/Modules/CheckFunctionExists.c; Linking C executable cmTC_13b4e; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/bin/cmake -E cmake_link_script CMakeFiles/cmTC_13b4e.dir/link.txt --verbose=1; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -o cmTC_13b4e -rdynamic; CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o: In function `main':; CheckFunctionExists.c:(.text+0x15): undefined reference to `MKL_Free_Buffers'; collect2: error: ld returned 1 exit status; gmake[1]: *** [cmTC_13b4e] Error 1; gmake[1]: Leaving directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; gmake: *** [cmTC_13b4e/fast] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226015782
https://github.com/psi4/psi4/issues/411#issuecomment-226015782:1895,Availability,Error,Error,1895,"Hmm, the build with internal Boost failed for other reasons. Nothing was printed to STDOUT, but the `$build-dir/CMakeFiles/CmakeError.log` file contains:. ```; Determining if the function MKL_Free_Buffers exists failed with the following output:; Change Dir: /scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp. Run Build Command:""/usr/bin/gmake"" ""cmTC_13b4e/fast""; /usr/bin/gmake -f CMakeFiles/cmTC_13b4e.dir/build.make CMakeFiles/cmTC_13b4e.dir/build; gmake[1]: Entering directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers -o CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -c /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/share/cmake-3.5/Modules/CheckFunctionExists.c; Linking C executable cmTC_13b4e; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/bin/cmake -E cmake_link_script CMakeFiles/cmTC_13b4e.dir/link.txt --verbose=1; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -o cmTC_13b4e -rdynamic; CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o: In function `main':; CheckFunctionExists.c:(.text+0x15): undefined reference to `MKL_Free_Buffers'; collect2: error: ld returned 1 exit status; gmake[1]: *** [cmTC_13b4e] Error 1; gmake[1]: Leaving directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; gmake: *** [cmTC_13b4e/fast] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226015782
https://github.com/psi4/psi4/issues/411#issuecomment-226015782:134,Testability,log,log,134,"Hmm, the build with internal Boost failed for other reasons. Nothing was printed to STDOUT, but the `$build-dir/CMakeFiles/CmakeError.log` file contains:. ```; Determining if the function MKL_Free_Buffers exists failed with the following output:; Change Dir: /scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp. Run Build Command:""/usr/bin/gmake"" ""cmTC_13b4e/fast""; /usr/bin/gmake -f CMakeFiles/cmTC_13b4e.dir/build.make CMakeFiles/cmTC_13b4e.dir/build; gmake[1]: Entering directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers -o CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -c /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/share/cmake-3.5/Modules/CheckFunctionExists.c; Linking C executable cmTC_13b4e; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/bin/cmake -E cmake_link_script CMakeFiles/cmTC_13b4e.dir/link.txt --verbose=1; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -o cmTC_13b4e -rdynamic; CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o: In function `main':; CheckFunctionExists.c:(.text+0x15): undefined reference to `MKL_Free_Buffers'; collect2: error: ld returned 1 exit status; gmake[1]: *** [cmTC_13b4e] Error 1; gmake[1]: Leaving directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; gmake: *** [cmTC_13b4e/fast] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226015782
https://github.com/psi4/psi4/issues/411#issuecomment-226016541:127,Availability,down,down,127,I also tried building an external Boost version 1.57.0 but that build failed for some reason and I don't feel like tracking it down.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226016541
https://github.com/psi4/psi4/issues/411#issuecomment-226018652:105,Availability,error,error,105,"The parallel work in Psi4 was in an Intel development environment, and with that `MKL` reference in your error, looks like that might have been hard-coded. If you don't have MKL to build against, you could also consider the binary that has high-quality math libs baked in (but does have processor optimizations turned off, which may or may not be relevant depending on the age/homogeneity of your HPC env).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226018652
https://github.com/psi4/psi4/issues/411#issuecomment-226018652:356,Integrability,depend,depending,356,"The parallel work in Psi4 was in an Intel development environment, and with that `MKL` reference in your error, looks like that might have been hard-coded. If you don't have MKL to build against, you could also consider the binary that has high-quality math libs baked in (but does have processor optimizations turned off, which may or may not be relevant depending on the age/homogeneity of your HPC env).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226018652
https://github.com/psi4/psi4/issues/411#issuecomment-226018652:297,Performance,optimiz,optimizations,297,"The parallel work in Psi4 was in an Intel development environment, and with that `MKL` reference in your error, looks like that might have been hard-coded. If you don't have MKL to build against, you could also consider the binary that has high-quality math libs baked in (but does have processor optimizations turned off, which may or may not be relevant depending on the age/homogeneity of your HPC env).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226018652
https://github.com/psi4/psi4/issues/415#issuecomment-227061602:28,Deployability,install,install,28,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602
https://github.com/psi4/psi4/issues/415#issuecomment-227061602:134,Deployability,install,install,134,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602
https://github.com/psi4/psi4/issues/415#issuecomment-227061602:684,Deployability,install,install,684,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602
https://github.com/psi4/psi4/issues/415#issuecomment-227061602:791,Deployability,install,install,791,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602
https://github.com/psi4/psi4/issues/415#issuecomment-227061602:333,Integrability,depend,dependent,333,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602
https://github.com/psi4/psi4/issues/415#issuecomment-227061602:579,Integrability,message,message,579,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602
https://github.com/psi4/psi4/issues/415#issuecomment-227061602:284,Modifiability,config,configure,284,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602
https://github.com/psi4/psi4/issues/415#issuecomment-227061602:541,Modifiability,Config,Configuring,541,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602
https://github.com/psi4/psi4/issues/416#issuecomment-2254445245:115,Deployability,install,install,115,"Hi,; Please, if possible, kindly let me ask a question as follows:. Recently, I lost my Psi4 code and had to again install its newest version 1.9.1 through ""Conda-Forge"". Moreover, I did build a scratch folder for Psi4 in the Home directory and its path was truly included in "".bashrc""; i.e.; export PATH=/home/saeed/miniconda3/bin:$PATH; export PSI_SCRATCH=/home/saeed/Scratch_PSI4. When a given Psi4 task is ran, the scratch folder is filled and empty alternately. But, after finishing calculations, this folder remains full and there are several files in it that must be deleted manually, while there was no such problem before. Please also let me state that the problem mentioned above only exists for ""CBS-extrapolations"" calculations while ""SAPT"" calculations are never encountered such a problem. Could you please let me know how I can resolve this problem so that this folder, when a task is over, to be emptied automatically as before?. In advance, too many thanks for your highly valuable guidance. Sincerely,; Saeed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/416#issuecomment-2254445245
https://github.com/psi4/psi4/issues/416#issuecomment-2254445245:999,Usability,guid,guidance,999,"Hi,; Please, if possible, kindly let me ask a question as follows:. Recently, I lost my Psi4 code and had to again install its newest version 1.9.1 through ""Conda-Forge"". Moreover, I did build a scratch folder for Psi4 in the Home directory and its path was truly included in "".bashrc""; i.e.; export PATH=/home/saeed/miniconda3/bin:$PATH; export PSI_SCRATCH=/home/saeed/Scratch_PSI4. When a given Psi4 task is ran, the scratch folder is filled and empty alternately. But, after finishing calculations, this folder remains full and there are several files in it that must be deleted manually, while there was no such problem before. Please also let me state that the problem mentioned above only exists for ""CBS-extrapolations"" calculations while ""SAPT"" calculations are never encountered such a problem. Could you please let me know how I can resolve this problem so that this folder, when a task is over, to be emptied automatically as before?. In advance, too many thanks for your highly valuable guidance. Sincerely,; Saeed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/416#issuecomment-2254445245
https://github.com/psi4/psi4/issues/417#issuecomment-230429532:0,Testability,test,tested,0,tested with 1.0rc2 and pcmsolver 1.1.3 and works fine again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/417#issuecomment-230429532
https://github.com/psi4/psi4/issues/419#issuecomment-227780765:171,Modifiability,plugin,plugin,171,I can't explain why the second instance is not reading the orbitals. A couple of quick tests that would be useful: a) does adding `set guess read` before the call to your plugin (and after the SCF call) change the behavior? and b) does the same thing happen if you call SCF instead of your plugin on the second function call?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227780765
https://github.com/psi4/psi4/issues/419#issuecomment-227780765:290,Modifiability,plugin,plugin,290,I can't explain why the second instance is not reading the orbitals. A couple of quick tests that would be useful: a) does adding `set guess read` before the call to your plugin (and after the SCF call) change the behavior? and b) does the same thing happen if you call SCF instead of your plugin on the second function call?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227780765
https://github.com/psi4/psi4/issues/419#issuecomment-227780765:87,Testability,test,tests,87,I can't explain why the second instance is not reading the orbitals. A couple of quick tests that would be useful: a) does adding `set guess read` before the call to your plugin (and after the SCF call) change the behavior? and b) does the same thing happen if you call SCF instead of your plugin on the second function call?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227780765
https://github.com/psi4/psi4/issues/419#issuecomment-227802600:226,Availability,error,error,226,"To answer your first question: `set guess read` does fix this problem. . I can not pass a wavefunction to a second scf call. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf', ref_wfn=refwfn) ; ```. I get an error that scf_helper can not take a wavefunction. Not sure if this is what you wanted me to do. If I run two scf calls. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf'); ```. This works fine. This has the same effect as set guess read, so I guess there is a check to see if a previous scf has ran. . So it seems that there is no problem with reading the orbitals, but passing them seems to be off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227802600
https://github.com/psi4/psi4/issues/419#issuecomment-227802600:147,Energy Efficiency,energy,energy,147,"To answer your first question: `set guess read` does fix this problem. . I can not pass a wavefunction to a second scf call. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf', ref_wfn=refwfn) ; ```. I get an error that scf_helper can not take a wavefunction. Not sure if this is what you wanted me to do. If I run two scf calls. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf'); ```. This works fine. This has the same effect as set guess read, so I guess there is a check to see if a previous scf has ran. . So it seems that there is no problem with reading the orbitals, but passing them seems to be off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227802600
https://github.com/psi4/psi4/issues/419#issuecomment-227802600:180,Energy Efficiency,energy,energy,180,"To answer your first question: `set guess read` does fix this problem. . I can not pass a wavefunction to a second scf call. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf', ref_wfn=refwfn) ; ```. I get an error that scf_helper can not take a wavefunction. Not sure if this is what you wanted me to do. If I run two scf calls. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf'); ```. This works fine. This has the same effect as set guess read, so I guess there is a check to see if a previous scf has ran. . So it seems that there is no problem with reading the orbitals, but passing them seems to be off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227802600
https://github.com/psi4/psi4/issues/419#issuecomment-227802600:369,Energy Efficiency,energy,energy,369,"To answer your first question: `set guess read` does fix this problem. . I can not pass a wavefunction to a second scf call. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf', ref_wfn=refwfn) ; ```. I get an error that scf_helper can not take a wavefunction. Not sure if this is what you wanted me to do. If I run two scf calls. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf'); ```. This works fine. This has the same effect as set guess read, so I guess there is a check to see if a previous scf has ran. . So it seems that there is no problem with reading the orbitals, but passing them seems to be off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227802600
https://github.com/psi4/psi4/issues/419#issuecomment-227802600:402,Energy Efficiency,energy,energy,402,"To answer your first question: `set guess read` does fix this problem. . I can not pass a wavefunction to a second scf call. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf', ref_wfn=refwfn) ; ```. I get an error that scf_helper can not take a wavefunction. Not sure if this is what you wanted me to do. If I run two scf calls. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf'); ```. This works fine. This has the same effect as set guess read, so I guess there is a check to see if a previous scf has ran. . So it seems that there is no problem with reading the orbitals, but passing them seems to be off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227802600
https://github.com/psi4/psi4/issues/419#issuecomment-227828506:14,Availability,error,error,14,"Just like the error message warns, SCF is not set up to restart from a wavefunction because there's need-to-project?, need-to-orthogonalize?, etc. issues that have to be handled. The wavefunction passing is set up to the level that the old `bypass_scf` kwarg handled. That is, a _completed_ scf_wfn can be passed into CC, CI, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227828506
https://github.com/psi4/psi4/issues/419#issuecomment-227828506:20,Integrability,message,message,20,"Just like the error message warns, SCF is not set up to restart from a wavefunction because there's need-to-project?, need-to-orthogonalize?, etc. issues that have to be handled. The wavefunction passing is set up to the level that the old `bypass_scf` kwarg handled. That is, a _completed_ scf_wfn can be passed into CC, CI, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227828506
https://github.com/psi4/psi4/issues/419#issuecomment-254358092:171,Usability,clear,clear,171,"Mostly fixed in #481. As SCF is a special case of Wavefunction its not as easy as passing in a new Wavefunction as the order of precedence for occupations is not entirely clear (multiple user defines, options, and reference wavefunction). . For now you can use the new HF setter `guess_Ca/Cb` to set the occupied ""guess"" orbitals before SCF iterations. See `scf_helper` in proc.py for examples. Orbital ordering can be modified using the Matrix rotate_columns command. You can force occupations by setting DOCC/SOCC as they will now be respected in all instances. I will open a ticket shortly detailing the issues with the current SCF occupation scheme to see if anyone would like to come up with a better way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-254358092
https://github.com/psi4/psi4/issues/420#issuecomment-227920484:161,Energy Efficiency,schedul,scheduled,161,"In general, psi4 is `DOCC`/`SOCC` _or_ `guess`. That is, guess won't respect DOCC/SOCC. Good point that this could be better documented. Actually fixing this is scheduled for further development of the Wavefunction object.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/420#issuecomment-227920484
https://github.com/psi4/psi4/issues/420#issuecomment-227933710:154,Testability,test,test,154,Maybe soscf (http://psicode.org/psi4manual/master/autodir_options_c/module__scf.html#soscf) as in https://github.com/psi4/psi4/blob/master/samples/soscf2/test.in,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/420#issuecomment-227933710
https://github.com/psi4/psi4/pull/422#issuecomment-227951470:59,Modifiability,inherit,inherit,59,"The PR also implements damping for UKS, because UKS should inherit the UHF damp_update() method.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-227951470
https://github.com/psi4/psi4/pull/422#issuecomment-228439151:164,Availability,error,error,164,"A little worried damping is not being applied correctly. We build JK matrices from C matrices and not the density, the only time the density is used is in the DIIS error vector and for the energy. We probably need to scale the Fock matrices as well. @jturney @andysim Did I miss something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228439151
https://github.com/psi4/psi4/pull/422#issuecomment-228439151:189,Energy Efficiency,energy,energy,189,"A little worried damping is not being applied correctly. We build JK matrices from C matrices and not the density, the only time the density is used is in the DIIS error vector and for the energy. We probably need to scale the Fock matrices as well. @jturney @andysim Did I miss something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228439151
https://github.com/psi4/psi4/pull/422#issuecomment-228449211:39,Deployability,patch,patch,39,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211
https://github.com/psi4/psi4/pull/422#issuecomment-228449211:200,Energy Efficiency,adapt,adapted,200,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211
https://github.com/psi4/psi4/pull/422#issuecomment-228449211:212,Integrability,rout,routines,212,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211
https://github.com/psi4/psi4/pull/422#issuecomment-228449211:200,Modifiability,adapt,adapted,200,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211
https://github.com/psi4/psi4/issues/423#issuecomment-228262188:2,Testability,test,test,2,A test case is attached. [input.txt](https://github.com/psi4/psi4/files/331251/input.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/423#issuecomment-228262188
https://github.com/psi4/psi4/issues/424#issuecomment-228589387:191,Safety,avoid,avoid,191,"Yes, I know but that's not what I mean. When I start the PSI calculation, the system has 122 GB of free RAM. Yet PSI causes it to start swapping (nothing else is running on it) and I want to avoid that. So, how does PSI handle the `memory` line? What does it do when opening its large files? Do you use the `POSIX_FADV_DONTNEED` flag on those files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-228589387
https://github.com/psi4/psi4/issues/424#issuecomment-228791186:517,Performance,cache,cache,517,"When you say that the memory usage doesn't go above 70%, what do you mean precisely, and how is it measured? `vmstat -S M` during a run may help us see the breakdown of memory usage a bit. I think the concern is that when using large files, the OS will try to keep (parts of) the files in memory for faster access later. Then these pages may get swapped (or just having them in memory causes other things to get swapped). I'm not sure if/why the kernel would choose to swap rather than free some memory from the page cache (cached data is already on a disk...), but I'm far from a kernel memory expert. Last note: Psi4 is mostly written in C++, and therefore can't always use `posix_fadvise`, since there's no (standard) way to get a `FILE*` or file descriptor from an `std::fstream`. Others can comment about how memory management in psi4 works, but I think it is pretty rudimentary and doesn't interact with the OS at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-228791186
https://github.com/psi4/psi4/issues/424#issuecomment-228791186:524,Performance,cache,cached,524,"When you say that the memory usage doesn't go above 70%, what do you mean precisely, and how is it measured? `vmstat -S M` during a run may help us see the breakdown of memory usage a bit. I think the concern is that when using large files, the OS will try to keep (parts of) the files in memory for faster access later. Then these pages may get swapped (or just having them in memory causes other things to get swapped). I'm not sure if/why the kernel would choose to swap rather than free some memory from the page cache (cached data is already on a disk...), but I'm far from a kernel memory expert. Last note: Psi4 is mostly written in C++, and therefore can't always use `posix_fadvise`, since there's no (standard) way to get a `FILE*` or file descriptor from an `std::fstream`. Others can comment about how memory management in psi4 works, but I think it is pretty rudimentary and doesn't interact with the OS at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-228791186
https://github.com/psi4/psi4/issues/424#issuecomment-228791186:307,Security,access,access,307,"When you say that the memory usage doesn't go above 70%, what do you mean precisely, and how is it measured? `vmstat -S M` during a run may help us see the breakdown of memory usage a bit. I think the concern is that when using large files, the OS will try to keep (parts of) the files in memory for faster access later. Then these pages may get swapped (or just having them in memory causes other things to get swapped). I'm not sure if/why the kernel would choose to swap rather than free some memory from the page cache (cached data is already on a disk...), but I'm far from a kernel memory expert. Last note: Psi4 is mostly written in C++, and therefore can't always use `posix_fadvise`, since there's no (standard) way to get a `FILE*` or file descriptor from an `std::fstream`. Others can comment about how memory management in psi4 works, but I think it is pretty rudimentary and doesn't interact with the OS at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-228791186
https://github.com/psi4/psi4/issues/424#issuecomment-274321046:159,Safety,avoid,avoid,159,I don't have access any more to large memory systems and I haven't found the time to look at more recent version of PSI4. Yet the concern remains: you want to avoid that a system starts swapping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-274321046
https://github.com/psi4/psi4/issues/424#issuecomment-274321046:13,Security,access,access,13,I don't have access any more to large memory systems and I haven't found the time to look at more recent version of PSI4. Yet the concern remains: you want to avoid that a system starts swapping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-274321046
https://github.com/psi4/psi4/pull/426#issuecomment-228502764:32,Deployability,patch,patching,32,"Glad it's out there. Needs some patching up, will do in another pass. . -Daniel Smith; Sent from my iPhone. . > On Jun 24, 2016, at 22:04, Lori A. Burns notifications@github.com wrote:; > ; > @dgasmith, n-body docs now show up – http://psicode.org/psi4manual/master/nbody.html; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/426#issuecomment-228502764
https://github.com/psi4/psi4/issues/428#issuecomment-229627679:19,Availability,fault,fault,19,I got it. It is my fault. I comment out the wrong line):. @loriab,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/428#issuecomment-229627679
https://github.com/psi4/psi4/pull/432#issuecomment-230565713:220,Availability,down,down,220,"Cool, this should give us a base to start playing around with automatic rigid body optimizations. . Also note you can do `git pull --rebase upstream master` to rebase in the master branch of upstream. This will help cut down on the number of merges that happen. You can always fall back to merging if needed of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230565713
https://github.com/psi4/psi4/pull/432#issuecomment-230565713:83,Performance,optimiz,optimizations,83,"Cool, this should give us a base to start playing around with automatic rigid body optimizations. . Also note you can do `git pull --rebase upstream master` to rebase in the master branch of upstream. This will help cut down on the number of merges that happen. You can always fall back to merging if needed of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230565713
https://github.com/psi4/psi4/pull/432#issuecomment-230573225:477,Availability,down,down,477,"Thanks, will do in the future. Let me know if/when you hit snags using; this tool. It think it is far enough along that I should be able to solve; problems.; -Rollin. On Tue, Jul 5, 2016 at 1:42 PM, Daniel Smith notifications@github.com; wrote:. > Cool, this should give us a base to start playing around with automatic; > rigid body optimizations.; > ; > Also note you can do git pull --rebase upstream master to rebase in the; > master branch of upstream. This will help cut down on the number of merges; > that happen. You can always fall back to merging if needed of course.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/432#issuecomment-230565713, or mute; > the thread; > https://github.com/notifications/unsubscribe/ADguTBNCfxO8XJ3qFYJTy2GsyG5LBgPOks5qSqV4gaJpZM4JDw7x; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230573225
https://github.com/psi4/psi4/pull/432#issuecomment-230573225:334,Performance,optimiz,optimizations,334,"Thanks, will do in the future. Let me know if/when you hit snags using; this tool. It think it is far enough along that I should be able to solve; problems.; -Rollin. On Tue, Jul 5, 2016 at 1:42 PM, Daniel Smith notifications@github.com; wrote:. > Cool, this should give us a base to start playing around with automatic; > rigid body optimizations.; > ; > Also note you can do git pull --rebase upstream master to rebase in the; > master branch of upstream. This will help cut down on the number of merges; > that happen. You can always fall back to merging if needed of course.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/432#issuecomment-230565713, or mute; > the thread; > https://github.com/notifications/unsubscribe/ADguTBNCfxO8XJ3qFYJTy2GsyG5LBgPOks5qSqV4gaJpZM4JDw7x; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230573225
https://github.com/psi4/psi4/pull/432#issuecomment-230635317:14,Deployability,Update,Update,14,Sounds great. Update the branch and I'll pull this in.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230635317
https://github.com/psi4/psi4/pull/433#issuecomment-232994845:20,Energy Efficiency,ENERGY,ENERGY,20,"Before, ""SAPT0 DISP ENERGY"" did not match ""SAPT DISP ENERGY"" for a SAPT0 job. Now, the values are identical.; [waterdim_oldsatpvar.txt](https://github.com/psi4/psi4/files/366399/waterdim_oldsatpvar.txt); [waterdim_newsaptvar.txt](https://github.com/psi4/psi4/files/366400/waterdim_newsaptvar.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433#issuecomment-232994845
https://github.com/psi4/psi4/pull/433#issuecomment-232994845:53,Energy Efficiency,ENERGY,ENERGY,53,"Before, ""SAPT0 DISP ENERGY"" did not match ""SAPT DISP ENERGY"" for a SAPT0 job. Now, the values are identical.; [waterdim_oldsatpvar.txt](https://github.com/psi4/psi4/files/366399/waterdim_oldsatpvar.txt); [waterdim_newsaptvar.txt](https://github.com/psi4/psi4/files/366400/waterdim_newsaptvar.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/433#issuecomment-232994845
https://github.com/psi4/psi4/pull/436#issuecomment-230487517:27,Modifiability,plugin,plugin,27,"Good catch. Yes, the ambit plugin wasn't even doing anything with ambit until c274b18e825bff404cd828c39fa3f840be6d9579. Please switch the check from `AMBIT_FOUND` to `ENABLE_AMBIT`, as that will catch both detect-external and build-internal ambits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230487517
https://github.com/psi4/psi4/pull/436#issuecomment-230487517:206,Safety,detect,detect-external,206,"Good catch. Yes, the ambit plugin wasn't even doing anything with ambit until c274b18e825bff404cd828c39fa3f840be6d9579. Please switch the check from `AMBIT_FOUND` to `ENABLE_AMBIT`, as that will catch both detect-external and build-internal ambits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230487517
https://github.com/psi4/psi4/pull/436#issuecomment-230519138:8,Availability,failure,failure,8,"the one failure is just our old friend `stability1`, so merging anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230519138
https://github.com/psi4/psi4/pull/436#issuecomment-230519769:23,Testability,test,tests,23,@loriab do you run the tests with Intel MPI at one point? They're failing here for me because CMake picks `mpiexec` over `mpirun` to execute the tests. I'm currently forcing it by `-DMPIEXEC=mpirun`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230519769
https://github.com/psi4/psi4/pull/436#issuecomment-230519769:145,Testability,test,tests,145,@loriab do you run the tests with Intel MPI at one point? They're failing here for me because CMake picks `mpiexec` over `mpirun` to execute the tests. I'm currently forcing it by `-DMPIEXEC=mpirun`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230519769
https://github.com/psi4/psi4/pull/436#issuecomment-230526252:16,Testability,test,tests,16,"No, I don't run tests with _any_ MPI, and my test-running is the only one that counts for binary-building. Others (https://testboard.org/cdash/index.php?project=Psi) _may_ run with MPI, but I wouldn't bet on it. Our cmake build system is getting another re-write by the one person invested in MPI and Psi4 so it's possible the `mpiexec` vs. `mpirun` is addressed (though I think he's testing with gcc tools). Flagging @ryanmrichard so he knows this is an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230526252
https://github.com/psi4/psi4/pull/436#issuecomment-230526252:45,Testability,test,test-running,45,"No, I don't run tests with _any_ MPI, and my test-running is the only one that counts for binary-building. Others (https://testboard.org/cdash/index.php?project=Psi) _may_ run with MPI, but I wouldn't bet on it. Our cmake build system is getting another re-write by the one person invested in MPI and Psi4 so it's possible the `mpiexec` vs. `mpirun` is addressed (though I think he's testing with gcc tools). Flagging @ryanmrichard so he knows this is an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230526252
https://github.com/psi4/psi4/pull/436#issuecomment-230526252:123,Testability,test,testboard,123,"No, I don't run tests with _any_ MPI, and my test-running is the only one that counts for binary-building. Others (https://testboard.org/cdash/index.php?project=Psi) _may_ run with MPI, but I wouldn't bet on it. Our cmake build system is getting another re-write by the one person invested in MPI and Psi4 so it's possible the `mpiexec` vs. `mpirun` is addressed (though I think he's testing with gcc tools). Flagging @ryanmrichard so he knows this is an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230526252
https://github.com/psi4/psi4/pull/436#issuecomment-230526252:384,Testability,test,testing,384,"No, I don't run tests with _any_ MPI, and my test-running is the only one that counts for binary-building. Others (https://testboard.org/cdash/index.php?project=Psi) _may_ run with MPI, but I wouldn't bet on it. Our cmake build system is getting another re-write by the one person invested in MPI and Psi4 so it's possible the `mpiexec` vs. `mpirun` is addressed (though I think he's testing with gcc tools). Flagging @ryanmrichard so he knows this is an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230526252
https://github.com/psi4/psi4/pull/436#issuecomment-230751650:31,Testability,test,tests,31,@loriab I've tried running the tests with Intel MPI but lots of them hang or fail...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230751650
https://github.com/psi4/psi4/pull/436#issuecomment-230762763:242,Deployability,install,installing,242,"If you're gonna change things with CMake, I've got two items on the wish lists:; - respect `-DCMAKE_C_FLAGS` (and CXX). If CMake gets flags, they should be used (and not ignore as currently happens); - Make it possible to build plugins after installing PSI4. Currently, the `--new-makefile` generate a makefile with points to the build dir of psi4 (instead of install). We have to patch and work around that every time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230762763
https://github.com/psi4/psi4/pull/436#issuecomment-230762763:360,Deployability,install,install,360,"If you're gonna change things with CMake, I've got two items on the wish lists:; - respect `-DCMAKE_C_FLAGS` (and CXX). If CMake gets flags, they should be used (and not ignore as currently happens); - Make it possible to build plugins after installing PSI4. Currently, the `--new-makefile` generate a makefile with points to the build dir of psi4 (instead of install). We have to patch and work around that every time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230762763
https://github.com/psi4/psi4/pull/436#issuecomment-230762763:381,Deployability,patch,patch,381,"If you're gonna change things with CMake, I've got two items on the wish lists:; - respect `-DCMAKE_C_FLAGS` (and CXX). If CMake gets flags, they should be used (and not ignore as currently happens); - Make it possible to build plugins after installing PSI4. Currently, the `--new-makefile` generate a makefile with points to the build dir of psi4 (instead of install). We have to patch and work around that every time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230762763
https://github.com/psi4/psi4/pull/436#issuecomment-230762763:228,Modifiability,plugin,plugins,228,"If you're gonna change things with CMake, I've got two items on the wish lists:; - respect `-DCMAKE_C_FLAGS` (and CXX). If CMake gets flags, they should be used (and not ignore as currently happens); - Make it possible to build plugins after installing PSI4. Currently, the `--new-makefile` generate a makefile with points to the build dir of psi4 (instead of install). We have to patch and work around that every time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230762763
https://github.com/psi4/psi4/pull/436#issuecomment-230783892:165,Deployability,install,installation,165,"Noted. In the current system, on the first point, you may have to use ""extra"" or ""custom"" prefixes to c_flags to get them noticed. The new cmake system will require installation, so the second point should be fixed. It was partially fixed in #410 , but you're probably wanting the add-on headers, too, that weren't addressed in that ticket.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783892
https://github.com/psi4/psi4/pull/436#issuecomment-230783977:503,Deployability,install,installed,503,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977
https://github.com/psi4/psi4/pull/436#issuecomment-230783977:70,Modifiability,rewrite,rewrite,70,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977
https://github.com/psi4/psi4/pull/436#issuecomment-230783977:392,Modifiability,plugin,plugin,392,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977
https://github.com/psi4/psi4/pull/436#issuecomment-230783977:862,Modifiability,rewrite,rewrite,862,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977
https://github.com/psi4/psi4/pull/436#issuecomment-230783977:905,Modifiability,plugin,plugins,905,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977
https://github.com/psi4/psi4/pull/436#issuecomment-230783977:538,Testability,test,tests,538,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977
https://github.com/psi4/psi4/pull/436#issuecomment-230783977:589,Testability,test,tested,589,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977
https://github.com/psi4/psi4/pull/436#issuecomment-230783977:698,Testability,test,tests,698,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977
https://github.com/psi4/psi4/pull/437#issuecomment-230533062:74,Deployability,patch,patching,74,"Btw, @dgasmith , I didn't `pull --rebase` this one because the sequential patching hits a merge conflict that I resolved some time ago (we'd both messed with scf_grad.cc at some point). When this is ready to go I'll squash the commits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230533062
https://github.com/psi4/psi4/pull/437#issuecomment-230548237:114,Availability,fault,fault,114,"I didn't think of that, @loriab. These Hessians come in peace (although they could well impart the occasional seg fault). I was within epsilon of having the code done last week (literally; I screwed up some orbital energy scaling term somehow) so I came very close to beating `1.0`. Still, this code is almost useless until we get DF and KS terms in there, so no sense in hurrying it into a new release version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230548237
https://github.com/psi4/psi4/pull/437#issuecomment-230548237:395,Deployability,release,release,395,"I didn't think of that, @loriab. These Hessians come in peace (although they could well impart the occasional seg fault). I was within epsilon of having the code done last week (literally; I screwed up some orbital energy scaling term somehow) so I came very close to beating `1.0`. Still, this code is almost useless until we get DF and KS terms in there, so no sense in hurrying it into a new release version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230548237
https://github.com/psi4/psi4/pull/437#issuecomment-230548237:215,Energy Efficiency,energy,energy,215,"I didn't think of that, @loriab. These Hessians come in peace (although they could well impart the occasional seg fault). I was within epsilon of having the code done last week (literally; I screwed up some orbital energy scaling term somehow) so I came very close to beating `1.0`. Still, this code is almost useless until we get DF and KS terms in there, so no sense in hurrying it into a new release version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230548237
https://github.com/psi4/psi4/pull/437#issuecomment-230564166:50,Availability,down,down,50,"Eh, always a time for merging. Just trying to cut down on all the needless merging that goes on. This looks great, I think a reference implementation for now is fine. We won't hook anything up, but it would good to have in the code. I think UHF/DFT/DF- are on a long enough time frame to not worry about in this particular PR. Especially since we move from something thats broken to something that works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230564166
https://github.com/psi4/psi4/pull/437#issuecomment-230570771:426,Integrability,wrap,wrapper,426,"Ok, I agree with your idea @dgasmith. I'll make sure the RHF stuff is working properly (I think there's still a small bug in the spherical harmonic hessians) and we can probably close this one out when all is working and more tests are added. I know you're both busy, but if you get a chance could you take a look at `tests/scf-hess1` and see if you have any recommendations about implementing the call into the `frequencies` wrapper, please?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230570771
https://github.com/psi4/psi4/pull/437#issuecomment-230570771:226,Testability,test,tests,226,"Ok, I agree with your idea @dgasmith. I'll make sure the RHF stuff is working properly (I think there's still a small bug in the spherical harmonic hessians) and we can probably close this one out when all is working and more tests are added. I know you're both busy, but if you get a chance could you take a look at `tests/scf-hess1` and see if you have any recommendations about implementing the call into the `frequencies` wrapper, please?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230570771
https://github.com/psi4/psi4/pull/437#issuecomment-230570771:318,Testability,test,tests,318,"Ok, I agree with your idea @dgasmith. I'll make sure the RHF stuff is working properly (I think there's still a small bug in the spherical harmonic hessians) and we can probably close this one out when all is working and more tests are added. I know you're both busy, but if you get a chance could you take a look at `tests/scf-hess1` and see if you have any recommendations about implementing the call into the `frequencies` wrapper, please?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230570771
https://github.com/psi4/psi4/pull/437#issuecomment-230648867:255,Availability,error,error,255,"Add a new method in `share/python/procedures/proc_table.py:172` that links to a function in `share/python/procedures/proc_table.py:1710` (line number approximate) that should mimic `run_scf_gradient` right above that line. Make sure to raise a Validation error for non-RHF and DFT references for now. The Hessian should then run assuming some untested code works as expected. For frequencies: when we use finite difference Hessians its easy to assign different frequencies to different symmetries, without that it becomes much more difficult. You can guess which frequency applies to which frequency, but you cannot be certain in some cases. @loriab Do you remember the conclusion of this? I think we might have to insert our new thermo module for this. @bwb314 Hows the NumPy thermo module coming?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230648867
https://github.com/psi4/psi4/pull/437#issuecomment-230648867:244,Security,Validat,Validation,244,"Add a new method in `share/python/procedures/proc_table.py:172` that links to a function in `share/python/procedures/proc_table.py:1710` (line number approximate) that should mimic `run_scf_gradient` right above that line. Make sure to raise a Validation error for non-RHF and DFT references for now. The Hessian should then run assuming some untested code works as expected. For frequencies: when we use finite difference Hessians its easy to assign different frequencies to different symmetries, without that it becomes much more difficult. You can guess which frequency applies to which frequency, but you cannot be certain in some cases. @loriab Do you remember the conclusion of this? I think we might have to insert our new thermo module for this. @bwb314 Hows the NumPy thermo module coming?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230648867
https://github.com/psi4/psi4/pull/437#issuecomment-230652637:247,Availability,avail,availability,247,"On the driver: Presently, `select_` methods (e.g., https://github.com/psi4/psi4/blob/master/share/python/procedures/proc.py#L127) are only used for post-scf, but it may be worthwhile to put such in for scf. Their purpose is to organize and filter availability based on reference (rhf, etc.), algorithm (conv, df, etc.), and module (irrelevant here- all scf). `gradient()` knows how to play nicely with `select_` methods, using analytic when avail. and falling back to findif if not. That's the behavior we want for hessian, too. Lines like https://github.com/psi4/psi4/blob/master/share/python/driver.py#L567 could also be absorbed into a `select_`. Basically, the procedures dict calls the `select_scf_grad/hess` and that passes along to `run_scf` which calls `scf_helper`. On the vibrational analysis/symm sorting:; Andy and I were chatting about this after your talk, @dgasmith. He found the libmints matrix to transform the Cart Hessian back to symmetry blocked. So then can readily classify. That should do for the Abelian PGs. @bwb314 has been commissioned. ```; mints = MintsHelper(wfn.basisset()); cdsalcs = mints.cdsalcs(15, True, True); that does it; U = cdsalcs.matrix(); well, the 15 should really be 0xF; Hsymm = U^T H U; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230652637
https://github.com/psi4/psi4/pull/437#issuecomment-230652637:441,Availability,avail,avail,441,"On the driver: Presently, `select_` methods (e.g., https://github.com/psi4/psi4/blob/master/share/python/procedures/proc.py#L127) are only used for post-scf, but it may be worthwhile to put such in for scf. Their purpose is to organize and filter availability based on reference (rhf, etc.), algorithm (conv, df, etc.), and module (irrelevant here- all scf). `gradient()` knows how to play nicely with `select_` methods, using analytic when avail. and falling back to findif if not. That's the behavior we want for hessian, too. Lines like https://github.com/psi4/psi4/blob/master/share/python/driver.py#L567 could also be absorbed into a `select_`. Basically, the procedures dict calls the `select_scf_grad/hess` and that passes along to `run_scf` which calls `scf_helper`. On the vibrational analysis/symm sorting:; Andy and I were chatting about this after your talk, @dgasmith. He found the libmints matrix to transform the Cart Hessian back to symmetry blocked. So then can readily classify. That should do for the Abelian PGs. @bwb314 has been commissioned. ```; mints = MintsHelper(wfn.basisset()); cdsalcs = mints.cdsalcs(15, True, True); that does it; U = cdsalcs.matrix(); well, the 15 should really be 0xF; Hsymm = U^T H U; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230652637
https://github.com/psi4/psi4/pull/437#issuecomment-230664882:195,Testability,test,test,195,"Thanks for the helpful feedback. I've implemented the driver code, but haven't checked it in yet. I'm battling a small issue with non C1 calculations, but it should be easy to fix. I've made the test a little prettier too, but wasn't aware of `compare_arrays` playing nicely with numpy arrays, so thanks for the info. Also, the `0xF` that I mentioned in my chat with @loriab should be `0xFF` to get all irreps of the transformation matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230664882
https://github.com/psi4/psi4/pull/437#issuecomment-230664882:23,Usability,feedback,feedback,23,"Thanks for the helpful feedback. I've implemented the driver code, but haven't checked it in yet. I'm battling a small issue with non C1 calculations, but it should be easy to fix. I've made the test a little prettier too, but wasn't aware of `compare_arrays` playing nicely with numpy arrays, so thanks for the info. Also, the `0xF` that I mentioned in my chat with @loriab should be `0xFF` to get all irreps of the transformation matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230664882
https://github.com/psi4/psi4/pull/437#issuecomment-231160542:85,Availability,toler,tolerant,85,"Ok, I think the RHF code is ready to go now. It can run out of core, and is symmetry tolerant. Adding UHF will take a quite a bit of time to debug. Density fitting should be quite fast to code up, as it's only really needed in the second derivatives and the G terms in the response code. Per the above discussion, we can save those tasks for another day. I will let these tests run, then you can merge whenever is most convenient for the new CMake infrastructure. Also, let me know if you'd rather me squash all these commits, which go back all the way to November 2015 and could cause some issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231160542
https://github.com/psi4/psi4/pull/437#issuecomment-231160542:372,Testability,test,tests,372,"Ok, I think the RHF code is ready to go now. It can run out of core, and is symmetry tolerant. Adding UHF will take a quite a bit of time to debug. Density fitting should be quite fast to code up, as it's only really needed in the second derivatives and the G terms in the response code. Per the above discussion, we can save those tasks for another day. I will let these tests run, then you can merge whenever is most convenient for the new CMake infrastructure. Also, let me know if you'd rather me squash all these commits, which go back all the way to November 2015 and could cause some issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231160542
https://github.com/psi4/psi4/pull/437#issuecomment-231175121:33,Testability,test,tested,33,"Travis identified a problem. I'd tested the Hessian itself, but hadn't ensured that the code plays nicely with `frequency()`. Turns out it doesn't so I'll see if I can come up with a quick fix. If not, we'll have to wait for the py-side frequency analysis before pulling this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231175121
https://github.com/psi4/psi4/pull/437#issuecomment-231261903:100,Security,access,accessing,100,"Looks like you tried to fix the test cases that formerly tested scf findif-by-grad freq and now are accessing the analytic freq by adding `der_type=1`. Sounds like a good plan to me, as we don't want this PR lingering and getting out of sync. The `der_type=1` didn't work. Perhaps try `dertype=1`, which I think is what the driver acts on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231261903
https://github.com/psi4/psi4/pull/437#issuecomment-231261903:32,Testability,test,test,32,"Looks like you tried to fix the test cases that formerly tested scf findif-by-grad freq and now are accessing the analytic freq by adding `der_type=1`. Sounds like a good plan to me, as we don't want this PR lingering and getting out of sync. The `der_type=1` didn't work. Perhaps try `dertype=1`, which I think is what the driver acts on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231261903
https://github.com/psi4/psi4/pull/437#issuecomment-231261903:57,Testability,test,tested,57,"Looks like you tried to fix the test cases that formerly tested scf findif-by-grad freq and now are accessing the analytic freq by adding `der_type=1`. Sounds like a good plan to me, as we don't want this PR lingering and getting out of sync. The `der_type=1` didn't work. Perhaps try `dertype=1`, which I think is what the driver acts on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231261903
https://github.com/psi4/psi4/pull/437#issuecomment-231269168:73,Availability,error,error,73,"By hooking the hessian call up to the analytic RHF code, I unleashed the error message in the frequency tests that use DF and, as you said, used the incorrect keyword to request gradients. I will fix those tests when I get a chance (probably the flight back on Monday - I'm at a conference now). On my flight here I wrote some cheesy frequency code to plug the gap in our capabilities, which may or may not be useful::. ``` python; import numpy as np. mol = ref_wfn.molecule(); natoms = mol.natom(); masses = np.zeros(natoms). for atom in range(natoms):; masses[atom] = mol.mass(atom). m = np.repeat( np.divide(1.0, np.sqrt(masses)), 3); mwhess = np.einsum('i,ij,j->ij', m, H, m). fcscale = psi_hartree2J / (psi_bohr2m * psi_bohr2m * psi_amu2kg);; fc = fcscale * np.linalg.eigvalsh(mwhess); freqs = np.sqrt(np.abs(fc)); freqs *= 1.0 / (2.0 * np.pi * psi_c * 100.0); freqs[fc < 0] *= -1. freqvec = psi4.Vector.from_array(freqs[6:]); ref_wfn.set_frequencies(freqvec); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269168
https://github.com/psi4/psi4/pull/437#issuecomment-231269168:79,Integrability,message,message,79,"By hooking the hessian call up to the analytic RHF code, I unleashed the error message in the frequency tests that use DF and, as you said, used the incorrect keyword to request gradients. I will fix those tests when I get a chance (probably the flight back on Monday - I'm at a conference now). On my flight here I wrote some cheesy frequency code to plug the gap in our capabilities, which may or may not be useful::. ``` python; import numpy as np. mol = ref_wfn.molecule(); natoms = mol.natom(); masses = np.zeros(natoms). for atom in range(natoms):; masses[atom] = mol.mass(atom). m = np.repeat( np.divide(1.0, np.sqrt(masses)), 3); mwhess = np.einsum('i,ij,j->ij', m, H, m). fcscale = psi_hartree2J / (psi_bohr2m * psi_bohr2m * psi_amu2kg);; fc = fcscale * np.linalg.eigvalsh(mwhess); freqs = np.sqrt(np.abs(fc)); freqs *= 1.0 / (2.0 * np.pi * psi_c * 100.0); freqs[fc < 0] *= -1. freqvec = psi4.Vector.from_array(freqs[6:]); ref_wfn.set_frequencies(freqvec); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269168
https://github.com/psi4/psi4/pull/437#issuecomment-231269168:104,Testability,test,tests,104,"By hooking the hessian call up to the analytic RHF code, I unleashed the error message in the frequency tests that use DF and, as you said, used the incorrect keyword to request gradients. I will fix those tests when I get a chance (probably the flight back on Monday - I'm at a conference now). On my flight here I wrote some cheesy frequency code to plug the gap in our capabilities, which may or may not be useful::. ``` python; import numpy as np. mol = ref_wfn.molecule(); natoms = mol.natom(); masses = np.zeros(natoms). for atom in range(natoms):; masses[atom] = mol.mass(atom). m = np.repeat( np.divide(1.0, np.sqrt(masses)), 3); mwhess = np.einsum('i,ij,j->ij', m, H, m). fcscale = psi_hartree2J / (psi_bohr2m * psi_bohr2m * psi_amu2kg);; fc = fcscale * np.linalg.eigvalsh(mwhess); freqs = np.sqrt(np.abs(fc)); freqs *= 1.0 / (2.0 * np.pi * psi_c * 100.0); freqs[fc < 0] *= -1. freqvec = psi4.Vector.from_array(freqs[6:]); ref_wfn.set_frequencies(freqvec); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269168
https://github.com/psi4/psi4/pull/437#issuecomment-231269168:206,Testability,test,tests,206,"By hooking the hessian call up to the analytic RHF code, I unleashed the error message in the frequency tests that use DF and, as you said, used the incorrect keyword to request gradients. I will fix those tests when I get a chance (probably the flight back on Monday - I'm at a conference now). On my flight here I wrote some cheesy frequency code to plug the gap in our capabilities, which may or may not be useful::. ``` python; import numpy as np. mol = ref_wfn.molecule(); natoms = mol.natom(); masses = np.zeros(natoms). for atom in range(natoms):; masses[atom] = mol.mass(atom). m = np.repeat( np.divide(1.0, np.sqrt(masses)), 3); mwhess = np.einsum('i,ij,j->ij', m, H, m). fcscale = psi_hartree2J / (psi_bohr2m * psi_bohr2m * psi_amu2kg);; fc = fcscale * np.linalg.eigvalsh(mwhess); freqs = np.sqrt(np.abs(fc)); freqs *= 1.0 / (2.0 * np.pi * psi_c * 100.0); freqs[fc < 0] *= -1. freqvec = psi4.Vector.from_array(freqs[6:]); ref_wfn.set_frequencies(freqvec); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269168
https://github.com/psi4/psi4/pull/437#issuecomment-231269343:58,Testability,test,tests,58,"I should add, the `der_type` keywords were already in the tests. I'm not sure how pervasive they are, but we should probably weed them all out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269343
https://github.com/psi4/psi4/pull/437#issuecomment-231352079:9,Deployability,Update,Updated,9,"@andysim Updated your algorithm, please review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231352079
https://github.com/psi4/psi4/pull/437#issuecomment-231534588:74,Testability,test,test,74,"Thanks, @dgasmith. I just pushed a fix to force finite differences in the test cases that need DF SCF frequencies. Will revert those changes when we get analytic Hessians for that method. Hopefully this will fix all broken tests; the code is ready to go if it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231534588
https://github.com/psi4/psi4/pull/437#issuecomment-231534588:223,Testability,test,tests,223,"Thanks, @dgasmith. I just pushed a fix to force finite differences in the test cases that need DF SCF frequencies. Will revert those changes when we get analytic Hessians for that method. Hopefully this will fix all broken tests; the code is ready to go if it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231534588
https://github.com/psi4/psi4/pull/437#issuecomment-231902272:208,Energy Efficiency,efficient,efficient,208,"I had a long day of travel back from the conference, and used the ensuing boredom as an excuse to code up the DF second derivatives. The code is not completely terrible, and gives correct answers. We need an efficient out of core code eventually, but what do you think about adding it to this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231902272
https://github.com/psi4/psi4/pull/437#issuecomment-232800374:49,Integrability,rout,routine,49,"I’m certain I used PK when I first wrote that G2 routine. I don’t see why it can’t be used now. On Jul 14, 2016, at 5:32 PM, Lori A. Burns notifications@github.com wrote:. > I think pk for g2 would be fine. Anything but df. @edeprince3 can comment if not. ; > ; > Sent from my iPhone; > ; > > On Jul 14, 2016, at 2:11 PM, Andy Simmonett notifications@github.com wrote:; > > ; > > OK, the DF Hessians (including proper orbital response terms, with the SCF fitting basis) are in there now. There's a problem with the OUT_OF_CORE algorithm somewhere in libJK, but PK/DIRECT work just fine so I'm not sure it's worth worrying about too much. I saw that g2 uses OUT_OF_CORE; is there a reason for this, @loriab? If it's OK to switch to PK for that method, I think that's a reasonable fix for now.; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232800374
https://github.com/psi4/psi4/pull/437#issuecomment-232996171:73,Energy Efficiency,efficient,efficient,73,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171
https://github.com/psi4/psi4/pull/437#issuecomment-232996171:200,Energy Efficiency,allocate,allocate,200,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171
https://github.com/psi4/psi4/pull/437#issuecomment-232996171:426,Energy Efficiency,allocate,allocate,426,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171
https://github.com/psi4/psi4/pull/437#issuecomment-232996171:623,Energy Efficiency,efficient,efficient,623,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171
https://github.com/psi4/psi4/pull/437#issuecomment-232996171:1168,Energy Efficiency,adapt,adapted,1168,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171
https://github.com/psi4/psi4/pull/437#issuecomment-232996171:633,Integrability,rout,routines,633,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171
https://github.com/psi4/psi4/pull/437#issuecomment-232996171:748,Modifiability,refactor,refactoring,748,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171
https://github.com/psi4/psi4/pull/437#issuecomment-232996171:1168,Modifiability,adapt,adapted,1168,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171
https://github.com/psi4/psi4/pull/437#issuecomment-232996171:955,Usability,guid,guideline,955,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171
https://github.com/psi4/psi4/pull/437#issuecomment-233000428:208,Energy Efficiency,efficient,efficiently,208,"Ah, ok it just sounded like there was a bug in the JK `out_of_core` algorithm. I wouldn't worry about that too much, we have a new DF class coming along that will be able to handle these kinds of things very efficiently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233000428
https://github.com/psi4/psi4/pull/437#issuecomment-233001167:85,Availability,fault,fault,85,"Ah, yes, that out of core problem. It's a strange one that manifests itself in a seg fault for out of core calls to JK but, apparently, only when the L and R matrices are not the same (as is the case in CPHF). I'll just call PK instead, and add an error if out of core flags are requested. I'll squash this last flurry of commits and then this one is good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233001167
https://github.com/psi4/psi4/pull/437#issuecomment-233001167:248,Availability,error,error,248,"Ah, yes, that out of core problem. It's a strange one that manifests itself in a seg fault for out of core calls to JK but, apparently, only when the L and R matrices are not the same (as is the case in CPHF). I'll just call PK instead, and add an error if out of core flags are requested. I'll squash this last flurry of commits and then this one is good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233001167
https://github.com/psi4/psi4/pull/437#issuecomment-233002997:266,Availability,error,error,266,"Thats interesting, I actually used `out_of_core` for non-symmetric densities up until recently as PK could not handle these. Only recent changes by Jerome to the PK code allow this to work. . Looks like OOC still works for SOSCF, do you have time to investigate the error a little bit? Shouldn’t be happening. Cheers,; Daniel Smith. > On Jul 15, 2016, at 11:31 AM, Andy Simmonett notifications@github.com wrote:; > ; > Ah, yes, that out of core problem. It's a strange one that manifests itself in a seg fault for out of core calls to JK but, apparently, only when the L and R matrices are not the same (as is the case in CPHF). I'll just call PK instead, and add an error if out of core flags are requested. I'll squash this last flurry of commits and then this one is good to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/437#issuecomment-233001167, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcS5QrjHR4F1-9H61dpnsfQdJCePZks5qV7XvgaJpZM4JFTfJ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233002997
https://github.com/psi4/psi4/pull/437#issuecomment-233002997:504,Availability,fault,fault,504,"Thats interesting, I actually used `out_of_core` for non-symmetric densities up until recently as PK could not handle these. Only recent changes by Jerome to the PK code allow this to work. . Looks like OOC still works for SOSCF, do you have time to investigate the error a little bit? Shouldn’t be happening. Cheers,; Daniel Smith. > On Jul 15, 2016, at 11:31 AM, Andy Simmonett notifications@github.com wrote:; > ; > Ah, yes, that out of core problem. It's a strange one that manifests itself in a seg fault for out of core calls to JK but, apparently, only when the L and R matrices are not the same (as is the case in CPHF). I'll just call PK instead, and add an error if out of core flags are requested. I'll squash this last flurry of commits and then this one is good to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/437#issuecomment-233001167, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcS5QrjHR4F1-9H61dpnsfQdJCePZks5qV7XvgaJpZM4JFTfJ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233002997
https://github.com/psi4/psi4/pull/437#issuecomment-233002997:667,Availability,error,error,667,"Thats interesting, I actually used `out_of_core` for non-symmetric densities up until recently as PK could not handle these. Only recent changes by Jerome to the PK code allow this to work. . Looks like OOC still works for SOSCF, do you have time to investigate the error a little bit? Shouldn’t be happening. Cheers,; Daniel Smith. > On Jul 15, 2016, at 11:31 AM, Andy Simmonett notifications@github.com wrote:; > ; > Ah, yes, that out of core problem. It's a strange one that manifests itself in a seg fault for out of core calls to JK but, apparently, only when the L and R matrices are not the same (as is the case in CPHF). I'll just call PK instead, and add an error if out of core flags are requested. I'll squash this last flurry of commits and then this one is good to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/437#issuecomment-233001167, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcS5QrjHR4F1-9H61dpnsfQdJCePZks5qV7XvgaJpZM4JFTfJ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233002997
https://github.com/psi4/psi4/pull/437#issuecomment-233021414:36,Availability,error,error,36,"@dgasmith. I think this is a PEBKAC error. I was passing in desymmetrized matrices, which is fine for PK and DF, which both use C1 symmetry under the hood. The fix for `OUT_OF_CORE` is to add symmetry back into the L and R matrices, before calling `jk->compute()`. There's no problem with the JK code, and I'll see if I can add a simple fix for out of core.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233021414
https://github.com/psi4/psi4/pull/437#issuecomment-233021414:330,Usability,simpl,simple,330,"@dgasmith. I think this is a PEBKAC error. I was passing in desymmetrized matrices, which is fine for PK and DF, which both use C1 symmetry under the hood. The fix for `OUT_OF_CORE` is to add symmetry back into the L and R matrices, before calling `jk->compute()`. There's no problem with the JK code, and I'll see if I can add a simple fix for out of core.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233021414
https://github.com/psi4/psi4/pull/437#issuecomment-233789450:91,Modifiability,rewrite,rewrite,91,"@andysim Yea, everything else was ready to go and we agreed internally that with the CMake rewrite it would be best off if we rebased them ourselves. Getting _very_ hard to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233789450
https://github.com/psi4/psi4/pull/437#issuecomment-234048374:485,Availability,error,error,485,"OK, another change of plan. The only reason to symmetrize the response terms is to be able to use JK instances that use symmetry under the hood (which, AFAIK, is only `OUT_OF_CORE`). I'm half way through doing this, but it makes the code very messy and I only just realized that `OUT_OF_CORE` can't even handle non-symmetric density matrices. I think the best plan at this point is for me to abandon the symmetrization, clean the code up, squash the last few commits and add a py-side error message if `OUT_OF_CORE` is requested. Does anybody disagree? If more important integral technologies were affected, I'd say we go ahead an symmetrize. As it is, we'd be introducing a lot of messy code, just to cover an unimportant corner case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234048374
https://github.com/psi4/psi4/pull/437#issuecomment-234048374:491,Integrability,message,message,491,"OK, another change of plan. The only reason to symmetrize the response terms is to be able to use JK instances that use symmetry under the hood (which, AFAIK, is only `OUT_OF_CORE`). I'm half way through doing this, but it makes the code very messy and I only just realized that `OUT_OF_CORE` can't even handle non-symmetric density matrices. I think the best plan at this point is for me to abandon the symmetrization, clean the code up, squash the last few commits and add a py-side error message if `OUT_OF_CORE` is requested. Does anybody disagree? If more important integral technologies were affected, I'd say we go ahead an symmetrize. As it is, we'd be introducing a lot of messy code, just to cover an unimportant corner case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234048374
https://github.com/psi4/psi4/pull/437#issuecomment-234099704:604,Safety,avoid,avoid,604,"I agree that compatibility is nice, and will press ahead with adding the symmetry back in if that's the consensus. My hesitation to do so stems from the fact that only `OUT_OF_CORE` can use the symmetry, and it's the worst algorithm we have in JK. Symmetrizing is a lot more work than using `transform()` to transform the matrices (which doesn't seem to play nicely with mixed symmetric/c1 matrices), because the perturbations themselves must also be transformed to SALCs. None of that is hard, but it does make the response code messier; I currently check to see if the JK engine runs in C1 anyway, and avoid symmetrization for those cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234099704
https://github.com/psi4/psi4/pull/437#issuecomment-234099972:761,Safety,avoid,avoid,761,"Sure, we can always fix it later. Just looked like it would be an easy fix. > On Jul 20, 2016, at 6:11 PM, Andy Simmonett notifications@github.com wrote:; > ; > I agree that compatibility is nice, and will press ahead with adding the symmetry back in if that's the consensus. My hesitation to do so stems from the fact that only OUT_OF_CORE can use the symmetry, and it's the worst algorithm we have in JK. Symmetrizing is a lot more work than using transform() to transform the matrices (which doesn't seem to play nicely with mixed symmetric/c1 matrices), because the perturbations themselves must also be transformed to SALCs. None of that is hard, but it does make the response code messier; I currently check to see if the JK engine runs in C1 anyway, and avoid symmetrization for those cases.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/437#issuecomment-234099704, or mute the thread https://github.com/notifications/unsubscribe-auth/ATl9UO6JWO3v3-jWQ1Ieb9uCVbAm3YUGks5qXp0VgaJpZM4JFTfJ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234099972
https://github.com/psi4/psi4/pull/437#issuecomment-234240199:234,Testability,log,logic,234,"You know the JK object owns a AOTOSO object. I wonder if we should elevate the JK object so that it can take either an AO or SO representation, transform it as needed, and return the input representation. A relatively small amount of logic all things considered. Anyhow, is this ready to go Andy?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234240199
https://github.com/psi4/psi4/pull/437#issuecomment-234373201:43,Testability,test,tests,43,"Ok, this one should be ready to go, if all tests pass. I squashed a few of the commits, so if you forked this code at all be careful pushing upstream. I ended up putting the symmetry that I have so far into the code, but it's not used. If we want symmetry to work, here's what needs to happen.; - [Activate the symmetry code](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L1090) and run it in C1 symmetry, which should all be good.; - Then for something simple like water in Cs symmetry you can [verify that the B vectors are good](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L1411) (remember that they'll be ordered differently to the C1 case because of the SALC ordering being different) but the CPHF doesn't converge, so we need to figure out the problem there.; - After that, there's just [another small cut and paste exercise](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L1510) to get all terms symmetrized, albeit in a slightly janky way.; - Once we figure out why CPHF isn't working, we need to make `OUT_OF_CORE` work with non-symmetric densities and [remove the check](https://github.com/andysim/psi4/blob/hessians/share/python/procedures/proc.py#L1728) in the driver that stops these integrals from being allowed. If we end up adding a new JK object that uses symmetry, the above steps will be worth it. Just to get `OUT_OF_CORE` working, not so much unless anybody already knows why it doesn't work and can easily fix it. This is why I've been back and forth about including the symmetry code; I eventually decided to leave it in as a reasonable starting point for future efforts.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234373201
https://github.com/psi4/psi4/pull/437#issuecomment-234373201:482,Usability,simpl,simple,482,"Ok, this one should be ready to go, if all tests pass. I squashed a few of the commits, so if you forked this code at all be careful pushing upstream. I ended up putting the symmetry that I have so far into the code, but it's not used. If we want symmetry to work, here's what needs to happen.; - [Activate the symmetry code](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L1090) and run it in C1 symmetry, which should all be good.; - Then for something simple like water in Cs symmetry you can [verify that the B vectors are good](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L1411) (remember that they'll be ordered differently to the C1 case because of the SALC ordering being different) but the CPHF doesn't converge, so we need to figure out the problem there.; - After that, there's just [another small cut and paste exercise](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L1510) to get all terms symmetrized, albeit in a slightly janky way.; - Once we figure out why CPHF isn't working, we need to make `OUT_OF_CORE` work with non-symmetric densities and [remove the check](https://github.com/andysim/psi4/blob/hessians/share/python/procedures/proc.py#L1728) in the driver that stops these integrals from being allowed. If we end up adding a new JK object that uses symmetry, the above steps will be worth it. Just to get `OUT_OF_CORE` working, not so much unless anybody already knows why it doesn't work and can easily fix it. This is why I've been back and forth about including the symmetry code; I eventually decided to leave it in as a reasonable starting point for future efforts.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234373201
https://github.com/psi4/psi4/pull/437#issuecomment-234381027:85,Testability,test,tests,85,To be clear the JK OOC algorithm _does_ work with non-symmetric density cases. See `/tests/soscf2` for an example. Everything looks good and ill pull it in when Travis goes through. Ignore the Distelli stuff for now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234381027
https://github.com/psi4/psi4/pull/437#issuecomment-234381027:6,Usability,clear,clear,6,To be clear the JK OOC algorithm _does_ work with non-symmetric density cases. See `/tests/soscf2` for an example. Everything looks good and ill pull it in when Travis goes through. Ignore the Distelli stuff for now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234381027
https://github.com/psi4/psi4/pull/437#issuecomment-234635478:17,Testability,test,test,17,This passed long test on box! Thanks Andy for all your hard work. If this is ready ill go ahead and pull this in.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234635478
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:35,Energy Efficiency,energy,energy-large,35,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:105,Energy Efficiency,energy,energy-large,105,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:596,Integrability,rout,routing,596,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:91,Testability,test,tests,91,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:168,Testability,test,tests,168,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:260,Testability,test,test,260,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:362,Testability,test,test,362,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:380,Testability,test,test,380,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:463,Testability,test,testing,463,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:550,Testability,test,test,550,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235363935:370,Usability,clear,clear,370,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935
https://github.com/psi4/psi4/pull/437#issuecomment-235365542:221,Availability,error,error,221,"Nope, just an oversight on my part. Good catch. Most of the changes to the tests that I made were a result of high precision checks failing (3 point f.d. vs. analytic can be a little noisy), so I was just doing trial and error to figure out where things needed to be updated. I must have missed this one, because I just saw that it timed out on my machine. Sorry about that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235365542
https://github.com/psi4/psi4/pull/437#issuecomment-235365542:267,Deployability,update,updated,267,"Nope, just an oversight on my part. Good catch. Most of the changes to the tests that I made were a result of high precision checks failing (3 point f.d. vs. analytic can be a little noisy), so I was just doing trial and error to figure out where things needed to be updated. I must have missed this one, because I just saw that it timed out on my machine. Sorry about that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235365542
https://github.com/psi4/psi4/pull/437#issuecomment-235365542:75,Testability,test,tests,75,"Nope, just an oversight on my part. Good catch. Most of the changes to the tests that I made were a result of high precision checks failing (3 point f.d. vs. analytic can be a little noisy), so I was just doing trial and error to figure out where things needed to be updated. I must have missed this one, because I just saw that it timed out on my machine. Sorry about that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235365542
https://github.com/psi4/psi4/pull/438#issuecomment-230646970:97,Testability,test,test,97,Thanks much! Can you suggest a geometry/basis/grid and reference value from the literature for a test case?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/438#issuecomment-230646970
https://github.com/psi4/psi4/pull/438#issuecomment-230646972:26,Testability,test,test,26,Looks good. Can you add a test in `/tests/dft1/` that compares the result against another program with a prior implementation?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/438#issuecomment-230646972
https://github.com/psi4/psi4/pull/438#issuecomment-230646972:36,Testability,test,tests,36,Looks good. Can you add a test in `/tests/dft1/` that compares the result against another program with a prior implementation?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/438#issuecomment-230646972
https://github.com/psi4/psi4/pull/438#issuecomment-230823292:293,Deployability,update,update,293,"Hi all. Thanks for the quick response! :). I implemented b86bpbe in; nwchem back in the day, but psi4's results are a bit off (not too; much, a bit over 1e-3). I'll try to figure out what's going on when I; have some time (attending a conference right now), add b86bpbe to; the dft1 test, and update the pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/438#issuecomment-230823292
https://github.com/psi4/psi4/pull/438#issuecomment-230823292:283,Testability,test,test,283,"Hi all. Thanks for the quick response! :). I implemented b86bpbe in; nwchem back in the day, but psi4's results are a bit off (not too; much, a bit over 1e-3). I'll try to figure out what's going on when I; have some time (attending a conference right now), add b86bpbe to; the dft1 test, and update the pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/438#issuecomment-230823292
https://github.com/psi4/psi4/pull/438#issuecomment-231920606:210,Testability,test,test,210,"OK, it works now. I reimplemented it in a different way and now it matches nwchem and the w=0.0 result of the range-separated functional built using the HJS recipe. Not sure what happened there. I have added a test in dft1, and the reference nwchem input and output.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/438#issuecomment-231920606
https://github.com/psi4/psi4/pull/439#issuecomment-230635983:152,Testability,test,tests,152,"Yeah, @loriab [noticed](https://github.com/psi4/psi4/pull/431) that they started hosting again and reenabled it. We just never got around to adding 3.8 tests, because the apt-get mechanism was a little slower to provide that version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/439#issuecomment-230635983
https://github.com/psi4/psi4/pull/439#issuecomment-230646067:16,Availability,ping,pinged,16,"Yes, Sebastian [pinged](https://github.com/SebWouters/CheMPS2/commit/eedb60e7a47424cf50d632f2057459567a60d3d8) me that they were back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/439#issuecomment-230646067
https://github.com/psi4/psi4/pull/440#issuecomment-230793056:162,Deployability,install,installer,162,"Ok, the mac conda package is rebuilt (https://anaconda.org/psi4/pcmsolver/files). Having some filesystem problems with the linux one. I'm not re-packaging up the installer (the large psi4conda bash file), so one would need to `conda update pcmsolver` after that installation. Haven't formulated guidelines for when installer gets updated or which `conda update`s to recommend after that installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440#issuecomment-230793056
https://github.com/psi4/psi4/pull/440#issuecomment-230793056:233,Deployability,update,update,233,"Ok, the mac conda package is rebuilt (https://anaconda.org/psi4/pcmsolver/files). Having some filesystem problems with the linux one. I'm not re-packaging up the installer (the large psi4conda bash file), so one would need to `conda update pcmsolver` after that installation. Haven't formulated guidelines for when installer gets updated or which `conda update`s to recommend after that installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440#issuecomment-230793056
https://github.com/psi4/psi4/pull/440#issuecomment-230793056:262,Deployability,install,installation,262,"Ok, the mac conda package is rebuilt (https://anaconda.org/psi4/pcmsolver/files). Having some filesystem problems with the linux one. I'm not re-packaging up the installer (the large psi4conda bash file), so one would need to `conda update pcmsolver` after that installation. Haven't formulated guidelines for when installer gets updated or which `conda update`s to recommend after that installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440#issuecomment-230793056
https://github.com/psi4/psi4/pull/440#issuecomment-230793056:315,Deployability,install,installer,315,"Ok, the mac conda package is rebuilt (https://anaconda.org/psi4/pcmsolver/files). Having some filesystem problems with the linux one. I'm not re-packaging up the installer (the large psi4conda bash file), so one would need to `conda update pcmsolver` after that installation. Haven't formulated guidelines for when installer gets updated or which `conda update`s to recommend after that installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440#issuecomment-230793056
https://github.com/psi4/psi4/pull/440#issuecomment-230793056:330,Deployability,update,updated,330,"Ok, the mac conda package is rebuilt (https://anaconda.org/psi4/pcmsolver/files). Having some filesystem problems with the linux one. I'm not re-packaging up the installer (the large psi4conda bash file), so one would need to `conda update pcmsolver` after that installation. Haven't formulated guidelines for when installer gets updated or which `conda update`s to recommend after that installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440#issuecomment-230793056
https://github.com/psi4/psi4/pull/440#issuecomment-230793056:354,Deployability,update,update,354,"Ok, the mac conda package is rebuilt (https://anaconda.org/psi4/pcmsolver/files). Having some filesystem problems with the linux one. I'm not re-packaging up the installer (the large psi4conda bash file), so one would need to `conda update pcmsolver` after that installation. Haven't formulated guidelines for when installer gets updated or which `conda update`s to recommend after that installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440#issuecomment-230793056
https://github.com/psi4/psi4/pull/440#issuecomment-230793056:387,Deployability,install,installation,387,"Ok, the mac conda package is rebuilt (https://anaconda.org/psi4/pcmsolver/files). Having some filesystem problems with the linux one. I'm not re-packaging up the installer (the large psi4conda bash file), so one would need to `conda update pcmsolver` after that installation. Haven't formulated guidelines for when installer gets updated or which `conda update`s to recommend after that installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440#issuecomment-230793056
https://github.com/psi4/psi4/pull/440#issuecomment-230793056:295,Usability,guid,guidelines,295,"Ok, the mac conda package is rebuilt (https://anaconda.org/psi4/pcmsolver/files). Having some filesystem problems with the linux one. I'm not re-packaging up the installer (the large psi4conda bash file), so one would need to `conda update pcmsolver` after that installation. Haven't formulated guidelines for when installer gets updated or which `conda update`s to recommend after that installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/440#issuecomment-230793056
https://github.com/psi4/psi4/pull/442#issuecomment-232368975:81,Testability,test,tests,81,"The pywrap jobs were failing before that change. It's specifically the db pywrap tests that are failing; I think it is because they are trying to run from the build directory, which is a no-no now. I can't figure out how db works to tweak it. As for the exception, that's what the internets said to do to ensure Python3/2 comparability. I see from the Travis logs though that it broke stuff, darn it. Working on it now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-232368975
https://github.com/psi4/psi4/pull/442#issuecomment-232368975:359,Testability,log,logs,359,"The pywrap jobs were failing before that change. It's specifically the db pywrap tests that are failing; I think it is because they are trying to run from the build directory, which is a no-no now. I can't figure out how db works to tweak it. As for the exception, that's what the internets said to do to ensure Python3/2 comparability. I see from the Travis logs though that it broke stuff, darn it. Working on it now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-232368975
https://github.com/psi4/psi4/pull/442#issuecomment-233772597:155,Integrability,depend,dependency,155,"@jturney (and other developers who wish to weigh in) I'm not sure how to proceed with Ambit beyond what I have. As it stands now the Psi4 executable has a dependency on Ambit, but Ambit has a dependency on Psi4. As best as I can tell I think there are three options:; - Ambit gets absorbed into Psi4 proper; - Ambit drops its dependency on Psi4 and is compiled before Psi4; - Psi4 drops its dependency on Ambit and is compiled before Ambit (I think @dgasmith is working on dropping the main function so this would happen consequentially). The way it worked with the old build was along the lines of 1. If we continue to go through with 1 I don't think it makes sense to distribute Psi4 and Ambit separately anymore as they are too intimately linked. Furthermore, I was under the impression that we were purging MPI from Psi4 so I don't know about the viability of 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-233772597
https://github.com/psi4/psi4/pull/442#issuecomment-233772597:192,Integrability,depend,dependency,192,"@jturney (and other developers who wish to weigh in) I'm not sure how to proceed with Ambit beyond what I have. As it stands now the Psi4 executable has a dependency on Ambit, but Ambit has a dependency on Psi4. As best as I can tell I think there are three options:; - Ambit gets absorbed into Psi4 proper; - Ambit drops its dependency on Psi4 and is compiled before Psi4; - Psi4 drops its dependency on Ambit and is compiled before Ambit (I think @dgasmith is working on dropping the main function so this would happen consequentially). The way it worked with the old build was along the lines of 1. If we continue to go through with 1 I don't think it makes sense to distribute Psi4 and Ambit separately anymore as they are too intimately linked. Furthermore, I was under the impression that we were purging MPI from Psi4 so I don't know about the viability of 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-233772597
https://github.com/psi4/psi4/pull/442#issuecomment-233772597:326,Integrability,depend,dependency,326,"@jturney (and other developers who wish to weigh in) I'm not sure how to proceed with Ambit beyond what I have. As it stands now the Psi4 executable has a dependency on Ambit, but Ambit has a dependency on Psi4. As best as I can tell I think there are three options:; - Ambit gets absorbed into Psi4 proper; - Ambit drops its dependency on Psi4 and is compiled before Psi4; - Psi4 drops its dependency on Ambit and is compiled before Ambit (I think @dgasmith is working on dropping the main function so this would happen consequentially). The way it worked with the old build was along the lines of 1. If we continue to go through with 1 I don't think it makes sense to distribute Psi4 and Ambit separately anymore as they are too intimately linked. Furthermore, I was under the impression that we were purging MPI from Psi4 so I don't know about the viability of 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-233772597
https://github.com/psi4/psi4/pull/442#issuecomment-233772597:391,Integrability,depend,dependency,391,"@jturney (and other developers who wish to weigh in) I'm not sure how to proceed with Ambit beyond what I have. As it stands now the Psi4 executable has a dependency on Ambit, but Ambit has a dependency on Psi4. As best as I can tell I think there are three options:; - Ambit gets absorbed into Psi4 proper; - Ambit drops its dependency on Psi4 and is compiled before Psi4; - Psi4 drops its dependency on Ambit and is compiled before Ambit (I think @dgasmith is working on dropping the main function so this would happen consequentially). The way it worked with the old build was along the lines of 1. If we continue to go through with 1 I don't think it makes sense to distribute Psi4 and Ambit separately anymore as they are too intimately linked. Furthermore, I was under the impression that we were purging MPI from Psi4 so I don't know about the viability of 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-233772597
https://github.com/psi4/psi4/pull/442#issuecomment-234038643:30,Integrability,depend,dependency,30,"I'll work on dropping Ambit's dependency on Psi4. The functions that Ambit provides should live in Psi4 anyways as they are responsible for transferring data from Psi4 to Ambit. I'm not planning on Psi4 ""absorbing"" Ambit anytime soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234038643
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:55,Deployability,install,installing,55,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:67,Deployability,install,install,67,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:97,Deployability,install,install,97,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:145,Deployability,install,installed,145,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:162,Deployability,install,install,162,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:301,Deployability,install,install,301,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:374,Deployability,install,install,374,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:408,Deployability,install,installed,408,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:447,Deployability,install,install,447,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:506,Deployability,install,install,506,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:739,Deployability,install,installation,739,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234470967:623,Testability,test,test,623,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:22,Deployability,install,install,22,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:153,Deployability,install,install,153,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:1387,Deployability,install,install,1387,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:1441,Deployability,install,install,1441,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:116,Integrability,interface,interface,116,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:419,Integrability,interface,interface,419,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:842,Integrability,depend,dependency,842,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:1361,Integrability,interface,interface,1361,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:260,Modifiability,variab,variable,260,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:946,Modifiability,config,configure,946,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-234531219:1065,Testability,test,tests,1065,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219
https://github.com/psi4/psi4/pull/442#issuecomment-235098972:137,Availability,error,error,137,"@andysim I can't help but notice that the three failing jobs all involve Hessians....Does anything in the logs jump out at you? The only error I saw was that the fnocc2 G2 free-energies weren't matching to 8 decimal places, but rather 7. Do we really expect them to match to 8 decimal places? I have no idea why the other two are failing....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235098972
https://github.com/psi4/psi4/pull/442#issuecomment-235098972:106,Testability,log,logs,106,"@andysim I can't help but notice that the three failing jobs all involve Hessians....Does anything in the logs jump out at you? The only error I saw was that the fnocc2 G2 free-energies weren't matching to 8 decimal places, but rather 7. Do we really expect them to match to 8 decimal places? I have no idea why the other two are failing....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235098972
https://github.com/psi4/psi4/pull/442#issuecomment-235102762:679,Availability,fault,fault,679,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762
https://github.com/psi4/psi4/pull/442#issuecomment-235102762:291,Deployability,update,updated,291,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762
https://github.com/psi4/psi4/pull/442#issuecomment-235102762:66,Energy Efficiency,energy,energy,66,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762
https://github.com/psi4/psi4/pull/442#issuecomment-235102762:150,Energy Efficiency,energy,energy,150,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762
https://github.com/psi4/psi4/pull/442#issuecomment-235102762:107,Testability,TEST,TEST,107,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762
https://github.com/psi4/psi4/pull/442#issuecomment-235102762:143,Testability,TEST,TEST,143,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762
https://github.com/psi4/psi4/pull/442#issuecomment-235102762:201,Testability,TEST,TEST,201,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762
https://github.com/psi4/psi4/pull/442#issuecomment-235102762:237,Testability,TEST,TEST,237,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762
https://github.com/psi4/psi4/pull/442#issuecomment-235105347:219,Testability,log,logs,219,"@andysim thanks for the quick reply. I'll go ahead and roll back the fnocc2. Locally cbs-xtpl-freq is failing the reference value check (1809.235 vs. 1809.279) and tu4-h20-freq passes for me. It looks like from the git logs that cbs-xtpl-freq is another scenario similar to fnocc2, is that right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235105347
https://github.com/psi4/psi4/pull/442#issuecomment-235107538:1424,Safety,avoid,avoid,1424,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538
https://github.com/psi4/psi4/pull/442#issuecomment-235107538:372,Testability,TEST,TEST,372,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538
https://github.com/psi4/psi4/pull/442#issuecomment-235107538:467,Testability,TEST,TEST,467,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538
https://github.com/psi4/psi4/pull/442#issuecomment-235107538:562,Testability,TEST,TEST,562,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538
https://github.com/psi4/psi4/pull/442#issuecomment-235107538:689,Testability,test,tests,689,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538
https://github.com/psi4/psi4/pull/442#issuecomment-235107538:741,Testability,test,test,741,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538
https://github.com/psi4/psi4/pull/442#issuecomment-235107538:999,Testability,TEST,TEST,999,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538
https://github.com/psi4/psi4/pull/442#issuecomment-235107538:1093,Testability,TEST,TEST,1093,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538
https://github.com/psi4/psi4/pull/442#issuecomment-235107538:1187,Testability,TEST,TEST,1187,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538
https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1136,Availability,error,error,1136,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795
https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1511,Modifiability,config,configure,1511,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795
https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1751,Safety,avoid,avoid,1751,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795
https://github.com/psi4/psi4/pull/442#issuecomment-235109795:38,Testability,test,test,38,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795
https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1465,Usability,simpl,simple,1465,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795
https://github.com/psi4/psi4/pull/442#issuecomment-235113769:432,Deployability,install,install,432,"My build is broken again, but, if it's any use, the below was working last week for building this branch from anaconda python. Would an internal boost build be worth trying?. ```; source /theoryfs2/common/software/intel2016/bin/compilervars.sh intel64. cmake -H. -Bobjdir5 \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_INSTALL_PREFIX=/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr/install \; -DCMAKE_BUILD_TYPE=release \; -DPYTHON_EXECUTABLE=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/bin/python2.7 \; -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/lib/libpython2.7.so \; -DPYTHON_INCLUDE_DIR=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/include/python2.7 \; -DSPHINX_ROOT=/theoryfs2/ds/cdsgroup/miniconda/envs/sphinxenv; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235113769
https://github.com/psi4/psi4/pull/442#issuecomment-235113769:462,Deployability,release,release,462,"My build is broken again, but, if it's any use, the below was working last week for building this branch from anaconda python. Would an internal boost build be worth trying?. ```; source /theoryfs2/common/software/intel2016/bin/compilervars.sh intel64. cmake -H. -Bobjdir5 \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_INSTALL_PREFIX=/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr/install \; -DCMAKE_BUILD_TYPE=release \; -DPYTHON_EXECUTABLE=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/bin/python2.7 \; -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/lib/libpython2.7.so \; -DPYTHON_INCLUDE_DIR=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/include/python2.7 \; -DSPHINX_ROOT=/theoryfs2/ds/cdsgroup/miniconda/envs/sphinxenv; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235113769
https://github.com/psi4/psi4/pull/442#issuecomment-235115266:83,Deployability,patch,patch,83,"Figured it out. The problem occurs in a few areas, so I'll fix them all and send a patch. Or I can push directly to your repo if you prefer; I'd need permissions to do that. It's just a case of including some of the Boost headers in different orders.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235115266
https://github.com/psi4/psi4/pull/442#issuecomment-235119557:160,Availability,error,error,160,"The patch I just pushed allows it to compile. The tests all fail instantly on my laptop, so I still have some more work to do, but that's almost certainly user error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119557
https://github.com/psi4/psi4/pull/442#issuecomment-235119557:4,Deployability,patch,patch,4,"The patch I just pushed allows it to compile. The tests all fail instantly on my laptop, so I still have some more work to do, but that's almost certainly user error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119557
https://github.com/psi4/psi4/pull/442#issuecomment-235119557:50,Testability,test,tests,50,"The patch I just pushed allows it to compile. The tests all fail instantly on my laptop, so I still have some more work to do, but that's almost certainly user error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119557
https://github.com/psi4/psi4/pull/442#issuecomment-235119690:337,Availability,error,error,337,"Make sure you install. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 25, 2016 7:40 PM, ""Andy Simmonett"" notifications@github.com wrote:. > The patch I just pushed allows it to compile. The tests all fail instantly; > on my laptop, so I still have some more work to do, but that's almost; > certainly user error.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-235119557, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi08tfysGPjLLYYwmAXVcqfjyQ7CVks5qZUlygaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119690
https://github.com/psi4/psi4/pull/442#issuecomment-235119690:14,Deployability,install,install,14,"Make sure you install. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 25, 2016 7:40 PM, ""Andy Simmonett"" notifications@github.com wrote:. > The patch I just pushed allows it to compile. The tests all fail instantly; > on my laptop, so I still have some more work to do, but that's almost; > certainly user error.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-235119557, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi08tfysGPjLLYYwmAXVcqfjyQ7CVks5qZUlygaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119690
https://github.com/psi4/psi4/pull/442#issuecomment-235119690:175,Deployability,patch,patch,175,"Make sure you install. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 25, 2016 7:40 PM, ""Andy Simmonett"" notifications@github.com wrote:. > The patch I just pushed allows it to compile. The tests all fail instantly; > on my laptop, so I still have some more work to do, but that's almost; > certainly user error.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-235119557, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi08tfysGPjLLYYwmAXVcqfjyQ7CVks5qZUlygaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119690
https://github.com/psi4/psi4/pull/442#issuecomment-235119690:221,Testability,test,tests,221,"Make sure you install. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 25, 2016 7:40 PM, ""Andy Simmonett"" notifications@github.com wrote:. > The patch I just pushed allows it to compile. The tests all fail instantly; > on my laptop, so I still have some more work to do, but that's almost; > certainly user error.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-235119557, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi08tfysGPjLLYYwmAXVcqfjyQ7CVks5qZUlygaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119690
https://github.com/psi4/psi4/pull/442#issuecomment-235121191:76,Deployability,install,install,76,"Thanks for that; I saw the comments at the end of the build that staged the install and mistook them for an actual install. I sorted that out, and now it can't find numpy, for some strange reason. Will adjust my python path and all should be well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235121191
https://github.com/psi4/psi4/pull/442#issuecomment-235121191:115,Deployability,install,install,115,"Thanks for that; I saw the comments at the end of the build that staged the install and mistook them for an actual install. I sorted that out, and now it can't find numpy, for some strange reason. Will adjust my python path and all should be well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235121191
https://github.com/psi4/psi4/pull/442#issuecomment-235144008:30,Availability,error,error,30,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008
https://github.com/psi4/psi4/pull/442#issuecomment-235144008:344,Availability,failure,failure,344,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008
https://github.com/psi4/psi4/pull/442#issuecomment-235144008:77,Energy Efficiency,reduce,reduce,77,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008
https://github.com/psi4/psi4/pull/442#issuecomment-235144008:272,Energy Efficiency,reduce,reduced,272,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008
https://github.com/psi4/psi4/pull/442#issuecomment-235144008:390,Safety,detect,detection,390,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008
https://github.com/psi4/psi4/pull/442#issuecomment-235144008:824,Safety,detect,detection,824,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008
https://github.com/psi4/psi4/pull/442#issuecomment-235144008:224,Testability,test,test,224,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008
https://github.com/psi4/psi4/pull/442#issuecomment-235144008:655,Testability,test,tests,655,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008
https://github.com/psi4/psi4/pull/442#issuecomment-235144975:221,Integrability,message,messages,221,"The`tu4-h2o-freq` also was also a victim of a merge problem. It needs `dertype=1` because the DZ basis has a fitting basis with _f_ orbitals. That means the Hessians require AM=5, so Travis gets upset. I guess the stderr messages aren't part of the log; do you think there's a simple fix for that, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144975
https://github.com/psi4/psi4/pull/442#issuecomment-235144975:249,Testability,log,log,249,"The`tu4-h2o-freq` also was also a victim of a merge problem. It needs `dertype=1` because the DZ basis has a fitting basis with _f_ orbitals. That means the Hessians require AM=5, so Travis gets upset. I guess the stderr messages aren't part of the log; do you think there's a simple fix for that, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144975
https://github.com/psi4/psi4/pull/442#issuecomment-235144975:277,Usability,simpl,simple,277,"The`tu4-h2o-freq` also was also a victim of a merge problem. It needs `dertype=1` because the DZ basis has a fitting basis with _f_ orbitals. That means the Hessians require AM=5, so Travis gets upset. I guess the stderr messages aren't part of the log; do you think there's a simple fix for that, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144975
https://github.com/psi4/psi4/pull/442#issuecomment-235151203:143,Testability,Test,Testing,143,"Could put the below just before the exit in `.scripts/travis_run.py` if want another shot at traceback. ```; if ctest_exit_status:; with open('Testing/Temporary/LastTest.log', 'r') as ttlfile:; sys.stdout.write(ttlfile.read()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151203
https://github.com/psi4/psi4/pull/442#issuecomment-235151203:170,Testability,log,log,170,"Could put the below just before the exit in `.scripts/travis_run.py` if want another shot at traceback. ```; if ctest_exit_status:; with open('Testing/Temporary/LastTest.log', 'r') as ttlfile:; sys.stdout.write(ttlfile.read()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151203
https://github.com/psi4/psi4/pull/442#issuecomment-235151364:77,Safety,detect,detection,77,"Good idea, @loriab. We're OK for now, because the problems (apart from Boost detection) seem to be fixed, but I suspect this isn't the last bug we'll ever deal with...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151364
https://github.com/psi4/psi4/pull/442#issuecomment-235151809:8,Availability,down,downgrade,8,"I think downgrade OS before trying to solve Boost problems so as to avoid wasting more time on something that's nearly gone. Need a ""Kill the Boost!"" graphic a la Disney's ""Beauty and the Beast.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151809
https://github.com/psi4/psi4/pull/442#issuecomment-235151809:68,Safety,avoid,avoid,68,"I think downgrade OS before trying to solve Boost problems so as to avoid wasting more time on something that's nearly gone. Need a ""Kill the Boost!"" graphic a la Disney's ""Beauty and the Beast.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151809
https://github.com/psi4/psi4/pull/442#issuecomment-235152988:23,Availability,down,downgrade,23,"Okey dokey, I pushed a downgrade to 3.7, which will hopefully fix it. A bit off topic, but I don't think props4 is running, which has the `quicktests` label. Any idea why that might be the case? The are a number of tests, including props1-3, that have the `shorttests` label, but not `quicktests`. Now we're all Travisified we should look over those and see which ones are quick enough to run for every PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235152988
https://github.com/psi4/psi4/pull/442#issuecomment-235152988:215,Testability,test,tests,215,"Okey dokey, I pushed a downgrade to 3.7, which will hopefully fix it. A bit off topic, but I don't think props4 is running, which has the `quicktests` label. Any idea why that might be the case? The are a number of tests, including props1-3, that have the `shorttests` label, but not `quicktests`. Now we're all Travisified we should look over those and see which ones are quick enough to run for every PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235152988
https://github.com/psi4/psi4/pull/442#issuecomment-235154773:11,Testability,test,test,11,"Hmm, can't test because I haven't pulled the latest rebase, but maybe props4 should have _only_ `quicktests`, not both `shorttests;quicktests`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235154773
https://github.com/psi4/psi4/pull/442#issuecomment-235179414:389,Modifiability,config,config,389,"Props4 does have both labels (my bad), so I'll fix that, @loriab. I _think_ I found a workaround for the Travis problems. The bjam system uses predefined setups to build. When it calls `clang`, it's really getting clang 3.4 (which is broken); loading the clang 3.8 module defines `clang-3.8` in addition to the existing `clang`. I forced bjam to use `clang-3.8` instead by dumping a `user-config.bjam` file to ${HOME}. This is done by a script because YAML has a terrible time with : in environmental variables. That's about an hour of my life I'll never get back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235179414
https://github.com/psi4/psi4/pull/442#issuecomment-235179414:501,Modifiability,variab,variables,501,"Props4 does have both labels (my bad), so I'll fix that, @loriab. I _think_ I found a workaround for the Travis problems. The bjam system uses predefined setups to build. When it calls `clang`, it's really getting clang 3.4 (which is broken); loading the clang 3.8 module defines `clang-3.8` in addition to the existing `clang`. I forced bjam to use `clang-3.8` instead by dumping a `user-config.bjam` file to ${HOME}. This is done by a script because YAML has a terrible time with : in environmental variables. That's about an hour of my life I'll never get back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235179414
https://github.com/psi4/psi4/pull/442#issuecomment-235179414:243,Performance,load,loading,243,"Props4 does have both labels (my bad), so I'll fix that, @loriab. I _think_ I found a workaround for the Travis problems. The bjam system uses predefined setups to build. When it calls `clang`, it's really getting clang 3.4 (which is broken); loading the clang 3.8 module defines `clang-3.8` in addition to the existing `clang`. I forced bjam to use `clang-3.8` instead by dumping a `user-config.bjam` file to ${HOME}. This is done by a script because YAML has a terrible time with : in environmental variables. That's about an hour of my life I'll never get back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235179414
https://github.com/psi4/psi4/pull/442#issuecomment-235348000:357,Safety,detect,detecting,357,"You're welcome, @ryanmrichard. Sorry I was late to the party on this one. You can drive a Hummer around in first gear for the rest of your life, and you'll still have a negative carbon footprint after reducing the build time by so much. I know that Boost is going the way of the dodo, but building it is quite slow on Travis. I figured out the problem with detecting the `apt-get` version, and I think the latest changes will fix detection, allowing us to avoid building it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235348000
https://github.com/psi4/psi4/pull/442#issuecomment-235348000:430,Safety,detect,detection,430,"You're welcome, @ryanmrichard. Sorry I was late to the party on this one. You can drive a Hummer around in first gear for the rest of your life, and you'll still have a negative carbon footprint after reducing the build time by so much. I know that Boost is going the way of the dodo, but building it is quite slow on Travis. I figured out the problem with detecting the `apt-get` version, and I think the latest changes will fix detection, allowing us to avoid building it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235348000
https://github.com/psi4/psi4/pull/442#issuecomment-235348000:456,Safety,avoid,avoid,456,"You're welcome, @ryanmrichard. Sorry I was late to the party on this one. You can drive a Hummer around in first gear for the rest of your life, and you'll still have a negative carbon footprint after reducing the build time by so much. I know that Boost is going the way of the dodo, but building it is quite slow on Travis. I figured out the problem with detecting the `apt-get` version, and I think the latest changes will fix detection, allowing us to avoid building it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235348000
https://github.com/psi4/psi4/pull/442#issuecomment-235478566:4,Modifiability,plugin,plugin,4,"Did plugin makefile writing ever work upon testing (https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/psi4/src/bin/psi4_main/create_new_plugin.cc#L137-L141)? I'm getting the below in the Makefile from a `psi4 --new-plugin`. I'll fix it, just trying to determine if it's a little fix or a ditch-templating-for-python-sooner-rather-than-later fix. ```; # Flags that were used to compile Psi4.; CXX = PLUGIN_CXX; CXXDEFS = PLUGIN_DEFINES; CXXFLAGS = PLUGIN_FLAGS; LDFLAGS = PLUGIN_LDFLAGS; INCLUDES = PLUGIN_INCLUDES; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235478566
https://github.com/psi4/psi4/pull/442#issuecomment-235478566:221,Modifiability,plugin,plugin,221,"Did plugin makefile writing ever work upon testing (https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/psi4/src/bin/psi4_main/create_new_plugin.cc#L137-L141)? I'm getting the below in the Makefile from a `psi4 --new-plugin`. I'll fix it, just trying to determine if it's a little fix or a ditch-templating-for-python-sooner-rather-than-later fix. ```; # Flags that were used to compile Psi4.; CXX = PLUGIN_CXX; CXXDEFS = PLUGIN_DEFINES; CXXFLAGS = PLUGIN_FLAGS; LDFLAGS = PLUGIN_LDFLAGS; INCLUDES = PLUGIN_INCLUDES; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235478566
https://github.com/psi4/psi4/pull/442#issuecomment-235478566:43,Testability,test,testing,43,"Did plugin makefile writing ever work upon testing (https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/psi4/src/bin/psi4_main/create_new_plugin.cc#L137-L141)? I'm getting the below in the Makefile from a `psi4 --new-plugin`. I'll fix it, just trying to determine if it's a little fix or a ditch-templating-for-python-sooner-rather-than-later fix. ```; # Flags that were used to compile Psi4.; CXX = PLUGIN_CXX; CXXDEFS = PLUGIN_DEFINES; CXXFLAGS = PLUGIN_FLAGS; LDFLAGS = PLUGIN_LDFLAGS; INCLUDES = PLUGIN_INCLUDES; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235478566
https://github.com/psi4/psi4/pull/442#issuecomment-235532620:47,Deployability,install,installed,47,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620
https://github.com/psi4/psi4/pull/442#issuecomment-235532620:61,Deployability,install,install,61,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620
https://github.com/psi4/psi4/pull/442#issuecomment-235532620:101,Deployability,install,installing,101,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620
https://github.com/psi4/psi4/pull/442#issuecomment-235532620:175,Deployability,install,install,175,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620
https://github.com/psi4/psi4/pull/442#issuecomment-235532620:204,Deployability,install,install,204,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620
https://github.com/psi4/psi4/pull/442#issuecomment-235532620:445,Modifiability,variab,variable,445,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620
https://github.com/psi4/psi4/pull/442#issuecomment-235532620:327,Safety,detect,detect,327,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620
https://github.com/psi4/psi4/pull/442#issuecomment-235604777:207,Deployability,install,installing,207,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777
https://github.com/psi4/psi4/pull/442#issuecomment-235604777:345,Deployability,install,install,345,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777
https://github.com/psi4/psi4/pull/442#issuecomment-235604777:187,Integrability,depend,dependencies,187,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777
https://github.com/psi4/psi4/pull/442#issuecomment-235604777:494,Integrability,wrap,wrapped,494,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777
https://github.com/psi4/psi4/pull/442#issuecomment-235604777:18,Modifiability,plugin,plugins,18,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777
https://github.com/psi4/psi4/pull/442#issuecomment-235604777:360,Performance,optimiz,optimized,360,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777
https://github.com/psi4/psi4/pull/442#issuecomment-235604777:428,Safety,detect,detect,428,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777
https://github.com/psi4/psi4/pull/442#issuecomment-235903234:34,Deployability,install,install,34,Did I read right above that `make install` has to be performed before `ctest`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235903234
https://github.com/psi4/psi4/pull/442#issuecomment-235903234:53,Performance,perform,performed,53,Did I read right above that `make install` has to be performed before `ctest`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235903234
https://github.com/psi4/psi4/pull/442#issuecomment-235905609:244,Deployability,install,installed,244,"Yes. For py-side development, can probably get away setting PSIDATADIR and running driver on source. But, on the whole, I'm resigned. We did have cases, e.g., plugins, where psi4 was supporting running from source in preference to running from installed; it'll be simpler supporting just the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235905609
https://github.com/psi4/psi4/pull/442#issuecomment-235905609:159,Modifiability,plugin,plugins,159,"Yes. For py-side development, can probably get away setting PSIDATADIR and running driver on source. But, on the whole, I'm resigned. We did have cases, e.g., plugins, where psi4 was supporting running from source in preference to running from installed; it'll be simpler supporting just the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235905609
https://github.com/psi4/psi4/pull/442#issuecomment-235905609:264,Usability,simpl,simpler,264,"Yes. For py-side development, can probably get away setting PSIDATADIR and running driver on source. But, on the whole, I'm resigned. We did have cases, e.g., plugins, where psi4 was supporting running from source in preference to running from installed; it'll be simpler supporting just the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235905609
https://github.com/psi4/psi4/pull/442#issuecomment-235910224:38,Deployability,install,install,38,"Okay, I'm not a fan of that. I do not install anything, psi4 or anything else, until I know that the tests pass, irregardless of what Travis CI says. Plus, I spend most of my time C-side or work in plugins that also require changes to C-side. I'll give it some thought and see what I can do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235910224
https://github.com/psi4/psi4/pull/442#issuecomment-235910224:198,Modifiability,plugin,plugins,198,"Okay, I'm not a fan of that. I do not install anything, psi4 or anything else, until I know that the tests pass, irregardless of what Travis CI says. Plus, I spend most of my time C-side or work in plugins that also require changes to C-side. I'll give it some thought and see what I can do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235910224
https://github.com/psi4/psi4/pull/442#issuecomment-235910224:101,Testability,test,tests,101,"Okay, I'm not a fan of that. I do not install anything, psi4 or anything else, until I know that the tests pass, irregardless of what Travis CI says. Plus, I spend most of my time C-side or work in plugins that also require changes to C-side. I'll give it some thought and see what I can do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235910224
https://github.com/psi4/psi4/pull/442#issuecomment-235914479:17,Deployability,install,installing-untested-prog,17,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479
https://github.com/psi4/psi4/pull/442#issuecomment-235914479:183,Deployability,install,installed,183,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479
https://github.com/psi4/psi4/pull/442#issuecomment-235914479:239,Deployability,install,install,239,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479
https://github.com/psi4/psi4/pull/442#issuecomment-235914479:341,Deployability,install,installing,341,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479
https://github.com/psi4/psi4/pull/442#issuecomment-235914479:393,Deployability,install,install,393,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479
https://github.com/psi4/psi4/pull/442#issuecomment-235914479:204,Safety,risk,risk,204,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479
https://github.com/psi4/psi4/pull/442#issuecomment-235914479:107,Testability,test,testing,107,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479
https://github.com/psi4/psi4/pull/442#issuecomment-235914479:151,Testability,test,tests,151,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479
https://github.com/psi4/psi4/pull/442#issuecomment-235914479:295,Testability,test,testing,295,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479
https://github.com/psi4/psi4/pull/442#issuecomment-235914479:366,Testability,test,tests,366,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479
https://github.com/psi4/psi4/pull/442#issuecomment-235916559:495,Availability,error,error,495,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559
https://github.com/psi4/psi4/pull/442#issuecomment-235916559:144,Deployability,install,install,144,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559
https://github.com/psi4/psi4/pull/442#issuecomment-235916559:183,Deployability,install,installation,183,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559
https://github.com/psi4/psi4/pull/442#issuecomment-235916559:270,Deployability,install,installing,270,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559
https://github.com/psi4/psi4/pull/442#issuecomment-235916559:640,Deployability,install,install,640,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559
https://github.com/psi4/psi4/pull/442#issuecomment-235916559:661,Deployability,install,install,661,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559
https://github.com/psi4/psi4/pull/442#issuecomment-235916559:237,Safety,risk,risk,237,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559
https://github.com/psi4/psi4/pull/442#issuecomment-235916559:528,Safety,detect,detection,528,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559
https://github.com/psi4/psi4/pull/442#issuecomment-235916559:47,Testability,test,testing,47,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559
https://github.com/psi4/psi4/pull/442#issuecomment-235916559:626,Testability,test,tests,626,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559
https://github.com/psi4/psi4/pull/442#issuecomment-235919734:637,Usability,simpl,simple,637,"Glad to hear that you're working on it @ryanmrichard! . We can changed the baked in paths to all be relative to the executable and then have a function we call that provides the absolute path at run time. I've also looked into how to handle the `psi4.so` location. Linux has a way of specifying shared library locations relative to the calling executable. I found this in the `ld` man page:. ```; $ORIGIN (or equivalently ${ORIGIN}); This expands to the directory containing the program or shared; object. Thus, an application located in somedir/app could be; compiled with. gcc -Wl,-rpath,'$ORIGIN/../lib'; ```. Doesn't appear to be as simple on Mac but I'll still investigating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235919734
https://github.com/psi4/psi4/pull/442#issuecomment-235922678:117,Integrability,rout,routine,117,Note that rewriting of hard-coded paths in binary and rpath (even if new path is longer) is one of conda's great and routine features. Just FYI that this issue is to suit developers convenience.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235922678
https://github.com/psi4/psi4/pull/442#issuecomment-235927654:330,Deployability,install,install,330,"Note that some projects distribute conda packages for general use, then tell users that if the packages don't work or if they want hardware-tuned builds, distribute conda recipes to build locally. Without some of the oddities I use, this is pretty much like distributing a do-configure that's guaranteed to work and the resulting install is relocatable. Miniconda would be required but only python and conda-build used from it. I considered this overkill for psi4's cli-friendly developer community, but such a relocation solution is worth considering rather than doing lots of `install_name_tool`, `patchelf`, `rpath`, `@loader_path` mechanics on our own.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235927654
https://github.com/psi4/psi4/pull/442#issuecomment-235927654:600,Deployability,patch,patchelf,600,"Note that some projects distribute conda packages for general use, then tell users that if the packages don't work or if they want hardware-tuned builds, distribute conda recipes to build locally. Without some of the oddities I use, this is pretty much like distributing a do-configure that's guaranteed to work and the resulting install is relocatable. Miniconda would be required but only python and conda-build used from it. I considered this overkill for psi4's cli-friendly developer community, but such a relocation solution is worth considering rather than doing lots of `install_name_tool`, `patchelf`, `rpath`, `@loader_path` mechanics on our own.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235927654
https://github.com/psi4/psi4/pull/442#issuecomment-235927654:276,Modifiability,config,configure,276,"Note that some projects distribute conda packages for general use, then tell users that if the packages don't work or if they want hardware-tuned builds, distribute conda recipes to build locally. Without some of the oddities I use, this is pretty much like distributing a do-configure that's guaranteed to work and the resulting install is relocatable. Miniconda would be required but only python and conda-build used from it. I considered this overkill for psi4's cli-friendly developer community, but such a relocation solution is worth considering rather than doing lots of `install_name_tool`, `patchelf`, `rpath`, `@loader_path` mechanics on our own.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235927654
https://github.com/psi4/psi4/pull/442#issuecomment-235927654:140,Performance,tune,tuned,140,"Note that some projects distribute conda packages for general use, then tell users that if the packages don't work or if they want hardware-tuned builds, distribute conda recipes to build locally. Without some of the oddities I use, this is pretty much like distributing a do-configure that's guaranteed to work and the resulting install is relocatable. Miniconda would be required but only python and conda-build used from it. I considered this overkill for psi4's cli-friendly developer community, but such a relocation solution is worth considering rather than doing lots of `install_name_tool`, `patchelf`, `rpath`, `@loader_path` mechanics on our own.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235927654
https://github.com/psi4/psi4/pull/442#issuecomment-236021130:103,Deployability,install,install,103,I'll be the first to admit that the RPATHs in this version are a little wanky. I just give it both its install and build locations. I really like the relative RPATHS @jturney brought up and that's probably the way to do it if we can find a Mac solution as well. [Site with the CMake commands to pull this off](https://www.semipol.de/2012/02/16/relative-rpath-settings-with-cmake.html),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236021130
https://github.com/psi4/psi4/pull/442#issuecomment-236132448:500,Integrability,rout,routes,500,"I like the options-processing macros, @ryanmrichard. Here you meant `AND`, yes? Or even better, `if(NOT DEFINED ${variable})`? https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11. You may want to copy Psi4Macros from libint back over to psi4 (diff here: https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff) as I fixed that processing problem, expanded to bool options, elaborated printing, and tested a range of input values/specification routes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236132448
https://github.com/psi4/psi4/pull/442#issuecomment-236132448:114,Modifiability,variab,variable,114,"I like the options-processing macros, @ryanmrichard. Here you meant `AND`, yes? Or even better, `if(NOT DEFINED ${variable})`? https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11. You may want to copy Psi4Macros from libint back over to psi4 (diff here: https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff) as I fixed that processing problem, expanded to bool options, elaborated printing, and tested a range of input values/specification routes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236132448
https://github.com/psi4/psi4/pull/442#issuecomment-236132448:455,Testability,test,tested,455,"I like the options-processing macros, @ryanmrichard. Here you meant `AND`, yes? Or even better, `if(NOT DEFINED ${variable})`? https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11. You may want to copy Psi4Macros from libint back over to psi4 (diff here: https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff) as I fixed that processing problem, expanded to bool options, elaborated printing, and tested a range of input values/specification routes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236132448
https://github.com/psi4/psi4/pull/442#issuecomment-236171587:797,Integrability,rout,routes,797,"Yeah the not defined option is best. The extra printing looks good. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 29, 2016 5:11 AM, ""Lori A. Burns"" notifications@github.com wrote:. > I like the options-processing macros, @ryanmrichard; > https://github.com/ryanmrichard.; > ; > Here you meant AND, yes? Or even better, if(NOT DEFINED ${variable})?; > https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11; > ; > You may want to copy Psi4Macros from libint back over to psi4 (diff here:; > loriab/libint1@e992700; > https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff); > as I fixed that processing problem, expanded to bool options, elaborated; > printing, and tested a range of input values/specification routes.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-236132448, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi4KbNA_LZ9m3xza9XqeG7EkicSaDks5qacPBgaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236171587
https://github.com/psi4/psi4/pull/442#issuecomment-236171587:368,Modifiability,variab,variable,368,"Yeah the not defined option is best. The extra printing looks good. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 29, 2016 5:11 AM, ""Lori A. Burns"" notifications@github.com wrote:. > I like the options-processing macros, @ryanmrichard; > https://github.com/ryanmrichard.; > ; > Here you meant AND, yes? Or even better, if(NOT DEFINED ${variable})?; > https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11; > ; > You may want to copy Psi4Macros from libint back over to psi4 (diff here:; > loriab/libint1@e992700; > https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff); > as I fixed that processing problem, expanded to bool options, elaborated; > printing, and tested a range of input values/specification routes.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-236132448, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi4KbNA_LZ9m3xza9XqeG7EkicSaDks5qacPBgaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236171587
https://github.com/psi4/psi4/pull/442#issuecomment-236171587:752,Testability,test,tested,752,"Yeah the not defined option is best. The extra printing looks good. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 29, 2016 5:11 AM, ""Lori A. Burns"" notifications@github.com wrote:. > I like the options-processing macros, @ryanmrichard; > https://github.com/ryanmrichard.; > ; > Here you meant AND, yes? Or even better, if(NOT DEFINED ${variable})?; > https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11; > ; > You may want to copy Psi4Macros from libint back over to psi4 (diff here:; > loriab/libint1@e992700; > https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff); > as I fixed that processing problem, expanded to bool options, elaborated; > printing, and tested a range of input values/specification routes.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-236132448, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi4KbNA_LZ9m3xza9XqeG7EkicSaDks5qacPBgaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236171587
https://github.com/psi4/psi4/pull/442#issuecomment-236274927:31,Deployability,patch,patch,31,Sounds good. I think we had to patch 1.55 a few times.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236274927
https://github.com/psi4/psi4/pull/442#issuecomment-236387131:805,Availability,error,errors,805,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131
https://github.com/psi4/psi4/pull/442#issuecomment-236387131:1132,Integrability,message,message,1132,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131
https://github.com/psi4/psi4/pull/442#issuecomment-236387131:322,Modifiability,rewrite,rewrite,322,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131
https://github.com/psi4/psi4/pull/442#issuecomment-236387131:472,Safety,safe,safeguards,472,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131
https://github.com/psi4/psi4/pull/442#issuecomment-236387131:546,Safety,safe,safeguards,546,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131
https://github.com/psi4/psi4/pull/442#issuecomment-236387131:917,Testability,test,testing,917,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131
https://github.com/psi4/psi4/pull/442#issuecomment-236387131:984,Testability,test,testing,984,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131
https://github.com/psi4/psi4/pull/442#issuecomment-236387131:855,Usability,guid,guide,855,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:662,Deployability,install,install,662,"@psi4. Assuming the most recent check in passes this PR is imminently ready to merge (Lori is working on the Conda binary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1183,Deployability,Install,Installing,1183,"and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's maste",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1433,Deployability,install,installing,1433,"on:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's master repo, make a fresh fork, and manually copy/paste any files you are working on into that fresh fork; 5. Since the history is getting messed up anyways, there are plans to rip Boost out after merg",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1093,Integrability,depend,dependencies,1093,"ary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:685,Modifiability,config,configure,685,"@psi4. Assuming the most recent check in passes this PR is imminently ready to merge (Lori is working on the Conda binary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:751,Modifiability,variab,variables,751,"@psi4. Assuming the most recent check in passes this PR is imminently ready to merge (Lori is working on the Conda binary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:781,Performance,tune,tune,781,"@psi4. Assuming the most recent check in passes this PR is imminently ready to merge (Lori is working on the Conda binary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1405,Performance,perform,performed,1405,"on:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's master repo, make a fresh fork, and manually copy/paste any files you are working on into that fresh fork; 5. Since the history is getting messed up anyways, there are plans to rip Boost out after merg",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1460,Performance,perform,performed,1460,"em– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's master repo, make a fresh fork, and manually copy/paste any files you are working on into that fresh fork; 5. Since the history is getting messed up anyways, there are plans to rip Boost out after merging this PR. We don't really need Boost anymore, it adds to our compile tim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1345,Testability,Test,Tests,1345,"on:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's master repo, make a fresh fork, and manually copy/paste any files you are working on into that fresh fork; 5. Since the history is getting messed up anyways, there are plans to rip Boost out after merg",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1333,Usability,learn,learn,1333,"your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's master repo, make a fresh fork, and manually copy/paste any files you are working on int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542
https://github.com/psi4/psi4/pull/442#issuecomment-237278849:133,Integrability,message,message,133,"Minor issue: with g++, cmake has a warning about xHost (which is intel specific):. ```; CMake Warning at cmake/Psi4Macros.cmake:105 (message):; Option unfulfilled as none of -xHost valid; Call Stack (most recent call first):; cmake/Psi4Macros.cmake:161 (add_C_flags); cmake/Psi4Macros.cmake:173 (add_flags); CMakeLists.txt:48 (option_with_flags); ```. I believe the gcc/g++ alternative is `-march=native`, but I don't have much experience with it. You might need to set the options differently depending on the compiler.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237278849
https://github.com/psi4/psi4/pull/442#issuecomment-237278849:494,Integrability,depend,depending,494,"Minor issue: with g++, cmake has a warning about xHost (which is intel specific):. ```; CMake Warning at cmake/Psi4Macros.cmake:105 (message):; Option unfulfilled as none of -xHost valid; Call Stack (most recent call first):; cmake/Psi4Macros.cmake:161 (add_C_flags); cmake/Psi4Macros.cmake:173 (add_flags); CMakeLists.txt:48 (option_with_flags); ```. I believe the gcc/g++ alternative is `-march=native`, but I don't have much experience with it. You might need to set the options differently depending on the compiler.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237278849
https://github.com/psi4/psi4/pull/442#issuecomment-237703940:4,Integrability,interface,interface,4,"The interface include directories/libraries of (external) projects don't seem to propagate when they are added via `psi4_add_library`. I think you mentioned you had a problem with this before. It looks like the problem might be line 64 in `Psi4Macros.cmake`:. ```; target_link_libraries(${libname} INTERFACE ${name_i}); ```. I think that should be PUBLIC rather than INTERFACE. That way, the `${libname}` library will use the added library, as well as pass it along on its interface. Changing that causes other build issues, though, and I'm not 100% positive what it should be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237703940
https://github.com/psi4/psi4/pull/442#issuecomment-237703940:298,Integrability,INTERFACE,INTERFACE,298,"The interface include directories/libraries of (external) projects don't seem to propagate when they are added via `psi4_add_library`. I think you mentioned you had a problem with this before. It looks like the problem might be line 64 in `Psi4Macros.cmake`:. ```; target_link_libraries(${libname} INTERFACE ${name_i}); ```. I think that should be PUBLIC rather than INTERFACE. That way, the `${libname}` library will use the added library, as well as pass it along on its interface. Changing that causes other build issues, though, and I'm not 100% positive what it should be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237703940
https://github.com/psi4/psi4/pull/442#issuecomment-237703940:367,Integrability,INTERFACE,INTERFACE,367,"The interface include directories/libraries of (external) projects don't seem to propagate when they are added via `psi4_add_library`. I think you mentioned you had a problem with this before. It looks like the problem might be line 64 in `Psi4Macros.cmake`:. ```; target_link_libraries(${libname} INTERFACE ${name_i}); ```. I think that should be PUBLIC rather than INTERFACE. That way, the `${libname}` library will use the added library, as well as pass it along on its interface. Changing that causes other build issues, though, and I'm not 100% positive what it should be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237703940
https://github.com/psi4/psi4/pull/442#issuecomment-237703940:473,Integrability,interface,interface,473,"The interface include directories/libraries of (external) projects don't seem to propagate when they are added via `psi4_add_library`. I think you mentioned you had a problem with this before. It looks like the problem might be line 64 in `Psi4Macros.cmake`:. ```; target_link_libraries(${libname} INTERFACE ${name_i}); ```. I think that should be PUBLIC rather than INTERFACE. That way, the `${libname}` library will use the added library, as well as pass it along on its interface. Changing that causes other build issues, though, and I'm not 100% positive what it should be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237703940
https://github.com/psi4/psi4/pull/442#issuecomment-237704967:63,Integrability,INTERFACE,INTERFACE,63,"My current leaning is that they should be IMPORTED rather than INTERFACE (http://stackoverflow.com/a/36649194). IMPORTED is also what they were before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake), though certainly we want to abandon the Find modules where we can (any project we can influence) and replace with Config. I'm working on the ExternalProjects exporting their targets, so I'll report if I get anywhere.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237704967
https://github.com/psi4/psi4/pull/442#issuecomment-237704967:404,Modifiability,Config,Config,404,"My current leaning is that they should be IMPORTED rather than INTERFACE (http://stackoverflow.com/a/36649194). IMPORTED is also what they were before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake), though certainly we want to abandon the Find modules where we can (any project we can influence) and replace with Config. I'm working on the ExternalProjects exporting their targets, so I'll report if I get anywhere.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237704967
https://github.com/psi4/psi4/pull/442#issuecomment-237716768:80,Integrability,interface,interface,80,"It sounds like @loriab is right, the external projects should be imported,; not interface. I am now under the impression public is the same as; interface except you can't link to interface. Suggesting that within a; project I think @bennybp is right they should be public, unless they are; header only at which point they are interface. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 6:40 PM, ""Lori A. Burns"" notifications@github.com wrote:. > My current leaning is that they should be IMPORTED rather than INTERFACE (; > http://stackoverflow.com/a/36649194). IMPORTED is also what they were; > before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake; > and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake),; > though certainly we want to abandon the Find modules where we can (any; > project we can influence) and replace with Config. I'm working on the; > ExternalProjects exporting their targets, so I'll report if I get anywhere.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-237704967, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8jQRwWholImqPd82AJVjlrrYfOWks5qcmpigaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237716768
https://github.com/psi4/psi4/pull/442#issuecomment-237716768:144,Integrability,interface,interface,144,"It sounds like @loriab is right, the external projects should be imported,; not interface. I am now under the impression public is the same as; interface except you can't link to interface. Suggesting that within a; project I think @bennybp is right they should be public, unless they are; header only at which point they are interface. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 6:40 PM, ""Lori A. Burns"" notifications@github.com wrote:. > My current leaning is that they should be IMPORTED rather than INTERFACE (; > http://stackoverflow.com/a/36649194). IMPORTED is also what they were; > before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake; > and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake),; > though certainly we want to abandon the Find modules where we can (any; > project we can influence) and replace with Config. I'm working on the; > ExternalProjects exporting their targets, so I'll report if I get anywhere.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-237704967, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8jQRwWholImqPd82AJVjlrrYfOWks5qcmpigaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237716768
https://github.com/psi4/psi4/pull/442#issuecomment-237716768:179,Integrability,interface,interface,179,"It sounds like @loriab is right, the external projects should be imported,; not interface. I am now under the impression public is the same as; interface except you can't link to interface. Suggesting that within a; project I think @bennybp is right they should be public, unless they are; header only at which point they are interface. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 6:40 PM, ""Lori A. Burns"" notifications@github.com wrote:. > My current leaning is that they should be IMPORTED rather than INTERFACE (; > http://stackoverflow.com/a/36649194). IMPORTED is also what they were; > before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake; > and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake),; > though certainly we want to abandon the Find modules where we can (any; > project we can influence) and replace with Config. I'm working on the; > ExternalProjects exporting their targets, so I'll report if I get anywhere.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-237704967, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8jQRwWholImqPd82AJVjlrrYfOWks5qcmpigaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237716768
https://github.com/psi4/psi4/pull/442#issuecomment-237716768:326,Integrability,interface,interface,326,"It sounds like @loriab is right, the external projects should be imported,; not interface. I am now under the impression public is the same as; interface except you can't link to interface. Suggesting that within a; project I think @bennybp is right they should be public, unless they are; header only at which point they are interface. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 6:40 PM, ""Lori A. Burns"" notifications@github.com wrote:. > My current leaning is that they should be IMPORTED rather than INTERFACE (; > http://stackoverflow.com/a/36649194). IMPORTED is also what they were; > before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake; > and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake),; > though certainly we want to abandon the Find modules where we can (any; > project we can influence) and replace with Config. I'm working on the; > ExternalProjects exporting their targets, so I'll report if I get anywhere.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-237704967, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8jQRwWholImqPd82AJVjlrrYfOWks5qcmpigaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237716768
https://github.com/psi4/psi4/pull/442#issuecomment-237716768:546,Integrability,INTERFACE,INTERFACE,546,"It sounds like @loriab is right, the external projects should be imported,; not interface. I am now under the impression public is the same as; interface except you can't link to interface. Suggesting that within a; project I think @bennybp is right they should be public, unless they are; header only at which point they are interface. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 6:40 PM, ""Lori A. Burns"" notifications@github.com wrote:. > My current leaning is that they should be IMPORTED rather than INTERFACE (; > http://stackoverflow.com/a/36649194). IMPORTED is also what they were; > before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake; > and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake),; > though certainly we want to abandon the Find modules where we can (any; > project we can influence) and replace with Config. I'm working on the; > ExternalProjects exporting their targets, so I'll report if I get anywhere.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-237704967, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8jQRwWholImqPd82AJVjlrrYfOWks5qcmpigaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237716768
https://github.com/psi4/psi4/pull/442#issuecomment-237716768:903,Modifiability,Config,Config,903,"It sounds like @loriab is right, the external projects should be imported,; not interface. I am now under the impression public is the same as; interface except you can't link to interface. Suggesting that within a; project I think @bennybp is right they should be public, unless they are; header only at which point they are interface. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 6:40 PM, ""Lori A. Burns"" notifications@github.com wrote:. > My current leaning is that they should be IMPORTED rather than INTERFACE (; > http://stackoverflow.com/a/36649194). IMPORTED is also what they were; > before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake; > and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake),; > though certainly we want to abandon the Find modules where we can (any; > project we can influence) and replace with Config. I'm working on the; > ExternalProjects exporting their targets, so I'll report if I get anywhere.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-237704967, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8jQRwWholImqPd82AJVjlrrYfOWks5qcmpigaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237716768
https://github.com/psi4/psi4/pull/442#issuecomment-237727449:248,Integrability,INTERFACE,INTERFACE,248,"We might be talking about two different things. @loriab is talking about `add_library`, while I'm talking about `target_link_libraries`. This is my understanding (although someone can correct me if I'm wrong): when doing a `target_link_libraries`, INTERFACE will only add it to the library's interface. PUBLIC will actually make the project link to the target library. Ie. ```; target_link_libraries(mints PUBLIC erd); ```. will add anything that is part of the erd's interface to mints (headers, libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files will be compiled with erd's include directory, etc). It will also add erd to mints interface (anything linked to mints will pull in the erd includes). On the other hand. ```; target_link_libraries(mints INTERFACE erd); ```. will only add it to mint's interface (and not actually cause header paths, etc, to be added to the command line for files in mints, but will be added for libraries depending on mints).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237727449
https://github.com/psi4/psi4/pull/442#issuecomment-237727449:292,Integrability,interface,interface,292,"We might be talking about two different things. @loriab is talking about `add_library`, while I'm talking about `target_link_libraries`. This is my understanding (although someone can correct me if I'm wrong): when doing a `target_link_libraries`, INTERFACE will only add it to the library's interface. PUBLIC will actually make the project link to the target library. Ie. ```; target_link_libraries(mints PUBLIC erd); ```. will add anything that is part of the erd's interface to mints (headers, libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files will be compiled with erd's include directory, etc). It will also add erd to mints interface (anything linked to mints will pull in the erd includes). On the other hand. ```; target_link_libraries(mints INTERFACE erd); ```. will only add it to mint's interface (and not actually cause header paths, etc, to be added to the command line for files in mints, but will be added for libraries depending on mints).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237727449
https://github.com/psi4/psi4/pull/442#issuecomment-237727449:468,Integrability,interface,interface,468,"We might be talking about two different things. @loriab is talking about `add_library`, while I'm talking about `target_link_libraries`. This is my understanding (although someone can correct me if I'm wrong): when doing a `target_link_libraries`, INTERFACE will only add it to the library's interface. PUBLIC will actually make the project link to the target library. Ie. ```; target_link_libraries(mints PUBLIC erd); ```. will add anything that is part of the erd's interface to mints (headers, libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files will be compiled with erd's include directory, etc). It will also add erd to mints interface (anything linked to mints will pull in the erd includes). On the other hand. ```; target_link_libraries(mints INTERFACE erd); ```. will only add it to mint's interface (and not actually cause header paths, etc, to be added to the command line for files in mints, but will be added for libraries depending on mints).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237727449
https://github.com/psi4/psi4/pull/442#issuecomment-237727449:522,Integrability,INTERFACE,INTERFACE,522,"We might be talking about two different things. @loriab is talking about `add_library`, while I'm talking about `target_link_libraries`. This is my understanding (although someone can correct me if I'm wrong): when doing a `target_link_libraries`, INTERFACE will only add it to the library's interface. PUBLIC will actually make the project link to the target library. Ie. ```; target_link_libraries(mints PUBLIC erd); ```. will add anything that is part of the erd's interface to mints (headers, libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files will be compiled with erd's include directory, etc). It will also add erd to mints interface (anything linked to mints will pull in the erd includes). On the other hand. ```; target_link_libraries(mints INTERFACE erd); ```. will only add it to mint's interface (and not actually cause header paths, etc, to be added to the command line for files in mints, but will be added for libraries depending on mints).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237727449
https://github.com/psi4/psi4/pull/442#issuecomment-237727449:654,Integrability,interface,interface,654,"We might be talking about two different things. @loriab is talking about `add_library`, while I'm talking about `target_link_libraries`. This is my understanding (although someone can correct me if I'm wrong): when doing a `target_link_libraries`, INTERFACE will only add it to the library's interface. PUBLIC will actually make the project link to the target library. Ie. ```; target_link_libraries(mints PUBLIC erd); ```. will add anything that is part of the erd's interface to mints (headers, libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files will be compiled with erd's include directory, etc). It will also add erd to mints interface (anything linked to mints will pull in the erd includes). On the other hand. ```; target_link_libraries(mints INTERFACE erd); ```. will only add it to mint's interface (and not actually cause header paths, etc, to be added to the command line for files in mints, but will be added for libraries depending on mints).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237727449
https://github.com/psi4/psi4/pull/442#issuecomment-237727449:774,Integrability,INTERFACE,INTERFACE,774,"We might be talking about two different things. @loriab is talking about `add_library`, while I'm talking about `target_link_libraries`. This is my understanding (although someone can correct me if I'm wrong): when doing a `target_link_libraries`, INTERFACE will only add it to the library's interface. PUBLIC will actually make the project link to the target library. Ie. ```; target_link_libraries(mints PUBLIC erd); ```. will add anything that is part of the erd's interface to mints (headers, libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files will be compiled with erd's include directory, etc). It will also add erd to mints interface (anything linked to mints will pull in the erd includes). On the other hand. ```; target_link_libraries(mints INTERFACE erd); ```. will only add it to mint's interface (and not actually cause header paths, etc, to be added to the command line for files in mints, but will be added for libraries depending on mints).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237727449
https://github.com/psi4/psi4/pull/442#issuecomment-237727449:822,Integrability,interface,interface,822,"We might be talking about two different things. @loriab is talking about `add_library`, while I'm talking about `target_link_libraries`. This is my understanding (although someone can correct me if I'm wrong): when doing a `target_link_libraries`, INTERFACE will only add it to the library's interface. PUBLIC will actually make the project link to the target library. Ie. ```; target_link_libraries(mints PUBLIC erd); ```. will add anything that is part of the erd's interface to mints (headers, libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files will be compiled with erd's include directory, etc). It will also add erd to mints interface (anything linked to mints will pull in the erd includes). On the other hand. ```; target_link_libraries(mints INTERFACE erd); ```. will only add it to mint's interface (and not actually cause header paths, etc, to be added to the command line for files in mints, but will be added for libraries depending on mints).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237727449
https://github.com/psi4/psi4/pull/442#issuecomment-237727449:959,Integrability,depend,depending,959,"We might be talking about two different things. @loriab is talking about `add_library`, while I'm talking about `target_link_libraries`. This is my understanding (although someone can correct me if I'm wrong): when doing a `target_link_libraries`, INTERFACE will only add it to the library's interface. PUBLIC will actually make the project link to the target library. Ie. ```; target_link_libraries(mints PUBLIC erd); ```. will add anything that is part of the erd's interface to mints (headers, libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files will be compiled with erd's include directory, etc). It will also add erd to mints interface (anything linked to mints will pull in the erd includes). On the other hand. ```; target_link_libraries(mints INTERFACE erd); ```. will only add it to mint's interface (and not actually cause header paths, etc, to be added to the command line for files in mints, but will be added for libraries depending on mints).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237727449
https://github.com/psi4/psi4/pull/442#issuecomment-237730328:49,Integrability,interface,interface-public-private-mean-in-cmake-target-compilation-setting,49,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328
https://github.com/psi4/psi4/pull/442#issuecomment-237730328:819,Integrability,INTERFACE,INTERFACE,819,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328
https://github.com/psi4/psi4/pull/442#issuecomment-237730328:868,Integrability,interface,interface,868,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328
https://github.com/psi4/psi4/pull/442#issuecomment-237730328:1059,Integrability,interface,interface,1059,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328
https://github.com/psi4/psi4/pull/442#issuecomment-237730328:1118,Integrability,INTERFACE,INTERFACE,1118,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328
https://github.com/psi4/psi4/pull/442#issuecomment-237730328:1260,Integrability,interface,interface,1260,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328
https://github.com/psi4/psi4/pull/442#issuecomment-237730328:1390,Integrability,INTERFACE,INTERFACE,1390,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328
https://github.com/psi4/psi4/pull/442#issuecomment-237730328:1443,Integrability,interface,interface,1443,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328
https://github.com/psi4/psi4/pull/442#issuecomment-237730328:1590,Integrability,depend,depending,1590,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328
https://github.com/psi4/psi4/pull/442#issuecomment-237732780:162,Integrability,INTERFACE,INTERFACE,162,"I'm reading the cmake overview docs (which are actually cohesive, imagine that) and agree with @ryanmrichard's second SO post. It seems practical to reason about INTERFACE (which, yes, now I see is different from the add_library() STATIC/SHARED/MODULE/IMPORTED/INTERFACE business) and PRIVATE separately, then, if both, consider PUBLIC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237732780
https://github.com/psi4/psi4/pull/442#issuecomment-237732780:261,Integrability,INTERFACE,INTERFACE,261,"I'm reading the cmake overview docs (which are actually cohesive, imagine that) and agree with @ryanmrichard's second SO post. It seems practical to reason about INTERFACE (which, yes, now I see is different from the add_library() STATIC/SHARED/MODULE/IMPORTED/INTERFACE business) and PRIVATE separately, then, if both, consider PUBLIC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237732780
https://github.com/psi4/psi4/pull/442#issuecomment-237855000:100,Availability,error,error,100,"@bennybp I'm trying to switch the `psi4_add_library` macro from imported to public as we speak. The error I was getting was something about the alias target `PCMSolver::PCMSolver`, which I appear to have fixed; was this what you were also getting?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237855000
https://github.com/psi4/psi4/pull/442#issuecomment-237869256:23,Availability,error,error,23,"Yes that's exactly the error I had. With that fix, it may be possible at some point to have, for example, libint/libderiv as dependencies of libmints only, and then anything depending on libmints will pull in libint headers. That's something to play with (that was your original intent I think).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237869256
https://github.com/psi4/psi4/pull/442#issuecomment-237869256:125,Integrability,depend,dependencies,125,"Yes that's exactly the error I had. With that fix, it may be possible at some point to have, for example, libint/libderiv as dependencies of libmints only, and then anything depending on libmints will pull in libint headers. That's something to play with (that was your original intent I think).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237869256
https://github.com/psi4/psi4/pull/442#issuecomment-237869256:174,Integrability,depend,depending,174,"Yes that's exactly the error I had. With that fix, it may be possible at some point to have, for example, libint/libderiv as dependencies of libmints only, and then anything depending on libmints will pull in libint headers. That's something to play with (that was your original intent I think).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237869256
https://github.com/psi4/psi4/pull/442#issuecomment-238059409:59,Integrability,INTERFACE,INTERFACE,59,"@ryanmrichard , so are you always adding dummy/placeholder INTERFACE libraries for all the add-ons? In externals dir, either an external proj gets built or a dummy lib gets created. Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. | `addon_found` | `enable_addon` | outcome in external/addon/CM | outcome in psi4/CM optional_plugin() | net result |; | --- | --- | --- | --- | --- |; | T | T | add_lib | append libs | use prebuilt detected |; | T | F | add_lib | add_lib | use dummy interface lib |; | F | T | extproj_add | append libs | use superbuild detected |; | F | F | add_lib | add_lib | use dummy interface lib |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059409
https://github.com/psi4/psi4/pull/442#issuecomment-238059409:523,Integrability,interface,interface,523,"@ryanmrichard , so are you always adding dummy/placeholder INTERFACE libraries for all the add-ons? In externals dir, either an external proj gets built or a dummy lib gets created. Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. | `addon_found` | `enable_addon` | outcome in external/addon/CM | outcome in psi4/CM optional_plugin() | net result |; | --- | --- | --- | --- | --- |; | T | T | add_lib | append libs | use prebuilt detected |; | T | F | add_lib | add_lib | use dummy interface lib |; | F | T | extproj_add | append libs | use superbuild detected |; | F | F | add_lib | add_lib | use dummy interface lib |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059409
https://github.com/psi4/psi4/pull/442#issuecomment-238059409:645,Integrability,interface,interface,645,"@ryanmrichard , so are you always adding dummy/placeholder INTERFACE libraries for all the add-ons? In externals dir, either an external proj gets built or a dummy lib gets created. Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. | `addon_found` | `enable_addon` | outcome in external/addon/CM | outcome in psi4/CM optional_plugin() | net result |; | --- | --- | --- | --- | --- |; | T | T | add_lib | append libs | use prebuilt detected |; | T | F | add_lib | add_lib | use dummy interface lib |; | F | T | extproj_add | append libs | use superbuild detected |; | F | F | add_lib | add_lib | use dummy interface lib |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059409
https://github.com/psi4/psi4/pull/442#issuecomment-238059409:225,Safety,detect,detected,225,"@ryanmrichard , so are you always adding dummy/placeholder INTERFACE libraries for all the add-ons? In externals dir, either an external proj gets built or a dummy lib gets created. Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. | `addon_found` | `enable_addon` | outcome in external/addon/CM | outcome in psi4/CM optional_plugin() | net result |; | --- | --- | --- | --- | --- |; | T | T | add_lib | append libs | use prebuilt detected |; | T | F | add_lib | add_lib | use dummy interface lib |; | F | T | extproj_add | append libs | use superbuild detected |; | F | F | add_lib | add_lib | use dummy interface lib |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059409
https://github.com/psi4/psi4/pull/442#issuecomment-238059409:471,Safety,detect,detected,471,"@ryanmrichard , so are you always adding dummy/placeholder INTERFACE libraries for all the add-ons? In externals dir, either an external proj gets built or a dummy lib gets created. Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. | `addon_found` | `enable_addon` | outcome in external/addon/CM | outcome in psi4/CM optional_plugin() | net result |; | --- | --- | --- | --- | --- |; | T | T | add_lib | append libs | use prebuilt detected |; | T | F | add_lib | add_lib | use dummy interface lib |; | F | T | extproj_add | append libs | use superbuild detected |; | F | F | add_lib | add_lib | use dummy interface lib |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059409
https://github.com/psi4/psi4/pull/442#issuecomment-238059409:593,Safety,detect,detected,593,"@ryanmrichard , so are you always adding dummy/placeholder INTERFACE libraries for all the add-ons? In externals dir, either an external proj gets built or a dummy lib gets created. Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. | `addon_found` | `enable_addon` | outcome in external/addon/CM | outcome in psi4/CM optional_plugin() | net result |; | --- | --- | --- | --- | --- |; | T | T | add_lib | append libs | use prebuilt detected |; | T | F | add_lib | add_lib | use dummy interface lib |; | F | T | extproj_add | append libs | use superbuild detected |; | F | F | add_lib | add_lib | use dummy interface lib |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059409
https://github.com/psi4/psi4/pull/442#issuecomment-238059613:375,Integrability,INTERFACE,INTERFACE,375,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613
https://github.com/psi4/psi4/pull/442#issuecomment-238059613:786,Integrability,interface,interface,786,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613
https://github.com/psi4/psi4/pull/442#issuecomment-238059613:888,Integrability,interface,interface,888,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613
https://github.com/psi4/psi4/pull/442#issuecomment-238059613:547,Safety,detect,detected,547,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613
https://github.com/psi4/psi4/pull/442#issuecomment-238059613:744,Safety,detect,detected,744,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613
https://github.com/psi4/psi4/pull/442#issuecomment-238059613:846,Safety,detect,detected,846,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613
https://github.com/psi4/psi4/pull/442#issuecomment-238059613:40,Testability,log,logic,40,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613
https://github.com/psi4/psi4/pull/442#issuecomment-238059613:117,Testability,log,logic,117,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613
https://github.com/psi4/psi4/pull/442#issuecomment-238059860:77,Testability,log,logic,77,"Well, you know the last two lines work. I didn't try the first line with the logic as-is. I'm modifying the external projects so that they export their own targets (libs, includes, and preprocessor vars) and was alarmed by the seeming dummy libs. So thanks for the clarification. I think I know what directory to work in now. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059860
https://github.com/psi4/psi4/pull/442#issuecomment-238060504:346,Integrability,INTERFACE,INTERFACE,346,"> Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. Not sure this is exactly correct. If enabled (or psi4 requires it), doesn't the psi4 core always try to find the library? There is no dummy library at this point. This part somewhat confusing, but I think the entire purpose of the dummy external project INTERFACE libraries is for dependency resolution (ie build order). Then, the psi4 core always finds them itself (if needed). Note 1: If an addon isn't enabled, adding the dummy target isn't strictly required. But then you'd have to selectively add them to the dependency list, rather than always adding it. Note 2: Shouldn't the result of optional_plugin be nothing if enable_addon is false?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238060504
https://github.com/psi4/psi4/pull/442#issuecomment-238060504:373,Integrability,depend,dependency,373,"> Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. Not sure this is exactly correct. If enabled (or psi4 requires it), doesn't the psi4 core always try to find the library? There is no dummy library at this point. This part somewhat confusing, but I think the entire purpose of the dummy external project INTERFACE libraries is for dependency resolution (ie build order). Then, the psi4 core always finds them itself (if needed). Note 1: If an addon isn't enabled, adding the dummy target isn't strictly required. But then you'd have to selectively add them to the dependency list, rather than always adding it. Note 2: Shouldn't the result of optional_plugin be nothing if enable_addon is false?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238060504
https://github.com/psi4/psi4/pull/442#issuecomment-238060504:606,Integrability,depend,dependency,606,"> Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. Not sure this is exactly correct. If enabled (or psi4 requires it), doesn't the psi4 core always try to find the library? There is no dummy library at this point. This part somewhat confusing, but I think the entire purpose of the dummy external project INTERFACE libraries is for dependency resolution (ie build order). Then, the psi4 core always finds them itself (if needed). Note 1: If an addon isn't enabled, adding the dummy target isn't strictly required. But then you'd have to selectively add them to the dependency list, rather than always adding it. Note 2: Shouldn't the result of optional_plugin be nothing if enable_addon is false?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238060504
https://github.com/psi4/psi4/pull/442#issuecomment-238060504:45,Safety,detect,detected,45,"> Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. Not sure this is exactly correct. If enabled (or psi4 requires it), doesn't the psi4 core always try to find the library? There is no dummy library at this point. This part somewhat confusing, but I think the entire purpose of the dummy external project INTERFACE libraries is for dependency resolution (ie build order). Then, the psi4 core always finds them itself (if needed). Note 1: If an addon isn't enabled, adding the dummy target isn't strictly required. But then you'd have to selectively add them to the dependency list, rather than always adding it. Note 2: Shouldn't the result of optional_plugin be nothing if enable_addon is false?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238060504
https://github.com/psi4/psi4/pull/442#issuecomment-238061055:814,Availability,down,down,814,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055
https://github.com/psi4/psi4/pull/442#issuecomment-238061055:195,Integrability,depend,dependency,195,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055
https://github.com/psi4/psi4/pull/442#issuecomment-238061055:551,Integrability,INTERFACE,INTERFACE,551,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055
https://github.com/psi4/psi4/pull/442#issuecomment-238061055:455,Modifiability,CONFIG,CONFIG,455,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055
https://github.com/psi4/psi4/pull/442#issuecomment-238061055:824,Testability,log,logic,824,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055
https://github.com/psi4/psi4/pull/442#issuecomment-238169003:79,Safety,detect,detection,79,Have you been using a Windows target path for all the externals find_project() detection in stage? 3rd line in:. ```; <prefix>/ (W); <prefix>/(cmake|CMake)/ (W); <prefix>/<name>*/ (W); <prefix>/<name>*/(cmake|CMake)/ (W); <prefix>/(lib/<arch>|lib|share)/cmake/<name>*/ (U); <prefix>/(lib/<arch>|lib|share)/<name>*/ (U); <prefix>/(lib/<arch>|lib|share)/<name>*/(cmake|CMake)/ (U); <prefix>/<name>.framework/Resources/ (A); <prefix>/<name>.framework/Resources/CMake/ (A); <prefix>/<name>.framework/Versions/*/Resources/ (A); <prefix>/<name>.framework/Versions/*/Resources/CMake/ (A); <prefix>/<name>.app/Contents/Resources/ (A); <prefix>/<name>.app/Contents/Resources/CMake/ (A); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238169003
https://github.com/psi4/psi4/pull/442#issuecomment-238219955:283,Modifiability,config,config,283,"It should have them linked in. You can remove it if you like. The idea was ALL external projects should; be fully functioning builds, which requires a project. I have no idea why all the directories would be under /psi4/psi4_main. Is; that a typo?. Yes, for any project we built the config file is found in that path. This; went back to namespace protecting them from the rest of the system and; build. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 7, 2016 2:55 PM, ""Lori A. Burns"" notifications@github.com wrote:. > - So the psi4.so produced isn't as fully featured as the psi4 exe, as; > it doesn't have the add-ons linked in? It's more of a psi4_main.so?; > - What's with project(psi4) being declared in cmake at two different; > levels? It's not like that in pulsar.; > - If /psi4/psi4_main/ still has all the sibling dirs (e.g.,; > libsapt_solver & detci) linked in (which is awkward with cmake), why not; > move those up to /psi4?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238100943, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi3RmNYWusza0ZhSEG2AgxhxLoZUMks5qdioYgaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238219955
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:195,Availability,down,down,195,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:352,Availability,down,downloaded,352,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:5415,Availability,robust,robust,5415,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:579,Deployability,install,installation,579,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:1558,Deployability,install,install-,1558,"spect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; ======================== gdma::gdma ========================; tgt='gdma::gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cds",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:1721,Deployability,install,install-,1721,"spect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; ======================== gdma::gdma ========================; tgt='gdma::gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cds",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:1882,Deployability,install,install-,1882,"spect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; ======================== gdma::gdma ========================; tgt='gdma::gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cds",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:2048,Deployability,install,install-,2048,"es attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; ======================== gdma::gdma ========================; tgt='gdma::gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:2489,Deployability,install,install-,2489,"RSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; ======================== gdma::gdma ========================; tgt='gdma::gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:2702,Deployability,install,install-,2702,"RSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; ======================== gdma::gdma ========================; tgt='gdma::gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4343,Deployability,install,installation,4343,"th the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4776,Deployability,install,install,4776,"R`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:5495,Deployability,install,installations,5495,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:5725,Deployability,install,installation,5725,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:685,Modifiability,variab,variables,685,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:826,Modifiability,CONFIG,CONFIG,826,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:1049,Modifiability,CONFIG,CONFIG,1049,"b/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3232,Modifiability,variab,variables,3232,":gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect supe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3309,Modifiability,variab,variable,3309,"op='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3387,Modifiability,variab,variable,3387,"op='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3788,Modifiability,Config,Config,3788,"external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4367,Modifiability,Config,Config,4367,"th the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4512,Modifiability,config,config,4512,"g not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:5030,Modifiability,config,config,5030,"ct pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:5325,Modifiability,CONFIG,CONFIG,5325,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:5784,Modifiability,config,config,5784,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:6190,Modifiability,config,configs,6190,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:399,Safety,detect,detects,399,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:593,Safety,detect,detects,593,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3993,Safety,detect,detect,3993,"d make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4030,Safety,detect,detect,4030,"d make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4081,Safety,detect,detect,4081,"d make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4153,Safety,detect,detect,4153,"d make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4380,Safety,detect,detection,4380,"USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:6205,Safety,detect,detected,6205,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238370429:1205,Usability,simpl,simpler,1205,"- `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; ======================== gdma::gdma ========================; tgt='gdma::gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_C",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429
https://github.com/psi4/psi4/pull/442#issuecomment-238380074:324,Modifiability,config,config,324,"@loriab I think everything is fine from the superbuild perspective and I like the proposed dump- everything-in-external-directory structure. I think you have to be careful about assuming these external projects will have too much CMake stuff set, which is part of the reason I defined the compile time macros Psi4 side. The config files for GDMA, libint, etc. are not part of the actual distributions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238380074
https://github.com/psi4/psi4/pull/442#issuecomment-239034822:500,Availability,error,errors,500,"In doing some development with the branch, I only have one more complaint (so far). Whenever I make a change to a file (in my case, in libmints), running `make` will compile several files before my changed file. This happens every time I make a change. The files are in versioned_code:. version.cc; psi_start.cc; python.cc. I know they have to be compiled every time, but it's annoying that they are compiled **before** my changed files. Ie, these files are compiled before any self-induced compiler errors will surface. If you are fixing multiple errors, it's annoying (since some of them take a little while)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239034822
https://github.com/psi4/psi4/pull/442#issuecomment-239034822:548,Availability,error,errors,548,"In doing some development with the branch, I only have one more complaint (so far). Whenever I make a change to a file (in my case, in libmints), running `make` will compile several files before my changed file. This happens every time I make a change. The files are in versioned_code:. version.cc; psi_start.cc; python.cc. I know they have to be compiled every time, but it's annoying that they are compiled **before** my changed files. Ie, these files are compiled before any self-induced compiler errors will surface. If you are fixing multiple errors, it's annoying (since some of them take a little while)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239034822
https://github.com/psi4/psi4/pull/442#issuecomment-239042342:1267,Availability,error,errors,1267,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342
https://github.com/psi4/psi4/pull/442#issuecomment-239042342:1318,Availability,error,errors,1318,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342
https://github.com/psi4/psi4/pull/442#issuecomment-239042342:78,Deployability,install,install,78,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342
https://github.com/psi4/psi4/pull/442#issuecomment-239042342:632,Deployability,update,update,632,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342
https://github.com/psi4/psi4/pull/442#issuecomment-239042342:444,Security,hash,hash,444,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342
https://github.com/psi4/psi4/pull/442#issuecomment-239042342:623,Security,hash,hash,623,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342
https://github.com/psi4/psi4/pull/442#issuecomment-239050499:333,Availability,down,download,333,"Yeah, the recomp is annoying, but that `gitversion.py` takes care of at least:; - defining of `GIT_VERSION` and `PSI_VERSION` compile definitions including computing a sortable version from `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499
https://github.com/psi4/psi4/pull/442#issuecomment-239050499:1973,Availability,toler,tolerate,1973,"m `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file compiles to avoid opening it. btw, I'm storing my changes at https://github.com/loriab/psi4/commits/CMakeRewrite for the moment, since I'm breaking some things that are purportedly working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499
https://github.com/psi4/psi4/pull/442#issuecomment-239050499:1780,Deployability,install,install,1780,"m `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file compiles to avoid opening it. btw, I'm storing my changes at https://github.com/loriab/psi4/commits/CMakeRewrite for the moment, since I'm breaking some things that are purportedly working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499
https://github.com/psi4/psi4/pull/442#issuecomment-239050499:896,Modifiability,config,config,896,"Yeah, the recomp is annoying, but that `gitversion.py` takes care of at least:; - defining of `GIT_VERSION` and `PSI_VERSION` compile definitions including computing a sortable version from `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499
https://github.com/psi4/psi4/pull/442#issuecomment-239050499:1229,Modifiability,config,config,1229,"m `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file compiles to avoid opening it. btw, I'm storing my changes at https://github.com/loriab/psi4/commits/CMakeRewrite for the moment, since I'm breaking some things that are purportedly working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499
https://github.com/psi4/psi4/pull/442#issuecomment-239050499:2011,Safety,avoid,avoid,2011,"m `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file compiles to avoid opening it. btw, I'm storing my changes at https://github.com/loriab/psi4/commits/CMakeRewrite for the moment, since I'm breaking some things that are purportedly working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499
https://github.com/psi4/psi4/pull/442#issuecomment-239050499:1153,Testability,test,test,1153,"ng a sortable version from `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file compiles to avoid opening it. btw, I'm storing my changes at https://github.com/loriab/psi4/commits/CMakeRewrite for the moment, since I'm breaking some things that ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499
https://github.com/psi4/psi4/pull/442#issuecomment-239052313:360,Modifiability,rewrite,rewrite,360,I just tested on my box and I think it is as simple as changing line 4 of `psi4/src/bin/psi4_main/CMakeLists.txt` from. ```; COMMAND ${CMAKE_COMMAND} -E copy ...; ```. to. ```; COMMAND ${CMAKE_COMMAND} -E copy_if_different ...; ```. The `version.h` file only changes the the git commit sha changes (only on commits and pulls). Another consequence of the cmake rewrite is that before you could've simply typed `make mints/fast` in your objdir and it would just compiled libmints. Now's there the required step of `cd objdir/psi4_core-prefix/src/psi4_core-build` before `make mints/fast`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239052313
https://github.com/psi4/psi4/pull/442#issuecomment-239052313:7,Testability,test,tested,7,I just tested on my box and I think it is as simple as changing line 4 of `psi4/src/bin/psi4_main/CMakeLists.txt` from. ```; COMMAND ${CMAKE_COMMAND} -E copy ...; ```. to. ```; COMMAND ${CMAKE_COMMAND} -E copy_if_different ...; ```. The `version.h` file only changes the the git commit sha changes (only on commits and pulls). Another consequence of the cmake rewrite is that before you could've simply typed `make mints/fast` in your objdir and it would just compiled libmints. Now's there the required step of `cd objdir/psi4_core-prefix/src/psi4_core-build` before `make mints/fast`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239052313
https://github.com/psi4/psi4/pull/442#issuecomment-239052313:45,Usability,simpl,simple,45,I just tested on my box and I think it is as simple as changing line 4 of `psi4/src/bin/psi4_main/CMakeLists.txt` from. ```; COMMAND ${CMAKE_COMMAND} -E copy ...; ```. to. ```; COMMAND ${CMAKE_COMMAND} -E copy_if_different ...; ```. The `version.h` file only changes the the git commit sha changes (only on commits and pulls). Another consequence of the cmake rewrite is that before you could've simply typed `make mints/fast` in your objdir and it would just compiled libmints. Now's there the required step of `cd objdir/psi4_core-prefix/src/psi4_core-build` before `make mints/fast`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239052313
https://github.com/psi4/psi4/pull/442#issuecomment-239052313:396,Usability,simpl,simply,396,I just tested on my box and I think it is as simple as changing line 4 of `psi4/src/bin/psi4_main/CMakeLists.txt` from. ```; COMMAND ${CMAKE_COMMAND} -E copy ...; ```. to. ```; COMMAND ${CMAKE_COMMAND} -E copy_if_different ...; ```. The `version.h` file only changes the the git commit sha changes (only on commits and pulls). Another consequence of the cmake rewrite is that before you could've simply typed `make mints/fast` in your objdir and it would just compiled libmints. Now's there the required step of `cd objdir/psi4_core-prefix/src/psi4_core-build` before `make mints/fast`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239052313
https://github.com/psi4/psi4/pull/442#issuecomment-239053251:160,Modifiability,config,config,160,"Yes, the `copy_if_different` was what used to work (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2). One of the psi4/psi4-config --version wasn't responding properly so I just clobbered it with `copy`. I'd prefer to go back to it, but there may be subtle unworkingness. The make fast trick is neat. I don't think it had spread to GaTech.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239053251
https://github.com/psi4/psi4/pull/442#issuecomment-239053971:24,Testability,test,testing,24,Interesting. Guess more testing is needed for the `copy_if_different`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239053971
https://github.com/psi4/psi4/pull/442#issuecomment-239193115:406,Integrability,depend,dependencies,406,"The affected files are psi_start.cc, python.cc, and version.cc . One potential complication is that it has to be accessible before much else has started up in order to be a command-line option. After The Inversion might be a time to find a solution that won't need changing again in short order. The fact of the versioned_code target building first rather than last is, I think, just because it hasn't any dependencies, since it really only depends on `git describe`. If you want to tweak this to happen later, rather than sooner, go right ahead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239193115
https://github.com/psi4/psi4/pull/442#issuecomment-239193115:441,Integrability,depend,depends,441,"The affected files are psi_start.cc, python.cc, and version.cc . One potential complication is that it has to be accessible before much else has started up in order to be a command-line option. After The Inversion might be a time to find a solution that won't need changing again in short order. The fact of the versioned_code target building first rather than last is, I think, just because it hasn't any dependencies, since it really only depends on `git describe`. If you want to tweak this to happen later, rather than sooner, go right ahead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239193115
https://github.com/psi4/psi4/pull/442#issuecomment-239193115:113,Security,access,accessible,113,"The affected files are psi_start.cc, python.cc, and version.cc . One potential complication is that it has to be accessible before much else has started up in order to be a command-line option. After The Inversion might be a time to find a solution that won't need changing again in short order. The fact of the versioned_code target building first rather than last is, I think, just because it hasn't any dependencies, since it really only depends on `git describe`. If you want to tweak this to happen later, rather than sooner, go right ahead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239193115
https://github.com/psi4/psi4/pull/442#issuecomment-239211359:103,Deployability,install,installing,103,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359
https://github.com/psi4/psi4/pull/442#issuecomment-239211359:334,Deployability,install,install,334,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359
https://github.com/psi4/psi4/pull/442#issuecomment-239211359:546,Deployability,install,installed,546,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359
https://github.com/psi4/psi4/pull/442#issuecomment-239211359:680,Deployability,install,install,680,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359
https://github.com/psi4/psi4/pull/442#issuecomment-239211359:765,Deployability,install,install,765,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359
https://github.com/psi4/psi4/pull/442#issuecomment-239211359:847,Integrability,inject,injecting,847,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359
https://github.com/psi4/psi4/pull/442#issuecomment-239211359:847,Security,inject,injecting,847,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359
https://github.com/psi4/psi4/pull/442#issuecomment-239211359:904,Usability,simpl,simple,904,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359
https://github.com/psi4/psi4/pull/442#issuecomment-239220614:454,Deployability,install,installing,454,"Question 2, I think answer 1 is the accepted one by the C++ community; so I'd strongly recommend that one. Question 1 is a toughie. I don't know if I feel strongly about it, but I do think namespace protecting all header files is good practice and should be done for any library regardless of the number and complexity of headers. This also seems to be the norm for C++ projects, which in turn makes it somewhat of a null issue. If you really don't like installing `efp.h` to `efp/efp.h` I'd say go ahead and remove the extra `efp`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239220614
https://github.com/psi4/psi4/pull/442#issuecomment-239526159:600,Energy Efficiency,schedul,schedule,600,"- Thanks for your headers input; - Great new CMake keyword [`CMAKE_INSTALL_MESSAGE`](https://cmake.org/cmake/help/v3.4/variable/CMAKE_INSTALL_MESSAGE.html#variable:CMAKE_INSTALL_MESSAGE) to suppress all those ""Up-to-date""s. Introduced in 3.1 and we're requiring 3.2, so we can use it. Methinks we want `LAZY` as default; - Nice discussion on what PRIVATE, PUBLIC, INTERFACE dependencies mean for static libraries: https://cmake.org/pipermail/cmake/2016-May/063400.html; - Slide deck on packaging and exporting targets that I'm broadly following for external projects: https://archive.fosdem.org/2013/schedule/event/moderncmake/attachments/slides/258/export/events/attachments/moderncmake/slides/258/cmake_fosdem_2013.pdf; - A nice GH repo on with targets: https://github.com/forexample/package-example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239526159
https://github.com/psi4/psi4/pull/442#issuecomment-239526159:364,Integrability,INTERFACE,INTERFACE,364,"- Thanks for your headers input; - Great new CMake keyword [`CMAKE_INSTALL_MESSAGE`](https://cmake.org/cmake/help/v3.4/variable/CMAKE_INSTALL_MESSAGE.html#variable:CMAKE_INSTALL_MESSAGE) to suppress all those ""Up-to-date""s. Introduced in 3.1 and we're requiring 3.2, so we can use it. Methinks we want `LAZY` as default; - Nice discussion on what PRIVATE, PUBLIC, INTERFACE dependencies mean for static libraries: https://cmake.org/pipermail/cmake/2016-May/063400.html; - Slide deck on packaging and exporting targets that I'm broadly following for external projects: https://archive.fosdem.org/2013/schedule/event/moderncmake/attachments/slides/258/export/events/attachments/moderncmake/slides/258/cmake_fosdem_2013.pdf; - A nice GH repo on with targets: https://github.com/forexample/package-example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239526159
https://github.com/psi4/psi4/pull/442#issuecomment-239526159:374,Integrability,depend,dependencies,374,"- Thanks for your headers input; - Great new CMake keyword [`CMAKE_INSTALL_MESSAGE`](https://cmake.org/cmake/help/v3.4/variable/CMAKE_INSTALL_MESSAGE.html#variable:CMAKE_INSTALL_MESSAGE) to suppress all those ""Up-to-date""s. Introduced in 3.1 and we're requiring 3.2, so we can use it. Methinks we want `LAZY` as default; - Nice discussion on what PRIVATE, PUBLIC, INTERFACE dependencies mean for static libraries: https://cmake.org/pipermail/cmake/2016-May/063400.html; - Slide deck on packaging and exporting targets that I'm broadly following for external projects: https://archive.fosdem.org/2013/schedule/event/moderncmake/attachments/slides/258/export/events/attachments/moderncmake/slides/258/cmake_fosdem_2013.pdf; - A nice GH repo on with targets: https://github.com/forexample/package-example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239526159
https://github.com/psi4/psi4/pull/442#issuecomment-239526159:119,Modifiability,variab,variable,119,"- Thanks for your headers input; - Great new CMake keyword [`CMAKE_INSTALL_MESSAGE`](https://cmake.org/cmake/help/v3.4/variable/CMAKE_INSTALL_MESSAGE.html#variable:CMAKE_INSTALL_MESSAGE) to suppress all those ""Up-to-date""s. Introduced in 3.1 and we're requiring 3.2, so we can use it. Methinks we want `LAZY` as default; - Nice discussion on what PRIVATE, PUBLIC, INTERFACE dependencies mean for static libraries: https://cmake.org/pipermail/cmake/2016-May/063400.html; - Slide deck on packaging and exporting targets that I'm broadly following for external projects: https://archive.fosdem.org/2013/schedule/event/moderncmake/attachments/slides/258/export/events/attachments/moderncmake/slides/258/cmake_fosdem_2013.pdf; - A nice GH repo on with targets: https://github.com/forexample/package-example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239526159
https://github.com/psi4/psi4/pull/442#issuecomment-239526159:155,Modifiability,variab,variable,155,"- Thanks for your headers input; - Great new CMake keyword [`CMAKE_INSTALL_MESSAGE`](https://cmake.org/cmake/help/v3.4/variable/CMAKE_INSTALL_MESSAGE.html#variable:CMAKE_INSTALL_MESSAGE) to suppress all those ""Up-to-date""s. Introduced in 3.1 and we're requiring 3.2, so we can use it. Methinks we want `LAZY` as default; - Nice discussion on what PRIVATE, PUBLIC, INTERFACE dependencies mean for static libraries: https://cmake.org/pipermail/cmake/2016-May/063400.html; - Slide deck on packaging and exporting targets that I'm broadly following for external projects: https://archive.fosdem.org/2013/schedule/event/moderncmake/attachments/slides/258/export/events/attachments/moderncmake/slides/258/cmake_fosdem_2013.pdf; - A nice GH repo on with targets: https://github.com/forexample/package-example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239526159
https://github.com/psi4/psi4/pull/442#issuecomment-240423295:1015,Availability,down,down,1015,"I seemingly successfully commented out the inclusion of `libint/libint.h` in the following files. Is there any known reason that that's a Bad Idea?; - psi4/src/bin/ccenergy/ccenergy.cc; - psi4/src/bin/ccenergy/local.cc; - psi4/src/bin/cceom/local.cc; - psi4/src/bin/cclambda/local.cc; - psi4/src/bin/ccresponse/local.cc. That header is also included in `ccsort/local.cc` for at least the purpose of getting `LIBINT_MAX_AM`. If that is the sole purpose, is it better to continue including the header or to apply the compiler definitions that now ship with libint: `-USING_libint;-DMAX_AM_ERI=N` (`N` is value from linked lib, not value spec to psi4 cmake)?. That pair of compiler defs are not presently used by anything, so they can be tossed if you all turn against them. I'm still not sure if they pass the bar of ""requirements, not merely recommendations"" (https://cmake.org/cmake/help/v3.6/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements). The `USING_libint` I thought could be useful down the road as libmints interfaces to more integrals packages. The `USING_`s are replacing the double use of `ENABLE_` as cmake option and compile definition that was going on earlier. If you'd all like HAVE, WITH, ENABLED, or whatever, instead, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240423295
https://github.com/psi4/psi4/pull/442#issuecomment-240423295:1041,Integrability,interface,interfaces,1041,"I seemingly successfully commented out the inclusion of `libint/libint.h` in the following files. Is there any known reason that that's a Bad Idea?; - psi4/src/bin/ccenergy/ccenergy.cc; - psi4/src/bin/ccenergy/local.cc; - psi4/src/bin/cceom/local.cc; - psi4/src/bin/cclambda/local.cc; - psi4/src/bin/ccresponse/local.cc. That header is also included in `ccsort/local.cc` for at least the purpose of getting `LIBINT_MAX_AM`. If that is the sole purpose, is it better to continue including the header or to apply the compiler definitions that now ship with libint: `-USING_libint;-DMAX_AM_ERI=N` (`N` is value from linked lib, not value spec to psi4 cmake)?. That pair of compiler defs are not presently used by anything, so they can be tossed if you all turn against them. I'm still not sure if they pass the bar of ""requirements, not merely recommendations"" (https://cmake.org/cmake/help/v3.6/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements). The `USING_libint` I thought could be useful down the road as libmints interfaces to more integrals packages. The `USING_`s are replacing the double use of `ENABLE_` as cmake option and compile definition that was going on earlier. If you'd all like HAVE, WITH, ENABLED, or whatever, instead, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240423295
https://github.com/psi4/psi4/pull/442#issuecomment-240425944:11,Safety,safe,safe,11,"Yeah, it's safe to remove to remove libint.h from those files. For ccsort, I'd suggest we come up with a mechanism for obtaining the max AM from libmints as it is responsible for interfacing with various integral packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240425944
https://github.com/psi4/psi4/pull/442#issuecomment-240428977:41,Usability,simpl,simple,41,"I agree with @jturney, but the remedy is simple in the `ccsort/local.cc` case. Line 214 is the only place where `l_length` is used; that array can be deleted and replaced with a call to `shell(i).nfunction()`. If you already have some changes in progress, would you mind making this switch, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240428977
https://github.com/psi4/psi4/pull/442#issuecomment-240466044:476,Deployability,install,install,476,"Ok, 3 min to inspect and fix code, 1 hr to access it in an actual job to check it's doing the right thing. That `_AM` bit is only in local, which isn't hit by any test case. If you turn on local, it complains about no Weak Pairs TOC entry. Fair enough. Transplant code to main ccsort for better observation, but ccsort is turned off in favor of cctranssort. Force ccsort. Possible helpful note: from objdir, it's not ../psi4/share that's running _unless_ it's been through an install. Rather, stage/... is running. Anyway, change made and it should work, not that anyone could know :-) CC codes free of libint deps. Thanks Andy and Jet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240466044
https://github.com/psi4/psi4/pull/442#issuecomment-240466044:43,Security,access,access,43,"Ok, 3 min to inspect and fix code, 1 hr to access it in an actual job to check it's doing the right thing. That `_AM` bit is only in local, which isn't hit by any test case. If you turn on local, it complains about no Weak Pairs TOC entry. Fair enough. Transplant code to main ccsort for better observation, but ccsort is turned off in favor of cctranssort. Force ccsort. Possible helpful note: from objdir, it's not ../psi4/share that's running _unless_ it's been through an install. Rather, stage/... is running. Anyway, change made and it should work, not that anyone could know :-) CC codes free of libint deps. Thanks Andy and Jet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240466044
https://github.com/psi4/psi4/pull/442#issuecomment-240466044:163,Testability,test,test,163,"Ok, 3 min to inspect and fix code, 1 hr to access it in an actual job to check it's doing the right thing. That `_AM` bit is only in local, which isn't hit by any test case. If you turn on local, it complains about no Weak Pairs TOC entry. Fair enough. Transplant code to main ccsort for better observation, but ccsort is turned off in favor of cctranssort. Force ccsort. Possible helpful note: from objdir, it's not ../psi4/share that's running _unless_ it's been through an install. Rather, stage/... is running. Anyway, change made and it should work, not that anyone could know :-) CC codes free of libint deps. Thanks Andy and Jet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240466044
https://github.com/psi4/psi4/pull/442#issuecomment-240470127:141,Deployability,install,installed,141,It should never be `.../psi4/share` that is running. That's source code. When running tests in `objdir` it should be the staged one and when installed it should be the installed version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240470127
https://github.com/psi4/psi4/pull/442#issuecomment-240470127:168,Deployability,install,installed,168,It should never be `.../psi4/share` that is running. That's source code. When running tests in `objdir` it should be the staged one and when installed it should be the installed version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240470127
https://github.com/psi4/psi4/pull/442#issuecomment-240470127:86,Testability,test,tests,86,It should never be `.../psi4/share` that is running. That's source code. When running tests in `objdir` it should be the staged one and when installed it should be the installed version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240470127
https://github.com/psi4/psi4/pull/442#issuecomment-240472831:233,Deployability,install,install,233,"Correct, @ryanmrichard , what you describe is what's going on. One could get confused, though, if changes to `objdir/../psi4/share` sometimes had an effect (if there had been a `make` (changes applied to `stage/...` through internal install)) and sometimes didn't. It wasn't hard to figure out, just trying to fend off others' confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240472831
https://github.com/psi4/psi4/pull/442#issuecomment-240571773:241,Modifiability,variab,variables,241,"@loriab this probably isn't the greatest place for this, but oh well. I'm trying to run a5Z using the setup we discussed earlier (your branches and repos). I'm getting a segfault in compute shell quartet. Is it possible the angular momentum variables are (still) not being passed correctly to mints? If I run with a smaller basis everything's fine so I suspect that this is caused by using more than the default angular momentum. I'll investigate further tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240571773
https://github.com/psi4/psi4/pull/442#issuecomment-240606872:161,Availability,failure,failures,161,"Yes, indeed. I was testing this afternoon that AM=4 passed the quicktests and failed the expected all tests. They all behaved as expected wrt pass/fail, but the failures (except for irc) didn't print the usual diagnostic message. Running a specimen through gdb tonight reveals compute_quartet segfault. So something likely unaligned, possibly only with int, not deriv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240606872
https://github.com/psi4/psi4/pull/442#issuecomment-240606872:221,Integrability,message,message,221,"Yes, indeed. I was testing this afternoon that AM=4 passed the quicktests and failed the expected all tests. They all behaved as expected wrt pass/fail, but the failures (except for irc) didn't print the usual diagnostic message. Running a specimen through gdb tonight reveals compute_quartet segfault. So something likely unaligned, possibly only with int, not deriv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240606872
https://github.com/psi4/psi4/pull/442#issuecomment-240606872:19,Testability,test,testing,19,"Yes, indeed. I was testing this afternoon that AM=4 passed the quicktests and failed the expected all tests. They all behaved as expected wrt pass/fail, but the failures (except for irc) didn't print the usual diagnostic message. Running a specimen through gdb tonight reveals compute_quartet segfault. So something likely unaligned, possibly only with int, not deriv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240606872
https://github.com/psi4/psi4/pull/442#issuecomment-240606872:102,Testability,test,tests,102,"Yes, indeed. I was testing this afternoon that AM=4 passed the quicktests and failed the expected all tests. They all behaved as expected wrt pass/fail, but the failures (except for irc) didn't print the usual diagnostic message. Running a specimen through gdb tonight reveals compute_quartet segfault. So something likely unaligned, possibly only with int, not deriv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240606872
https://github.com/psi4/psi4/pull/442#issuecomment-240647129:997,Availability,error,error,997,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129
https://github.com/psi4/psi4/pull/442#issuecomment-240647129:919,Energy Efficiency,energy,energy-large,919,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129
https://github.com/psi4/psi4/pull/442#issuecomment-240647129:707,Integrability,wrap,wrapper,707,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129
https://github.com/psi4/psi4/pull/442#issuecomment-240647129:762,Testability,test,tests,762,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129
https://github.com/psi4/psi4/pull/442#issuecomment-240647129:877,Testability,test,tests,877,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129
https://github.com/psi4/psi4/pull/442#issuecomment-240647129:1078,Testability,test,tests,1078,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129
https://github.com/psi4/psi4/pull/442#issuecomment-240647129:1509,Testability,test,test,1509,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129
https://github.com/psi4/psi4/pull/442#issuecomment-240647129:818,Usability,undo,undoing,818,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129
https://github.com/psi4/psi4/pull/442#issuecomment-241014675:166,Deployability,update,updated,166,"All the AM comparisons changed back from (fb42b53) in https://github.com/loriab/psi4/commit/79c7f2248831cb2f7323cf93eebf7d26ec06bb7b . Also, insufficient AM messages updated. I tested it systematically, so I have confidence in the current settings, but if there was evidence in favor of the fb42b53 logic, I'd like to know it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241014675
https://github.com/psi4/psi4/pull/442#issuecomment-241014675:157,Integrability,message,messages,157,"All the AM comparisons changed back from (fb42b53) in https://github.com/loriab/psi4/commit/79c7f2248831cb2f7323cf93eebf7d26ec06bb7b . Also, insufficient AM messages updated. I tested it systematically, so I have confidence in the current settings, but if there was evidence in favor of the fb42b53 logic, I'd like to know it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241014675
https://github.com/psi4/psi4/pull/442#issuecomment-241014675:177,Testability,test,tested,177,"All the AM comparisons changed back from (fb42b53) in https://github.com/loriab/psi4/commit/79c7f2248831cb2f7323cf93eebf7d26ec06bb7b . Also, insufficient AM messages updated. I tested it systematically, so I have confidence in the current settings, but if there was evidence in favor of the fb42b53 logic, I'd like to know it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241014675
https://github.com/psi4/psi4/pull/442#issuecomment-241014675:299,Testability,log,logic,299,"All the AM comparisons changed back from (fb42b53) in https://github.com/loriab/psi4/commit/79c7f2248831cb2f7323cf93eebf7d26ec06bb7b . Also, insufficient AM messages updated. I tested it systematically, so I have confidence in the current settings, but if there was evidence in favor of the fb42b53 logic, I'd like to know it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241014675
https://github.com/psi4/psi4/pull/442#issuecomment-241027531:547,Availability,error,errors,547,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531
https://github.com/psi4/psi4/pull/442#issuecomment-241027531:621,Deployability,update,updated,621,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531
https://github.com/psi4/psi4/pull/442#issuecomment-241027531:67,Integrability,Bridg,Bridges,67,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531
https://github.com/psi4/psi4/pull/442#issuecomment-241027531:262,Security,access,access,262,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531
https://github.com/psi4/psi4/pull/442#issuecomment-241057256:309,Safety,sanity check,sanity checks,309,"My bad, @loriab. I just re-read the libint manual and found this sentence `Macro LIBINT MAX AM specifies the maximum angular momentum + 1 of basis functions for which electron repulsion integrals can be computed.` The `+1` is a little counterintuitive and it was my neglect of it that caused me to change the sanity checks. Your revert of my change is correct; sorry to waste your time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241057256
https://github.com/psi4/psi4/pull/442#issuecomment-241076197:476,Integrability,contract,contract,476,"No problem, @andysim, I'm glad my practical tests and your docs readings are in agreement. Do you or @jturney happen to know the ""restrict"" status of libint?; - grepping the code, there's no trace of `restrict`; - it's written in C so restrict should be handled automatically (I think); - except the generated files are `.cc`, so CMake builds them as `CXX`, where imposing restrict would need detection of the proper compiler flag; - if libint _is_ written under the restrict contract, we need to either; - change the `.cc` to `.c` so CMake builds them as C and handles restrict internally; - add CXX restrict detection to CMake (psi4 already has it, so just needs transferring)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241076197
https://github.com/psi4/psi4/pull/442#issuecomment-241076197:393,Safety,detect,detection,393,"No problem, @andysim, I'm glad my practical tests and your docs readings are in agreement. Do you or @jturney happen to know the ""restrict"" status of libint?; - grepping the code, there's no trace of `restrict`; - it's written in C so restrict should be handled automatically (I think); - except the generated files are `.cc`, so CMake builds them as `CXX`, where imposing restrict would need detection of the proper compiler flag; - if libint _is_ written under the restrict contract, we need to either; - change the `.cc` to `.c` so CMake builds them as C and handles restrict internally; - add CXX restrict detection to CMake (psi4 already has it, so just needs transferring)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241076197
https://github.com/psi4/psi4/pull/442#issuecomment-241076197:610,Safety,detect,detection,610,"No problem, @andysim, I'm glad my practical tests and your docs readings are in agreement. Do you or @jturney happen to know the ""restrict"" status of libint?; - grepping the code, there's no trace of `restrict`; - it's written in C so restrict should be handled automatically (I think); - except the generated files are `.cc`, so CMake builds them as `CXX`, where imposing restrict would need detection of the proper compiler flag; - if libint _is_ written under the restrict contract, we need to either; - change the `.cc` to `.c` so CMake builds them as C and handles restrict internally; - add CXX restrict detection to CMake (psi4 already has it, so just needs transferring)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241076197
https://github.com/psi4/psi4/pull/442#issuecomment-241076197:44,Testability,test,tests,44,"No problem, @andysim, I'm glad my practical tests and your docs readings are in agreement. Do you or @jturney happen to know the ""restrict"" status of libint?; - grepping the code, there's no trace of `restrict`; - it's written in C so restrict should be handled automatically (I think); - except the generated files are `.cc`, so CMake builds them as `CXX`, where imposing restrict would need detection of the proper compiler flag; - if libint _is_ written under the restrict contract, we need to either; - change the `.cc` to `.c` so CMake builds them as C and handles restrict internally; - add CXX restrict detection to CMake (psi4 already has it, so just needs transferring)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241076197
https://github.com/psi4/psi4/pull/442#issuecomment-241819043:73,Deployability,update,update,73,"To avoid the complications forecasted by my last comment, we're going to update this repo to the current development head. This probably still breaks the items mentioned in https://github.com/psi4/psi4/pull/442#issuecomment-241027531, but I know Ryan's already shifted to some of my commits, so I think the trouble of Pulsar maybe having to tie their externalproject psi4 to e705b88 is less than the trouble if the development head gets lost or nonlinear. So FYI, particularly @bennybp .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241819043
https://github.com/psi4/psi4/pull/442#issuecomment-241819043:3,Safety,avoid,avoid,3,"To avoid the complications forecasted by my last comment, we're going to update this repo to the current development head. This probably still breaks the items mentioned in https://github.com/psi4/psi4/pull/442#issuecomment-241027531, but I know Ryan's already shifted to some of my commits, so I think the trouble of Pulsar maybe having to tie their externalproject psi4 to e705b88 is less than the trouble if the development head gets lost or nonlinear. So FYI, particularly @bennybp .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241819043
https://github.com/psi4/psi4/pull/442#issuecomment-241853765:507,Deployability,update,update,507,"Perhaps I am just an idiot, but I can't seem to import the Python bindings; into a Python script unless the library that contains them (in this case; psi4_main.so or libpsi4.so) has the same name as the boost python module; (psi4). This is why I was insisting on a a psi4.so library. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 23, 2016 1:58 PM, ""Lori A. Burns"" notifications@github.com wrote:. > To avoid the complications forecasted by my last comment, we're going to; > update this repo to the current development head. This probably still; > breaks the items mentioned in #442 (comment); > https://github.com/psi4/psi4/pull/442#issuecomment-241027531, but I; > know Ryan's already shifted to some of my commits, so I think the trouble; > of Pulsar maybe having to tie their externalproject psi4 to e705b88; > https://github.com/psi4/psi4/commit/e705b88b562a303e1b789417ad9cfe1648251d63; > is less than the trouble if the development head gets lost or nonlinear. So; > FYI, particularly @bennybp https://github.com/bennybp .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-241819043, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi5xifLl8M1ZtI7tKuEapnaMgrB0Qks5qizSugaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241853765
https://github.com/psi4/psi4/pull/442#issuecomment-241853765:434,Safety,avoid,avoid,434,"Perhaps I am just an idiot, but I can't seem to import the Python bindings; into a Python script unless the library that contains them (in this case; psi4_main.so or libpsi4.so) has the same name as the boost python module; (psi4). This is why I was insisting on a a psi4.so library. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 23, 2016 1:58 PM, ""Lori A. Burns"" notifications@github.com wrote:. > To avoid the complications forecasted by my last comment, we're going to; > update this repo to the current development head. This probably still; > breaks the items mentioned in #442 (comment); > https://github.com/psi4/psi4/pull/442#issuecomment-241027531, but I; > know Ryan's already shifted to some of my commits, so I think the trouble; > of Pulsar maybe having to tie their externalproject psi4 to e705b88; > https://github.com/psi4/psi4/commit/e705b88b562a303e1b789417ad9cfe1648251d63; > is less than the trouble if the development head gets lost or nonlinear. So; > FYI, particularly @bennybp https://github.com/bennybp .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-241819043, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi5xifLl8M1ZtI7tKuEapnaMgrB0Qks5qizSugaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241853765
https://github.com/psi4/psi4/pull/442#issuecomment-241859429:909,Security,hash,hash,909,"I think the question is is this the grand boost python module that is a shared library, could respond to `import psi4`, has all the addons linked in, has everything in the repo except `main{...}`, etc. In that case, it should be `psi4.so`. If it's just a stepping stone on the way to the executable, is shared _or_ static, may or may not have addons linked, has mostly stuff from the former `src/bin/psi4_main`, then it's better called `libpsi4.a/so`. The former is what we want eventually, no question, and is what we had pre-CMakeRewrite, and is what Ryan got working for Pulsar's purposes. I rather killed it off temporarily to focus on the add-on linking, so I think the latter's what the psi4 library is right now. So basically, @ryanmrichard, I agree. But importable psi4 is not guaranteed at the moment. We'll get it working again, perhaps in different form at time of deBoosting. So please just use a hash that has it in a state that's useable for you for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241859429
https://github.com/psi4/psi4/issues/444#issuecomment-232528562:98,Deployability,patch,patch,98,"@edeustua Good to know. I think #442 should fix this, but we can certainly test it out after that patch drops.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232528562
https://github.com/psi4/psi4/issues/444#issuecomment-232528562:75,Testability,test,test,75,"@edeustua Good to know. I think #442 should fix this, but we can certainly test it out after that patch drops.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232528562
https://github.com/psi4/psi4/issues/444#issuecomment-232716913:239,Availability,error,error,239,"My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232716913
https://github.com/psi4/psi4/issues/444#issuecomment-232716913:358,Availability,error,error,358,"My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232716913
https://github.com/psi4/psi4/issues/444#issuecomment-232716913:384,Modifiability,config,configure,384,"My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232716913
https://github.com/psi4/psi4/issues/444#issuecomment-232716913:364,Testability,log,log,364,"My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232716913
https://github.com/psi4/psi4/issues/444#issuecomment-232734584:416,Availability,error,error,416,"Yeah I can't reproduce with 16.0.2 either. What version of gcc is the Intel compiler using?. > On Jul 14, 2016, at 12:24 PM, Ryan Richard notifications@github.com wrote:; > ; > My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232734584
https://github.com/psi4/psi4/issues/444#issuecomment-232734584:535,Availability,error,error,535,"Yeah I can't reproduce with 16.0.2 either. What version of gcc is the Intel compiler using?. > On Jul 14, 2016, at 12:24 PM, Ryan Richard notifications@github.com wrote:; > ; > My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232734584
https://github.com/psi4/psi4/issues/444#issuecomment-232734584:561,Modifiability,config,configure,561,"Yeah I can't reproduce with 16.0.2 either. What version of gcc is the Intel compiler using?. > On Jul 14, 2016, at 12:24 PM, Ryan Richard notifications@github.com wrote:; > ; > My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232734584
https://github.com/psi4/psi4/issues/444#issuecomment-232734584:541,Testability,log,log,541,"Yeah I can't reproduce with 16.0.2 either. What version of gcc is the Intel compiler using?. > On Jul 14, 2016, at 12:24 PM, Ryan Richard notifications@github.com wrote:; > ; > My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232734584
https://github.com/psi4/psi4/issues/444#issuecomment-232825635:226,Availability,error,errors,226,"I have also had trouble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/param",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635
https://github.com/psi4/psi4/issues/444#issuecomment-232825635:387,Availability,error,error,387,"I have also had trouble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/param",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635
https://github.com/psi4/psi4/issues/444#issuecomment-232825635:582,Availability,error,error,582,"I have also had trouble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/param",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635
https://github.com/psi4/psi4/issues/444#issuecomment-232825635:843,Availability,error,error,843,"I have also had trouble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/param",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635
https://github.com/psi4/psi4/issues/444#issuecomment-232825635:1081,Availability,error,error,1081,"uble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc (code 2); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635
https://github.com/psi4/psi4/issues/444#issuecomment-232825635:1319,Availability,error,error,1319,"uble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc (code 2); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635
https://github.com/psi4/psi4/issues/444#issuecomment-232825635:1588,Availability,error,error,1588,"uble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc (code 2); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635
https://github.com/psi4/psi4/issues/444#issuecomment-232825635:1834,Availability,error,error,1834,"uble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc (code 2); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635
https://github.com/psi4/psi4/issues/444#issuecomment-232825635:1929,Safety,abort,aborted,1929,"uble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc (code 2); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635
https://github.com/psi4/psi4/issues/444#issuecomment-232855724:94,Availability,error,error,94,"If only. I added #include <tuple> to src/bin/detci/ciwave.h (and params), but I still get the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232855724
https://github.com/psi4/psi4/issues/444#issuecomment-232946325:298,Modifiability,rewrite,rewrite,298,"The not recognizing template brackets is a language feature, not part of; the library like the tuple. I bet if you print the compile command the; flag Andy told you to add is missing. Assuming that is the case, the; million dollar question is why? I have guesses from insight learned in the; CMake rewrite. Assuming it is one of those guesses, the problem should go; away with the rewrite. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 15, 2016 12:14 AM, ""Andy Simmonett"" notifications@github.com wrote:. > How about adding -std=c++11 to the --extra-cxx-flags argument to setup; > (or -DEXTRA_CXX_FLAGS if you're calling CMake directly)?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/444#issuecomment-232855963, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiztFqbgAKeEx-gdWJsatSyH76QzWks5qVwkfgaJpZM4JL6Xl; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232946325
https://github.com/psi4/psi4/issues/444#issuecomment-232946325:381,Modifiability,rewrite,rewrite,381,"The not recognizing template brackets is a language feature, not part of; the library like the tuple. I bet if you print the compile command the; flag Andy told you to add is missing. Assuming that is the case, the; million dollar question is why? I have guesses from insight learned in the; CMake rewrite. Assuming it is one of those guesses, the problem should go; away with the rewrite. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 15, 2016 12:14 AM, ""Andy Simmonett"" notifications@github.com wrote:. > How about adding -std=c++11 to the --extra-cxx-flags argument to setup; > (or -DEXTRA_CXX_FLAGS if you're calling CMake directly)?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/444#issuecomment-232855963, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiztFqbgAKeEx-gdWJsatSyH76QzWks5qVwkfgaJpZM4JL6Xl; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232946325
https://github.com/psi4/psi4/issues/444#issuecomment-232946325:276,Usability,learn,learned,276,"The not recognizing template brackets is a language feature, not part of; the library like the tuple. I bet if you print the compile command the; flag Andy told you to add is missing. Assuming that is the case, the; million dollar question is why? I have guesses from insight learned in the; CMake rewrite. Assuming it is one of those guesses, the problem should go; away with the rewrite. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 15, 2016 12:14 AM, ""Andy Simmonett"" notifications@github.com wrote:. > How about adding -std=c++11 to the --extra-cxx-flags argument to setup; > (or -DEXTRA_CXX_FLAGS if you're calling CMake directly)?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/444#issuecomment-232855963, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiztFqbgAKeEx-gdWJsatSyH76QzWks5qVwkfgaJpZM4JL6Xl; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232946325
https://github.com/psi4/psi4/pull/447#issuecomment-234655165:267,Modifiability,variab,variables,267,"Actually, I think I have a better idea for testing this stuff. I can implement ""ESP"" and ""FIELD"" methods in OEProp that will compute the ESP and fields at the `PROPERTIES_ORIGIN` and set the results in Psi vars. I don't think the grid iterators should populate those variables, because the grids could be huge. By allowing `PROPERTIES_ORIGIN` to specify a single grid point, we can easily store the value for testing. This will also allow us to construct loops over grids in Python, without having to generate a grid.dat file. Thoughts, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234655165
https://github.com/psi4/psi4/pull/447#issuecomment-234655165:43,Testability,test,testing,43,"Actually, I think I have a better idea for testing this stuff. I can implement ""ESP"" and ""FIELD"" methods in OEProp that will compute the ESP and fields at the `PROPERTIES_ORIGIN` and set the results in Psi vars. I don't think the grid iterators should populate those variables, because the grids could be huge. By allowing `PROPERTIES_ORIGIN` to specify a single grid point, we can easily store the value for testing. This will also allow us to construct loops over grids in Python, without having to generate a grid.dat file. Thoughts, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234655165
https://github.com/psi4/psi4/pull/447#issuecomment-234655165:409,Testability,test,testing,409,"Actually, I think I have a better idea for testing this stuff. I can implement ""ESP"" and ""FIELD"" methods in OEProp that will compute the ESP and fields at the `PROPERTIES_ORIGIN` and set the results in Psi vars. I don't think the grid iterators should populate those variables, because the grids could be huge. By allowing `PROPERTIES_ORIGIN` to specify a single grid point, we can easily store the value for testing. This will also allow us to construct loops over grids in Python, without having to generate a grid.dat file. Thoughts, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234655165
https://github.com/psi4/psi4/pull/447#issuecomment-234660060:305,Security,access,access,305,"Your next push will clean up this history. We are trying very hard to remove Psivars (and all globals) so id much rather have a setter on the object itself. . Grid is a pretty small quantity all things considered, 10M grid points isn't all that much data these days. It would actually be nice if we could access the entire grid python side. We have some neat interactive visualization examples where this would be very interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234660060
https://github.com/psi4/psi4/pull/447#issuecomment-234664083:265,Integrability,interface,interface,265,"@dgasmith, I didn't realize you were trying to deprecate the variables. I can just populate V, Ex, Ey and Ez std::vectors (in OEProp) with the data, in the order that the grid points are specified, and bind the getters to python. The problem is then making a clean interface. The user is hidden from the oeprop objects themselves through the `property` wrappers. Perhaps something analogous to the `return_wfn` keyword, to return the `oeprop` instance?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234664083
https://github.com/psi4/psi4/pull/447#issuecomment-234664083:353,Integrability,wrap,wrappers,353,"@dgasmith, I didn't realize you were trying to deprecate the variables. I can just populate V, Ex, Ey and Ez std::vectors (in OEProp) with the data, in the order that the grid points are specified, and bind the getters to python. The problem is then making a clean interface. The user is hidden from the oeprop objects themselves through the `property` wrappers. Perhaps something analogous to the `return_wfn` keyword, to return the `oeprop` instance?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234664083
https://github.com/psi4/psi4/pull/447#issuecomment-234664083:61,Modifiability,variab,variables,61,"@dgasmith, I didn't realize you were trying to deprecate the variables. I can just populate V, Ex, Ey and Ez std::vectors (in OEProp) with the data, in the order that the grid points are specified, and bind the getters to python. The problem is then making a clean interface. The user is hidden from the oeprop objects themselves through the `property` wrappers. Perhaps something analogous to the `return_wfn` keyword, to return the `oeprop` instance?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234664083
https://github.com/psi4/psi4/pull/447#issuecomment-234665928:418,Integrability,message,message,418,"Pretty much anything that is global should be on its way out. . I haven't quite figured out how to rationalize two objects that are connected, but are separate entities yet. Currently I have just been appending the object to the Wavefunction python-side:. ``` python; def prop(wfn, ...):; oeprop = psi4.OEProp(wfn, ...); wfn.oeprop = oeprop; return wfn; ```. This works, but you get a vague attribute not found python message if the wavefunction does not have an oeprop object. We can go through and add `None` types for all of these attributes, but that doesn't really work long term.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234665928
https://github.com/psi4/psi4/pull/447#issuecomment-234668387:941,Integrability,interface,interface,941,"On the psivars, it's the global aspect that we'd like to squash by moving psivars into (perhaps module nested) dictionaries in the Wavefunction object. . I agree that the ESP gets to be a lot of psivars and is rather more suited to a psiarray than multiple individual psivars. Perhaps atom centers are a special case of grid point that still gets psivars/array set. . But then I also agree that as much as possible, the OEProp objects should be manipulatable py-side. . There started to be an effort to standardize these lesser-used user-facing functions (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/11?u=loriab and https://github.com/psi4/psi4/pull/286) and they degenerated into bug-fixing, so there's still no consensus. And there's the antagonism between API-like function arguments and QC-like long list of options to tweak. This is a meandering way of saying that I don't presently have a plan for grid/prop interface. I think making the python access to the OEProp object full-functioned would be the most flexible approach.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234668387
https://github.com/psi4/psi4/pull/447#issuecomment-234668387:1040,Modifiability,flexible,flexible,1040,"On the psivars, it's the global aspect that we'd like to squash by moving psivars into (perhaps module nested) dictionaries in the Wavefunction object. . I agree that the ESP gets to be a lot of psivars and is rather more suited to a psiarray than multiple individual psivars. Perhaps atom centers are a special case of grid point that still gets psivars/array set. . But then I also agree that as much as possible, the OEProp objects should be manipulatable py-side. . There started to be an effort to standardize these lesser-used user-facing functions (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/11?u=loriab and https://github.com/psi4/psi4/pull/286) and they degenerated into bug-fixing, so there's still no consensus. And there's the antagonism between API-like function arguments and QC-like long list of options to tweak. This is a meandering way of saying that I don't presently have a plan for grid/prop interface. I think making the python access to the OEProp object full-functioned would be the most flexible approach.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234668387
https://github.com/psi4/psi4/pull/447#issuecomment-234668387:978,Security,access,access,978,"On the psivars, it's the global aspect that we'd like to squash by moving psivars into (perhaps module nested) dictionaries in the Wavefunction object. . I agree that the ESP gets to be a lot of psivars and is rather more suited to a psiarray than multiple individual psivars. Perhaps atom centers are a special case of grid point that still gets psivars/array set. . But then I also agree that as much as possible, the OEProp objects should be manipulatable py-side. . There started to be an effort to standardize these lesser-used user-facing functions (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/11?u=loriab and https://github.com/psi4/psi4/pull/286) and they degenerated into bug-fixing, so there's still no consensus. And there's the antagonism between API-like function arguments and QC-like long list of options to tweak. This is a meandering way of saying that I don't presently have a plan for grid/prop interface. I think making the python access to the OEProp object full-functioned would be the most flexible approach.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234668387
https://github.com/psi4/psi4/pull/447#issuecomment-234668387:592,Usability,simpl,simplify-wave-function-passing,592,"On the psivars, it's the global aspect that we'd like to squash by moving psivars into (perhaps module nested) dictionaries in the Wavefunction object. . I agree that the ESP gets to be a lot of psivars and is rather more suited to a psiarray than multiple individual psivars. Perhaps atom centers are a special case of grid point that still gets psivars/array set. . But then I also agree that as much as possible, the OEProp objects should be manipulatable py-side. . There started to be an effort to standardize these lesser-used user-facing functions (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/11?u=loriab and https://github.com/psi4/psi4/pull/286) and they degenerated into bug-fixing, so there's still no consensus. And there's the antagonism between API-like function arguments and QC-like long list of options to tweak. This is a meandering way of saying that I don't presently have a plan for grid/prop interface. I think making the python access to the OEProp object full-functioned would be the most flexible approach.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234668387
https://github.com/psi4/psi4/pull/447#issuecomment-234683850:18,Deployability,Update,Update,18,"Used the builtin 'Update branch' button just now, thinking it'd rebase automagically, but that doesn't appear to be the case. Anyways, I just added a first pass at what we were discussing above. The reference values came from this Molpro input:. ```; ***,h2o properties; noorient; geometry = {; ang; O ,, 0.250254404867, 0.126248114412, 0.000000000000; H ,, 0.428893090449, 1.055731838795, 0.000000000000; H ,, 1.104987458381, -0.280303532167, 0.000000000000; }. basis=cc-pvdz; df-hf;; property; density,2100.2; pot,, -3.779451977, -3.779451977, 1.889725989; pot,, -3.779451977, 0.000000000, 1.889725989; pot,, -3.779451977, 3.779451977, 1.889725989; pot,, 0.000000000, -3.779451977, 1.889725989; pot,, 0.000000000, 0.000000000, 1.889725989; pot,, 0.000000000, 3.779451977, 1.889725989; pot,, 3.779451977, -3.779451977, 1.889725989; pot,, 3.779451977, 0.000000000, 1.889725989; pot,, 3.779451977, 3.779451977, 1.889725989; ef,, -3.779451977, -3.779451977, 1.889725989; ef,, -3.779451977, 0.000000000, 1.889725989; ef,, -3.779451977, 3.779451977, 1.889725989; ef,, 0.000000000, -3.779451977, 1.889725989; ef,, 0.000000000, 0.000000000, 1.889725989; ef,, 0.000000000, 3.779451977, 1.889725989; ef,, 3.779451977, -3.779451977, 1.889725989; ef,, 3.779451977, 0.000000000, 1.889725989; ef,, 3.779451977, 3.779451977, 1.889725989; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234683850
https://github.com/psi4/psi4/pull/447#issuecomment-234756317:103,Deployability,update,updated,103,"I just added a small section to the manual, advertising the new functionality. A number of samples got updated during my local docs build. With that in place, I think this is good to go. Given that this is a bug fix, I think we should try to cherrypick it into the tagged release version, if that's not too much hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234756317
https://github.com/psi4/psi4/pull/447#issuecomment-234756317:272,Deployability,release,release,272,"I just added a small section to the manual, advertising the new functionality. A number of samples got updated during my local docs build. With that in place, I think this is good to go. Given that this is a bug fix, I think we should try to cherrypick it into the tagged release version, if that's not too much hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234756317
https://github.com/psi4/psi4/issues/448#issuecomment-235024888:19,Availability,error,error,19,"This is a Davidson error. Looks like as soon as the norm of the correction vector gets small enough an instability occurs causing a non-variational energy. Very hard to debug and/or fix. Dividing small numbers by small numbers is always tricky. If you are just after the energy (the only things the current CI code can do at the moment) the simplest option is to reduce your CI convergence threshold to something reasonable like `r_convergence 1.e-4` . You can also try setting `hd_avg hd_exact` in your settings. . Also, something like this really belongs on the [Psi forums](http://forum.psicode.org/latest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/448#issuecomment-235024888
https://github.com/psi4/psi4/issues/448#issuecomment-235024888:148,Energy Efficiency,energy,energy,148,"This is a Davidson error. Looks like as soon as the norm of the correction vector gets small enough an instability occurs causing a non-variational energy. Very hard to debug and/or fix. Dividing small numbers by small numbers is always tricky. If you are just after the energy (the only things the current CI code can do at the moment) the simplest option is to reduce your CI convergence threshold to something reasonable like `r_convergence 1.e-4` . You can also try setting `hd_avg hd_exact` in your settings. . Also, something like this really belongs on the [Psi forums](http://forum.psicode.org/latest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/448#issuecomment-235024888
https://github.com/psi4/psi4/issues/448#issuecomment-235024888:271,Energy Efficiency,energy,energy,271,"This is a Davidson error. Looks like as soon as the norm of the correction vector gets small enough an instability occurs causing a non-variational energy. Very hard to debug and/or fix. Dividing small numbers by small numbers is always tricky. If you are just after the energy (the only things the current CI code can do at the moment) the simplest option is to reduce your CI convergence threshold to something reasonable like `r_convergence 1.e-4` . You can also try setting `hd_avg hd_exact` in your settings. . Also, something like this really belongs on the [Psi forums](http://forum.psicode.org/latest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/448#issuecomment-235024888
https://github.com/psi4/psi4/issues/448#issuecomment-235024888:363,Energy Efficiency,reduce,reduce,363,"This is a Davidson error. Looks like as soon as the norm of the correction vector gets small enough an instability occurs causing a non-variational energy. Very hard to debug and/or fix. Dividing small numbers by small numbers is always tricky. If you are just after the energy (the only things the current CI code can do at the moment) the simplest option is to reduce your CI convergence threshold to something reasonable like `r_convergence 1.e-4` . You can also try setting `hd_avg hd_exact` in your settings. . Also, something like this really belongs on the [Psi forums](http://forum.psicode.org/latest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/448#issuecomment-235024888
https://github.com/psi4/psi4/issues/448#issuecomment-235024888:341,Usability,simpl,simplest,341,"This is a Davidson error. Looks like as soon as the norm of the correction vector gets small enough an instability occurs causing a non-variational energy. Very hard to debug and/or fix. Dividing small numbers by small numbers is always tricky. If you are just after the energy (the only things the current CI code can do at the moment) the simplest option is to reduce your CI convergence threshold to something reasonable like `r_convergence 1.e-4` . You can also try setting `hd_avg hd_exact` in your settings. . Also, something like this really belongs on the [Psi forums](http://forum.psicode.org/latest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/448#issuecomment-235024888
https://github.com/psi4/psi4/pull/449#issuecomment-235117364:102,Testability,test,test,102,"I made a disteli account when I saw your experimentation last week. When I click ""details"" to see the test output, I get a 404 page. Are there settings to increase the visibility of the test outputs?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235117364
https://github.com/psi4/psi4/pull/449#issuecomment-235117364:186,Testability,test,test,186,"I made a disteli account when I saw your experimentation last week. When I click ""details"" to see the test output, I get a 404 page. Are there settings to increase the visibility of the test outputs?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235117364
https://github.com/psi4/psi4/pull/449#issuecomment-235121786:40,Testability,log,login,40,"Nope, can't see that. I takes me to the login page and, after I login, it sends me to the 404 page (with poetry on it).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235121786
https://github.com/psi4/psi4/pull/449#issuecomment-235121786:64,Testability,log,login,64,"Nope, can't see that. I takes me to the login page and, after I login, it sends me to the 404 page (with poetry on it).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235121786
https://github.com/psi4/psi4/pull/449#issuecomment-235131408:161,Energy Efficiency,power,powerful,161,@andysim Try now. I can understand where they are coming from on the security side. There are not too many layers between log printing and security tokens. Very powerful tool however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235131408
https://github.com/psi4/psi4/pull/449#issuecomment-235131408:107,Modifiability,layers,layers,107,@andysim Try now. I can understand where they are coming from on the security side. There are not too many layers between log printing and security tokens. Very powerful tool however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235131408
https://github.com/psi4/psi4/pull/449#issuecomment-235131408:69,Security,secur,security,69,@andysim Try now. I can understand where they are coming from on the security side. There are not too many layers between log printing and security tokens. Very powerful tool however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235131408
https://github.com/psi4/psi4/pull/449#issuecomment-235131408:139,Security,secur,security,139,@andysim Try now. I can understand where they are coming from on the security side. There are not too many layers between log printing and security tokens. Very powerful tool however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235131408
https://github.com/psi4/psi4/pull/449#issuecomment-235131408:122,Testability,log,log,122,@andysim Try now. I can understand where they are coming from on the security side. There are not too many layers between log printing and security tokens. Very powerful tool however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235131408
https://github.com/psi4/psi4/pull/449#issuecomment-235411756:13,Testability,test,testing,13,Hey Distelli testing is now passing!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235411756
https://github.com/psi4/psi4/pull/449#issuecomment-235419018:54,Deployability,continuous,continuous-integration,54,"That's great! I can see the log now, at least for the continuous-integration/Distelli link. Not the Disteli-CI link; that could just be the malformed URL causing a problem though. What's the difference between those hooks?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419018
https://github.com/psi4/psi4/pull/449#issuecomment-235419018:65,Integrability,integrat,integration,65,"That's great! I can see the log now, at least for the continuous-integration/Distelli link. Not the Disteli-CI link; that could just be the malformed URL causing a problem though. What's the difference between those hooks?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419018
https://github.com/psi4/psi4/pull/449#issuecomment-235419018:28,Testability,log,log,28,"That's great! I can see the log now, at least for the continuous-integration/Distelli link. Not the Disteli-CI link; that could just be the malformed URL causing a problem though. What's the difference between those hooks?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419018
https://github.com/psi4/psi4/pull/449#issuecomment-235419669:179,Energy Efficiency,reduce,reduce,179,"Now that I can see the log, I notice that you're building with AM=5. If you plan to add some CBS tests that need _h_ functions, we should bump the Travis setup. If not, we should reduce Disteli's AM, to speed it up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419669
https://github.com/psi4/psi4/pull/449#issuecomment-235419669:23,Testability,log,log,23,"Now that I can see the log, I notice that you're building with AM=5. If you plan to add some CBS tests that need _h_ functions, we should bump the Travis setup. If not, we should reduce Disteli's AM, to speed it up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419669
https://github.com/psi4/psi4/pull/449#issuecomment-235419669:97,Testability,test,tests,97,"Now that I can see the log, I notice that you're building with AM=5. If you plan to add some CBS tests that need _h_ functions, we should bump the Travis setup. If not, we should reduce Disteli's AM, to speed it up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419669
https://github.com/psi4/psi4/pull/449#issuecomment-235422113:28,Availability,down,down,28,"@andysim Good point, bumped down AM requirements. The ""Distelli CI"" link should be dead as its an incorrect hook configuration, shouldn't show up in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235422113
https://github.com/psi4/psi4/pull/449#issuecomment-235422113:113,Deployability,configurat,configuration,113,"@andysim Good point, bumped down AM requirements. The ""Distelli CI"" link should be dead as its an incorrect hook configuration, shouldn't show up in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235422113
https://github.com/psi4/psi4/pull/449#issuecomment-235422113:113,Modifiability,config,configuration,113,"@andysim Good point, bumped down AM requirements. The ""Distelli CI"" link should be dead as its an incorrect hook configuration, shouldn't show up in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235422113
https://github.com/psi4/psi4/pull/449#issuecomment-235437711:95,Testability,test,test,95,"Knocked about 10% off the total time to limit AM to 4. Going to close this for now, not sure a test branch will help us much more. Time to see how this fares in the wild.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235437711
https://github.com/psi4/psi4/issues/450#issuecomment-235349863:99,Availability,error,errors,99,"For std::regex, I just found out that regex is not supported on gcc 4.8. You won't get any compile errors, but we get some runtime errors. All of this goes away if you use GCC 4.9 or GCC 5.2.0. . Just a heads up. Looking forward to these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235349863
https://github.com/psi4/psi4/issues/450#issuecomment-235349863:131,Availability,error,errors,131,"For std::regex, I just found out that regex is not supported on gcc 4.8. You won't get any compile errors, but we get some runtime errors. All of this goes away if you use GCC 4.9 or GCC 5.2.0. . Just a heads up. Looking forward to these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235349863
https://github.com/psi4/psi4/issues/450#issuecomment-235352099:87,Usability,simpl,simpler,87,@loriab I think if we clean boost::filesystem up now it will make the The Inversion(?) simpler.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235352099
https://github.com/psi4/psi4/issues/450#issuecomment-235353805:164,Modifiability,refactor,refactoring,164,"@dgasmith LibEFP is pure C, so there's no Boost in there (at least that I'm aware of). I think that means I'm off the hook! A lot of the work can be done using the refactoring tools in Qt Creator and/or a Python script, I hope.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235353805
https://github.com/psi4/psi4/issues/450#issuecomment-235353986:83,Modifiability,plugin,plugin,83,The libmints stuff should be easy to resolve. Maybe we can look to move the create plugin code to Python.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235353986
https://github.com/psi4/psi4/issues/450#issuecomment-235354983:47,Integrability,interface,interface,47,"@andysim To be clear I meant the libefp_solver interface, still not quite sure what tokenizer is doing for you in there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235354983
https://github.com/psi4/psi4/issues/450#issuecomment-235354983:15,Usability,clear,clear,15,"@andysim To be clear I meant the libefp_solver interface, still not quite sure what tokenizer is doing for you in there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235354983
https://github.com/psi4/psi4/issues/450#issuecomment-235360382:302,Modifiability,plugin,plugin-writing,302,"Yes @andysim, I'm definitely responsible for the crazy path that EFPs take through psi4. Without the boost registration restrictions on the efp class and the general c-side focus, perhaps I can find a better way. I'll take on the efp and filesystem aspects of The Inversion. I agree @jturney on moving plugin-writing to python. In fact, that may get done in the CMake rewrite, just to avoid having to get things working again _twice_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235360382
https://github.com/psi4/psi4/issues/450#issuecomment-235360382:368,Modifiability,rewrite,rewrite,368,"Yes @andysim, I'm definitely responsible for the crazy path that EFPs take through psi4. Without the boost registration restrictions on the efp class and the general c-side focus, perhaps I can find a better way. I'll take on the efp and filesystem aspects of The Inversion. I agree @jturney on moving plugin-writing to python. In fact, that may get done in the CMake rewrite, just to avoid having to get things working again _twice_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235360382
https://github.com/psi4/psi4/issues/450#issuecomment-235360382:385,Safety,avoid,avoid,385,"Yes @andysim, I'm definitely responsible for the crazy path that EFPs take through psi4. Without the boost registration restrictions on the efp class and the general c-side focus, perhaps I can find a better way. I'll take on the efp and filesystem aspects of The Inversion. I agree @jturney on moving plugin-writing to python. In fact, that may get done in the CMake rewrite, just to avoid having to get things working again _twice_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235360382
https://github.com/psi4/psi4/issues/450#issuecomment-237669294:391,Availability,avail,availability,391,"Greetings, all. It's time to schedule Kill the Boost week! There are three major parts of this, as I see it: BoostPy, BoostNonPy, and FilterBranch. These are defined in the addendum to the top post of this ticket. I imagine the in-person and through-hangout times will be focused on the BoostPy target, though we should all be working on the BoostNonPy as convenient. So, please to add your availability to the weeks below. Reply or feel free to edit this comment. **Aug 15:** LAB, Jet-ok, best for andy; **Aug 22 (ACS Nat'l Mtg):** LAB, Jet-ok, works for andy; **Aug 29:** LAB, Jet-ok, andy traveling",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-237669294
https://github.com/psi4/psi4/issues/450#issuecomment-237669294:29,Energy Efficiency,schedul,schedule,29,"Greetings, all. It's time to schedule Kill the Boost week! There are three major parts of this, as I see it: BoostPy, BoostNonPy, and FilterBranch. These are defined in the addendum to the top post of this ticket. I imagine the in-person and through-hangout times will be focused on the BoostPy target, though we should all be working on the BoostNonPy as convenient. So, please to add your availability to the weeks below. Reply or feel free to edit this comment. **Aug 15:** LAB, Jet-ok, best for andy; **Aug 22 (ACS Nat'l Mtg):** LAB, Jet-ok, works for andy; **Aug 29:** LAB, Jet-ok, andy traveling",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-237669294
https://github.com/psi4/psi4/issues/452#issuecomment-239645635:79,Modifiability,rewrite,rewrite,79,I'm not ignoring this issue so much as I hadn't gotten to CheMPS2 in the cmake rewrite until yesterday. I'll be sure to check it with g++. It's conceivable that it was only working with intel compilers.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452#issuecomment-239645635
https://github.com/psi4/psi4/issues/452#issuecomment-239647631:514,Modifiability,rewrite,rewrite,514,"I compiled everything (including Chemps2) in the CMakeRewrite with gcc.; For the most gcc tends to be one of the more strict compilers so if you can; compile with it, you can compile with anything. Although this doesn't help; on the old build it does hopefully provide some solace.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 13, 2016 6:49 PM, ""Lori A. Burns"" notifications@github.com wrote:. > I'm not ignoring this issue so much as I hadn't gotten to CheMPS2 in the; > cmake rewrite until yesterday. I'll be sure to check it with g++. It's; > conceivable that it was only working with intel compilers.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/452#issuecomment-239645635, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi0ozNgFxkroLGTV-YLzxj6CxComLks5qfknrgaJpZM4JYrrg; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/452#issuecomment-239647631
https://github.com/psi4/psi4/pull/453#issuecomment-236929158:20,Deployability,update,update,20,Great! Can you also update `output.ref` in `tests/dft1`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/453#issuecomment-236929158
https://github.com/psi4/psi4/pull/453#issuecomment-236929158:44,Testability,test,tests,44,Great! Can you also update `output.ref` in `tests/dft1`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/453#issuecomment-236929158
https://github.com/psi4/psi4/pull/453#issuecomment-238563788:41,Modifiability,rewrite,rewrite,41,"LGTM. The plan is to wait for the ""cmake rewrite"" to be finalized and merged before we do this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/453#issuecomment-238563788
https://github.com/psi4/psi4/pull/454#issuecomment-236853475:23,Testability,test,tests,23,Sorry about the failed tests. I'll take a look tomorrow.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/454#issuecomment-236853475
https://github.com/psi4/psi4/pull/454#issuecomment-236931254:26,Testability,test,test,26,"No problem on the failing test case. In fact, due to build infrastructure changes in another branch, these PRs will probably be cherry-picked onto the other branch rather than merged directly. The failing test case can be remedied by adding the extra arg to https://github.com/psi4/psi4/blob/master/share/python/driver.py#L1825 . Even if you set it up right in C++ with a default argument, Boost takes some convincing to allow that different signature automatically py-side. And since ""Kill the Boost"" is happening w/i a few weeks, no use working much with Boost on the alternate signature. (We're just replacing Boost with something else that will still allow exporting C++ functionality to Python)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/454#issuecomment-236931254
https://github.com/psi4/psi4/pull/454#issuecomment-236931254:205,Testability,test,test,205,"No problem on the failing test case. In fact, due to build infrastructure changes in another branch, these PRs will probably be cherry-picked onto the other branch rather than merged directly. The failing test case can be remedied by adding the extra arg to https://github.com/psi4/psi4/blob/master/share/python/driver.py#L1825 . Even if you set it up right in C++ with a default argument, Boost takes some convincing to allow that different signature automatically py-side. And since ""Kill the Boost"" is happening w/i a few weeks, no use working much with Boost on the alternate signature. (We're just replacing Boost with something else that will still allow exporting C++ functionality to Python)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/454#issuecomment-236931254
https://github.com/psi4/psi4/pull/454#issuecomment-237103831:54,Testability,test,tests,54,"Meh, I'll make the change anyway. molden1 and molden2 tests are ok now. Thanks for the info! :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/454#issuecomment-237103831
https://github.com/psi4/psi4/issues/455#issuecomment-237962287:59,Energy Efficiency,ENERGY,ENERGY,59,"Anyone getting this should change the `SCF` and `SCF TOTAL ENERGY` in https://github.com/psi4/psi4/blob/master/share/python/driver_cbs.py#L430 to `HF` and `HF TOTAL ENERGY` like in the ""ccsd"" entry just below. I'll prepare a PR fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455#issuecomment-237962287
https://github.com/psi4/psi4/issues/455#issuecomment-237962287:165,Energy Efficiency,ENERGY,ENERGY,165,"Anyone getting this should change the `SCF` and `SCF TOTAL ENERGY` in https://github.com/psi4/psi4/blob/master/share/python/driver_cbs.py#L430 to `HF` and `HF TOTAL ENERGY` like in the ""ccsd"" entry just below. I'll prepare a PR fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/455#issuecomment-237962287
https://github.com/psi4/psi4/pull/456#issuecomment-238002601:185,Availability,failure,failure,185,"@dgasmith , maybe keep an eye out for test ""casscf-fzc-sp"". That's what failed on distelli (below), though it passed locally and on travis. May be another clue to the #322 intermittent failure. ```; ==> Setting up CI strings <==. There are 15 alpha and 15 beta strings; The CI space requires 65 (6.50E+01) determinants and 4 blocks. ==> Setting up MCSCF integrals <==. ==> Starting MCSCF iterations <==. Total Energy Delta E RMS Grad NCI. @MCSCF Iter 1: -76.02993400953443 -1.2637e-02 9.9525e-03 1 Initial CI; @MCSCF Iter 2: -76.06895156963408 -3.9018e-02 1.3537e-02 9 APPROX; @MCSCF Iter 3: -76.07302175257405 -4.0702e-03 4.4001e-03 7 APPROX; @MCSCF Iter 4: -76.07362055903870 -5.9881e-04 1.6406e-03 7 APPROX; @MCSCF Iter 5: -76.07373579006990 -1.1523e-04 7.9473e-04 7 APPROX, DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/456#issuecomment-238002601
https://github.com/psi4/psi4/pull/456#issuecomment-238002601:410,Energy Efficiency,Energy,Energy,410,"@dgasmith , maybe keep an eye out for test ""casscf-fzc-sp"". That's what failed on distelli (below), though it passed locally and on travis. May be another clue to the #322 intermittent failure. ```; ==> Setting up CI strings <==. There are 15 alpha and 15 beta strings; The CI space requires 65 (6.50E+01) determinants and 4 blocks. ==> Setting up MCSCF integrals <==. ==> Starting MCSCF iterations <==. Total Energy Delta E RMS Grad NCI. @MCSCF Iter 1: -76.02993400953443 -1.2637e-02 9.9525e-03 1 Initial CI; @MCSCF Iter 2: -76.06895156963408 -3.9018e-02 1.3537e-02 9 APPROX; @MCSCF Iter 3: -76.07302175257405 -4.0702e-03 4.4001e-03 7 APPROX; @MCSCF Iter 4: -76.07362055903870 -5.9881e-04 1.6406e-03 7 APPROX; @MCSCF Iter 5: -76.07373579006990 -1.1523e-04 7.9473e-04 7 APPROX, DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/456#issuecomment-238002601
https://github.com/psi4/psi4/pull/456#issuecomment-238002601:38,Testability,test,test,38,"@dgasmith , maybe keep an eye out for test ""casscf-fzc-sp"". That's what failed on distelli (below), though it passed locally and on travis. May be another clue to the #322 intermittent failure. ```; ==> Setting up CI strings <==. There are 15 alpha and 15 beta strings; The CI space requires 65 (6.50E+01) determinants and 4 blocks. ==> Setting up MCSCF integrals <==. ==> Starting MCSCF iterations <==. Total Energy Delta E RMS Grad NCI. @MCSCF Iter 1: -76.02993400953443 -1.2637e-02 9.9525e-03 1 Initial CI; @MCSCF Iter 2: -76.06895156963408 -3.9018e-02 1.3537e-02 9 APPROX; @MCSCF Iter 3: -76.07302175257405 -4.0702e-03 4.4001e-03 7 APPROX; @MCSCF Iter 4: -76.07362055903870 -5.9881e-04 1.6406e-03 7 APPROX; @MCSCF Iter 5: -76.07373579006990 -1.1523e-04 7.9473e-04 7 APPROX, DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/456#issuecomment-238002601
https://github.com/psi4/psi4/pull/457#issuecomment-241120477:1004,Integrability,wrap,wrapper,1004,"The Jensen _pc_ basis sets [1-7] are analogous to the Dunning _cc_ basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the _cc_ basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477
https://github.com/psi4/psi4/pull/457#issuecomment-241120477:2273,Integrability,Contract,Contracted,2273," segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477
https://github.com/psi4/psi4/pull/457#issuecomment-241120477:2461,Integrability,Contract,Contracted,2461," segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477
https://github.com/psi4/psi4/pull/457#issuecomment-241120477:605,Performance,optimiz,optimized,605,"The Jensen _pc_ basis sets [1-7] are analogous to the Dunning _cc_ basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the _cc_ basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477
https://github.com/psi4/psi4/pull/457#issuecomment-241120477:2483,Performance,Optimiz,Optimized,2483," segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477
https://github.com/psi4/psi4/pull/457#issuecomment-241120477:2136,Safety,Predict,Predicting,2136," segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477
https://github.com/psi4/psi4/pull/457#issuecomment-241127272:132,Integrability,depend,depends,132,"""pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]"". Well, that's not really true: it depends on your integrals driver. If your program handles everything as general contractions, then segmented basis sets are slower. If it handles everything as segmented contractions, then general contracted basis sets are **much much** slower...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241127272
https://github.com/psi4/psi4/pull/457#issuecomment-241127272:212,Integrability,contract,contractions,212,"""pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]"". Well, that's not really true: it depends on your integrals driver. If your program handles everything as general contractions, then segmented basis sets are slower. If it handles everything as segmented contractions, then general contracted basis sets are **much much** slower...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241127272
https://github.com/psi4/psi4/pull/457#issuecomment-241127272:302,Integrability,contract,contractions,302,"""pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]"". Well, that's not really true: it depends on your integrals driver. If your program handles everything as general contractions, then segmented basis sets are slower. If it handles everything as segmented contractions, then general contracted basis sets are **much much** slower...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241127272
https://github.com/psi4/psi4/pull/457#issuecomment-241127272:329,Integrability,contract,contracted,329,"""pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]"". Well, that's not really true: it depends on your integrals driver. If your program handles everything as general contractions, then segmented basis sets are slower. If it handles everything as segmented contractions, then general contracted basis sets are **much much** slower...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241127272
https://github.com/psi4/psi4/issues/459#issuecomment-238314013:260,Energy Efficiency,reduce,reduce,260,"Apart from #442, the PRs are normally quite small so it's not much work to review them. I think we should have at least three or four signees, especially given that most of the recent PRs have had feedback from many developers anyway. If we start high, we can reduce the demands if it becomes too burdensome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/459#issuecomment-238314013
https://github.com/psi4/psi4/issues/459#issuecomment-238314013:197,Usability,feedback,feedback,197,"Apart from #442, the PRs are normally quite small so it's not much work to review them. I think we should have at least three or four signees, especially given that most of the recent PRs have had feedback from many developers anyway. If we start high, we can reduce the demands if it becomes too burdensome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/459#issuecomment-238314013
https://github.com/psi4/psi4/issues/460#issuecomment-238566031:50,Deployability,install,installation,50,"That's impressive. If you're aiming for a working installation, maybe install ambit on its own and pass `-DAMBIT_DIR` to the psi4 build so psi4 detects it. Psi4 build development has moved over to #442, so I won't try to diagnose this eternal loop unless it appears in the new build scheme. Thanks for the report– I'll be on the lookout for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-238566031
https://github.com/psi4/psi4/issues/460#issuecomment-238566031:70,Deployability,install,install,70,"That's impressive. If you're aiming for a working installation, maybe install ambit on its own and pass `-DAMBIT_DIR` to the psi4 build so psi4 detects it. Psi4 build development has moved over to #442, so I won't try to diagnose this eternal loop unless it appears in the new build scheme. Thanks for the report– I'll be on the lookout for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-238566031
https://github.com/psi4/psi4/issues/460#issuecomment-238566031:144,Safety,detect,detects,144,"That's impressive. If you're aiming for a working installation, maybe install ambit on its own and pass `-DAMBIT_DIR` to the psi4 build so psi4 detects it. Psi4 build development has moved over to #442, so I won't try to diagnose this eternal loop unless it appears in the new build scheme. Thanks for the report– I'll be on the lookout for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-238566031
https://github.com/psi4/psi4/issues/460#issuecomment-239645645:37,Modifiability,rewrite,rewrite,37,"Good to know the cause. In the cmake rewrite, psi4 and all add-ons are getting safeguards that catch attempts to build in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239645645
https://github.com/psi4/psi4/issues/460#issuecomment-239645645:79,Safety,safe,safeguards,79,"Good to know the cause. In the cmake rewrite, psi4 and all add-ons are getting safeguards that catch attempts to build in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239645645
https://github.com/psi4/psi4/issues/460#issuecomment-239647371:68,Deployability,install,install,68,"Actually, that wasn't it either. Starting from scratch with a fixed install location still results in the failed install. The command I used now was; ./setup --cc gcc --cxx g++ --fc gfortran --blas /usr/lib64/libopenblaso.a --lapack /usr/lib64/libopenblaso.a --pcmsolver on --chemps2 on --ambit off --prefix /home/work/psi4/install -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib objdir",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239647371
https://github.com/psi4/psi4/issues/460#issuecomment-239647371:113,Deployability,install,install,113,"Actually, that wasn't it either. Starting from scratch with a fixed install location still results in the failed install. The command I used now was; ./setup --cc gcc --cxx g++ --fc gfortran --blas /usr/lib64/libopenblaso.a --lapack /usr/lib64/libopenblaso.a --pcmsolver on --chemps2 on --ambit off --prefix /home/work/psi4/install -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib objdir",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239647371
https://github.com/psi4/psi4/issues/460#issuecomment-239647371:324,Deployability,install,install,324,"Actually, that wasn't it either. Starting from scratch with a fixed install location still results in the failed install. The command I used now was; ./setup --cc gcc --cxx g++ --fc gfortran --blas /usr/lib64/libopenblaso.a --lapack /usr/lib64/libopenblaso.a --pcmsolver on --chemps2 on --ambit off --prefix /home/work/psi4/install -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib objdir",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239647371
https://github.com/psi4/psi4/issues/462#issuecomment-240187176:56,Availability,error,error,56,Here an input file : it simply crashes with no specific error. molecule c2h3 {; C .049798 -.576272 .000000; C .049798 .710988 .000000; H -.876750 -1.151844 .000000; H .969183 -1.154639 .000000; H -.690013 1.498185 .000000; units ang; symmetry c1; }; set basis cc-pvdz ; set scf_type df; set cc_type df. set guess GWH; set reference rohf; set MAXITER 1000. set e_convergence 1e-6; set d_convergence 1e-6; set ints_tolerance 1e-8. set FROZEN_DOCC [1]; set frozen_uocc [10]; set roots_per_irrep [4]; energy('eom-cc3'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240187176
https://github.com/psi4/psi4/issues/462#issuecomment-240187176:497,Energy Efficiency,energy,energy,497,Here an input file : it simply crashes with no specific error. molecule c2h3 {; C .049798 -.576272 .000000; C .049798 .710988 .000000; H -.876750 -1.151844 .000000; H .969183 -1.154639 .000000; H -.690013 1.498185 .000000; units ang; symmetry c1; }; set basis cc-pvdz ; set scf_type df; set cc_type df. set guess GWH; set reference rohf; set MAXITER 1000. set e_convergence 1e-6; set d_convergence 1e-6; set ints_tolerance 1e-8. set FROZEN_DOCC [1]; set frozen_uocc [10]; set roots_per_irrep [4]; energy('eom-cc3'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240187176
https://github.com/psi4/psi4/issues/462#issuecomment-240187176:24,Usability,simpl,simply,24,Here an input file : it simply crashes with no specific error. molecule c2h3 {; C .049798 -.576272 .000000; C .049798 .710988 .000000; H -.876750 -1.151844 .000000; H .969183 -1.154639 .000000; H -.690013 1.498185 .000000; units ang; symmetry c1; }; set basis cc-pvdz ; set scf_type df; set cc_type df. set guess GWH; set reference rohf; set MAXITER 1000. set e_convergence 1e-6; set d_convergence 1e-6; set ints_tolerance 1e-8. set FROZEN_DOCC [1]; set frozen_uocc [10]; set roots_per_irrep [4]; energy('eom-cc3'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240187176
https://github.com/psi4/psi4/issues/462#issuecomment-240188822:61,Availability,error,error,61,"I just ran the input, and it produces (admittedly unhelpful) error message `Fatal Error: UHF Density fitting NYI`. The CC3 code is not set up to use density fitting yet, unfortunately. If you remove the `cc_type` keyword, it runs correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240188822
https://github.com/psi4/psi4/issues/462#issuecomment-240188822:82,Availability,Error,Error,82,"I just ran the input, and it produces (admittedly unhelpful) error message `Fatal Error: UHF Density fitting NYI`. The CC3 code is not set up to use density fitting yet, unfortunately. If you remove the `cc_type` keyword, it runs correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240188822
https://github.com/psi4/psi4/issues/462#issuecomment-240188822:67,Integrability,message,message,67,"I just ran the input, and it produces (admittedly unhelpful) error message `Fatal Error: UHF Density fitting NYI`. The CC3 code is not set up to use density fitting yet, unfortunately. If you remove the `cc_type` keyword, it runs correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240188822
https://github.com/psi4/psi4/issues/462#issuecomment-240190955:39,Performance,perform,performing,39,"ok, do you know of any code capable of performing eom-cc2, eom-ccsd with DF for excited states + frozen core and orbital virtual approximation for both closed and open shell molecules ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240190955
https://github.com/psi4/psi4/issues/463#issuecomment-241330989:143,Availability,error,error,143,My setup options. ```; ./setup --cc icc --cxx icpc --fc ifort --pcmsolver on --chemps2 on --hdf5-dir /usr psi4build; ```. with boost 1.55. The error is reproducible on my end.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/463#issuecomment-241330989
https://github.com/psi4/psi4/issues/464#issuecomment-244575544:1339,Energy Efficiency,energy,energy,1339,"Sure. ```; molecule {; 0 2; C; H 1 RCH; H 1 RCH 2 A; C 1 RCd 3 A 2 D180; H 4 RCH 1 A 3 D; C 4 RCs 5 A 2 D180; H 6 RCH 4 A 5 D180; C 6 RCd 7 A 4 D180; H 8 RCH 6 A 7 D180; C 8 RCs 9 A 6 D180; H 10 RCH 8 A 9 D180; C 10 RCd 11 A 8 D180; H 12 RCH 10 A 11 D180; C 12 RCs 13 A 10 D180; H 14 RCH 12 A 13 D180; C 14 RCd 15 A 12 D180; H 16 RCH 14 A 15 D180; C 16 RCs 17 A 14 D180; H 18 RCH 16 A 17 D180; H 18 RCH 16 A 19 D180. RCs=1.45; RCd=1.36; RCH=1.08; A=120.0; D=0.0; D180=180.0; }. set basis STO-3G; set reference rohf; set scf_type pk; set docc [ 28, 4 ]; set socc [ 0, 1 ]; set e_convergence 1e-13; set d_convergence 1e-13; set ints_tolerance 0.0; # Include 20% old density; set damping_percentage 20; # and stop damping once density has converged to 1e-3; set damping_convergence 1e-3. set dmrg wfn_irrep 1; set dmrg wfn_multp 2; set dmrg frozen_docc [ 9, 0 ]; set dmrg active [ 38, 9 ]. set dmrg dmrg_states [ 250, 250 ]; set dmrg dmrg_e_convergence [ 1e-8, 1e-8 ]; set dmrg dmrg_maxsweeps [ 10, 10 ]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00 ]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-8 ]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_active_space loc; set dmrg dmrg_loc_random true. set dmrg dmrg_molden true # DMRG-CI pseudocanonical orbitals; set dmrg dmrg_density_ao true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244575544
https://github.com/psi4/psi4/issues/464#issuecomment-244579713:135,Availability,error,error,135,"Could you try running:. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I see this error quite a bit, but it is usually because I forget to use an scf_type that writes the integrals to disk. I am not really confident that this would work, but it is worth a shot. . The other thing you could do is. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); mints(scf_wfn); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I may have the syntax wrong for the above calls. The main thing you need to do is make sure the integrals are actually written to disk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244579713
https://github.com/psi4/psi4/issues/464#issuecomment-244579713:51,Energy Efficiency,energy,energy,51,"Could you try running:. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I see this error quite a bit, but it is usually because I forget to use an scf_type that writes the integrals to disk. I am not really confident that this would work, but it is worth a shot. . The other thing you could do is. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); mints(scf_wfn); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I may have the syntax wrong for the above calls. The main thing you need to do is make sure the integrals are actually written to disk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244579713
https://github.com/psi4/psi4/issues/464#issuecomment-244579713:83,Energy Efficiency,energy,energy,83,"Could you try running:. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I see this error quite a bit, but it is usually because I forget to use an scf_type that writes the integrals to disk. I am not really confident that this would work, but it is worth a shot. . The other thing you could do is. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); mints(scf_wfn); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I may have the syntax wrong for the above calls. The main thing you need to do is make sure the integrals are actually written to disk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244579713
https://github.com/psi4/psi4/issues/464#issuecomment-244579713:377,Energy Efficiency,energy,energy,377,"Could you try running:. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I see this error quite a bit, but it is usually because I forget to use an scf_type that writes the integrals to disk. I am not really confident that this would work, but it is worth a shot. . The other thing you could do is. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); mints(scf_wfn); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I may have the syntax wrong for the above calls. The main thing you need to do is make sure the integrals are actually written to disk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244579713
https://github.com/psi4/psi4/issues/464#issuecomment-244579713:425,Energy Efficiency,energy,energy,425,"Could you try running:. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I see this error quite a bit, but it is usually because I forget to use an scf_type that writes the integrals to disk. I am not really confident that this would work, but it is worth a shot. . The other thing you could do is. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); mints(scf_wfn); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I may have the syntax wrong for the above calls. The main thing you need to do is make sure the integrals are actually written to disk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244579713
https://github.com/psi4/psi4/issues/464#issuecomment-244580097:2,Deployability,update,updated,2,"I updated the input file to the [new syntax](https://github.com/psi4/psi4/issues/150#issuecomment-228951911), and it does the SCF and seemingly gets into the DMRG. Is this any improvement to what you experienced?. ```; molecule {; 0 2; C; H 1 RCH; H 1 RCH 2 A; C 1 RCd 3 A 2 D180; H 4 RCH 1 A 3 D; C 4 RCs 5 A 2 D180; H 6 RCH 4 A 5 D180; C 6 RCd 7 A 4 D180; H 8 RCH 6 A 7 D180; C 8 RCs 9 A 6 D180; H 10 RCH 8 A 9 D180; C 10 RCd 11 A 8 D180; H 12 RCH 10 A 11 D180; C 12 RCs 13 A 10 D180; H 14 RCH 12 A 13 D180; C 14 RCd 15 A 12 D180; H 16 RCH 14 A 15 D180; C 16 RCs 17 A 14 D180; H 18 RCH 16 A 17 D180; H 18 RCH 16 A 19 D180. RCs=1.45; RCd=1.36; RCH=1.08; A=120.0; D=0.0; D180=180.0; }. set basis STO-3G; set reference rohf; set scf_type pk; set docc [ 28, 4 ]; set socc [ 0, 1 ]; set e_convergence 1e-13; set d_convergence 1e-13; set ints_tolerance 0.0; # Include 20% old density; set damping_percentage 20; # and stop damping once density has converged to 1e-3; set damping_convergence 1e-3. set dmrg_irrep 1; set dmrg_multiplicity 2; set restricted_docc [ 9, 0 ]; set active [ 38, 9 ]. set dmrg_sweep_states [ 250, 250 ]; set dmrg_sweep_energy_conv [ 1e-8, 1e-8 ]; set dmrg_sweep_max_sweeps [ 10, 10 ]; set dmrg_sweep_noise_prefac [ 0.05, 0.00 ]; set dmrg_sweep_dvdson_rtol [ 1e-5, 1e-8 ]; set dmrg_print_corr false; set dmrg_mps_write false. set dmrg_scf_active_space loc; set dmrg_local_init true. set dmrg_molden_write true # DMRG-CI pseudocanonical orbitals; set dmrg_opdm_ao_print true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###################################################",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097
https://github.com/psi4/psi4/issues/464#issuecomment-244580097:1528,Energy Efficiency,energy,energy,1528,"CH 14 A 15 D180; C 16 RCs 17 A 14 D180; H 18 RCH 16 A 17 D180; H 18 RCH 16 A 19 D180. RCs=1.45; RCd=1.36; RCH=1.08; A=120.0; D=0.0; D180=180.0; }. set basis STO-3G; set reference rohf; set scf_type pk; set docc [ 28, 4 ]; set socc [ 0, 1 ]; set e_convergence 1e-13; set d_convergence 1e-13; set ints_tolerance 0.0; # Include 20% old density; set damping_percentage 20; # and stop damping once density has converged to 1e-3; set damping_convergence 1e-3. set dmrg_irrep 1; set dmrg_multiplicity 2; set restricted_docc [ 9, 0 ]; set active [ 38, 9 ]. set dmrg_sweep_states [ 250, 250 ]; set dmrg_sweep_energy_conv [ 1e-8, 1e-8 ]; set dmrg_sweep_max_sweeps [ 10, 10 ]; set dmrg_sweep_noise_prefac [ 0.05, 0.00 ]; set dmrg_sweep_dvdson_rtol [ 1e-5, 1e-8 ]; set dmrg_print_corr false; set dmrg_mps_write false. set dmrg_scf_active_space loc; set dmrg_local_init true. set dmrg_molden_write true # DMRG-CI pseudocanonical orbitals; set dmrg_opdm_ao_print true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097
https://github.com/psi4/psi4/issues/464#issuecomment-244580097:2269,Modifiability,variab,variables,2269,"orr false; set dmrg_mps_write false. set dmrg_scf_active_space loc; set dmrg_local_init true. set dmrg_molden_write true # DMRG-CI pseudocanonical orbitals; set dmrg_opdm_ao_print true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; EdmistonRuedenberg::Optimize : Cost function at start = 11.6978759080747; Cost function at stop = 39.88912832949; Gradient norm = 1.14176119927824e-09 after 14 iterations.; EdmistonRuedenberg::FiedlerExchange : Cost function at start = 855.317140538854; EdmistonRuedenberg::FiedlerExchange : Cost function at end = 13.7691914991716; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097
https://github.com/psi4/psi4/issues/464#issuecomment-244580097:2877,Performance,Optimiz,Optimize,2877,"ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; EdmistonRuedenberg::Optimize : Cost function at start = 11.6978759080747; Cost function at stop = 39.88912832949; Gradient norm = 1.14176119927824e-09 after 14 iterations.; EdmistonRuedenberg::FiedlerExchange : Cost function at start = 855.317140538854; EdmistonRuedenberg::FiedlerExchange : Cost function at end = 13.7691914991716; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Rotated the active space to localized orbitals, sorted according to the exchange matrix.; CheMPS2 output is temporarily written to the file ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097
https://github.com/psi4/psi4/issues/464#issuecomment-244672286:28,Energy Efficiency,reduce,reduced,28,"Thanks, although this was a reduced input file - I'm running with much more virtual states in the DMRG.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244672286
https://github.com/psi4/psi4/issues/464#issuecomment-246363626:347,Testability,test,tests,347,"If you'd like to be adventurous, the current development head at https://github.com/jturney/psi4/commits/CMakeRewrite-KillTheBoost should meet your requirements of clean build, new dmrg syntax, and current CheMPS2 (1.8+). It's in a state where all CheMPS2 build issues are in final form, and the non-CheMPS2 code is steady again (only one of 300+ tests broken and that one, finite diff freq of mcscf, won't interfere with you). . You'll need a fairly modern compiler (https://github.com/jturney/psi4/blob/CMakeRewrite-KillTheBoost/cmake/CheckCompilerVersion.cmake) and gcc>=4.9 (unless using Clang). But otherwise, should be clean with something like:. ```; cmake -H. -Bobjdir \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DMAX_AM_ERI=5 \; -DENABLE_CheMPS2=ON \; -DPYTHON_EXECUTABLE=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/bin/python2.7 \; -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/lib/libpython2.7.so \; -DPYTHON_INCLUDE_DIR=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/include/python2.7 ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-246363626
https://github.com/psi4/psi4/issues/466#issuecomment-246136990:168,Deployability,update,update,168,"At various times Psi4 has been made python3-compatible, and then that compatibility diminishes as the developers don't use py3. We're in the middle of an infrastucture update at present (build and python bindings). After that, python3 support and/or switch is likely, so probably this calendar year. I'm sorry it probably can't be this month, but there's so many under-the-hood changes that we want to decouple them as much as possible. A py35 package is definitely a target (and will be far easier when we don't have to deal with Boost).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-246136990
https://github.com/psi4/psi4/issues/466#issuecomment-246810068:425,Modifiability,plugin,plugins,425,"I strongly concur. If you do anything now, you'll have to deal with Boost::python, whereas the current development head (https://github.com/jturney/psi4/commits/CMakeRewrite-KillTheBoost) uses pybind11 for python binding. I think the new plan is to merge that branch (which is 250 commits ahead) back into master this week with main functionality intact but some lesser items subject to polish and change (e.g., docs, cmake, plugins, psimrcc-fd-freq2).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-246810068
https://github.com/psi4/psi4/issues/466#issuecomment-249032322:593,Availability,ping,ping,593,"Ok, the big merge is in. If you'd like to work on Py3/conda, that'd be great. Note that the python bindings are now through pybind11 and there is (this issue)[https://github.com/pybind/pybind11/pull/227] that I haven't looked into. The existing conda recipes for psi4 are (here)[https://github.com/psi4/psi4meta/tree/master/conda-recipes] and though they were in pristine shape at the beginning of July, they haven't had CMakeRewrite/KillTheBoost applied to them yet. And ignore the `LIBC_INTERJECT` business. Basically, if you'd like to work on this, wonderful, and if you have any problems, ping me. But in any case, I will get to this eventually (see, #111).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-249032322
https://github.com/psi4/psi4/issues/466#issuecomment-260094686:561,Deployability,Update,Update,561,"Except for some stray bits (sow/reap, databases, the ancillary scripts directory), Psi4 is now python3 compatible (largely thanks to @dgasmith). In fact, the majority of our CI testing is now with py3, so it should stay that way. There is now a py3 conda package for Linux uploaded to anaconda.org. Niceties of packaging and channels aren't in place yet, but a full working psi4/py3 conda environment (named `p4py35`) can be obtained with the below. Please report any problems. `conda create -n p4py35 python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`. **Update 15 Dec 2016** If your gcc from the above balks at ""Hello, world"", add `isl=0.12.2 mpc=1.0.1 mpfr=3.1.2` after `dftd3`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-260094686
https://github.com/psi4/psi4/issues/466#issuecomment-260094686:177,Testability,test,testing,177,"Except for some stray bits (sow/reap, databases, the ancillary scripts directory), Psi4 is now python3 compatible (largely thanks to @dgasmith). In fact, the majority of our CI testing is now with py3, so it should stay that way. There is now a py3 conda package for Linux uploaded to anaconda.org. Niceties of packaging and channels aren't in place yet, but a full working psi4/py3 conda environment (named `p4py35`) can be obtained with the below. Please report any problems. `conda create -n p4py35 python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`. **Update 15 Dec 2016** If your gcc from the above balks at ""Hello, world"", add `isl=0.12.2 mpc=1.0.1 mpfr=3.1.2` after `dftd3`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-260094686
https://github.com/psi4/psi4/issues/466#issuecomment-260094686:544,Testability,test,test,544,"Except for some stray bits (sow/reap, databases, the ancillary scripts directory), Psi4 is now python3 compatible (largely thanks to @dgasmith). In fact, the majority of our CI testing is now with py3, so it should stay that way. There is now a py3 conda package for Linux uploaded to anaconda.org. Niceties of packaging and channels aren't in place yet, but a full working psi4/py3 conda environment (named `p4py35`) can be obtained with the below. Please report any problems. `conda create -n p4py35 python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`. **Update 15 Dec 2016** If your gcc from the above balks at ""Hello, world"", add `isl=0.12.2 mpc=1.0.1 mpfr=3.1.2` after `dftd3`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-260094686
https://github.com/psi4/psi4/issues/466#issuecomment-272589229:117,Deployability,update,update,117,"FYI, new set of conda packages today. These handle the Linux ""hello world"" bug internally. It's recommended _not_ to update from a circa 1.0 psi4 (e.g., 1.0.54) with `conda update psi4` but to create a new environment for them as follows. If you already have a pre 1.1 psi4 installed, `conda update psi4 -c psi4/label/test -c psi4` should do the trick. * Linux, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Linux, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Mac, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/clang -c psi4`; * Mac, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/clang -c psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-272589229
https://github.com/psi4/psi4/issues/466#issuecomment-272589229:173,Deployability,update,update,173,"FYI, new set of conda packages today. These handle the Linux ""hello world"" bug internally. It's recommended _not_ to update from a circa 1.0 psi4 (e.g., 1.0.54) with `conda update psi4` but to create a new environment for them as follows. If you already have a pre 1.1 psi4 installed, `conda update psi4 -c psi4/label/test -c psi4` should do the trick. * Linux, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Linux, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Mac, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/clang -c psi4`; * Mac, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/clang -c psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-272589229
https://github.com/psi4/psi4/issues/466#issuecomment-272589229:274,Deployability,install,installed,274,"FYI, new set of conda packages today. These handle the Linux ""hello world"" bug internally. It's recommended _not_ to update from a circa 1.0 psi4 (e.g., 1.0.54) with `conda update psi4` but to create a new environment for them as follows. If you already have a pre 1.1 psi4 installed, `conda update psi4 -c psi4/label/test -c psi4` should do the trick. * Linux, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Linux, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Mac, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/clang -c psi4`; * Mac, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/clang -c psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-272589229
https://github.com/psi4/psi4/issues/466#issuecomment-272589229:292,Deployability,update,update,292,"FYI, new set of conda packages today. These handle the Linux ""hello world"" bug internally. It's recommended _not_ to update from a circa 1.0 psi4 (e.g., 1.0.54) with `conda update psi4` but to create a new environment for them as follows. If you already have a pre 1.1 psi4 installed, `conda update psi4 -c psi4/label/test -c psi4` should do the trick. * Linux, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Linux, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Mac, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/clang -c psi4`; * Mac, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/clang -c psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-272589229
https://github.com/psi4/psi4/issues/466#issuecomment-272589229:318,Testability,test,test,318,"FYI, new set of conda packages today. These handle the Linux ""hello world"" bug internally. It's recommended _not_ to update from a circa 1.0 psi4 (e.g., 1.0.54) with `conda update psi4` but to create a new environment for them as follows. If you already have a pre 1.1 psi4 installed, `conda update psi4 -c psi4/label/test -c psi4` should do the trick. * Linux, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Linux, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Mac, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/clang -c psi4`; * Mac, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/clang -c psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-272589229
https://github.com/psi4/psi4/issues/466#issuecomment-272589229:433,Testability,test,test,433,"FYI, new set of conda packages today. These handle the Linux ""hello world"" bug internally. It's recommended _not_ to update from a circa 1.0 psi4 (e.g., 1.0.54) with `conda update psi4` but to create a new environment for them as follows. If you already have a pre 1.1 psi4 installed, `conda update psi4 -c psi4/label/test -c psi4` should do the trick. * Linux, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Linux, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Mac, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/clang -c psi4`; * Mac, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/clang -c psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-272589229
https://github.com/psi4/psi4/issues/466#issuecomment-272589229:528,Testability,test,test,528,"FYI, new set of conda packages today. These handle the Linux ""hello world"" bug internally. It's recommended _not_ to update from a circa 1.0 psi4 (e.g., 1.0.54) with `conda update psi4` but to create a new environment for them as follows. If you already have a pre 1.1 psi4 installed, `conda update psi4 -c psi4/label/test -c psi4` should do the trick. * Linux, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Linux, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Mac, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/clang -c psi4`; * Mac, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/clang -c psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-272589229
https://github.com/psi4/psi4/issues/466#issuecomment-289740614:179,Deployability,release,released,179,"Hi guys,; What is the status on this? I see [here](https://anaconda.org/psi4/psi4/files) that the dev has the py35 and py36. Any idea of when this dev version will be definitive (released)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-289740614
https://github.com/psi4/psi4/issues/466#issuecomment-289781613:185,Deployability,integrat,integration,185,"Yes, there's now py27, py35, py36 for Linux and Mac. I've been getting the build and packaging automated again these past few days. There's a few more external projects that need final integration (simint, ambit, a slight dkh fix). I'm aiming for RC1 by mid next week because I'll be away for a bit after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-289781613
https://github.com/psi4/psi4/issues/466#issuecomment-289781613:185,Integrability,integrat,integration,185,"Yes, there's now py27, py35, py36 for Linux and Mac. I've been getting the build and packaging automated again these past few days. There's a few more external projects that need final integration (simint, ambit, a slight dkh fix). I'm aiming for RC1 by mid next week because I'll be away for a bit after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-289781613
https://github.com/psi4/psi4/issues/466#issuecomment-289915579:64,Testability,test,testing,64,"Thanks @loriab. We're fine with RC, I just didn't want to start testing the dev version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-289915579
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:913,Availability,Down,Download,913,"A few docs. What's in the conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Sa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:1022,Availability,down,download,1022," conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:66,Deployability,install,installer,66,"A few docs. What's in the conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Sa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:493,Deployability,install,install,493,"A few docs. What's in the conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Sa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:680,Deployability,install,installer,680,"A few docs. What's in the conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Sa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:937,Deployability,install,installers,937,"A few docs. What's in the conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Sa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:1260,Deployability,install,installation,1260,", it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:3213,Deployability,release,releases,3213," gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. ```. * Observe that current latest tag matches metadata scipt and git describe, that GH releases matches metadata script, that upcoming in metadata script matches current versioner version. * Note that current tag is ""v1.1a1"". Decide on imminent tag, say ""v1.1rc1"". * 2. **ACTION** Bump tag in code. * Edit current & prospective tag in psi4/metadata.py. Use your decided-upon tag ""v1.1rc1"" and a speculative next tag, say ""v1.1rc2"", and use 7 ""z""s for the part you can't predict. ```; >>> vi ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:3811,Deployability,release,releases,3811,"---------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. ```. * Observe that current latest tag matches metadata scipt and git describe, that GH releases matches metadata script, that upcoming in metadata script matches current versioner version. * Note that current tag is ""v1.1a1"". Decide on imminent tag, say ""v1.1rc1"". * 2. **ACTION** Bump tag in code. * Edit current & prospective tag in psi4/metadata.py. Use your decided-upon tag ""v1.1rc1"" and a speculative next tag, say ""v1.1rc2"", and use 7 ""z""s for the part you can't predict. ```; >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:7133,Deployability,release,releases,7133," are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py ; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream.; ```. 6. **ACTION** Move bump to remote. * Temporarily disengage ""Include administrators"" on protected master branch. ```; >>> git push origin master; >>> git push origin v1.1rc1; ```. * Now https://github.com/loriab/psi4/releases says v1.1rc1 6100822. Notes; -----. * To delete a tag:. * >>> git tag -d v1.1a1; * >>> git push origin :refs/tags/v1.1a1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2405,Modifiability,config,configure,2405,"ython=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2720,Modifiability,plugin,plugins,2720," make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2762,Modifiability,variab,variables,2762," make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2788,Modifiability,Plugin,Plugins,2788,"ll those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. ```. * Observe that current latest tag matches metadata scipt and git describe, that GH rel",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2703,Performance,cache,cache,2703," make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:4194,Safety,predict,predict,4194,"emote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. ```. * Observe that current latest tag matches metadata scipt and git describe, that GH releases matches metadata script, that upcoming in metadata script matches current versioner version. * Note that current tag is ""v1.1a1"". Decide on imminent tag, say ""v1.1rc1"". * 2. **ACTION** Bump tag in code. * Edit current & prospective tag in psi4/metadata.py. Use your decided-upon tag ""v1.1rc1"" and a speculative next tag, say ""v1.1rc2"", and use 7 ""z""s for the part you can't predict. ```; >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5049,Security,hash,hash,5049,"psi4/metadata.py. Use your decided-upon tag ""v1.1rc1"" and a speculative next tag, say ""v1.1rc2"", and use 7 ""z""s for the part you can't predict. ```; >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snaps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5199,Security,hash,hash,5199,".py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5300,Security,hash,hash,5300,"5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5802,Security,hash,hash,5802,">>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py ; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:1147,Testability,Test,Test,1147,"----. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to wh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:1165,Testability,test,test,1165,"----. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to wh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:1777,Testability,Test,Test,1777,"runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:1795,Testability,test,test,1795,"runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-292102715:6775,Testability,log,log,6775," are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py ; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream.; ```. 6. **ACTION** Move bump to remote. * Temporarily disengage ""Include administrators"" on protected master branch. ```; >>> git push origin master; >>> git push origin v1.1rc1; ```. * Now https://github.com/loriab/psi4/releases says v1.1rc1 6100822. Notes; -----. * To delete a tag:. * >>> git tag -d v1.1a1; * >>> git push origin :refs/tags/v1.1a1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715
https://github.com/psi4/psi4/issues/466#issuecomment-301264612:38,Deployability,release,releases,38,"Ah, the plan is to have only official releases through `conda install psi4 -c psi4`. Any nightly build will be through `conda install psi4 -c psi4/label/dev [-c psi4]` (bracketed part needed if any QC dependencies need to be got from the main psi4 channel). This is in the docs, but not any that have built yet :-). So next week there'll be a 1.1 on main psi4 channel. We're gearing up for `1.1rc2` now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-301264612
https://github.com/psi4/psi4/issues/466#issuecomment-301264612:62,Deployability,install,install,62,"Ah, the plan is to have only official releases through `conda install psi4 -c psi4`. Any nightly build will be through `conda install psi4 -c psi4/label/dev [-c psi4]` (bracketed part needed if any QC dependencies need to be got from the main psi4 channel). This is in the docs, but not any that have built yet :-). So next week there'll be a 1.1 on main psi4 channel. We're gearing up for `1.1rc2` now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-301264612
https://github.com/psi4/psi4/issues/466#issuecomment-301264612:126,Deployability,install,install,126,"Ah, the plan is to have only official releases through `conda install psi4 -c psi4`. Any nightly build will be through `conda install psi4 -c psi4/label/dev [-c psi4]` (bracketed part needed if any QC dependencies need to be got from the main psi4 channel). This is in the docs, but not any that have built yet :-). So next week there'll be a 1.1 on main psi4 channel. We're gearing up for `1.1rc2` now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-301264612
https://github.com/psi4/psi4/issues/466#issuecomment-301264612:201,Integrability,depend,dependencies,201,"Ah, the plan is to have only official releases through `conda install psi4 -c psi4`. Any nightly build will be through `conda install psi4 -c psi4/label/dev [-c psi4]` (bracketed part needed if any QC dependencies need to be got from the main psi4 channel). This is in the docs, but not any that have built yet :-). So next week there'll be a 1.1 on main psi4 channel. We're gearing up for `1.1rc2` now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-301264612
https://github.com/psi4/psi4/issues/468#issuecomment-248191155:588,Deployability,release,release,588,"So I've been working on a mostly MPI things in my fork (Distributed CASSCF, Distributed DFJK). I have no idea how this workflow is going to be implemented in the future, so I am not not ready to merge this into the main branch before late October. Unfortunately, I also used quite a bit of the now defunct (I think) libparallel2, so I am not sure where this will go. If I have a fork of PSI4, will this fork be deleted in October? . I also am not ready to merge any of this into a steady branch as it requires quite a bit of finesse (and various libraries) to run, so I would not want to release this yet. . I realize that I will probably have to work with you all in order to merge these changes at some point in the later future. As long as my fork will not get deleted, I am perfectly fine waiting for this time to occur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248191155
https://github.com/psi4/psi4/issues/468#issuecomment-248198593:13,Safety,safe,safe,13,"Your fork is safe. It'll just look something like 8000 commits behind master and 8050 commits ahead and quite un-PR-able against psi4/psi4 master. Yes, consulting us when you're ready to merge will be the thing to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248198593
https://github.com/psi4/psi4/issues/468#issuecomment-248321020:189,Testability,test,tested,189,"@kannon92 libparallel2 is completely deleted. The majority of that functionality now resides in [LibTaskForce](https://github.com/ryanmrichard/LibTaskForce), which admittedly has only been tested on a few MPI processes at the moment (hopefully, within the next few weeks I'll get a chance to try it on an actual supercomputer). If you're interested in moving over to LTF I'd be happy to help; it could use a lot more stress tests (and honestly some code cleanup and documentation) that I've been putting off in favor of working on Pulsar and writing papers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248321020
https://github.com/psi4/psi4/issues/468#issuecomment-248321020:424,Testability,test,tests,424,"@kannon92 libparallel2 is completely deleted. The majority of that functionality now resides in [LibTaskForce](https://github.com/ryanmrichard/LibTaskForce), which admittedly has only been tested on a few MPI processes at the moment (hopefully, within the next few weeks I'll get a chance to try it on an actual supercomputer). If you're interested in moving over to LTF I'd be happy to help; it could use a lot more stress tests (and honestly some code cleanup and documentation) that I've been putting off in favor of working on Pulsar and writing papers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248321020
https://github.com/psi4/psi4/issues/468#issuecomment-248339239:204,Energy Efficiency,schedul,schedulings,204,"@ryanmrichard My changes were mostly to allow GTFock to work on separate processor subgroups. I used libparallel2 (or maybe libparallel) just to create communicators. I did not really try any of the task schedulings. I guess I really only use boost::mpi, but it should be a simple change to just normal MPI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248339239
https://github.com/psi4/psi4/issues/468#issuecomment-248339239:274,Usability,simpl,simple,274,"@ryanmrichard My changes were mostly to allow GTFock to work on separate processor subgroups. I used libparallel2 (or maybe libparallel) just to create communicators. I did not really try any of the task schedulings. I guess I really only use boost::mpi, but it should be a simple change to just normal MPI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248339239
https://github.com/psi4/psi4/issues/468#issuecomment-248340701:217,Usability,simpl,simple,217,"The biggest change between boost::mpi and normal MPI is the lack of templated calls. In normal MPI you always need to specify the type of the data you're passing to MPI, but aside from that you're right it's a pretty simple change between the two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248340701
https://github.com/psi4/psi4/issues/468#issuecomment-248348353:163,Availability,error,errors,163,"@jgonthier Effectively yes, when we rewrite the history no merging can take place so its best to simply remove all old history. Git will throw some pretty strange errors at you if you try. You can use the git merging tool without history (will throw conflicts at every change however), or other merging tools to help out. Since its fairly difficult to rebase through the CMake changes it was thought that this would be a ideal time to do the history rewrite. Git should be setup correctly with the external projects so a similar history rewrite should not be needed again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248348353
https://github.com/psi4/psi4/issues/468#issuecomment-248348353:36,Modifiability,rewrite,rewrite,36,"@jgonthier Effectively yes, when we rewrite the history no merging can take place so its best to simply remove all old history. Git will throw some pretty strange errors at you if you try. You can use the git merging tool without history (will throw conflicts at every change however), or other merging tools to help out. Since its fairly difficult to rebase through the CMake changes it was thought that this would be a ideal time to do the history rewrite. Git should be setup correctly with the external projects so a similar history rewrite should not be needed again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248348353
https://github.com/psi4/psi4/issues/468#issuecomment-248348353:450,Modifiability,rewrite,rewrite,450,"@jgonthier Effectively yes, when we rewrite the history no merging can take place so its best to simply remove all old history. Git will throw some pretty strange errors at you if you try. You can use the git merging tool without history (will throw conflicts at every change however), or other merging tools to help out. Since its fairly difficult to rebase through the CMake changes it was thought that this would be a ideal time to do the history rewrite. Git should be setup correctly with the external projects so a similar history rewrite should not be needed again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248348353
https://github.com/psi4/psi4/issues/468#issuecomment-248348353:537,Modifiability,rewrite,rewrite,537,"@jgonthier Effectively yes, when we rewrite the history no merging can take place so its best to simply remove all old history. Git will throw some pretty strange errors at you if you try. You can use the git merging tool without history (will throw conflicts at every change however), or other merging tools to help out. Since its fairly difficult to rebase through the CMake changes it was thought that this would be a ideal time to do the history rewrite. Git should be setup correctly with the external projects so a similar history rewrite should not be needed again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248348353
https://github.com/psi4/psi4/issues/468#issuecomment-248348353:97,Usability,simpl,simply,97,"@jgonthier Effectively yes, when we rewrite the history no merging can take place so its best to simply remove all old history. Git will throw some pretty strange errors at you if you try. You can use the git merging tool without history (will throw conflicts at every change however), or other merging tools to help out. Since its fairly difficult to rebase through the CMake changes it was thought that this would be a ideal time to do the history rewrite. Git should be setup correctly with the external projects so a similar history rewrite should not be needed again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248348353
https://github.com/psi4/psi4/issues/468#issuecomment-249025979:283,Safety,detect,detected,283,"Yes. As far as add-ons:. **Working:** `libint`, `libefp`, `liberd`, `dkh`, `gdma`, `CheMPS2`; **Unknown:** `GTFock`; **Not Working:** `PCMSolver` (this is in progress, but if you need it, it's within a few path hacks of working, so contact us). All of these can be compiled once and detected by the Psi4 superbuild, so possibly you need only compile libint/deriv one more time. Again, much of the build wiki is no good anymore. A mini compilation guide is at the top of the (main CMakeLists.txt)[https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L13-L102]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249025979
https://github.com/psi4/psi4/issues/468#issuecomment-249025979:447,Usability,guid,guide,447,"Yes. As far as add-ons:. **Working:** `libint`, `libefp`, `liberd`, `dkh`, `gdma`, `CheMPS2`; **Unknown:** `GTFock`; **Not Working:** `PCMSolver` (this is in progress, but if you need it, it's within a few path hacks of working, so contact us). All of these can be compiled once and detected by the Psi4 superbuild, so possibly you need only compile libint/deriv one more time. Again, much of the build wiki is no good anymore. A mini compilation guide is at the top of the (main CMakeLists.txt)[https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L13-L102]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249025979
https://github.com/psi4/psi4/issues/468#issuecomment-249036194:118,Safety,detect,detect,118,"Regarding Ambit, Jet did a lot of the CMakeRewrite stuff, but I don't thing the Psi4 build system has been prepped to detect it. More importantly, I think KillTheBoost has to be done for Ambit before it's worth finializing the CMake for it. **Not Working:** `Ambit`, `v2rdm_casscf` (where not working means you'd have to do some real build work to get them running)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249036194
https://github.com/psi4/psi4/issues/468#issuecomment-249038074:111,Testability,test,test,111,"Oh alright. Thank you, @jturney. I was able to compile this on my mac with clang 4.0.0. I am running the quick test suits, but it seems that everything works pretty smoothly. However, you do have to specify -DENABLE_AMBIT=off. If I don't specify this, I get a CMAKE_ERROR about boost and ambit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249038074
https://github.com/psi4/psi4/issues/468#issuecomment-249043838:115,Safety,detect,detected,115,"Yes, I re-cloned everything. All quicktests passed on my laptop. . Well, I can't reproduce the ambit being wrongly detected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249043838
https://github.com/psi4/psi4/issues/468#issuecomment-249113857:59,Deployability,install,install,59,@loriab What's the problem with PCMSolver? The nonstandard install paths?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249113857
https://github.com/psi4/psi4/issues/468#issuecomment-249122702:252,Deployability,configurat,configuration,252,"The primary problem with PCMSolver is that I was only partially through its CMake refresh. I went ahead and [opened a PR](https://github.com/PCMSolver/pcmsolver/pull/31) with the changes thus far. The two primary items are (1) pcm_placeholder lost its configuration step, so you have to manage the PATHs yourself and (2) I'd like to do an inversion of the PCMSolver install so that it becomes a more natural python module to import (installed to site-packages) rather than the involved bin/configure/write-to-source-dir business. It is runable at the moment, though, if you're determined (I included an outline of steps at the PR).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249122702
https://github.com/psi4/psi4/issues/468#issuecomment-249122702:366,Deployability,install,install,366,"The primary problem with PCMSolver is that I was only partially through its CMake refresh. I went ahead and [opened a PR](https://github.com/PCMSolver/pcmsolver/pull/31) with the changes thus far. The two primary items are (1) pcm_placeholder lost its configuration step, so you have to manage the PATHs yourself and (2) I'd like to do an inversion of the PCMSolver install so that it becomes a more natural python module to import (installed to site-packages) rather than the involved bin/configure/write-to-source-dir business. It is runable at the moment, though, if you're determined (I included an outline of steps at the PR).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249122702
https://github.com/psi4/psi4/issues/468#issuecomment-249122702:433,Deployability,install,installed,433,"The primary problem with PCMSolver is that I was only partially through its CMake refresh. I went ahead and [opened a PR](https://github.com/PCMSolver/pcmsolver/pull/31) with the changes thus far. The two primary items are (1) pcm_placeholder lost its configuration step, so you have to manage the PATHs yourself and (2) I'd like to do an inversion of the PCMSolver install so that it becomes a more natural python module to import (installed to site-packages) rather than the involved bin/configure/write-to-source-dir business. It is runable at the moment, though, if you're determined (I included an outline of steps at the PR).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249122702
https://github.com/psi4/psi4/issues/468#issuecomment-249122702:252,Modifiability,config,configuration,252,"The primary problem with PCMSolver is that I was only partially through its CMake refresh. I went ahead and [opened a PR](https://github.com/PCMSolver/pcmsolver/pull/31) with the changes thus far. The two primary items are (1) pcm_placeholder lost its configuration step, so you have to manage the PATHs yourself and (2) I'd like to do an inversion of the PCMSolver install so that it becomes a more natural python module to import (installed to site-packages) rather than the involved bin/configure/write-to-source-dir business. It is runable at the moment, though, if you're determined (I included an outline of steps at the PR).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249122702
https://github.com/psi4/psi4/issues/468#issuecomment-249122702:490,Modifiability,config,configure,490,"The primary problem with PCMSolver is that I was only partially through its CMake refresh. I went ahead and [opened a PR](https://github.com/PCMSolver/pcmsolver/pull/31) with the changes thus far. The two primary items are (1) pcm_placeholder lost its configuration step, so you have to manage the PATHs yourself and (2) I'd like to do an inversion of the PCMSolver install so that it becomes a more natural python module to import (installed to site-packages) rather than the involved bin/configure/write-to-source-dir business. It is runable at the moment, though, if you're determined (I included an outline of steps at the PR).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249122702
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:946,Availability,error,errors,946,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:1446,Availability,error,errors,1446,"that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed globally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:1901,Deployability,install,installed,1901,"that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed globally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:1989,Deployability,install,installed,1989,"that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed globally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:422,Modifiability,variab,variable,422,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:248,Performance,load,loaded,248,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:445,Performance,load,loaded,445,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:116,Safety,detect,detecting,116,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:1345,Safety,detect,detected,1345,"that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed globally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:1501,Safety,detect,detect,1501,"that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed globally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249621149:1746,Safety,detect,detected,1746,"that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed globally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149
https://github.com/psi4/psi4/issues/468#issuecomment-249626595:88,Availability,error,error,88,"That's interesting, @amjames. I'm definitely familiar with the `GLIBCXX_X.X.XX` runtime error (https://github.com/psi4/psi4/wiki/8_FAQ_Contents#how-to-satisfy-the-gcc--49-requirement-without-updating-the-os). What I think is going on is that it is building and linking correctly to the >=4.9 `$GCC_LIB` libraries. But then at runtime, it doesn't know where to find them, as that particular aspect wasn't baked into `rpath`. `ldd -v psi4` will likewise show runtime environment incorrectly using system gcc. I hadn't ever tried manipulations of `CMAKE_PREFIX_PATH` for solving this. _Without recompiling_, can you turn your failing `GLIBCXX_X.X.XX not found` into a working compilation by just manipulating `LD_LIBRARY_PATH` as in the final line of that FAQ? That will help confirm we're talking about exactly the same issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249626595
https://github.com/psi4/psi4/issues/468#issuecomment-249650815:24,Deployability,update,updated,24,"Just to let you know, I updated to Mac OS Sierra and the new build system works great with Apple Clang 8.0 right out of the box.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249650815
https://github.com/psi4/psi4/issues/468#issuecomment-249681177:176,Availability,error,error,176,"@loriab I am re-creating the broken build now and I will look at what `ldd -v psi4` gives me, but I did try modifying the `LD_LIBRARY_PATH` to fix the `GLIBCXX_X.X.XX` runtime error with no luck. Actually loading the GCC_5.2 module would modify it for me, but I removed /usr/lib64 from it just to be sure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249681177
https://github.com/psi4/psi4/issues/468#issuecomment-249681177:205,Performance,load,loading,205,"@loriab I am re-creating the broken build now and I will look at what `ldd -v psi4` gives me, but I did try modifying the `LD_LIBRARY_PATH` to fix the `GLIBCXX_X.X.XX` runtime error with no luck. Actually loading the GCC_5.2 module would modify it for me, but I removed /usr/lib64 from it just to be sure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249681177
https://github.com/psi4/psi4/issues/468#issuecomment-249690183:77,Availability,error,error,77,@loriab I must have made a mistake while I was playing around with this. The error does not appear if I have `LD_LIBRARY_PATH` set correctly at run-time and if I don't have the correct compiler module loaded then cmake errors out in the configure step.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249690183
https://github.com/psi4/psi4/issues/468#issuecomment-249690183:219,Availability,error,errors,219,@loriab I must have made a mistake while I was playing around with this. The error does not appear if I have `LD_LIBRARY_PATH` set correctly at run-time and if I don't have the correct compiler module loaded then cmake errors out in the configure step.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249690183
https://github.com/psi4/psi4/issues/468#issuecomment-249690183:237,Modifiability,config,configure,237,@loriab I must have made a mistake while I was playing around with this. The error does not appear if I have `LD_LIBRARY_PATH` set correctly at run-time and if I don't have the correct compiler module loaded then cmake errors out in the configure step.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249690183
https://github.com/psi4/psi4/issues/468#issuecomment-249690183:201,Performance,load,loaded,201,@loriab I must have made a mistake while I was playing around with this. The error does not appear if I have `LD_LIBRARY_PATH` set correctly at run-time and if I don't have the correct compiler module loaded then cmake errors out in the configure step.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249690183
https://github.com/psi4/psi4/issues/468#issuecomment-249699749:454,Modifiability,variab,variables,454,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749
https://github.com/psi4/psi4/issues/468#issuecomment-249699749:864,Modifiability,config,config,864,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749
https://github.com/psi4/psi4/issues/468#issuecomment-249699749:880,Performance,load,load,880,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749
https://github.com/psi4/psi4/issues/468#issuecomment-249699749:172,Safety,detect,detects,172,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749
https://github.com/psi4/psi4/issues/468#issuecomment-249699749:250,Safety,detect,detection,250,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749
https://github.com/psi4/psi4/issues/468#issuecomment-249699749:353,Safety,detect,detection,353,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749
https://github.com/psi4/psi4/issues/468#issuecomment-249699749:716,Safety,detect,detection,716,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749
https://github.com/psi4/psi4/issues/468#issuecomment-249711681:696,Availability,error,errors,696,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681
https://github.com/psi4/psi4/issues/468#issuecomment-249711681:850,Integrability,message,message,850,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681
https://github.com/psi4/psi4/issues/468#issuecomment-249711681:195,Modifiability,variab,variable,195,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681
https://github.com/psi4/psi4/issues/468#issuecomment-249711681:481,Modifiability,variab,variables,481,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681
https://github.com/psi4/psi4/issues/468#issuecomment-249711681:58,Safety,detect,detecting,58,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681
https://github.com/psi4/psi4/issues/468#issuecomment-249711681:231,Safety,detect,detection,231,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681
https://github.com/psi4/psi4/issues/468#issuecomment-249711681:766,Safety,detect,detected,766,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681
https://github.com/psi4/psi4/issues/468#issuecomment-249720030:497,Availability,error,errors,497,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030
https://github.com/psi4/psi4/issues/468#issuecomment-249720030:220,Deployability,install,install-libefp-so,220,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030
https://github.com/psi4/psi4/issues/468#issuecomment-249720030:246,Deployability,install,install-libint-,246,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030
https://github.com/psi4/psi4/issues/468#issuecomment-249720030:274,Deployability,install,install-pcmsolver,274,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030
https://github.com/psi4/psi4/issues/468#issuecomment-249720030:386,Energy Efficiency,adapt,adapting,386,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030
https://github.com/psi4/psi4/issues/468#issuecomment-249720030:386,Modifiability,adapt,adapting,386,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030
https://github.com/psi4/psi4/issues/468#issuecomment-249720030:51,Safety,detect,detection,51,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030
https://github.com/psi4/psi4/issues/468#issuecomment-249720030:111,Safety,detect,detect,111,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030
https://github.com/psi4/psi4/issues/468#issuecomment-249720030:526,Safety,detect,detecting,526,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030
https://github.com/psi4/psi4/issues/468#issuecomment-249720030:697,Safety,detect,detection,697,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030
https://github.com/psi4/psi4/issues/468#issuecomment-252797491:939,Availability,echo,echo,939,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491
https://github.com/psi4/psi4/issues/468#issuecomment-252797491:92,Deployability,install,installed,92,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491
https://github.com/psi4/psi4/issues/468#issuecomment-252797491:241,Deployability,install,installed,241,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491
https://github.com/psi4/psi4/issues/468#issuecomment-252797491:351,Modifiability,variab,variables,351,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491
https://github.com/psi4/psi4/issues/468#issuecomment-252797491:595,Modifiability,variab,variable,595,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491
https://github.com/psi4/psi4/issues/468#issuecomment-252797491:707,Modifiability,variab,variables,707,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491
https://github.com/psi4/psi4/issues/468#issuecomment-252797491:431,Testability,test,tests,431,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491
https://github.com/psi4/psi4/issues/468#issuecomment-252802774:299,Availability,error,errors,299,"@jgonthier, if you can build successfully, then it's getting the `-gcc-name`/`-gxx-name` – no more recompile necessary. It would have failed to build libmints if that part wasn't right. . You're right that your `ldd psi4` will cause trouble – in fact it should have given you `CXXABI` and `GLIBCXX` errors just in the `ldd psi4`. Your `$LD_LIBRARY_PATH` should have fixed it, though. Any chance that's not in effect in the terminal you're running the `ldd psi4` in? If the gcc52 was in ld_library_path, your ldd psi4 should switch immediately to `libstdc++.so.6 => /theoryfs2/ds/cdsgroup/miniconda/envs/sgcc5/lib/libstdc++.so.6`. Alternatively, you can delete `stage/......../bin/psi4` (that file only) (or lib/psi4/core.so if you're on inversion) and edit w/i objdir `psi4_core-prefix/src/psi4_core-build/src/CMakeFiles/psi4-bin.dir/link.txt` (psi4-lib.dir if you're on inversion) and stick your gcc5 path first behind the `rpath` at the end, then rebuild (will only relink). I named my env `sgcc5`. Looks like you named yours `gcc52`. Could there be name mixing?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252802774
https://github.com/psi4/psi4/issues/468#issuecomment-252821533:152,Availability,echo,echo,152,"@loriab Thanks for the tips. `LD_LIBRARY_PATH` is in effect in my terminal, here are the results of commands directly issued in the same terminal:; `>> echo $LD_LIBRARY_PATH`; `>> /theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib [...]`; then:; `>> ldd stage/usr/local/bin/psi4`; `>> stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by stage/usr/local/bin/psi4)`; [...]; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fd93dcba000)`; `libiomp5.so => /theoryfs2/ds/gonthier/software/miniconda3/lib/libiomp5.so (0x00007fd93d970000)`; [...]. As you can see, the correct path is in `LD_LIBRARY_PATH`, yet `ldd psi4` does not find the correct `libstdc++.so.6`, yet `libiomp5.so` finds the miniconda path that is in `LD_LIBRARY_PATH`. Finally, I tried your suggestion to directly modify the `link.txt` file with explicit specification of the `gcc52` path. Sure enough, this worked ! Psi4 finds the correct gcc library and runs like a charm (well, I barely started the tests so let's keep the fingers crossed). I don't see with what `gcc52` could mix, since I don't have any other environments defined. Plus, I'm never using `source activate gcc52` because this command does not work any more, at least on `ds3` (can you tell the software has been quite hostile to me on this build ?). Thanks for everything anyway. Should I report back with possible test failures here again or open a new issue ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252821533
https://github.com/psi4/psi4/issues/468#issuecomment-252821533:1716,Availability,failure,failures,1716,"@loriab Thanks for the tips. `LD_LIBRARY_PATH` is in effect in my terminal, here are the results of commands directly issued in the same terminal:; `>> echo $LD_LIBRARY_PATH`; `>> /theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib [...]`; then:; `>> ldd stage/usr/local/bin/psi4`; `>> stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by stage/usr/local/bin/psi4)`; [...]; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fd93dcba000)`; `libiomp5.so => /theoryfs2/ds/gonthier/software/miniconda3/lib/libiomp5.so (0x00007fd93d970000)`; [...]. As you can see, the correct path is in `LD_LIBRARY_PATH`, yet `ldd psi4` does not find the correct `libstdc++.so.6`, yet `libiomp5.so` finds the miniconda path that is in `LD_LIBRARY_PATH`. Finally, I tried your suggestion to directly modify the `link.txt` file with explicit specification of the `gcc52` path. Sure enough, this worked ! Psi4 finds the correct gcc library and runs like a charm (well, I barely started the tests so let's keep the fingers crossed). I don't see with what `gcc52` could mix, since I don't have any other environments defined. Plus, I'm never using `source activate gcc52` because this command does not work any more, at least on `ds3` (can you tell the software has been quite hostile to me on this build ?). Thanks for everything anyway. Should I report back with possible test failures here again or open a new issue ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252821533
https://github.com/psi4/psi4/issues/468#issuecomment-252821533:1329,Testability,test,tests,1329,"@loriab Thanks for the tips. `LD_LIBRARY_PATH` is in effect in my terminal, here are the results of commands directly issued in the same terminal:; `>> echo $LD_LIBRARY_PATH`; `>> /theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib [...]`; then:; `>> ldd stage/usr/local/bin/psi4`; `>> stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by stage/usr/local/bin/psi4)`; [...]; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fd93dcba000)`; `libiomp5.so => /theoryfs2/ds/gonthier/software/miniconda3/lib/libiomp5.so (0x00007fd93d970000)`; [...]. As you can see, the correct path is in `LD_LIBRARY_PATH`, yet `ldd psi4` does not find the correct `libstdc++.so.6`, yet `libiomp5.so` finds the miniconda path that is in `LD_LIBRARY_PATH`. Finally, I tried your suggestion to directly modify the `link.txt` file with explicit specification of the `gcc52` path. Sure enough, this worked ! Psi4 finds the correct gcc library and runs like a charm (well, I barely started the tests so let's keep the fingers crossed). I don't see with what `gcc52` could mix, since I don't have any other environments defined. Plus, I'm never using `source activate gcc52` because this command does not work any more, at least on `ds3` (can you tell the software has been quite hostile to me on this build ?). Thanks for everything anyway. Should I report back with possible test failures here again or open a new issue ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252821533
https://github.com/psi4/psi4/issues/468#issuecomment-252821533:1711,Testability,test,test,1711,"@loriab Thanks for the tips. `LD_LIBRARY_PATH` is in effect in my terminal, here are the results of commands directly issued in the same terminal:; `>> echo $LD_LIBRARY_PATH`; `>> /theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib [...]`; then:; `>> ldd stage/usr/local/bin/psi4`; `>> stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by stage/usr/local/bin/psi4)`; [...]; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fd93dcba000)`; `libiomp5.so => /theoryfs2/ds/gonthier/software/miniconda3/lib/libiomp5.so (0x00007fd93d970000)`; [...]. As you can see, the correct path is in `LD_LIBRARY_PATH`, yet `ldd psi4` does not find the correct `libstdc++.so.6`, yet `libiomp5.so` finds the miniconda path that is in `LD_LIBRARY_PATH`. Finally, I tried your suggestion to directly modify the `link.txt` file with explicit specification of the `gcc52` path. Sure enough, this worked ! Psi4 finds the correct gcc library and runs like a charm (well, I barely started the tests so let's keep the fingers crossed). I don't see with what `gcc52` could mix, since I don't have any other environments defined. Plus, I'm never using `source activate gcc52` because this command does not work any more, at least on `ds3` (can you tell the software has been quite hostile to me on this build ?). Thanks for everything anyway. Should I report back with possible test failures here again or open a new issue ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252821533
https://github.com/psi4/psi4/issues/468#issuecomment-252823348:28,Integrability,depend,dependency,28,"Hmm, I wonder if some other dependency was detected in /usr such that it got baked into rpath at a high position. Depending on rpath/runpath, LD_LIBRARY_PATH may or may not trump it. Otherwise, I quite agree that you are typing sensibly and the computer is behaving not. `source activate` only works with bash– could that be the problem with that command? If you're on psi4/psi4 (CMR-KTB) and anything besides `psimrcc-fd-freq2` fails, yes, post it here. If you're on dgasmith/psi4 inversion (CMR-KTB-INV), then we're only up to 92% passing anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252823348
https://github.com/psi4/psi4/issues/468#issuecomment-252823348:114,Integrability,Depend,Depending,114,"Hmm, I wonder if some other dependency was detected in /usr such that it got baked into rpath at a high position. Depending on rpath/runpath, LD_LIBRARY_PATH may or may not trump it. Otherwise, I quite agree that you are typing sensibly and the computer is behaving not. `source activate` only works with bash– could that be the problem with that command? If you're on psi4/psi4 (CMR-KTB) and anything besides `psimrcc-fd-freq2` fails, yes, post it here. If you're on dgasmith/psi4 inversion (CMR-KTB-INV), then we're only up to 92% passing anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252823348
https://github.com/psi4/psi4/issues/468#issuecomment-252823348:43,Safety,detect,detected,43,"Hmm, I wonder if some other dependency was detected in /usr such that it got baked into rpath at a high position. Depending on rpath/runpath, LD_LIBRARY_PATH may or may not trump it. Otherwise, I quite agree that you are typing sensibly and the computer is behaving not. `source activate` only works with bash– could that be the problem with that command? If you're on psi4/psi4 (CMR-KTB) and anything besides `psimrcc-fd-freq2` fails, yes, post it here. If you're on dgasmith/psi4 inversion (CMR-KTB-INV), then we're only up to 92% passing anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252823348
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:565,Availability,failure,failures,565,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:627,Energy Efficiency,energy,energy,627,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:658,Energy Efficiency,energy,energy,658,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:1528,Energy Efficiency,energy,energy,1528,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:23,Integrability,depend,dependency,23,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:779,Integrability,wrap,wrapper,779,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:971,Integrability,interface,interface,971,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:219,Modifiability,variab,variable,219,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:476,Testability,test,tested,476,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:560,Testability,test,test,560,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252852440:598,Testability,test,tests,598,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440
https://github.com/psi4/psi4/issues/468#issuecomment-252875803:206,Deployability,update,update,206,"@jgonthier The driver has been in an out of Python 3 compatibility, considering the recent changes im not surprised that quite a few fail. . Probably a good TODO item after the inversion goes through is to update the driver to Python 3 standards and add a Travis case to ensure it stays there. From SciPy this year it appears that there is quite a bit of momentum to actually get everyone on board with Python 3, so its probably a good time to officially support it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252875803
https://github.com/psi4/psi4/issues/468#issuecomment-252908695:66,Integrability,depend,dependencies,66,"Glad rpath behavior is making more sense, @jgonthier . Unless all dependencies are isolated behind one environment (conda strategy) or each dependency is isolated in its own environment (a programming-using-conda strategy, but hard when `/usr/` involved), it can be impossible for cmake to predict a safe `rpath` path. I regularly have to edit mine to get the right HDF5 linked. As I don't know a winning strategy, I think we can't guarantee the built exe/lib will run, only that the conda ones will. This does show we need better notes on the matter so people can diagnose and correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252908695
https://github.com/psi4/psi4/issues/468#issuecomment-252908695:140,Integrability,depend,dependency,140,"Glad rpath behavior is making more sense, @jgonthier . Unless all dependencies are isolated behind one environment (conda strategy) or each dependency is isolated in its own environment (a programming-using-conda strategy, but hard when `/usr/` involved), it can be impossible for cmake to predict a safe `rpath` path. I regularly have to edit mine to get the right HDF5 linked. As I don't know a winning strategy, I think we can't guarantee the built exe/lib will run, only that the conda ones will. This does show we need better notes on the matter so people can diagnose and correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252908695
https://github.com/psi4/psi4/issues/468#issuecomment-252908695:290,Safety,predict,predict,290,"Glad rpath behavior is making more sense, @jgonthier . Unless all dependencies are isolated behind one environment (conda strategy) or each dependency is isolated in its own environment (a programming-using-conda strategy, but hard when `/usr/` involved), it can be impossible for cmake to predict a safe `rpath` path. I regularly have to edit mine to get the right HDF5 linked. As I don't know a winning strategy, I think we can't guarantee the built exe/lib will run, only that the conda ones will. This does show we need better notes on the matter so people can diagnose and correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252908695
https://github.com/psi4/psi4/issues/468#issuecomment-252908695:300,Safety,safe,safe,300,"Glad rpath behavior is making more sense, @jgonthier . Unless all dependencies are isolated behind one environment (conda strategy) or each dependency is isolated in its own environment (a programming-using-conda strategy, but hard when `/usr/` involved), it can be impossible for cmake to predict a safe `rpath` path. I regularly have to edit mine to get the right HDF5 linked. As I don't know a winning strategy, I think we can't guarantee the built exe/lib will run, only that the conda ones will. This does show we need better notes on the matter so people can diagnose and correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252908695
https://github.com/psi4/psi4/issues/468#issuecomment-252927823:20,Availability,down,down,20,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823
https://github.com/psi4/psi4/issues/468#issuecomment-252927823:344,Deployability,update,updated,344,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823
https://github.com/psi4/psi4/issues/468#issuecomment-252927823:618,Integrability,depend,dependencies,618,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823
https://github.com/psi4/psi4/issues/468#issuecomment-252927823:695,Integrability,depend,dependency,695,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823
https://github.com/psi4/psi4/issues/468#issuecomment-252927823:849,Safety,predict,predict,849,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823
https://github.com/psi4/psi4/issues/468#issuecomment-252927823:859,Safety,safe,safe,859,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823
https://github.com/psi4/psi4/issues/468#issuecomment-252927823:206,Testability,test,test,206,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823
https://github.com/psi4/psi4/issues/468#issuecomment-252929596:301,Availability,down,down,301,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596
https://github.com/psi4/psi4/issues/468#issuecomment-252929596:639,Deployability,update,updated,639,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596
https://github.com/psi4/psi4/issues/468#issuecomment-252929596:936,Integrability,depend,dependencies,936,"documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/psi4/issues/468#issuecomment-252927823, or ; > mute the thread ; > h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596
https://github.com/psi4/psi4/issues/468#issuecomment-252929596:1015,Integrability,depend,dependency,1015,"documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/psi4/issues/468#issuecomment-252927823, or ; > mute the thread ; > h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596
https://github.com/psi4/psi4/issues/468#issuecomment-252929596:29,Modifiability,variab,variables,29,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596
https://github.com/psi4/psi4/issues/468#issuecomment-252929596:157,Modifiability,variab,variables,157,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596
https://github.com/psi4/psi4/issues/468#issuecomment-252929596:1179,Safety,predict,predict,1179,"documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/psi4/issues/468#issuecomment-252927823, or ; > mute the thread ; > h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596
https://github.com/psi4/psi4/issues/468#issuecomment-252929596:1189,Safety,safe,safe,1189,"documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/psi4/issues/468#issuecomment-252927823, or ; > mute the thread ; > h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596
https://github.com/psi4/psi4/issues/468#issuecomment-252929596:491,Testability,test,test,491,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596
https://github.com/psi4/psi4/issues/468#issuecomment-252931820:49,Availability,Down,Downloading,49,"There's temporary build docs linked off README: ""Downloading and Installing"" on the main GH page. It's not the specification of Python that's the problem– CMake detection and build are going just fine in these cases. CMake knows the exact, absolute path location to everything Psi4 or its build needs. The problem is conveying that info to the runtime environment. This is done by baking in all those absolute paths into the executable/library rpath. _But_, when a path (e.g., `/usr/lib`) has both a useful thing like `libpython.so` and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of knowing that it needs to place /usr/lib into rpath _behind_ the path to new gcc or new hdf5. Thus, we end up with runtime path problems, solvable only by `LD_LIBRARY_PATH` or rpath adjustment and relinking. This problem is controllable with conda, because it isolates just what Psi4 needs into its own namespaced path and stuffs that into rpath. For the general developers CMake build, there's no robust solution that I can see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252931820
https://github.com/psi4/psi4/issues/468#issuecomment-252931820:1004,Availability,robust,robust,1004,"There's temporary build docs linked off README: ""Downloading and Installing"" on the main GH page. It's not the specification of Python that's the problem– CMake detection and build are going just fine in these cases. CMake knows the exact, absolute path location to everything Psi4 or its build needs. The problem is conveying that info to the runtime environment. This is done by baking in all those absolute paths into the executable/library rpath. _But_, when a path (e.g., `/usr/lib`) has both a useful thing like `libpython.so` and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of knowing that it needs to place /usr/lib into rpath _behind_ the path to new gcc or new hdf5. Thus, we end up with runtime path problems, solvable only by `LD_LIBRARY_PATH` or rpath adjustment and relinking. This problem is controllable with conda, because it isolates just what Psi4 needs into its own namespaced path and stuffs that into rpath. For the general developers CMake build, there's no robust solution that I can see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252931820
https://github.com/psi4/psi4/issues/468#issuecomment-252931820:65,Deployability,Install,Installing,65,"There's temporary build docs linked off README: ""Downloading and Installing"" on the main GH page. It's not the specification of Python that's the problem– CMake detection and build are going just fine in these cases. CMake knows the exact, absolute path location to everything Psi4 or its build needs. The problem is conveying that info to the runtime environment. This is done by baking in all those absolute paths into the executable/library rpath. _But_, when a path (e.g., `/usr/lib`) has both a useful thing like `libpython.so` and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of knowing that it needs to place /usr/lib into rpath _behind_ the path to new gcc or new hdf5. Thus, we end up with runtime path problems, solvable only by `LD_LIBRARY_PATH` or rpath adjustment and relinking. This problem is controllable with conda, because it isolates just what Psi4 needs into its own namespaced path and stuffs that into rpath. For the general developers CMake build, there's no robust solution that I can see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252931820
https://github.com/psi4/psi4/issues/468#issuecomment-252931820:161,Safety,detect,detection,161,"There's temporary build docs linked off README: ""Downloading and Installing"" on the main GH page. It's not the specification of Python that's the problem– CMake detection and build are going just fine in these cases. CMake knows the exact, absolute path location to everything Psi4 or its build needs. The problem is conveying that info to the runtime environment. This is done by baking in all those absolute paths into the executable/library rpath. _But_, when a path (e.g., `/usr/lib`) has both a useful thing like `libpython.so` and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of knowing that it needs to place /usr/lib into rpath _behind_ the path to new gcc or new hdf5. Thus, we end up with runtime path problems, solvable only by `LD_LIBRARY_PATH` or rpath adjustment and relinking. This problem is controllable with conda, because it isolates just what Psi4 needs into its own namespaced path and stuffs that into rpath. For the general developers CMake build, there's no robust solution that I can see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252931820
https://github.com/psi4/psi4/issues/468#issuecomment-252934079:356,Availability,Down,Downloading,356,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079
https://github.com/psi4/psi4/issues/468#issuecomment-252934079:1355,Availability,robust,robust,1355,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079
https://github.com/psi4/psi4/issues/468#issuecomment-252934079:375,Deployability,Install,Installing,375,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079
https://github.com/psi4/psi4/issues/468#issuecomment-252934079:47,Safety,detect,detect,47,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079
https://github.com/psi4/psi4/issues/468#issuecomment-252934079:478,Safety,detect,detection,478,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079
https://github.com/psi4/psi4/issues/468#issuecomment-252934079:116,Usability,simpl,simple,116,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079
https://github.com/psi4/psi4/issues/468#issuecomment-252942976:196,Availability,error,error,196,"I think there's more variations and potential collisions, even within one user's environment, than can really be predicted and caught. In the inversion branch, we've started catching the gcc <4.9 error signature and printing a this-is-probably-what's-wrong message. Expanding that error catching and printing the customized path to the `link.txt` file is probably the best bet. [This](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/setenv.py) is a runtime env diagnosis script I wrote once. It didn't catch on, but it could be expanded for rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252942976
https://github.com/psi4/psi4/issues/468#issuecomment-252942976:281,Availability,error,error,281,"I think there's more variations and potential collisions, even within one user's environment, than can really be predicted and caught. In the inversion branch, we've started catching the gcc <4.9 error signature and printing a this-is-probably-what's-wrong message. Expanding that error catching and printing the customized path to the `link.txt` file is probably the best bet. [This](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/setenv.py) is a runtime env diagnosis script I wrote once. It didn't catch on, but it could be expanded for rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252942976
https://github.com/psi4/psi4/issues/468#issuecomment-252942976:257,Integrability,message,message,257,"I think there's more variations and potential collisions, even within one user's environment, than can really be predicted and caught. In the inversion branch, we've started catching the gcc <4.9 error signature and printing a this-is-probably-what's-wrong message. Expanding that error catching and printing the customized path to the `link.txt` file is probably the best bet. [This](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/setenv.py) is a runtime env diagnosis script I wrote once. It didn't catch on, but it could be expanded for rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252942976
https://github.com/psi4/psi4/issues/468#issuecomment-252942976:113,Safety,predict,predicted,113,"I think there's more variations and potential collisions, even within one user's environment, than can really be predicted and caught. In the inversion branch, we've started catching the gcc <4.9 error signature and printing a this-is-probably-what's-wrong message. Expanding that error catching and printing the customized path to the `link.txt` file is probably the best bet. [This](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/setenv.py) is a runtime env diagnosis script I wrote once. It didn't catch on, but it could be expanded for rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252942976
https://github.com/psi4/psi4/issues/468#issuecomment-254667012:178,Availability,error,error,178,"I had no problems with compilation on my laptop (clang 4.0.0) and on our cluster (gcc-4.9, g++-4.9). However, I am not able to generate plugins. This command gives the following error:. ```; $PSI4HOME --new-plugin-makefile psi4_inversion; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'; ```. If I create a blank input.dat file, it does not quit without an error, but it doesn't read the --new-plugin-makefile option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254667012
https://github.com/psi4/psi4/issues/468#issuecomment-254667012:419,Availability,error,error,419,"I had no problems with compilation on my laptop (clang 4.0.0) and on our cluster (gcc-4.9, g++-4.9). However, I am not able to generate plugins. This command gives the following error:. ```; $PSI4HOME --new-plugin-makefile psi4_inversion; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'; ```. If I create a blank input.dat file, it does not quit without an error, but it doesn't read the --new-plugin-makefile option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254667012
https://github.com/psi4/psi4/issues/468#issuecomment-254667012:136,Modifiability,plugin,plugins,136,"I had no problems with compilation on my laptop (clang 4.0.0) and on our cluster (gcc-4.9, g++-4.9). However, I am not able to generate plugins. This command gives the following error:. ```; $PSI4HOME --new-plugin-makefile psi4_inversion; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'; ```. If I create a blank input.dat file, it does not quit without an error, but it doesn't read the --new-plugin-makefile option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254667012
https://github.com/psi4/psi4/issues/468#issuecomment-254667012:207,Modifiability,plugin,plugin-makefile,207,"I had no problems with compilation on my laptop (clang 4.0.0) and on our cluster (gcc-4.9, g++-4.9). However, I am not able to generate plugins. This command gives the following error:. ```; $PSI4HOME --new-plugin-makefile psi4_inversion; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'; ```. If I create a blank input.dat file, it does not quit without an error, but it doesn't read the --new-plugin-makefile option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254667012
https://github.com/psi4/psi4/issues/468#issuecomment-254667012:456,Modifiability,plugin,plugin-makefile,456,"I had no problems with compilation on my laptop (clang 4.0.0) and on our cluster (gcc-4.9, g++-4.9). However, I am not able to generate plugins. This command gives the following error:. ```; $PSI4HOME --new-plugin-makefile psi4_inversion; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'; ```. If I create a blank input.dat file, it does not quit without an error, but it doesn't read the --new-plugin-makefile option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254667012
https://github.com/psi4/psi4/issues/468#issuecomment-254675379:36,Modifiability,plugin,plugins,36,"That sounds about right, @kannon92, plugins haven't made the CMR-KTB-INV leap. The writing thereof will be converted to py-side, and the building thereof will be converted to CMake. But neither done yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254675379
https://github.com/psi4/psi4/issues/468#issuecomment-254947891:126,Availability,down,down,126,"The history rewrite is complete, at this point please remove all forks and clones. The git repository was reduced from 740MiB down to about 66MiB. All large files are now external projects so that we should not have to do this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254947891
https://github.com/psi4/psi4/issues/468#issuecomment-254947891:106,Energy Efficiency,reduce,reduced,106,"The history rewrite is complete, at this point please remove all forks and clones. The git repository was reduced from 740MiB down to about 66MiB. All large files are now external projects so that we should not have to do this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254947891
https://github.com/psi4/psi4/issues/468#issuecomment-254947891:12,Modifiability,rewrite,rewrite,12,"The history rewrite is complete, at this point please remove all forks and clones. The git repository was reduced from 740MiB down to about 66MiB. All large files are now external projects so that we should not have to do this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254947891
https://github.com/psi4/psi4/issues/468#issuecomment-257019349:112,Security,access,access,112,"Can the average github user create a handful of private projects and then; invite certain collaborators to have access? If so, then I think this; would suffice as a replacement for the centralized private repo. David. On Fri, Oct 28, 2016 at 3:36 PM, jgonthier notifications@github.com wrote:. > @loriab https://github.com/loriab: Killing it off is fine with me. My; > only concern was the ability to work on a private project, but Github; > allows us to create our own private copy of the repository (through; > duplication, I believe). So if that's right, there is no reason to get; > through the hassle of maintaining private for everyone.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-257009273, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdld-VE3iH81lv7sYM5MwAR5wk2oWks5q4k6lgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-257019349
https://github.com/psi4/psi4/issues/468#issuecomment-301263002:28,Deployability,release,release,28,Closing this out as the 1.1 release is imminent. Several places link back to this thread for reference.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-301263002
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:256,Availability,avail,available,256,"Looks fine to me. Thanks Lori!. -Rob. On Thu, Sep 22, 2016 at 8:32 PM, Lori A. Burns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:269,Deployability,install,install,269,"Looks fine to me. Thanks Lori!. -Rob. On Thu, Sep 22, 2016 at 8:32 PM, Lori A. Burns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:1293,Deployability,update,update,1293,"ns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:27429,Deployability,Patch,Patch,27429," _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.com/psi4/psi4/pull/470.diff; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/470, or mute the thread; > https://github.com/notifications/unsubscribe-auth/ACizP-4KJoFubALyaZOx9fsbCOSSIV8Pks5qs0hXgaJpZM4KElEp; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:27485,Deployability,patch,patch,27485," _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.com/psi4/psi4/pull/470.diff; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/470, or mute the thread; > https://github.com/notifications/unsubscribe-auth/ACizP-4KJoFubALyaZOx9fsbCOSSIV8Pks5qs0hXgaJpZM4KElEp; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:955,Integrability,depend,dependency,955,"ns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:1375,Safety,detect,detect,1375,"e average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-6 (1); > - _M_ psi4/share/psi4/fsapt/copy_pymol.py; > https://github.com/psi4/psi4/pull/470/files#diff-7 (2); > - _M_ psi4/share/psi4/fsapt/copy_pymol2.py; > https://github.com/psi4/psi4/pull/470/files#diff-8 (2); > - _D_ psi4/share/psi4/fsapt/pymol2/VD.pymol; > https://github.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:187,Testability,test,test,187,"Looks fine to me. Thanks Lori!. -Rob. On Thu, Sep 22, 2016 at 8:32 PM, Lori A. Burns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:1039,Testability,test,test,1039,"ns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:1140,Testability,test,tests,1140,"ns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:1226,Testability,test,test,1226,"ns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:1327,Testability,test,tests,1327,"e average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-6 (1); > - _M_ psi4/share/psi4/fsapt/copy_pymol.py; > https://github.com/psi4/psi4/pull/470/files#diff-7 (2); > - _M_ psi4/share/psi4/fsapt/copy_pymol2.py; > https://github.com/psi4/psi4/pull/470/files#diff-8 (2); > - _D_ psi4/share/psi4/fsapt/pymol2/VD.pymol; > https://github.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:2740,Testability,test,test,2740,es#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-6 (1); > - _M_ psi4/share/psi4/fsapt/copy_pymol.py; > https://github.com/psi4/psi4/pull/470/files#diff-7 (2); > - _M_ psi4/share/psi4/fsapt/copy_pymol2.py; > https://github.com/psi4/psi4/pull/470/files#diff-8 (2); > - _D_ psi4/share/psi4/fsapt/pymol2/VD.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-9 (0); > - _M_ psi4/src/read_options.cc; > https://github.com/psi4/psi4/pull/470/files#diff-10 (6); > - _A_ samples/dkh/placeholder; > https://github.com/psi4/psi4/pull/470/files#diff-11 (1); > - _A_ samples/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-12 (71); > - _A_ samples/fsapt-diff1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-13 (71); > - _A_ samples/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-14 (71); > - _A_ samples/fsapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-15 (71); > - _A_ samples/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-16 (56); > - _A_ samples/fsapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-17 (56); > - _M_ samples/gdma/gdma1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:2926,Testability,test,test,2926,psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-6 (1); > - _M_ psi4/share/psi4/fsapt/copy_pymol.py; > https://github.com/psi4/psi4/pull/470/files#diff-7 (2); > - _M_ psi4/share/psi4/fsapt/copy_pymol2.py; > https://github.com/psi4/psi4/pull/470/files#diff-8 (2); > - _D_ psi4/share/psi4/fsapt/pymol2/VD.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-9 (0); > - _M_ psi4/src/read_options.cc; > https://github.com/psi4/psi4/pull/470/files#diff-10 (6); > - _A_ samples/dkh/placeholder; > https://github.com/psi4/psi4/pull/470/files#diff-11 (1); > - _A_ samples/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-12 (71); > - _A_ samples/fsapt-diff1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-13 (71); > - _A_ samples/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-14 (71); > - _A_ samples/fsapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-15 (71); > - _A_ samples/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-16 (56); > - _A_ samples/fsapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-17 (56); > - _M_ samples/gdma/gdma1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:3112,Testability,test,test,3112,i4/psi4/pull/470/files#diff-6 (1); > - _M_ psi4/share/psi4/fsapt/copy_pymol.py; > https://github.com/psi4/psi4/pull/470/files#diff-7 (2); > - _M_ psi4/share/psi4/fsapt/copy_pymol2.py; > https://github.com/psi4/psi4/pull/470/files#diff-8 (2); > - _D_ psi4/share/psi4/fsapt/pymol2/VD.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-9 (0); > - _M_ psi4/src/read_options.cc; > https://github.com/psi4/psi4/pull/470/files#diff-10 (6); > - _A_ samples/dkh/placeholder; > https://github.com/psi4/psi4/pull/470/files#diff-11 (1); > - _A_ samples/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-12 (71); > - _A_ samples/fsapt-diff1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-13 (71); > - _A_ samples/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-14 (71); > - _A_ samples/fsapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-15 (71); > - _A_ samples/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-16 (56); > - _A_ samples/fsapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-17 (56); > - _M_ samples/gdma/gdma1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.co,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:3208,Testability,test,test,3208,ub.com/psi4/psi4/pull/470/files#diff-7 (2); > - _M_ psi4/share/psi4/fsapt/copy_pymol2.py; > https://github.com/psi4/psi4/pull/470/files#diff-8 (2); > - _D_ psi4/share/psi4/fsapt/pymol2/VD.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-9 (0); > - _M_ psi4/src/read_options.cc; > https://github.com/psi4/psi4/pull/470/files#diff-10 (6); > - _A_ samples/dkh/placeholder; > https://github.com/psi4/psi4/pull/470/files#diff-11 (1); > - _A_ samples/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-12 (71); > - _A_ samples/fsapt-diff1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-13 (71); > - _A_ samples/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-14 (71); > - _A_ samples/fsapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-15 (71); > - _A_ samples/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-16 (56); > - _A_ samples/fsapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-17 (56); > - _M_ samples/gdma/gdma1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.co,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:3393,Testability,test,test,3393,.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-9 (0); > - _M_ psi4/src/read_options.cc; > https://github.com/psi4/psi4/pull/470/files#diff-10 (6); > - _A_ samples/dkh/placeholder; > https://github.com/psi4/psi4/pull/470/files#diff-11 (1); > - _A_ samples/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-12 (71); > - _A_ samples/fsapt-diff1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-13 (71); > - _A_ samples/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-14 (71); > - _A_ samples/fsapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-15 (71); > - _A_ samples/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-16 (56); > - _A_ samples/fsapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-17 (56); > - _M_ samples/gdma/gdma1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:3579,Testability,test,test,3579,lder; > https://github.com/psi4/psi4/pull/470/files#diff-11 (1); > - _A_ samples/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-12 (71); > - _A_ samples/fsapt-diff1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-13 (71); > - _A_ samples/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-14 (71); > - _A_ samples/fsapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-15 (71); > - _A_ samples/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-16 (56); > - _A_ samples/fsapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-17 (56); > - _M_ samples/gdma/gdma1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:3767,Testability,test,test,3767,ff1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-13 (71); > - _A_ samples/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-14 (71); > - _A_ samples/fsapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-15 (71); > - _A_ samples/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-16 (56); > - _A_ samples/fsapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-17 (56); > - _M_ samples/gdma/gdma1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:3958,Testability,test,test,3958,test.in; > https://github.com/psi4/psi4/pull/470/files#diff-15 (71); > - _A_ samples/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-16 (56); > - _A_ samples/fsapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-17 (56); > - _M_ samples/gdma/gdma1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:4148,Testability,test,test,4148,.in; > https://github.com/psi4/psi4/pull/470/files#diff-17 (56); > - _M_ samples/gdma/gdma1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:4224,Testability,test,tests,4224,/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-18 (4); > - _A_ samples/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https:/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:4313,Testability,test,tests,4313, > https://github.com/psi4/psi4/pull/470/files#diff-19 (70); > - _A_ samples/isapt1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:4407,Testability,test,tests,4407,in; > https://github.com/psi4/psi4/pull/470/files#diff-20 (70); > - _A_ samples/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:4514,Testability,test,tests,4514,/github.com/psi4/psi4/pull/470/files#diff-21 (67); > - _A_ samples/isapt2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:4621,Testability,test,tests,4621,4/psi4/pull/470/files#diff-22 (67); > - _M_ samples/matrix1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:4730,Testability,test,tests,4730,0/files#diff-23 (22); > - _M_ samples/matrix1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-24 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:4837,Testability,test,tests,4837,4 (36); > - _M_ samples/opt-irc-1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-25 (2); > - _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:4944,Testability,test,tests,4944, _M_ samples/opt-irc-1/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-26 (2); > - _M_ samples/opt-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:5053,Testability,test,tests,5053,t-irc-2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-27 (2); > - _M_ samples/opt-irc-2/test.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:5160,Testability,test,tests,5160,t.in; > https://github.com/psi4/psi4/pull/470/files#diff-28 (2); > - _M_ tests/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:5267,Testability,test,tests,5267,thub.com/psi4/psi4/pull/470/files#diff-29 (2); > - _A_ tests/fsapt-diff1/README; > https://github.com/psi4/psi4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:5376,Testability,test,tests,5376,4/pull/470/files#diff-30 (39); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:5484,Testability,test,tests,5484,/pull/470/files#diff-31 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:5592,Testability,test,tests,5592,pull/470/files#diff-32 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:5702,Testability,test,tests,5702,ull/470/files#diff-33 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:5810,Testability,test,tests,5810,ll/470/files#diff-34 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:5918,Testability,test,tests,5918,l/470/files#diff-35 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6028,Testability,test,tests,6028,ll/470/files#diff-36 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.da,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6133,Testability,test,tests,6133,pull/470/files#diff-37 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6238,Testability,test,tests,6238,pull/470/files#diff-38 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6346,Testability,test,tests,6346,/pull/470/files#diff-39 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/ge,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6456,Testability,test,tests,6456,/pull/470/files#diff-40 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orie,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6561,Testability,test,tests,6561,si4/pull/470/files#diff-41 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6666,Testability,test,tests,6666,si4/psi4/pull/470/files#diff-42 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-r,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6770,Testability,test,tests,6770,m/psi4/psi4/pull/470/files#diff-43 (51); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6874,Testability,test,tests,6874,.com/psi4/psi4/pull/470/files#diff-44 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:6982,Testability,test,tests,6982,ub.com/psi4/psi4/pull/470/files#diff-45 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:7090,Testability,test,tests,7090,com/psi4/psi4/pull/470/files#diff-46 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:7198,Testability,test,tests,7198,m/psi4/psi4/pull/470/files#diff-47 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:7307,Testability,test,tests,7307,/psi4/psi4/pull/470/files#diff-48 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:7414,Testability,test,tests,7414,om/psi4/psi4/pull/470/files#diff-49 (17); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:7524,Testability,test,tests,7524,si4/psi4/pull/470/files#diff-50 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:7631,Testability,test,tests,7631,4/psi4/pull/470/files#diff-51 (26); > - _A_ tests/fsapt-diff1/fsapt1-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:7739,Testability,test,tests,7739,si4/pull/470/files#diff-52 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:7846,Testability,test,tests,7846,/pull/470/files#diff-53 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:7953,Testability,test,tests,7953,/pull/470/files#diff-54 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:8062,Testability,test,tests,8062,pull/470/files#diff-55 (87); > - _A_ tests/fsapt-diff1/fsapt1-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:8169,Testability,test,tests,8169,/pull/470/files#diff-56 (70); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:8276,Testability,test,tests,8276,i4/pull/470/files#diff-57 (16); > - _A_ tests/fsapt-diff1/fsapt1-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:8385,Testability,test,tests,8385,/pull/470/files#diff-58 (28); > - _A_ tests/fsapt-diff1/fsapt1-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:8492,Testability,test,tests,8492,psi4/pull/470/files#diff-59 (2); > - _A_ tests/fsapt-diff1/fsapt1-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:8599,Testability,test,tests,8599,psi4/pull/470/files#diff-60 (7); > - _A_ tests/fsapt-diff1/fsapt1-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:8708,Testability,test,tests,8708,4/pull/470/files#diff-61 (12); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:8816,Testability,test,tests,8816,/pull/470/files#diff-62 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:8924,Testability,test,tests,8924,pull/470/files#diff-63 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9034,Testability,test,tests,9034,ull/470/files#diff-64 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9142,Testability,test,tests,9142,ll/470/files#diff-65 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9250,Testability,test,tests,9250,l/470/files#diff-66 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9360,Testability,test,tests,9360,ll/470/files#diff-67 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.da,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9465,Testability,test,tests,9465,pull/470/files#diff-68 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9570,Testability,test,tests,9570,pull/470/files#diff-69 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9678,Testability,test,tests,9678,/pull/470/files#diff-70 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/ge,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9788,Testability,test,tests,9788,/pull/470/files#diff-71 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orie,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9893,Testability,test,tests,9893,si4/pull/470/files#diff-72 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:9998,Testability,test,tests,9998,si4/psi4/pull/470/files#diff-73 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-r,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:10102,Testability,test,tests,10102,m/psi4/psi4/pull/470/files#diff-74 (51); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:10206,Testability,test,tests,10206,.com/psi4/psi4/pull/470/files#diff-75 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:10314,Testability,test,tests,10314,ub.com/psi4/psi4/pull/470/files#diff-76 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:10422,Testability,test,tests,10422,com/psi4/psi4/pull/470/files#diff-77 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:10530,Testability,test,tests,10530,m/psi4/psi4/pull/470/files#diff-78 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:10639,Testability,test,tests,10639,/psi4/psi4/pull/470/files#diff-79 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:10746,Testability,test,tests,10746,om/psi4/psi4/pull/470/files#diff-80 (17); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:10856,Testability,test,tests,10856,si4/psi4/pull/470/files#diff-81 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-r,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:10963,Testability,test,tests,10963,4/psi4/pull/470/files#diff-82 (26); > - _A_ tests/fsapt-diff1/fsapt2-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-r,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:11071,Testability,test,tests,11071,si4/pull/470/files#diff-83 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:11178,Testability,test,tests,11178,/pull/470/files#diff-84 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:11284,Testability,test,tests,11284,/pull/470/files#diff-85 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:11393,Testability,test,tests,11393,/pull/470/files#diff-86 (87); > - _A_ tests/fsapt-diff1/fsapt2-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:11500,Testability,test,tests,11500,4/pull/470/files#diff-87 (70); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:11606,Testability,test,tests,11606,si4/pull/470/files#diff-88 (16); > - _A_ tests/fsapt-diff1/fsapt2-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-dif,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:11715,Testability,test,tests,11715,i4/pull/470/files#diff-89 (28); > - _A_ tests/fsapt-diff1/fsapt2-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:11822,Testability,test,tests,11822,4/psi4/pull/470/files#diff-90 (2); > - _A_ tests/fsapt-diff1/fsapt2-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:11929,Testability,test,tests,11929,4/psi4/pull/470/files#diff-91 (7); > - _A_ tests/fsapt-diff1/fsapt2-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:12039,Testability,test,tests,12039,si4/pull/470/files#diff-92 (12); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:12146,Testability,test,tests,12146,i4/pull/470/files#diff-93 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:12255,Testability,test,tests,12255,4/pull/470/files#diff-94 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:12363,Testability,test,tests,12363,/pull/470/files#diff-95 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:12474,Testability,test,tests,12474,ll/470/files#diff-96 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:12583,Testability,test,tests,12583,/470/files#diff-97 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:12691,Testability,test,tests,12691,470/files#diff-98 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:12802,Testability,test,tests,12802,/files#diff-99 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/o,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:12911,Testability,test,tests,12911,iles#diff-100 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13019,Testability,test,tests,13019,iles#diff-101 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13130,Testability,test,tests,13130,es#diff-102 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13239,Testability,test,tests,13239,s#diff-103 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13349,Testability,test,tests,13349,diff-104 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13460,Testability,test,tests,13460,diff-105 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#di,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13568,Testability,test,tests,13568,#diff-106 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13677,Testability,test,tests,13677,files#diff-107 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13775,Testability,test,tests,13775,i4/pull/470/files#diff-108 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-12,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13876,Testability,test,tests,13876,m/psi4/psi4/pull/470/files#diff-109 (26); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#dif,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:13973,Testability,test,tests,13973,b.com/psi4/psi4/pull/470/files#diff-110 (0); > - _A_ tests/fsapt-diff1/fsaptD-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-12,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14063,Testability,test,tests,14063,al.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-111 (17); > - _A_ tests/fsapt-diff1/fsaptD-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14165,Testability,test,tests,14165,D-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14267,Testability,test,tests,14267,1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14368,Testability,test,tests,14368,sapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14472,Testability,test,tests,14472,tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/47,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14574,Testability,test,tests,14574,- _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/47,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14676,Testability,test,tests,14676,12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/47,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14777,Testability,test,tests,14777,; > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14881,Testability,test,tests,14881, - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14982,Testability,test,tests,14982,A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:15083,Testability,test,tests,15083,apt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:15184,Testability,test,tests,15184,sapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pu,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:15287,Testability,test,tests,15287,apt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:15388,Testability,test,tests,15388,pt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:15490,Testability,test,tests,15490,sapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:15592,Testability,test,tests,15592,sapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:15694,Testability,test,tests,15694,sapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:15798,Testability,test,tests,15798,t1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/fi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:15900,Testability,test,tests,15900,apt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:16002,Testability,test,tests,16002,pt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#di,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:16104,Testability,test,tests,16104,t1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:16208,Testability,test,tests,16208,1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:16307,Testability,test,tests,16307,sapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#dif,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:16406,Testability,test,tests,16406,sapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:16508,Testability,test,tests,16508,sapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:16610,Testability,test,tests,16610,sapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:16714,Testability,test,tests,16714,sapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:16813,Testability,test,tests,16813,sts/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/fi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:16912,Testability,test,tests,16912, tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-139 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17011,Testability,test,tests,17011,_A_ tests/fsapt1/fsapt-ref/IndBA.png; > https://github.com/psi4/psi4/pull/470/files#diff-140 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17110,Testability,test,tests,17110, _A_ tests/fsapt1/fsapt-ref/IndBA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-141 (0); > - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-16,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17212,Testability,test,tests,17212, - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17314,Testability,test,tests,17314,_A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17416,Testability,test,tests,17416,_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17519,Testability,test,tests,17519, tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17620,Testability,test,tests,17620, tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17725,Testability,test,tests,17725, tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17827,Testability,test,tests,17827,sts/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17929,Testability,test,tests,17929,ests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18021,Testability,test,tests,18021,- _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18114,Testability,test,tests,18114,; > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18211,Testability,test,tests,18211,> - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18300,Testability,test,tests,18300,les#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-17,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18401,Testability,test,tests,18401,iles#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18502,Testability,test,tests,18502,/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18603,Testability,test,tests,18603,files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18705,Testability,test,tests,18705,70/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
